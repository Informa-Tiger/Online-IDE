export function hash(s) {
    let hash = 0;
    let chr;
    for (let i = 0; i < s.length; i++) {
        chr = s.charCodeAt(i);
        hash = ((hash << 5) - hash) + chr;
        hash |= 0; // Convert to 32bit integer
    }
    return hash;
}
export function escapeHtml(unsafe) {
    return unsafe
        .replace(/['"]+/g, '')
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}
export function dateToString(date) {
    return `${twoDez(date.getDate())}.${twoDez(date.getMonth() + 1)}.${date.getFullYear()}, ${twoDez(date.getHours())}:${twoDez(date.getMinutes())}`;
}
export function dateToStringWithoutTime(date) {
    return `${twoDez(date.getDate())}.${twoDez(date.getMonth() + 1)}.${date.getFullYear()}`;
}
function twoDez(z) {
    if (z < 10)
        return "0" + z;
    return "" + z;
}
export function stringToDate(text) {
    let match = text.match(/^(\d{2})\.(\d{2})\.(\d{4}), (\d{2}):(\d{2})$/);
    let date = new Date(Number.parseInt(match[3]), Number.parseInt(match[2]) - 1, Number.parseInt(match[1]), Number.parseInt(match[4]), Number.parseInt(match[5]));
    return date;
}
export function stringWrap(s, length) {
    return s.replace(new RegExp(`(?![^\\n]{1,${length}}$)([^\\n]{1,${length}})\\s`, 'g'), '$1\n');
}
export function formatAsJavadocComment(s, indent = "") {
    let indentString = "";
    if (typeof indent == "string") {
        indentString = indent;
    }
    else {
        for (let i = 0; i < indent; i++) {
            indentString += " ";
        }
    }
    s = stringWrap(s, 60);
    if (s.length > 0)
        s = "\n" + s;
    s = indentString + "/**" + s.replace(/\n/g, "\n" + indentString + " * ") + "\n" + indentString + " */";
    return s;
}
export function nullToString(s) {
    return s == null ? "null" : s;
}
export function floatToString(val) {
    return val + (Number.isInteger(val) ? ".0" : "");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RyaW5nVG9vbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50L3Rvb2xzL1N0cmluZ1Rvb2xzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxJQUFJLENBQUMsQ0FBUztJQUMxQixJQUFJLElBQUksR0FBVyxDQUFDLENBQUM7SUFDckIsSUFBSSxHQUFXLENBQUM7SUFDaEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDakMsR0FBRyxHQUFLLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsSUFBSSxHQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25DLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQywyQkFBMkI7S0FDdkM7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxNQUFjO0lBQ3ZDLE9BQU8sTUFBTTtTQUNSLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO1NBQ3BCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1NBQ3RCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO1NBQ3JCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO1NBQ3JCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO1NBQ3ZCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBVTtJQUNyQyxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxD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O0FBQ2pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaGFzaChzOiBzdHJpbmcpe1xyXG4gICAgbGV0IGhhc2g6IG51bWJlciA9IDA7XHJcbiAgICBsZXQgY2hyOiBudW1iZXI7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY2hyICAgPSBzLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBjaHI7XHJcbiAgICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGFzaDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZUh0bWwodW5zYWZlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHJldHVybiB1bnNhZmVcclxuICAgICAgLnJlcGxhY2UoL1snXCJdKy9nLCAnJylcclxuICAgICAgIC5yZXBsYWNlKC8mL2csIFwiJmFtcDtcIilcclxuICAgICAgIC5yZXBsYWNlKC88L2csIFwiJmx0O1wiKVxyXG4gICAgICAgLnJlcGxhY2UoLz4vZywgXCImZ3Q7XCIpXHJcbiAgICAgICAucmVwbGFjZSgvXCIvZywgXCImcXVvdDtcIilcclxuICAgICAgIC5yZXBsYWNlKC8nL2csIFwiJiMwMzk7XCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGF0ZVRvU3RyaW5nKGRhdGU6IERhdGUpOiBzdHJpbmd7XHJcbiAgcmV0dXJuIGAke3R3b0RleihkYXRlLmdldERhdGUoKSl9LiR7dHdvRGV6KGRhdGUuZ2V0TW9udGgoKSArIDEpfS4ke2RhdGUuZ2V0RnVsbFllYXIoKX0sICR7dHdvRGV6KGRhdGUuZ2V0SG91cnMoKSl9OiR7dHdvRGV6KGRhdGUuZ2V0TWludXRlcygpKX1gO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGF0ZVRvU3RyaW5nV2l0aG91dFRpbWUoZGF0ZTogRGF0ZSk6IHN0cmluZ3tcclxuICByZXR1cm4gYCR7dHdvRGV6KGRhdGUuZ2V0RGF0ZSgpKX0uJHt0d29EZXooZGF0ZS5nZXRNb250aCgpICsgMSl9LiR7ZGF0ZS5nZXRGdWxsWWVhcigpfWA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHR3b0Rleih6OiBudW1iZXIpOnN0cmluZyB7XHJcbiAgaWYoeiA8IDEwKSByZXR1cm4gXCIwXCIgKyB6O1xyXG4gIHJldHVybiBcIlwiICsgejtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ1RvRGF0ZSh0ZXh0OiBzdHJpbmcpOiBEYXRlIHtcclxuXHJcbiAgbGV0IG1hdGNoID0gdGV4dC5tYXRjaCgvXihcXGR7Mn0pXFwuKFxcZHsyfSlcXC4oXFxkezR9KSwgKFxcZHsyfSk6KFxcZHsyfSkkLyk7XHJcblxyXG4gIGxldCBkYXRlOiBEYXRlID0gbmV3IERhdGUoTnVtYmVyLnBhcnNlSW50KG1hdGNoWzNdKSwgTnVtYmVyLnBhcnNlSW50KG1hdGNoWzJdKSAtIDEsIE51bWJlci5wYXJzZUludChtYXRjaFsxXSksIE51bWJlci5wYXJzZUludChtYXRjaFs0XSksIE51bWJlci5wYXJzZUludChtYXRjaFs1XSkgKTtcclxuXHJcbiAgcmV0dXJuIGRhdGU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdXcmFwKHM6IHN0cmluZywgbGVuZ3RoOiBudW1iZXIgKTogc3RyaW5ne1xyXG4gIHJldHVybiBzLnJlcGxhY2UoXHJcbiAgICBuZXcgUmVnRXhwKGAoPyFbXlxcXFxuXXsxLCR7bGVuZ3RofX0kKShbXlxcXFxuXXsxLCR7bGVuZ3RofX0pXFxcXHNgLCAnZycpLCAnJDFcXG4nXHJcbiAgKTtcclxufSBcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRBc0phdmFkb2NDb21tZW50KHM6IHN0cmluZywgaW5kZW50OiBudW1iZXJ8c3RyaW5nID0gXCJcIik6IHN0cmluZyB7XHJcbiAgbGV0IGluZGVudFN0cmluZyA9IFwiXCI7XHJcblxyXG4gIGlmKHR5cGVvZiBpbmRlbnQgPT0gXCJzdHJpbmdcIil7XHJcbiAgICBpbmRlbnRTdHJpbmcgPSBpbmRlbnQ7XHJcbiAgfSBlbHNlIHtcclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBpbmRlbnQ7IGkrKyl7XHJcbiAgICAgIGluZGVudFN0cmluZyArPSBcIiBcIjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHMgPSBzdHJpbmdXcmFwKHMsIDYwKTtcclxuICBpZihzLmxlbmd0aCA+IDApIHMgPSBcIlxcblwiICsgcztcclxuICBzID0gaW5kZW50U3RyaW5nICsgXCIvKipcIiArIHMucmVwbGFjZSgvXFxuL2csIFwiXFxuXCIgKyBpbmRlbnRTdHJpbmcgKyBcIiAqIFwiKSArIFwiXFxuXCIgKyBpbmRlbnRTdHJpbmcgKyBcIiAqL1wiO1xyXG4gIHJldHVybiBzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbnVsbFRvU3RyaW5nKHM6IHN0cmluZykge1xyXG4gIHJldHVybiBzID09IG51bGwgPyBcIm51bGxcIiA6IHM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmbG9hdFRvU3RyaW5nKHZhbDogbnVtYmVyKXtcclxuICByZXR1cm4gdmFsICsgKE51bWJlci5pc0ludGVnZXIodmFsKT8gXCIuMFwiOiBcIlwiKTtcclxufSJdfQ==