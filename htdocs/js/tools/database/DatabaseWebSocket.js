export class DatabaseWebSocket {
    constructor(networkManager, connectionHelper, interpreter, onServerSentStatementsCallback) {
        this.networkManager = networkManager;
        this.connectionHelper = connectionHelper;
        this.interpreter = interpreter;
        this.onServerSentStatementsCallback = onServerSentStatementsCallback;
    }
    open(callback) {
        let url = this.networkManager.sqlIdeURL.replace("http", "ws") + "jwebsocket";
        this.connection = new WebSocket(url);
        this.connection.onerror = (error) => { this.onError(error); };
        this.connection.onclose = (event) => { this.onClose(event); };
        this.connection.onmessage = (event) => { this.onMessage(event); };
        this.connection.onopen = (event) => {
            let request = {
                command: 1,
                databaseVersion: this.connectionHelper.databaseData.statements.length,
                token: this.connectionHelper.token
            };
            this.callbackWhenOpen = callback;
            this.sendIntern(JSON.stringify(request));
        };
    }
    onError(error) {
        this.interpreter.throwException("Kommunikationsfehler beim WebSocket");
        this.isOpen = false;
        if (this.callbackWhenOpen) {
            this.callbackWhenOpen("Die Websocket-Datenbankverbindung kam nicht zustande.");
            this.callbackWhenOpen = null;
        }
    }
    onClose(event) {
        this.isOpen = false;
        if (this.callbackWhenOpen) {
            this.callbackWhenOpen("Die Websocket-Datenbankverbindung kam nicht zustande.");
            this.callbackWhenOpen = null;
        }
    }
    onMessage(event) {
        this.isOpen = true;
        if (this.callbackWhenOpen) {
            this.callbackWhenOpen(null);
            this.callbackWhenOpen = null;
        }
        let response = JSON.parse(event.data);
        if (response.command == undefined)
            return;
        switch (response.command) {
            case 2:
                if (this.onServerSentStatementsCallback != null) {
                    this.onServerSentStatementsCallback(response);
                }
                break;
            case 3: // disconnect message from server
                this.isOpen = false;
                break;
            case 4: // keepalive message from server
                break;
        }
    }
    close() {
        let message = {
            command: 4
        };
        this.sendIntern(JSON.stringify(message));
    }
    sendIntern(message) {
        try {
            this.connection.send(message);
        }
        catch (exception) {
            console.log(exception);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,