export class DatabaseLongPollingListener {
    constructor(networkManager, token, onServerSentStatementsCallback) {
        this.networkManager = networkManager;
        this.token = token;
        this.onServerSentStatementsCallback = onServerSentStatementsCallback;
        this.identifier = Math.floor(Math.random() * 999999999);
        this.isClosed = false;
    }
    longPoll() {
        let that = this;
        let request = {
            token: this.token,
            listenerIdentifier: this.identifier
        };
        $.ajax({
            type: 'POST',
            async: true,
            data: JSON.stringify(request),
            contentType: 'application/json',
            url: that.networkManager.sqlIdeURL + "jRegisterLongPollingListener",
            success: function (resp) {
                if (resp != null && !that.isClosed && resp != "") {
                    let response = JSON.parse(resp);
                    if (response.success) {
                        that.onServerSentStatementsCallback(response.firstNewStatementIndex, response.newStatements, response.rollbackToVersion);
                    }
                }
                if (!that.isClosed) {
                    setTimeout(() => {
                        that.longPoll();
                    }, 1000);
                }
            },
            error: function (jqXHR, message) {
                if (!that.isClosed) {
                    setTimeout(() => {
                        that.longPoll();
                    }, 3000);
                }
            }
        });
    }
    close() {
        this.isClosed = true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YWJhc2VMb25nUG9sbGluZ0xpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NsaWVudC90b29scy9kYXRhYmFzZS9EYXRhYmFzZUxvbmdQb2xsaW5nTGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsTUFBTSxPQUFPLDJCQUEyQjtJQUtwQyxZQUFvQixjQUE4QixFQUN0QyxLQUFhLEVBQ2IsOEJBQTRIO1FBRnBILG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUN0QyxVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2IsbUNBQThCLEdBQTlCLDhCQUE4QixDQUE4RjtRQUx4SSxlQUFVLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUM7UUFDM0QsYUFBUSxHQUFZLEtBQUssQ0FBQztJQUsxQixDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUVoQixJQUFJLE9BQU8sR0FBdUM7WUFDOUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxVQUFVO1NBQ3RDLENBQUE7UUFFRCxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ0gsSUFBSSxFQUFFLE1BQU07WUFDWixLQUFLLEVBQUUsSUFBSTtZQUNYLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztZQUM3QixXQUFXLEVBQUUsa0JBQWtCO1lBQy9CLEdBQUcsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsR0FBRyw4QkFBOEI7WUFDbkUsT0FBTyxFQUFFLFVBQVUsSUFBWTtnQkFDM0IsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLElBQUksRUFBRSxFQUFFO29CQUM5QyxJQUFJLFFBQVEsR0FBZ0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDN0QsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO3dCQUNsQixJQUFJLENBQUMsOEJBQThCLENBQUMsUUFBUSxDQUFDLHNCQUFzQixFQUMvRCxRQUFRLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO3FCQUMzRDtpQkFDSjtnQkFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtvQkFDaEIsVUFBVSxDQUFDLEdBQUcsRUFBRTt3QkFDWixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7b0JBQ3BCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztpQkFDWjtZQUNMLENBQUM7WUFDRCxLQUFLLEVBQUUsVUFBVSxLQUFLLEVBQUUsT0FBTztnQkFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7b0JBQ2hCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7d0JBQ1osSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO29CQUNwQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7aUJBQ1o7WUFDTCxDQUFDO1NBQ0osQ0FBQyxDQUFDO0lBRVAsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhYmFzZUxvbmdQb2xsaW5nTGlzdGVuZXJSZXF1ZXN0LCBKTWVzc2FnZUZyb21TZXJ2ZXIsIEpXZWJTb2NrZXRNZXNzYWdlQ29ubmVjdCwgSldlYlNvY2tldE1lc3NhZ2VEaXNjb25uZWN0LCBKV2ViU29ja2V0TWVzc2FnZUV4ZWN1dGVTdGF0ZW1lbnQsIExvbmdQb2xsaW5nTGlzdGVuZXJSZXNwb25zZSwgU2VuZGluZ1N0YXRlbWVudHNNZXNzYWdlRnJvbVNlcnZlciwgV2ViU29ja2V0UmVxdWVzdENvbm5lY3QgfSBmcm9tIFwiLi4vLi4vY29tbXVuaWNhdGlvbi9EYXRhLmpzXCI7XHJcbmltcG9ydCB7IE5ldHdvcmtNYW5hZ2VyIH0gZnJvbSBcIi4uLy4uL2NvbW11bmljYXRpb24vTmV0d29ya01hbmFnZXIuanNcIjtcclxuaW1wb3J0IHsgSW50ZXJwcmV0ZXIgfSBmcm9tIFwiLi4vLi4vaW50ZXJwcmV0ZXIvSW50ZXJwcmV0ZXIuanNcIjtcclxuaW1wb3J0IHsgQ29ubmVjdGlvbkhlbHBlciB9IGZyb20gXCIuLi8uLi9ydW50aW1lbGlicmFyeS9kYXRhYmFzZS9Db25uZWN0aW9uLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRGF0YWJhc2VMb25nUG9sbGluZ0xpc3RlbmVyIHtcclxuXHJcbiAgICBpZGVudGlmaWVyOiBudW1iZXIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA5OTk5OTk5OTkpO1xyXG4gICAgaXNDbG9zZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5ldHdvcmtNYW5hZ2VyOiBOZXR3b3JrTWFuYWdlcixcclxuICAgICAgICBwcml2YXRlIHRva2VuOiBzdHJpbmcsXHJcbiAgICAgICAgcHJpdmF0ZSBvblNlcnZlclNlbnRTdGF0ZW1lbnRzQ2FsbGJhY2s6IChmaXJzdE5ld1N0YXRlbWVudEluZGV4OiBudW1iZXIsIG5ld1N0YXRlbWVudHM6IHN0cmluZ1tdLCByb2xsYmFja1RvVmVyc2lvbjogbnVtYmVyKSA9PiB2b2lkKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbG9uZ1BvbGwoKSB7XHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICBsZXQgcmVxdWVzdDogRGF0YWJhc2VMb25nUG9sbGluZ0xpc3RlbmVyUmVxdWVzdCA9IHtcclxuICAgICAgICAgICAgdG9rZW46IHRoaXMudG9rZW4sXHJcbiAgICAgICAgICAgIGxpc3RlbmVySWRlbnRpZmllcjogdGhpcy5pZGVudGlmaWVyXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAnUE9TVCcsXHJcbiAgICAgICAgICAgIGFzeW5jOiB0cnVlLFxyXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSxcclxuICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICAgdXJsOiB0aGF0Lm5ldHdvcmtNYW5hZ2VyLnNxbElkZVVSTCArIFwialJlZ2lzdGVyTG9uZ1BvbGxpbmdMaXN0ZW5lclwiLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcDogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzcCAhPSBudWxsICYmICF0aGF0LmlzQ2xvc2VkICYmIHJlc3AgIT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXNwb25zZTogTG9uZ1BvbGxpbmdMaXN0ZW5lclJlc3BvbnNlID0gSlNPTi5wYXJzZShyZXNwKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9uU2VydmVyU2VudFN0YXRlbWVudHNDYWxsYmFjayhyZXNwb25zZS5maXJzdE5ld1N0YXRlbWVudEluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UubmV3U3RhdGVtZW50cywgcmVzcG9uc2Uucm9sbGJhY2tUb1ZlcnNpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoYXQuaXNDbG9zZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5sb25nUG9sbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGpxWEhSLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoYXQuaXNDbG9zZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5sb25nUG9sbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDMwMDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCl7XHJcbiAgICAgICAgdGhpcy5pc0Nsb3NlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG59Il19