import { RuntimeObject } from "../../interpreter/RuntimeObject.js";
import { ColorHelper } from "./ColorHelper.js";
export class FilledShapeDefaults {
    static initDefaultValues() {
        FilledShapeDefaults.defaultFillColor = 0x8080ff;
        FilledShapeDefaults.defaultFillAlpha = 1.0;
        FilledShapeDefaults.defaultBorderColor = null;
        FilledShapeDefaults.defaultBorderAlpha = 1.0;
        FilledShapeDefaults.defaultBorderWidth = 10;
        FilledShapeDefaults.defaultVisibility = true;
    }
    static setDefaultVisibility(visibility) {
        FilledShapeDefaults.defaultVisibility = visibility;
    }
    static setDefaultBorder(width, color, alpha) {
        FilledShapeDefaults.defaultBorderWidth = width;
        if (color instanceof RuntimeObject) {
            color = (color.intrinsicData).hex;
        }
        if (typeof color == "string") {
            let c = ColorHelper.parseColorToOpenGL(color);
            FilledShapeDefaults.defaultBorderColor = c.color;
            FilledShapeDefaults.defaultBorderAlpha = alpha == null ? c.alpha : alpha;
        }
        else {
            FilledShapeDefaults.defaultBorderColor = color;
            if (alpha != null)
                FilledShapeDefaults.defaultBorderAlpha = alpha;
        }
    }
    static setDefaultFillColor(color, alpha) {
        if (color instanceof RuntimeObject) {
            color = (color.intrinsicData).hex;
        }
        if (typeof color == "string") {
            let c = ColorHelper.parseColorToOpenGL(color);
            FilledShapeDefaults.defaultFillColor = c.color;
            FilledShapeDefaults.defaultFillAlpha = alpha == null ? c.alpha : alpha;
        }
        else {
            FilledShapeDefaults.defaultFillColor = color;
            if (alpha != null)
                FilledShapeDefaults.defaultFillAlpha = alpha;
        }
    }
}
FilledShapeDefaults.defaultFillColor = 0x8080ff;
FilledShapeDefaults.defaultFillAlpha = 1.0;
FilledShapeDefaults.defaultBorderColor = null;
FilledShapeDefaults.defaultBorderAlpha = 1.0;
FilledShapeDefaults.defaultBorderWidth = 10;
FilledShapeDefaults.defaultVisibility = true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsbGVkU2hhcGVEZWZhdWx0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jbGllbnQvcnVudGltZWxpYnJhcnkvZ3JhcGhpY3MvRmlsbGVkU2hhcGVEZWZhdWx0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFFbkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRS9DLE1BQU0sT0FBTyxtQkFBbUI7SUFVNUIsTUFBTSxDQUFDLGlCQUFpQjtRQUNwQixtQkFBbUIsQ0FBQyxnQkFBZ0IsR0FBRyxRQUFRLENBQUM7UUFDaEQsbUJBQW1CLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO1FBRTNDLG1CQUFtQixDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztRQUM5QyxtQkFBbUIsQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLENBQUM7UUFDN0MsbUJBQW1CLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDO1FBRTVDLG1CQUFtQixDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztJQUNqRCxDQUFDO0lBRUQsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFVBQW1CO1FBQzNDLG1CQUFtQixDQUFDLGlCQUFpQixHQUFHLFVBQVUsQ0FBQztJQUN2RCxDQUFDO0lBRUQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEtBQWEsRUFBRSxLQUFzQyxFQUFFLEtBQWM7UUFFekYsbUJBQW1CLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO1FBRS9DLElBQUksS0FBSyxZQUFZLGFBQWEsRUFBRTtZQUNoQyxLQUFLLEdBQTZCLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBRSxDQUFDLEdBQUcsQ0FBQztTQUNoRTtRQUVELElBQUksT0FBTyxLQUFLLElBQUksUUFBUSxFQUFFO1lBQzFCLElBQUksQ0FBQyxHQUFHLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5QyxtQkFBbUIsQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQ2pELG1CQUFtQixDQUFDLGtCQUFrQixHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztTQUM1RTthQUFNO1lBQ0gsbUJBQW1CLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO1lBQy9DLElBQUksS0FBSyxJQUFJLElBQUk7Z0JBQUUsbUJBQW1CLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO1NBQ3JFO0lBRUwsQ0FBQztJQUVELE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxLQUFzQyxFQUFFLEtBQWM7UUFFN0UsSUFBSSxLQUFLLFlBQVksYUFBYSxFQUFFO1lBQ2hDLEtBQUssR0FBNkIsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFFLENBQUMsR0FBRyxDQUFDO1NBQ2hFO1FBRUQsSUFBSSxPQUFPLEtBQUssSUFBSSxRQUFRLEVBQUU7WUFDMUIsSUFBSSxDQUFDLEdBQUcsV0FBVyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlDLG1CQUFtQixDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDL0MsbUJBQW1CLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1NBQzFFO2FBQU07WUFDSCxtQkFBbUIsQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7WUFDN0MsSUFBSSxLQUFLLElBQUksSUFBSTtnQkFBRSxtQkFBbUIsQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7U0FDbkU7SUFFTCxDQUFDOztBQTFETSxvQ0FBZ0IsR0FBVyxRQUFRLENBQUM7QUFDcEMsb0NBQWdCLEdBQVcsR0FBRyxDQUFDO0FBRS9CLHNDQUFrQixHQUFXLElBQUksQ0FBQztBQUNsQyxzQ0FBa0IsR0FBVyxHQUFHLENBQUM7QUFDakMsc0NBQWtCLEdBQVcsRUFBRSxDQUFDO0FBRWhDLHFDQUFpQixHQUFZLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJ1bnRpbWVPYmplY3QgfSBmcm9tIFwiLi4vLi4vaW50ZXJwcmV0ZXIvUnVudGltZU9iamVjdC5qc1wiO1xyXG5pbXBvcnQgeyBDb2xvckNsYXNzSW50cmluc2ljRGF0YSB9IGZyb20gXCIuL0NvbG9yLmpzXCI7XHJcbmltcG9ydCB7IENvbG9ySGVscGVyIH0gZnJvbSBcIi4vQ29sb3JIZWxwZXIuanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWxsZWRTaGFwZURlZmF1bHRzIHtcclxuICAgIHN0YXRpYyBkZWZhdWx0RmlsbENvbG9yOiBudW1iZXIgPSAweDgwODBmZjtcclxuICAgIHN0YXRpYyBkZWZhdWx0RmlsbEFscGhhOiBudW1iZXIgPSAxLjA7XHJcblxyXG4gICAgc3RhdGljIGRlZmF1bHRCb3JkZXJDb2xvcjogbnVtYmVyID0gbnVsbDtcclxuICAgIHN0YXRpYyBkZWZhdWx0Qm9yZGVyQWxwaGE6IG51bWJlciA9IDEuMDtcclxuICAgIHN0YXRpYyBkZWZhdWx0Qm9yZGVyV2lkdGg6IG51bWJlciA9IDEwO1xyXG5cclxuICAgIHN0YXRpYyBkZWZhdWx0VmlzaWJpbGl0eTogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gICAgc3RhdGljIGluaXREZWZhdWx0VmFsdWVzKCkge1xyXG4gICAgICAgIEZpbGxlZFNoYXBlRGVmYXVsdHMuZGVmYXVsdEZpbGxDb2xvciA9IDB4ODA4MGZmO1xyXG4gICAgICAgIEZpbGxlZFNoYXBlRGVmYXVsdHMuZGVmYXVsdEZpbGxBbHBoYSA9IDEuMDtcclxuXHJcbiAgICAgICAgRmlsbGVkU2hhcGVEZWZhdWx0cy5kZWZhdWx0Qm9yZGVyQ29sb3IgPSBudWxsO1xyXG4gICAgICAgIEZpbGxlZFNoYXBlRGVmYXVsdHMuZGVmYXVsdEJvcmRlckFscGhhID0gMS4wO1xyXG4gICAgICAgIEZpbGxlZFNoYXBlRGVmYXVsdHMuZGVmYXVsdEJvcmRlcldpZHRoID0gMTA7XHJcblxyXG4gICAgICAgIEZpbGxlZFNoYXBlRGVmYXVsdHMuZGVmYXVsdFZpc2liaWxpdHkgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBzZXREZWZhdWx0VmlzaWJpbGl0eSh2aXNpYmlsaXR5OiBib29sZWFuKSB7XHJcbiAgICAgICAgRmlsbGVkU2hhcGVEZWZhdWx0cy5kZWZhdWx0VmlzaWJpbGl0eSA9IHZpc2liaWxpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHNldERlZmF1bHRCb3JkZXIod2lkdGg6IG51bWJlciwgY29sb3I6IHN0cmluZyB8IG51bWJlciB8IFJ1bnRpbWVPYmplY3QsIGFscGhhPzogbnVtYmVyKSB7XHJcblxyXG4gICAgICAgIEZpbGxlZFNoYXBlRGVmYXVsdHMuZGVmYXVsdEJvcmRlcldpZHRoID0gd2lkdGg7XHJcblxyXG4gICAgICAgIGlmIChjb2xvciBpbnN0YW5jZW9mIFJ1bnRpbWVPYmplY3QpIHtcclxuICAgICAgICAgICAgY29sb3IgPSAoPENvbG9yQ2xhc3NJbnRyaW5zaWNEYXRhPihjb2xvci5pbnRyaW5zaWNEYXRhKSkuaGV4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb2xvciA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGxldCBjID0gQ29sb3JIZWxwZXIucGFyc2VDb2xvclRvT3BlbkdMKGNvbG9yKTtcclxuICAgICAgICAgICAgRmlsbGVkU2hhcGVEZWZhdWx0cy5kZWZhdWx0Qm9yZGVyQ29sb3IgPSBjLmNvbG9yO1xyXG4gICAgICAgICAgICBGaWxsZWRTaGFwZURlZmF1bHRzLmRlZmF1bHRCb3JkZXJBbHBoYSA9IGFscGhhID09IG51bGwgPyBjLmFscGhhIDogYWxwaGE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgRmlsbGVkU2hhcGVEZWZhdWx0cy5kZWZhdWx0Qm9yZGVyQ29sb3IgPSBjb2xvcjtcclxuICAgICAgICAgICAgaWYgKGFscGhhICE9IG51bGwpIEZpbGxlZFNoYXBlRGVmYXVsdHMuZGVmYXVsdEJvcmRlckFscGhhID0gYWxwaGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgc2V0RGVmYXVsdEZpbGxDb2xvcihjb2xvcjogc3RyaW5nIHwgbnVtYmVyIHwgUnVudGltZU9iamVjdCwgYWxwaGE/OiBudW1iZXIpIHtcclxuXHJcbiAgICAgICAgaWYgKGNvbG9yIGluc3RhbmNlb2YgUnVudGltZU9iamVjdCkge1xyXG4gICAgICAgICAgICBjb2xvciA9ICg8Q29sb3JDbGFzc0ludHJpbnNpY0RhdGE+KGNvbG9yLmludHJpbnNpY0RhdGEpKS5oZXg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNvbG9yID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbGV0IGMgPSBDb2xvckhlbHBlci5wYXJzZUNvbG9yVG9PcGVuR0woY29sb3IpO1xyXG4gICAgICAgICAgICBGaWxsZWRTaGFwZURlZmF1bHRzLmRlZmF1bHRGaWxsQ29sb3IgPSBjLmNvbG9yO1xyXG4gICAgICAgICAgICBGaWxsZWRTaGFwZURlZmF1bHRzLmRlZmF1bHRGaWxsQWxwaGEgPSBhbHBoYSA9PSBudWxsID8gYy5hbHBoYSA6IGFscGhhO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIEZpbGxlZFNoYXBlRGVmYXVsdHMuZGVmYXVsdEZpbGxDb2xvciA9IGNvbG9yO1xyXG4gICAgICAgICAgICBpZiAoYWxwaGEgIT0gbnVsbCkgRmlsbGVkU2hhcGVEZWZhdWx0cy5kZWZhdWx0RmlsbEFscGhhID0gYWxwaGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbn0iXX0=