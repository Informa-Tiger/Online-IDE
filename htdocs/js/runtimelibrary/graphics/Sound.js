import { Method, Parameterlist, Attribute } from "../../compiler/types/Types.js";
import { Klass, Visibility } from "../../compiler/types/Class.js";
import { stringPrimitiveType, doublePrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { RuntimeObject } from "../../interpreter/RuntimeObject.js";
import { SoundTools } from "../../tools/SoundTools.js";
export class SoundKlass extends Klass {
    constructor(module) {
        super("Sound", module, "Aufzählung aller Geräusche");
        this.setBaseClass(module.typeStore.getType("Object"));
        for (let sound of SoundTools.sounds) {
            this.addAttribute(new Attribute(sound.name, stringPrimitiveType, (value) => { value.value = sound.name; }, true, Visibility.public, true, sound.description));
        }
        this.staticClass.setupAttributeIndicesRecursive();
        this.staticClass.classObject = new RuntimeObject(this.staticClass);
        this.addMethod(new Method("playSound", new Parameterlist([
            { identifier: "sound", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let sound = parameters[1].value;
            SoundTools.play(sound);
        }, false, true, "Spielt einen Sound ab. Die Möglichen Sounds sind als statische Variablen der Klasse Sound hinterlegt. Tippe als Parameter also Sound gefolgt von einem Punkt ein, um eine Auswahl zu sehen!"));
        this.addMethod(new Method("getVolume", new Parameterlist([]), doublePrimitiveType, (parameters) => {
            if (!SoundTools.volumeDetectionRunning)
                SoundTools.startDetectingVolume();
            return SoundTools.getVolume();
        }, false, true, "Gibt die aktuelle Mikrofonlautstärke zurück. Beim ersten Aufruf muss der Benutzer dem Browser die Erlaubnis zur Benutzung des Mikrofons geben. Solange dies noch nicht erfolgt ist, gibt die Funktion den Wert -1 zurück."));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU291bmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2xpZW50L3J1bnRpbWVsaWJyYXJ5L2dyYXBoaWNzL1NvdW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBUSxNQUFNLEVBQUUsYUFBYSxFQUFTLFNBQVMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzlGLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDbEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUEyRCxNQUFNLHdDQUF3QyxDQUFDO0FBRzNKLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFdkQsTUFBTSxPQUFPLFVBQVcsU0FBUSxLQUFLO0lBRWpDLFlBQVksTUFBYztRQUN0QixLQUFLLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1FBRXJELElBQUksQ0FBQyxZQUFZLENBQVEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUU3RCxLQUFJLElBQUksS0FBSyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUM7WUFDL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1NBQ2hLO1FBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyw4QkFBOEIsRUFBRSxDQUFDO1FBRWxELElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVuRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxJQUFJLGFBQWEsQ0FBQztZQUNyRCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO1NBQzdHLENBQUMsRUFBRSxJQUFJLEVBQ1IsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNYLElBQUksS0FBSyxHQUFXLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDeEMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixDQUFDLEVBQ0MsS0FBSyxFQUFFLElBQUksRUFBRSw2TEFBNkwsQ0FBQyxDQUFDLENBQUM7UUFFL00sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsSUFBSSxhQUFhLENBQUMsRUFDeEQsQ0FBQyxFQUFFLG1CQUFtQixFQUN2QixDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ1gsSUFBRyxDQUFDLFVBQVUsQ0FBQyxzQkFBc0I7Z0JBQUUsVUFBVSxDQUFDLG9CQUFvQixFQUFFLENBQUM7WUFDekUsT0FBTyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbEMsQ0FBQyxFQUNDLEtBQUssRUFBRSxJQUFJLEVBQUUsMk5BQTJOLENBQUMsQ0FBQyxDQUFDO0lBR2pQLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUsIE1ldGhvZCwgUGFyYW1ldGVybGlzdCwgVmFsdWUsIEF0dHJpYnV0ZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9UeXBlcy5qc1wiO1xyXG5pbXBvcnQgeyBLbGFzcywgVmlzaWJpbGl0eSB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9DbGFzcy5qc1wiO1xyXG5pbXBvcnQgeyBzdHJpbmdQcmltaXRpdmVUeXBlLCBkb3VibGVQcmltaXRpdmVUeXBlLCBmbG9hdFByaW1pdGl2ZVR5cGUsIGludFByaW1pdGl2ZVR5cGUsIHZvaWRQcmltaXRpdmVUeXBlIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL1ByaW1pdGl2ZVR5cGVzLmpzXCI7XHJcbmltcG9ydCB7IE1vZHVsZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci9wYXJzZXIvTW9kdWxlLmpzXCI7XHJcbmltcG9ydCB7IFByaW50TWFuYWdlciB9IGZyb20gXCIuLi8uLi9tYWluL2d1aS9QcmludE1hbmFnZXIuanNcIjtcclxuaW1wb3J0IHsgUnVudGltZU9iamVjdCB9IGZyb20gXCIuLi8uLi9pbnRlcnByZXRlci9SdW50aW1lT2JqZWN0LmpzXCI7XHJcbmltcG9ydCB7IFNvdW5kVG9vbHMgfSBmcm9tIFwiLi4vLi4vdG9vbHMvU291bmRUb29scy5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNvdW5kS2xhc3MgZXh0ZW5kcyBLbGFzcyB7XHJcblxyXG4gICAgY29uc3RydWN0b3IobW9kdWxlOiBNb2R1bGUpIHtcclxuICAgICAgICBzdXBlcihcIlNvdW5kXCIsIG1vZHVsZSwgXCJBdWZ6w6RobHVuZyBhbGxlciBHZXLDpHVzY2hlXCIpO1xyXG5cclxuICAgICAgICB0aGlzLnNldEJhc2VDbGFzcyg8S2xhc3M+bW9kdWxlLnR5cGVTdG9yZS5nZXRUeXBlKFwiT2JqZWN0XCIpKTtcclxuXHJcbiAgICAgICAgZm9yKGxldCBzb3VuZCBvZiBTb3VuZFRvb2xzLnNvdW5kcyl7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkQXR0cmlidXRlKG5ldyBBdHRyaWJ1dGUoc291bmQubmFtZSwgc3RyaW5nUHJpbWl0aXZlVHlwZSwgKHZhbHVlKSA9PiB7IHZhbHVlLnZhbHVlID0gc291bmQubmFtZSB9LCB0cnVlLCBWaXNpYmlsaXR5LnB1YmxpYywgdHJ1ZSwgc291bmQuZGVzY3JpcHRpb24pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGljQ2xhc3Muc2V0dXBBdHRyaWJ1dGVJbmRpY2VzUmVjdXJzaXZlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGljQ2xhc3MuY2xhc3NPYmplY3QgPSBuZXcgUnVudGltZU9iamVjdCh0aGlzLnN0YXRpY0NsYXNzKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcInBsYXlTb3VuZFwiLCBuZXcgUGFyYW1ldGVybGlzdChbXHJcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJzb3VuZFwiLCB0eXBlOiBzdHJpbmdQcmltaXRpdmVUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfVxyXG4gICAgICAgIF0pLCBudWxsLFxyXG4gICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBzb3VuZDogc3RyaW5nID0gcGFyYW1ldGVyc1sxXS52YWx1ZTtcclxuICAgICAgICAgICAgU291bmRUb29scy5wbGF5KHNvdW5kKTtcclxuICAgICAgICB9ICAgIFxyXG4gICAgICAgICwgZmFsc2UsIHRydWUsIFwiU3BpZWx0IGVpbmVuIFNvdW5kIGFiLiBEaWUgTcO2Z2xpY2hlbiBTb3VuZHMgc2luZCBhbHMgc3RhdGlzY2hlIFZhcmlhYmxlbiBkZXIgS2xhc3NlIFNvdW5kIGhpbnRlcmxlZ3QuIFRpcHBlIGFscyBQYXJhbWV0ZXIgYWxzbyBTb3VuZCBnZWZvbGd0IHZvbiBlaW5lbSBQdW5rdCBlaW4sIHVtIGVpbmUgQXVzd2FobCB6dSBzZWhlbiFcIikpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiZ2V0Vm9sdW1lXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcclxuICAgICAgICBdKSwgZG91YmxlUHJpbWl0aXZlVHlwZSxcclxuICAgICAgICAocGFyYW1ldGVycykgPT4ge1xyXG4gICAgICAgICAgICBpZighU291bmRUb29scy52b2x1bWVEZXRlY3Rpb25SdW5uaW5nKSBTb3VuZFRvb2xzLnN0YXJ0RGV0ZWN0aW5nVm9sdW1lKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBTb3VuZFRvb2xzLmdldFZvbHVtZSgpO1xyXG4gICAgICAgIH0gICAgXHJcbiAgICAgICAgLCBmYWxzZSwgdHJ1ZSwgXCJHaWJ0IGRpZSBha3R1ZWxsZSBNaWtyb2ZvbmxhdXRzdMOkcmtlIHp1csO8Y2suIEJlaW0gZXJzdGVuIEF1ZnJ1ZiBtdXNzIGRlciBCZW51dHplciBkZW0gQnJvd3NlciBkaWUgRXJsYXVibmlzIHp1ciBCZW51dHp1bmcgZGVzIE1pa3JvZm9ucyBnZWJlbi4gU29sYW5nZSBkaWVzIG5vY2ggbmljaHQgZXJmb2xndCBpc3QsIGdpYnQgZGllIEZ1bmt0aW9uIGRlbiBXZXJ0IC0xIHp1csO8Y2suXCIpKTtcclxuXHJcblxyXG4gICAgfVxyXG5cclxufSJdfQ==