import { Klass } from "../../compiler/types/Class.js";
import { intPrimitiveType, stringPrimitiveType, voidPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Method, Parameterlist } from "../../compiler/types/Types.js";
import { InterpreterState } from "../../interpreter/Interpreter.js";
import { RuntimeObject } from "../../interpreter/RuntimeObject.js";
import { WebSocketClientHelper } from "./WebSocketClient.js";
import { ajax } from "../../communication/AjaxHelper.js";
import { ArrayType } from "../../compiler/types/Array.js";
export class WebSocketClass extends Klass {
    constructor(module) {
        super("WebSocket", module, "Ein Objekt der Klasse WebSocket kann Daten über das Internet senden und empfangen. Um die Klasse benutzen zu können, musst Du eine eigene Klasse schreiben, die die Klasse WebSocket erweitert und die Methoden onConnect, onMessage, onOtherClientConnected und onOtherClientDisconnected überschreibt.");
        this.setBaseClass(module.typeStore.getType("Object"));
        let webSocketClientType = module.typeStore.getType("WebSocketClient");
        let systemClassType = module.typeStore.getType("System");
        this.addMethod(new Method("WebSocket", new Parameterlist([]), null, (parameters) => {
            var _a, _b;
            let o = parameters[0].value;
            let interpreter = (_b = (_a = this.module) === null || _a === void 0 ? void 0 : _a.main) === null || _b === void 0 ? void 0 : _b.getInterpreter();
            let wh = new WebSocketHelper(o, interpreter, webSocketClientType, systemClassType);
            o.intrinsicData["Helper"] = wh;
        }, false, false, 'Instanziert ein neues WebSocket-Objekt.', true));
        this.addMethod(new Method("open", new Parameterlist([
            { identifier: "sessionCode", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "nickName", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sessionCode = parameters[1].value;
            let nickName = parameters[2].value;
            let wh = o.intrinsicData["Helper"];
            wh.connect(sessionCode, nickName);
            o.intrinsicData["Helper"] = wh;
        }, false, false, 'Startet die Verbindung mit dem Server. Den SessionCode kannst Du frei wählen. Mit allen anderen Clients, die eine Verbindung mit demselben SessionCode aufbauen, kannst Du anschließend Daten austauschen. Auch der Nickname ist frei wählbar. Er ist für alle anderen Clients sichtbar.', false));
        this.addMethod(new Method("sendToAll", new Parameterlist([
            { identifier: "message", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "messageType", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let wh = o.intrinsicData["Helper"];
            let message = parameters[1].value;
            let messageType = parameters[2].value;
            wh.sendToAll(message, messageType);
        }, false, false, 'Sendet Daten (message) an alle anderen Clients. Den messageType kannst Du frei wählen. Die empfangenden Clients bekommen ihn zusammen mit den Daten übermittelt. Tipp: Du kannst auch Objekte senden, musst sie dazu aber vorher serialisieren, d.h. mithilfe der Methode toJson in eine Zeichenkette verwandeln.', false));
        this.addMethod(new Method("findClients", new Parameterlist([
            { identifier: "count", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let wh = o.intrinsicData["Helper"];
            let count = parameters[1].value;
            wh.findClientsFromCount(count);
        }, false, false, 'Sucht die übergebene Anzahl von "kontaktbereiten" Clients, d.h. solchen Clients, die exakt dieselbe Suchanfrage abgegeben haben. Findet der Server die Clients, so ruft er bei allen beteiligten Clients onClientsFound auf.', false));
        this.addMethod(new Method("findClients", new Parameterlist([
            { identifier: "nicknames", type: new ArrayType(stringPrimitiveType), declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let wh = o.intrinsicData["Helper"];
            let nickNamesValues = parameters[1].value;
            let nicknames = nickNamesValues.map((nnv) => nnv.value);
            wh.findClientsFromNicknames(nicknames);
        }, false, false, 'Sucht die Clients mit den angegebenen Nicknames. Haben sie eine entsprechende Suchanfrage (d.h. dieselben Nicknames) abgegeben, so so ruft der Server bei allen beteiligten Clients onClientsFound auf.', false));
        this.addMethod(new Method("findClient", new Parameterlist([
            { identifier: "nickname", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let wh = o.intrinsicData["Helper"];
            let nickName = parameters[1].value;
            wh.findClientsFromNicknames([nickName]);
        }, false, false, 'Sucht den Client mit dem angegebenen Nickname. Hat er eine entsprechende Suchanfrage (d.h. mit dem Nickname DIESES clients) abgegeben, so so ruft der Server bei beiden Clients onClientsFound auf.', false));
        this.addMethod(new Method("close", new Parameterlist([]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let wh = o.intrinsicData["Helper"];
            wh.disconnect();
        }, false, false, 'Beendet die Verbindung. Bei allen anderen Clients, die sich mit derselben sessionId verbunden haben, wird daraufhin die Methode onOtherClientDisconnected aufgerufen.', false));
        this.addMethod(new Method("onOpen", new Parameterlist([]), null, null, // no statements!
        false, false, "Wird aufgerufen, sobald die Verbindung mit dem Server zustandegekommen ist.", false));
        this.addMethod(new Method("onClose", new Parameterlist([]), null, null, // no statements!
        false, false, "Wird aufgerufen, nachdem die Verbindung geschlossen wurde.", false));
        this.addMethod(new Method("onMessage", new Parameterlist([
            { identifier: "sender", type: webSocketClientType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "message", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "messageType", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, null, // no statements!
        false, false, "Wird immer dann aufgerufen, wenn eine Nachricht eines anderen Clients empfangen wurde.", false));
        this.addMethod(new Method("onOtherClientConnected", new Parameterlist([
            { identifier: "otherClient", type: webSocketClientType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, null, // no statements!
        false, false, "Wird immer dann aufgerufen, wenn sich ein anderer Client unter Nutzung desselben sessionCodes mit dem Server verbunden hat.", false));
        this.addMethod(new Method("onOtherClientDisconnected", new Parameterlist([
            { identifier: "otherClient", type: webSocketClientType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, null, // no statements!
        false, false, "Wird immer dann aufgerufen, wenn ein anderer Client unter Nutzung desselben sessionCodes die Verbindung mit dem Server beendet hat.", false));
        this.addMethod(new Method("onClientsFound", new Parameterlist([
            { identifier: "oherClients", type: new ArrayType(webSocketClientType), declaration: null, usagePositions: null, isFinal: true },
            { identifier: "ownNumber", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, null, // no statements!
        false, false, "Wird aufgerufen, wenn die durch die Methoden findClient bzw. findClients zuvor gesuchten Clients gefunden wurden.", false));
        this.addMethod(new Method("getOtherClients", new Parameterlist([]), new ArrayType(webSocketClientType), (parameters) => {
            let o = parameters[0].value;
            let wh = o.intrinsicData["Helper"];
            let ret = wh.clientList.map(client => { return { type: webSocketClientType, value: client.runtimeObject }; });
            return ret;
        }, // no statements!
        false, false, "Gibt alle bisher bei der selben Session angemeldeten Clients zurück.", false));
    }
}
export class WebSocketHelper {
    constructor(runtimeObject, interpreter, webSocketClientType, systemClassType) {
        this.runtimeObject = runtimeObject;
        this.interpreter = interpreter;
        this.webSocketClientType = webSocketClientType;
        this.systemClassType = systemClassType;
        this.clientList = [];
        this.idToClientMap = {};
        this.isOpen = false;
        this.unsentMessages = [];
        let klass = runtimeObject.class;
        // [[Entries]]:Array(4)
        // 0:{"Test3()" => Method}
        // 1:{"onConnect()" => Method}
        // 2:{"onMessage(WebSocketClient, String, String)" => Method}
        // 3:{"toJson()" => Method}
        this.onOpenMethod = klass.methods.find(m => m.signature == "onOpen()");
        this.onCloseMethod = klass.methods.find(m => m.signature == "onClose()");
        this.onMessageMethod = klass.methods.find(m => m.signature == "onMessage(WebSocketClient, String, String)");
        this.onClientConnectedMethod = klass.methods.find(m => m.signature == "onOtherClientConnected(WebSocketClient)");
        this.onClientDisconnectedMethod = klass.methods.find(m => m.signature == "onOtherClientDisconnected(WebSocketClient)");
        this.onClientsFoundMethod = klass.methods.find(m => m.signature == "onClientsFound(WebSocketClient[], int)");
    }
    connect(sessionCode, nickName) {
        if (this.interpreter.main.isEmbedded()) {
            this.interpreter.throwException("Die Netzwerkfunktionalitäten stehen nur eingeloggten Nutzern in der Entwicklungsumgebung zur Verfügung und können daher leider hier nicht ausprobiert werden.");
            return;
        }
        ajax('getWebSocketToken', {}, (response) => {
            let url = (window.location.protocol.startsWith("https") ? "wss://" : "ws://") + window.location.host + "/servlet/websocket";
            this.connection = new WebSocket(url);
            this.connection.onerror = (error) => { this.onError(error); };
            this.connection.onclose = (event) => { this.onClose(event); };
            this.connection.onmessage = (event) => { this.onMessage(event); };
            this.connection.onopen = (event) => {
                let request = {
                    command: 1,
                    token: response.token,
                    nickname: nickName,
                    sessionCode: sessionCode
                };
                this.interpreter.webSocketsToCloseAfterProgramHalt.push(this.connection);
                this.isOpen = true;
                this.sendIntern(JSON.stringify(request));
                this.onOpen();
            };
        });
    }
    sendIntern(message) {
        if (!this.isOpen) {
            this.unsentMessages.push(message);
        }
        else {
            try {
                this.connection.send(message);
            }
            catch (exception) {
                console.log(exception);
            }
        }
    }
    onClose(event) {
        this.isOpen = false;
        this.runMethod(this.onCloseMethod, []);
    }
    sendToClient(clientId, data, dataType) {
        let message = {
            command: 3,
            data: data,
            dataType: dataType,
            recipient_id: clientId
        };
        this.sendIntern(JSON.stringify(message));
    }
    sendToAll(data, dataType) {
        let message = {
            command: 2,
            data: data,
            dataType: dataType
        };
        this.sendIntern(JSON.stringify(message));
    }
    disconnect() {
        let message = {
            command: 4
        };
        this.sendIntern(JSON.stringify(message));
        this.connection.close();
        let wtr = this.interpreter.webSocketsToCloseAfterProgramHalt;
        wtr.splice(wtr.indexOf(this.connection), 1);
    }
    onMessage(event) {
        let response = JSON.parse(event.data);
        if (response.command == undefined)
            return;
        switch (response.command) {
            case 1: // new Client
                let clientRuntimeObject = new RuntimeObject(this.webSocketClientType);
                let wch = new WebSocketClientHelper(clientRuntimeObject, this, response.user_id, response.rufname, response.familienname, response.username, response.nickname);
                clientRuntimeObject.intrinsicData["Helper"] = wch;
                this.clientList.push(wch);
                this.idToClientMap[response.user_id] = wch;
                this.runMethod(this.onClientConnectedMethod, [{ type: this.webSocketClientType, value: clientRuntimeObject }]);
                break;
            case 2: // message
                let clientHelper = this.idToClientMap[response.from_client_id];
                if (clientHelper == null)
                    return;
                this.runMethod(this.onMessageMethod, [
                    { type: this.webSocketClientType, value: clientHelper.runtimeObject },
                    { type: stringPrimitiveType, value: response.data },
                    { type: stringPrimitiveType, value: response.dataType }
                ]);
                break;
            case 3: // other client disconnected
                let clientHelper1 = this.idToClientMap[response.disconnecting_client_id];
                if (clientHelper1 == null)
                    return;
                this.clientList.splice(this.clientList.indexOf(clientHelper1), 1);
                this.idToClientMap[response.disconnecting_client_id] = undefined;
                this.runMethod(this.onClientDisconnectedMethod, [
                    { type: this.webSocketClientType, value: clientHelper1.runtimeObject }
                ]);
                break;
            case 4: // time synchronization
                this.systemClassType.deltaTimeMillis = response.currentTimeMills - Date.now();
                this.client_id = response.client_id;
                break;
            case 5: // keep alive
                break;
            case 6: // Clients found
                this.onClientsFound(response);
                break;
        }
    }
    onClientsFound(response) {
        let own_index = 0;
        let otherClients = [];
        for (let client of response.clients) {
            if (client.id == this.client_id) {
                own_index = client.index;
            }
            else {
                let otherClient = this.idToClientMap[client.id];
                if (otherClient != null) {
                    otherClient.index = client.index;
                    otherClients.push({
                        type: this.webSocketClientType,
                        value: otherClient.runtimeObject
                    });
                }
            }
        }
        let arrayValue = {
            type: new ArrayType(this.webSocketClientType),
            value: otherClients
        };
        this.runMethod(this.onClientsFoundMethod, [arrayValue, { type: intPrimitiveType, value: own_index }]);
    }
    onError(error) {
        this.interpreter.throwException("Kommunikationsfehler beim WebSocket");
    }
    onOpen() {
        this.isOpen = true;
        if (this.unsentMessages.length > 0) {
            this.unsentMessages.forEach(m => this.sendIntern(m));
            this.unsentMessages = [];
        }
        this.runMethod(this.onOpenMethod, []);
    }
    runMethod(method, stackElements) {
        if (method == null)
            return;
        stackElements.splice(0, 0, {
            type: this.runtimeObject.class,
            value: this.runtimeObject
        });
        if (this.interpreter.state == InterpreterState.waitingForInput) {
            this.interpreter.executeImmediatelyInNewStackframe(method.program, stackElements);
        }
        else {
            this.interpreter.runTimer(method, stackElements, () => { }, false);
        }
    }
    findClientsFromCount(count) {
        let message = {
            command: 6,
            count: count,
            nicknames: []
        };
        this.sendIntern(JSON.stringify(message));
    }
    findClientsFromNicknames(nicknames) {
        let message = {
            command: 6,
            count: nicknames.length,
            nicknames: nicknames
        };
        this.sendIntern(JSON.stringify(message));
    }
}
//# sourceMappingURL=data:application/json;base64,