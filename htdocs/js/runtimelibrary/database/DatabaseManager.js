import { Klass } from "../../compiler/types/Class.js";
import { stringPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Method, Parameterlist } from "../../compiler/types/Types.js";
import { RuntimeObject } from "../../interpreter/RuntimeObject.js";
import { ConnectionHelper } from "./Connection.js";
export class DatabaseManagerClass extends Klass {
    constructor(module) {
        super("DatabaseManager", module, "Über die statische Methode DatabaseManager.getConnection(String code) kann die Verbindung zu einer Datenbank auf www.sql-ide.de aufgebaut werden.");
        this.setBaseClass(module.typeStore.getType("Object"));
        let connectionType = module.typeStore.getType("Connection");
        this.addMethod(new Method("getConnection", new Parameterlist([
            { identifier: "code", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), connectionType, (parameters) => {
            let o = parameters[0].value;
            let code = parameters[1].value;
            let main = module.main;
            let interpreter = module.main.getInterpreter();
            if (main.isEmbedded()) {
                interpreter.throwException("Verbindung zu einer Datenbank kann nur von www.online-ide.de aus aufgebaut werden.");
                return null;
            }
            let ch = new ConnectionHelper(module.main);
            interpreter.pauseForInput();
            module.main.getBottomDiv().showHideDbBusyIcon(true);
            ch.connect(code, (error) => {
                module.main.getBottomDiv().showHideDbBusyIcon(false);
                if (error == null) {
                    let connectionRuntimeObject = new RuntimeObject(connectionType);
                    connectionRuntimeObject.intrinsicData["Helper"] = ch;
                    interpreter.resumeAfterInput({ value: connectionRuntimeObject, type: connectionType }, true);
                }
                else {
                    interpreter.resumeAfterInput(null);
                    interpreter.throwException(error);
                }
            });
            return;
        }, false, true, 'Baut eine Verbindung mit einer Datenbank auf www.sql-ide.de auf. Gibt ein Connection-Objekt zurück, das diese Verbindung repräsentiert.', false));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YWJhc2VNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NsaWVudC9ydW50aW1lbGlicmFyeS9kYXRhYmFzZS9EYXRhYmFzZU1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRW5ELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxLQUFLO0lBRTNDLFlBQVksTUFBYztRQUN0QixLQUFLLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxFQUFFLG1KQUFtSixDQUFDLENBQUM7UUFFdEwsSUFBSSxDQUFDLFlBQVksQ0FBUSxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzdELElBQUksY0FBYyxHQUFVLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRW5FLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxNQUFNLENBQUMsZUFBZSxFQUFFLElBQUksYUFBYSxDQUFDO1lBQ3pELEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7U0FDNUcsQ0FBQyxFQUFFLGNBQWMsRUFDZCxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBRVgsSUFBSSxDQUFDLEdBQWtCLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDM0MsSUFBSSxJQUFJLEdBQVcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUV2QyxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ3ZCLElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDL0MsSUFBRyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUM7Z0JBQ2pCLFdBQVcsQ0FBQyxjQUFjLENBQUMsb0ZBQW9GLENBQUMsQ0FBQztnQkFDakgsT0FBTyxJQUFJLENBQUM7YUFDZjtZQUVELElBQUksRUFBRSxHQUFxQixJQUFJLGdCQUFnQixDQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNuRSxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwRCxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQWEsRUFBRSxFQUFFO2dCQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNyRCxJQUFHLEtBQUssSUFBSSxJQUFJLEVBQUM7b0JBQ2IsSUFBSSx1QkFBdUIsR0FBRyxJQUFJLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztvQkFDaEUsdUJBQXVCLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztvQkFDckQsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEVBQUMsS0FBSyxFQUFFLHVCQUF1QixFQUFFLElBQUksRUFBRSxjQUFjLEVBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztpQkFDOUY7cUJBQU07b0JBQ0gsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNuQyxXQUFXLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNyQztZQUNMLENBQUMsQ0FBQyxDQUFBO1lBRUYsT0FBTztRQUVYLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLHlJQUF5SSxFQUN6SixLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRWhCLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1haW4gfSBmcm9tIFwiLi4vLi4vbWFpbi9NYWluLmpzXCI7XHJcbmltcG9ydCB7IE1vZHVsZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci9wYXJzZXIvTW9kdWxlLmpzXCI7XHJcbmltcG9ydCB7IEtsYXNzIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL0NsYXNzLmpzXCI7XHJcbmltcG9ydCB7IHN0cmluZ1ByaW1pdGl2ZVR5cGUgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvdHlwZXMvUHJpbWl0aXZlVHlwZXMuanNcIjtcclxuaW1wb3J0IHsgTWV0aG9kLCBQYXJhbWV0ZXJsaXN0IH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL1R5cGVzLmpzXCI7XHJcbmltcG9ydCB7IFJ1bnRpbWVPYmplY3QgfSBmcm9tIFwiLi4vLi4vaW50ZXJwcmV0ZXIvUnVudGltZU9iamVjdC5qc1wiO1xyXG5pbXBvcnQgeyBDb25uZWN0aW9uSGVscGVyIH0gZnJvbSBcIi4vQ29ubmVjdGlvbi5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIERhdGFiYXNlTWFuYWdlckNsYXNzIGV4dGVuZHMgS2xhc3Mge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZHVsZTogTW9kdWxlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJEYXRhYmFzZU1hbmFnZXJcIiwgbW9kdWxlLCBcIsOcYmVyIGRpZSBzdGF0aXNjaGUgTWV0aG9kZSBEYXRhYmFzZU1hbmFnZXIuZ2V0Q29ubmVjdGlvbihTdHJpbmcgY29kZSkga2FubiBkaWUgVmVyYmluZHVuZyB6dSBlaW5lciBEYXRlbmJhbmsgYXVmIHd3dy5zcWwtaWRlLmRlIGF1ZmdlYmF1dCB3ZXJkZW4uXCIpO1xyXG5cclxuICAgICAgICB0aGlzLnNldEJhc2VDbGFzcyg8S2xhc3M+bW9kdWxlLnR5cGVTdG9yZS5nZXRUeXBlKFwiT2JqZWN0XCIpKTtcclxuICAgICAgICBsZXQgY29ubmVjdGlvblR5cGUgPSA8S2xhc3M+bW9kdWxlLnR5cGVTdG9yZS5nZXRUeXBlKFwiQ29ubmVjdGlvblwiKTtcclxuIFxyXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJnZXRDb25uZWN0aW9uXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcclxuICAgICAgICAgICAgeyBpZGVudGlmaWVyOiBcImNvZGVcIiwgdHlwZTogc3RyaW5nUHJpbWl0aXZlVHlwZSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH0sXHJcbiAgICAgICAgXSksIGNvbm5lY3Rpb25UeXBlLFxyXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBvOiBSdW50aW1lT2JqZWN0ID0gcGFyYW1ldGVyc1swXS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGxldCBjb2RlOiBzdHJpbmcgPSBwYXJhbWV0ZXJzWzFdLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBtYWluID0gbW9kdWxlLm1haW47XHJcbiAgICAgICAgICAgICAgICBsZXQgaW50ZXJwcmV0ZXIgPSBtb2R1bGUubWFpbi5nZXRJbnRlcnByZXRlcigpO1xyXG4gICAgICAgICAgICAgICAgaWYobWFpbi5pc0VtYmVkZGVkKCkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGludGVycHJldGVyLnRocm93RXhjZXB0aW9uKFwiVmVyYmluZHVuZyB6dSBlaW5lciBEYXRlbmJhbmsga2FubiBudXIgdm9uIHd3dy5vbmxpbmUtaWRlLmRlIGF1cyBhdWZnZWJhdXQgd2VyZGVuLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY2g6IENvbm5lY3Rpb25IZWxwZXIgPSBuZXcgQ29ubmVjdGlvbkhlbHBlcig8TWFpbj5tb2R1bGUubWFpbik7XHJcbiAgICAgICAgICAgICAgICBpbnRlcnByZXRlci5wYXVzZUZvcklucHV0KCk7XHJcbiAgICAgICAgICAgICAgICBtb2R1bGUubWFpbi5nZXRCb3R0b21EaXYoKS5zaG93SGlkZURiQnVzeUljb24odHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjaC5jb25uZWN0KGNvZGUsIChlcnJvcjogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlLm1haW4uZ2V0Qm90dG9tRGl2KCkuc2hvd0hpZGVEYkJ1c3lJY29uKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihlcnJvciA9PSBudWxsKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbm5lY3Rpb25SdW50aW1lT2JqZWN0ID0gbmV3IFJ1bnRpbWVPYmplY3QoY29ubmVjdGlvblR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uUnVudGltZU9iamVjdC5pbnRyaW5zaWNEYXRhW1wiSGVscGVyXCJdID0gY2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVycHJldGVyLnJlc3VtZUFmdGVySW5wdXQoe3ZhbHVlOiBjb25uZWN0aW9uUnVudGltZU9iamVjdCwgdHlwZTogY29ubmVjdGlvblR5cGV9LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnByZXRlci5yZXN1bWVBZnRlcklucHV0KG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnByZXRlci50aHJvd0V4Y2VwdGlvbihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB9LCBmYWxzZSwgdHJ1ZSwgJ0JhdXQgZWluZSBWZXJiaW5kdW5nIG1pdCBlaW5lciBEYXRlbmJhbmsgYXVmIHd3dy5zcWwtaWRlLmRlIGF1Zi4gR2lidCBlaW4gQ29ubmVjdGlvbi1PYmpla3QgenVyw7xjaywgZGFzIGRpZXNlIFZlcmJpbmR1bmcgcmVwcsOkc2VudGllcnQuJyxcclxuICAgICAgICAgICAgZmFsc2UpKTtcclxuXHJcbiAgICB9XHJcblxyXG59Il19