import { Klass } from "../../compiler/types/Class.js";
import { booleanPrimitiveType, doublePrimitiveType, floatPrimitiveType, intPrimitiveType, stringPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Method, Parameterlist } from "../../compiler/types/Types.js";
export class ResultSetClass extends Klass {
    constructor(module) {
        super("ResultSet", module, "Ein ResultSet-Objekt speichert das Ergebnis einer Abfrage an die Datenbank.");
        let resultSetType = module.typeStore.getType("ResultSet");
        this.setBaseClass(module.typeStore.getType("Object"));
        this.addMethod(new Method("next", new Parameterlist([]), booleanPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let rsh = o.intrinsicData["Helper"];
            return rsh.next();
        }, false, false, 'F端hrt ein SQL-Statement aus.', false));
        this.addMethod(new Method("wasNull", new Parameterlist([]), booleanPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let rsh = o.intrinsicData["Helper"];
            return rsh.wasNull;
        }, false, false, 'Gibt genau dann true zur端ck, wenn der zuletzt gelesene Wert null war.', false));
        let types = [booleanPrimitiveType, intPrimitiveType, floatPrimitiveType, doublePrimitiveType, stringPrimitiveType];
        for (let type of types) {
            let typeIdFirstUppercase = type.identifier.charAt(0).toUpperCase() + type.identifier.substring(1);
            this.addMethod(new Method("get" + typeIdFirstUppercase, new Parameterlist([
                { identifier: "columnIndex", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            ]), type, (parameters) => {
                let o = parameters[0].value;
                let columnIndex = parameters[1].value;
                let rsh = o.intrinsicData["Helper"];
                let interpreter = module.main.getInterpreter();
                if (columnIndex < 1 || columnIndex > rsh.columnCount()) {
                    interpreter.throwException("Das Ergebnis hat keine Spalte " + columnIndex + ".");
                    return;
                }
                if (rsh.isAfterLast()) {
                    interpreter.throwException("Der Cursor befindet sich hinter dem letzten Datensatz des ResultSet.");
                }
                return rsh.getValue(type, columnIndex);
            }, false, false, 'Gibt den Wert der Spalte mit dem angegebenen Spaltenindex als ' + type.identifier + " zur端ck.", false));
            this.addMethod(new Method("get" + typeIdFirstUppercase, new Parameterlist([
                { identifier: "columnLabel", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            ]), type, (parameters) => {
                let o = parameters[0].value;
                let columnLabel = parameters[1].value;
                let rsh = o.intrinsicData["Helper"];
                let interpreter = module.main.getInterpreter();
                if (rsh.isAfterLast()) {
                    interpreter.throwException("Der Cursor befindet sich hinter dem letzten Datensatz des ResultSet.");
                }
                let columnIndex = rsh.getColumnIndex(columnLabel);
                if (columnIndex < 0) {
                    interpreter.throwException("Das Ergebnis hat keine Spalte mit dem Bezeichner " + columnLabel + ".");
                    return;
                }
                return rsh.getValue(type, columnIndex);
            }, false, false, 'Gibt den Wert der Spalte mit dem angegebenen Spaltenindex als ' + type.identifier + " zur端ck.", false));
        }
    }
}
export class ResultsetHelper {
    constructor(result) {
        this.result = result;
        this.cursor = -1;
        this.wasNull = false;
    }
    getColumnIndex(columnLabel) {
        columnLabel = columnLabel.toLocaleLowerCase();
        let index = this.result.columns.findIndex((value, index) => { return value.toLocaleLowerCase() == columnLabel; });
        if (index < 0)
            return index;
        return index + 1;
    }
    next() {
        this.cursor++;
        return this.cursor < this.result.values.length;
    }
    columnCount() {
        return this.result.columns.length;
    }
    getValue(type, columnIndex) {
        let value = this.result.values[this.cursor][columnIndex - 1];
        this.wasNull = value == null;
        if (type == stringPrimitiveType) {
            return value == null ? null : "" + value;
        }
        if (type == intPrimitiveType) {
            if (value == null || !(typeof value == "number")) {
                return 0;
            }
            return Math.floor(value);
        }
        if (type == floatPrimitiveType || type == doublePrimitiveType) {
            if (value == null || !(typeof value == "number")) {
                return 0;
            }
            return value;
        }
        if (type == booleanPrimitiveType) {
            if (value == null)
                return false;
            return (value + "").indexOf("1") >= 0;
        }
    }
    isAfterLast() {
        return this.cursor > this.result.values.length - 1;
    }
}
//# sourceMappingURL=data:application/json;base64,