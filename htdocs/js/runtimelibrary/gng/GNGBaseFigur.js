import { Klass, Visibility } from "../../compiler/types/Class.js";
import { booleanPrimitiveType, intPrimitiveType, stringPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Attribute, Method, Parameterlist } from "../../compiler/types/Types.js";
import { GNGFarben } from "./GNGFarben.js";
export class GNGBaseFigurClass extends Klass {
    constructor(module, moduleStore) {
        super("GNGBaseFigur", module, "Oberklasse der graphischen Elemente in der Graphics'n Games-Bibliothek (Cornelsen-Verlag)");
        let objectType = moduleStore.getType("Object").type;
        this.setBaseClass(objectType);
        this.addAttribute(new Attribute("farbe", stringPrimitiveType, (value) => {
            let farbe = value.object.intrinsicData["Farbe"];
            value.value = farbe == null ? "schwarz" : farbe;
        }, false, Visibility.protected, false, "Farbe des Grafikobjekts"));
        this.addAttribute(new Attribute("x", intPrimitiveType, (value) => {
            let sh = value.object.intrinsicData["Actor"];
            value.value = Math.round(sh.getCenterX());
        }, false, Visibility.protected, false, "x-Position des Grafikobjekts"));
        this.addAttribute(new Attribute("y", intPrimitiveType, (value) => {
            let sh = value.object.intrinsicData["Actor"];
            value.value = Math.round(sh.getCenterY());
        }, false, Visibility.protected, false, "y-Position des Grafikobjekts"));
        this.addAttribute(new Attribute("winkel", intPrimitiveType, (value) => {
            value.value = value.object.intrinsicData["Actor"].angle;
        }, false, Visibility.protected, false, "Blickrichtung des Grafikobjekts in Grad"));
        this.addAttribute(new Attribute("größe", intPrimitiveType, (value) => {
            value.value = Math.round(value.object.intrinsicData["Actor"].scaleFactor * 100);
        }, false, Visibility.protected, false, "Größe des Grafikobjekts (100 entspricht 'normalgroß')"));
        this.addAttribute(new Attribute("sichtbar", booleanPrimitiveType, (value) => {
            var _a;
            value.value = (_a = value.object.intrinsicData["Actor"].displayObject) === null || _a === void 0 ? void 0 : _a.visible;
        }, false, Visibility.protected, false, "true, wenn das Grafikobjekt sichtbar ist"));
        this.setupAttributeIndicesRecursive();
        this.addMethod(new Method("PositionSetzen", new Parameterlist([
            { identifier: "x", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let x = parameters[1].value;
            let y = parameters[2].value;
            if (sh.testdestroyed("PositionSetzen"))
                return;
            let moveAnchor = o.intrinsicData["moveAnchor"];
            let p = new PIXI.Point(moveAnchor.x, moveAnchor.y);
            sh.displayObject.updateTransform();
            sh.displayObject.transform.worldTransform.apply(p, p);
            sh.move(x - p.x, y - p.y);
        }, false, false, "Verschiebt das Rechteck so, dass seine linke obere Ecke bei (x,y) zu liegen kommt.", false));
        this.addMethod(new Method("Verschieben", new Parameterlist([
            { identifier: "deltaX", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "deltaY", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let x = parameters[1].value;
            let y = parameters[2].value;
            if (sh.testdestroyed("Verschieben"))
                return;
            sh.move(x, y);
        }, false, false, "Verschiebt die Figur um (x, y)", false));
        this.addMethod(new Method("Drehen", new Parameterlist([
            { identifier: "grad", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let grad = parameters[1].value;
            if (sh.testdestroyed("Drehen"))
                return;
            sh.rotate(grad);
        }, false, false, "Dreht die Figur um den angegebenen Winkel. Drehpunkt ist der Diagonalenschnittpunkt der kleinsten achsenparallelen Bounding Box um die Figur.", false));
        this.addMethod(new Method("FarbeSetzen", new Parameterlist([
            { identifier: "farbe", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let farbe = parameters[1].value;
            o.intrinsicData["Farbe"] = farbe;
            let color = GNGFarben[farbe.toLocaleLowerCase()];
            if (color == null)
                color = 0x000000; // default: schwarz
            if (sh.testdestroyed("FarbeSetzen"))
                return;
            sh.setFillColor(color);
            sh.render();
        }, false, false, "Setzt die Farbe der Figur.", false));
        this.addMethod(new Method("WinkelSetzen", new Parameterlist([
            { identifier: "winkel", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let winkel = parameters[1].value;
            if (sh.testdestroyed("WinkelSetzen"))
                return;
            sh.rotate(winkel - sh.angle);
        }, false, false, "Setzt den Drehwinkel der Figur. Der Winkel wird in Grad angegebenen, positive Werte bedeuten eine Drehung gegen den Uhrzeigersinn.", false));
        this.addMethod(new Method("SichtbarkeitSetzen", new Parameterlist([
            { identifier: "sichtbarkeit", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let sichtbarkeit = parameters[1].value;
            if (sh.testdestroyed("SichtbarkeitSetzen"))
                return;
            sh.setVisible(sichtbarkeit);
        }, false, false, "Schaltet die Sichtbarkeit der Figur ein oder aus.", false));
        this.addMethod(new Method("Entfernen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("Entfernen"))
                return;
            sh.destroy();
        }, false, false, "Zerstört das Objekt.", false));
        this.addMethod(new Method("GanzNachVornBringen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("GanzNachVornBringen"))
                return;
            return sh.bringToFront();
        }, false, false, 'Setzt das Grafikobjekt vor alle anderen.', false));
        this.addMethod(new Method("GanzNachHintenBringen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("GanzNachHintenBringen"))
                return;
            return sh.sendToBack();
        }, false, false, 'Setzt das Grafikobjekt hinter alle anderen.', false));
        this.addMethod(new Method("NachVornBringen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("NachVornBringen"))
                return;
            return sh.bringOnePlaneFurtherToFront();
        }, false, false, 'Setzt das Grafikobjekt eine Ebene nach vorne.', false));
        this.addMethod(new Method("NachHintenBringen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("NachHintenBringen"))
                return;
            return sh.bringOnePlaneFurtherToBack();
        }, false, false, 'Setzt das Grafikobjekt eine Ebene nach hinten.', false));
    }
}
//# sourceMappingURL=data:application/json;base64,