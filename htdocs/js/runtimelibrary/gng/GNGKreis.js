import { Klass, Visibility } from "../../compiler/types/Class.js";
import { intPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Attribute, Method, Parameterlist } from "../../compiler/types/Types.js";
import { CircleHelper } from "../graphics/Circle.js";
export class GNGKreisClass extends Klass {
    constructor(module, moduleStore) {
        super("Kreis", module, "Kreis-Klasse der Graphics'n Games-Bibliothek (Cornelsen-Verlag)");
        this.setBaseClass(module.typeStore.getType("GNGBaseFigur"));
        this.addAttribute(new Attribute("radius", intPrimitiveType, (value) => {
            let sh = value.object.intrinsicData["Actor"];
            value.value = Math.round(sh.r * sh.displayObject.scale.x);
        }, false, Visibility.protected, false, "Radius des Kreises"));
        this.setupAttributeIndicesRecursive();
        this.addMethod(new Method("Kreis", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            o.intrinsicData["isGNG"] = true;
            let rh = new CircleHelper(60, 60, 50, module.main.getInterpreter(), o);
            o.intrinsicData["Actor"] = rh;
            o.intrinsicData["moveAnchor"] = { x: 60, y: 60 };
            o.intrinsicData["Farbe"] = "rot";
            rh.setFillColor(0xff0000);
        }, false, false, 'Instanziert ein neues Kreis-Objekt.', true));
        this.addMethod(new Method("RadiusSetzen", new Parameterlist([
            { identifier: "radius", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let radius = parameters[1].value;
            if (sh.testdestroyed("radiusSetzen"))
                return;
            sh.setRadius(radius);
        }, false, false, "Setzt den Radius des Kreis-Objekts.", false));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR05HS3JlaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2xpZW50L3J1bnRpbWVsaWJyYXJ5L2duZy9HTkdLcmVpcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBUyxNQUFNLCtCQUErQixDQUFDO0FBRXhGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUdyRCxNQUFNLE9BQU8sYUFBYyxTQUFRLEtBQUs7SUFFcEMsWUFBWSxNQUFjLEVBQUUsV0FBd0I7UUFFaEQsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsaUVBQWlFLENBQUMsQ0FBQztRQUUxRixJQUFJLENBQUMsWUFBWSxDQUFRLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFFbkUsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFZLEVBQUUsRUFBRTtZQUN6RSxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM3QyxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5RCxDQUFDLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixDQUFDLENBQUMsQ0FBQztRQUU5RCxJQUFJLENBQUMsOEJBQThCLEVBQUUsQ0FBQztRQUV0QyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLGFBQWEsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQzFELENBQUMsVUFBVSxFQUFFLEVBQUU7WUFFWCxJQUFJLENBQUMsR0FBa0IsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUMzQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQztZQUVoQyxJQUFJLEVBQUUsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZFLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBRTlCLENBQUMsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUMsQ0FBQztZQUUvQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNqQyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTlCLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLHFDQUFxQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFbkUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLEVBQUUsSUFBSSxhQUFhLENBQUM7WUFDeEQsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtTQUMzRyxDQUFDLEVBQUUsSUFBSSxFQUNKLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFFWCxJQUFJLENBQUMsR0FBa0IsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUMzQyxJQUFJLEVBQUUsR0FBaUIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoRCxJQUFJLE1BQU0sR0FBVyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBRXpDLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUM7Z0JBQUUsT0FBTztZQUU3QyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXpCLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLHFDQUFxQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFHeEUsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlLCBNb2R1bGVTdG9yZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci9wYXJzZXIvTW9kdWxlLmpzXCI7XHJcbmltcG9ydCB7IEtsYXNzLCBWaXNpYmlsaXR5IH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL0NsYXNzLmpzXCI7XHJcbmltcG9ydCB7IGludFByaW1pdGl2ZVR5cGUgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvdHlwZXMvUHJpbWl0aXZlVHlwZXMuanNcIjtcclxuaW1wb3J0IHsgQXR0cmlidXRlLCBNZXRob2QsIFBhcmFtZXRlcmxpc3QsIFZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL1R5cGVzLmpzXCI7XHJcbmltcG9ydCB7IFJ1bnRpbWVPYmplY3QgfSBmcm9tIFwiLi4vLi4vaW50ZXJwcmV0ZXIvUnVudGltZU9iamVjdC5qc1wiO1xyXG5pbXBvcnQgeyBDaXJjbGVIZWxwZXIgfSBmcm9tIFwiLi4vZ3JhcGhpY3MvQ2lyY2xlLmpzXCI7XHJcbmltcG9ydCB7IFJlY3RhbmdsZUhlbHBlciB9IGZyb20gXCIuLi9ncmFwaGljcy9SZWN0YW5nbGUuanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHTkdLcmVpc0NsYXNzIGV4dGVuZHMgS2xhc3Mge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZHVsZTogTW9kdWxlLCBtb2R1bGVTdG9yZTogTW9kdWxlU3RvcmUpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoXCJLcmVpc1wiLCBtb2R1bGUsIFwiS3JlaXMtS2xhc3NlIGRlciBHcmFwaGljcyduIEdhbWVzLUJpYmxpb3RoZWsgKENvcm5lbHNlbi1WZXJsYWcpXCIpO1xyXG5cclxuICAgICAgICB0aGlzLnNldEJhc2VDbGFzcyg8S2xhc3M+bW9kdWxlLnR5cGVTdG9yZS5nZXRUeXBlKFwiR05HQmFzZUZpZ3VyXCIpKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGUobmV3IEF0dHJpYnV0ZShcInJhZGl1c1wiLCBpbnRQcmltaXRpdmVUeXBlLCAodmFsdWU6IFZhbHVlKSA9PiB7IFxyXG4gICAgICAgICAgICBsZXQgc2ggPSB2YWx1ZS5vYmplY3QuaW50cmluc2ljRGF0YVtcIkFjdG9yXCJdO1xyXG4gICAgICAgICAgICB2YWx1ZS52YWx1ZSA9IE1hdGgucm91bmQoc2guciAqIHNoLmRpc3BsYXlPYmplY3Quc2NhbGUueCk7IFxyXG4gICAgICAgIH0sIGZhbHNlLCBWaXNpYmlsaXR5LnByb3RlY3RlZCwgZmFsc2UsIFwiUmFkaXVzIGRlcyBLcmVpc2VzXCIpKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXR1cEF0dHJpYnV0ZUluZGljZXNSZWN1cnNpdmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIktyZWlzXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtdKSwgbnVsbCxcclxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgbzogUnVudGltZU9iamVjdCA9IHBhcmFtZXRlcnNbMF0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICBvLmludHJpbnNpY0RhdGFbXCJpc0dOR1wiXSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHJoID0gbmV3IENpcmNsZUhlbHBlcig2MCwgNjAsIDUwLCBtb2R1bGUubWFpbi5nZXRJbnRlcnByZXRlcigpLCBvKTtcclxuICAgICAgICAgICAgICAgIG8uaW50cmluc2ljRGF0YVtcIkFjdG9yXCJdID0gcmg7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIG8uaW50cmluc2ljRGF0YVtcIm1vdmVBbmNob3JcIl0gPSB7eDogNjAsIHk6IDYwfTtcclxuXHJcbiAgICAgICAgICAgICAgICBvLmludHJpbnNpY0RhdGFbXCJGYXJiZVwiXSA9IFwicm90XCI7XHJcbiAgICAgICAgICAgICAgICByaC5zZXRGaWxsQ29sb3IoMHhmZjAwMDApO1xyXG5cclxuICAgICAgICAgICAgfSwgZmFsc2UsIGZhbHNlLCAnSW5zdGFuemllcnQgZWluIG5ldWVzIEtyZWlzLU9iamVrdC4nLCB0cnVlKSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJSYWRpdXNTZXR6ZW5cIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xyXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwicmFkaXVzXCIsIHR5cGU6IGludFByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9XHJcbiAgICAgICAgXSksIG51bGwsXHJcbiAgICAgICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNoOiBDaXJjbGVIZWxwZXIgPSBvLmludHJpbnNpY0RhdGFbXCJBY3RvclwiXTtcclxuICAgICAgICAgICAgICAgIGxldCByYWRpdXM6IG51bWJlciA9IHBhcmFtZXRlcnNbMV0udmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNoLnRlc3RkZXN0cm95ZWQoXCJyYWRpdXNTZXR6ZW5cIikpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICBzaC5zZXRSYWRpdXMocmFkaXVzKTtcclxuXHJcbiAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSwgXCJTZXR6dCBkZW4gUmFkaXVzIGRlcyBLcmVpcy1PYmpla3RzLlwiLCBmYWxzZSkpO1xyXG5cclxuXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4iXX0=