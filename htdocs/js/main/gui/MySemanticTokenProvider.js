import { Interface, Klass } from "../../compiler/types/Class.js";
import { Attribute, Method, PrimitiveType, Type } from "../../compiler/types/Types.js";
export class MySemanticTokenProvider {
    constructor(main) {
        this.main = main;
        this.tokenTypes = [
            'comment', 'string', 'keyword', 'number', 'regexp', 'operator', 'namespace',
            'type', 'struct', 'class', 'interface', 'enum', 'typeParameter', 'function',
            'member', 'macro', 'variable', 'parameter', 'property', 'label'
        ];
        this.tokenModifiers = ['declaration', 'documentation', 'readonly', 'static', 'abstract', 'deprecated',
            'modification', 'async'];
        this.legend = {
            tokenTypes: this.tokenTypes,
            tokenModifiers: this.tokenModifiers
        };
    }
    provideDocumentRangeSemanticTokens(model, range, token) {
        var _a;
        let module = this.main.getCurrentlyEditedModule();
        if (module.model.id != model.id)
            return {
                data: new Uint32Array(),
                resultId: null
            };
        let lastPos = {
            line: 0,
            column: 0
        };
        let data = [];
        for (let line = range.startLineNumber; line <= range.endLineNumber; line++) {
            let identifierPositions = module.identifierPositions[line];
            if (identifierPositions != null) {
                for (let ip of identifierPositions) {
                    let element = ip.element;
                    if (element instanceof Klass || element instanceof Method || element instanceof Interface
                        || element instanceof Attribute) {
                        if (element instanceof Attribute) {
                            this.registerToken(ip.position, element.identifier, lastPos, data, this.tokenTypes.indexOf("property"), 0);
                        }
                    }
                    else if (element instanceof PrimitiveType) {
                    }
                    else if (!(element instanceof Type)) {
                        // Variable
                        let typeIdentifier = (_a = element === null || element === void 0 ? void 0 : element.type) === null || _a === void 0 ? void 0 : _a.identifier;
                    }
                }
            }
        }
        return {
            data: new Uint32Array(data),
            resultId: null
        };
    }
    getLegend() {
        return this.legend;
    }
    registerToken(position, identifier, lastPos, data, tokenTypeIndex, tokenModifierIndex) {
        data.push(position.line - 1 - lastPos.line, position.line - 1 == lastPos.line ? position.column - 1 - lastPos.column : position.column - 1, identifier.length, tokenTypeIndex, tokenModifierIndex);
        lastPos.line = position.line - 1;
        lastPos.column = position.column - 1;
    }
    releaseDocumentSemanticTokens(resultId) {
    }
}
//# sourceMappingURL=data:application/json;base64,