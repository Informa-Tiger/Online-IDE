import { ObjectDiagramVariant } from "./ObjectDiagramVariant.js";
import { Klass } from "../../../../compiler/types/Class.js";
import { ObjectClass } from "../../../../compiler/types/ObjectClass.js";
export class ListDiagram extends ObjectDiagramVariant {
    getSettingsElement() {
        var _a;
        let moduleStore = this.main.getCurrentWorkspace().moduleStore;
        let $element = jQuery('<span>Start der Liste:&nbsp;</span>');
        this.$selectElement = jQuery('<select></select>');
        $element.append(this.$selectElement);
        for (let module of moduleStore.getModules(false)) {
            let childSymbolTables = (_a = module.mainSymbolTable) === null || _a === void 0 ? void 0 : _a.childSymbolTables;
            if (childSymbolTables == null || childSymbolTables.length == 0)
                continue;
            let variableMap = childSymbolTables[0].variableMap;
            if (variableMap == null || childSymbolTables[0].classContext != null)
                continue;
            variableMap.forEach((variable, identifier) => {
                let type = variable.type;
                if (type != null && type instanceof Klass && type.module != null && !type.module.isSystemModule) {
                    let selected = identifier == this.rootIdentifier ? " selected" : "";
                    this.$selectElement.append('<option value="' + identifier + selected + '">' + identifier +
                        ' (Modul "' + module.file.name + '")</option>');
                }
            });
        }
        return $element;
    }
    getName() { return "Liste"; }
    updateDiagram() {
        var _a;
        let heap = this.main.getInterpreter().heap;
        let rootValue = (_a = heap[this.rootIdentifier]) === null || _a === void 0 ? void 0 : _a.value;
        if (rootValue == null) {
            this.objectDiagram.error("Konnte die Variable " + this.rootIdentifier + " nicht finden.");
            return;
        }
        if (rootValue.type == null || !(rootValue.type instanceof Klass)) {
            this.objectDiagram.error("Die Variable " + this.rootIdentifier + " zeigt auf kein Objekt.");
        }
        let klass = rootValue.type;
        let rto = rootValue.value;
        // if rootValue is self of self referncing type then this array holds values:
        let rootValueSelfReferenceType = this.analyzeSelfReference(klass);
        // ... else find referenced class which is of self referencing type;
        let attributesWithSelfReference = [];
        let selfReferenceType;
        if (rootValueSelfReferenceType == null) {
            let k = klass;
            while (k != null && !(k instanceof ObjectClass)) {
                for (let a of k.attributes) {
                    let value = rto.attributes[a.index];
                    if (!(value.type instanceof Klass))
                        continue;
                    if (selfReferenceType != null && selfReferenceType == a.type) {
                        attributesWithSelfReference.push(a.identifier);
                    }
                    else {
                        let sr = this.analyzeSelfReference(value.type);
                        if (sr != null) {
                            selfReferenceType = sr;
                        }
                    }
                }
                k = k.baseClass;
            }
        }
        if (rootValueSelfReferenceType == null && selfReferenceType == null) {
            this.objectDiagram.error("Konnte kein sich selbst referenzierendes Objekt finden.");
        }
        else {
            this.drawDiagram(rootValue, rootValueSelfReferenceType, attributesWithSelfReference, selfReferenceType);
        }
    }
    drawDiagram(rootValue, rootValueSelfReferenceType, attributesWithSelfReference, selfReferenceType) {
    }
    analyzeSelfReference(klass) {
        let tImplements = [];
        let tExtends;
        let k = klass;
        while (k != null && !(k instanceof ObjectClass)) {
            if (k.implements.length > 0)
                tImplements = tImplements.concat(k.implements);
            if (k.baseClass != null && !(k.baseClass instanceof ObjectClass)) {
                tExtends.push(k.baseClass);
            }
            k = k.baseClass;
        }
        k = klass;
        while (k != null && !(k instanceof ObjectClass)) {
            for (let a of k.attributes) {
                let type = a.type;
                if (tImplements.indexOf(type) >= 0 || tExtends.indexOf(type) >= 0) {
                    return type;
                }
            }
            k = k.baseClass;
        }
        return null;
    }
    clear() {
    }
}
//# sourceMappingURL=data:application/json;base64,