import { makeTabs } from "../../tools/HtmlTools.js";
import { ProgramPrinter } from "../../compiler/parser/ProgramPrinter.js";
import { MyConsole } from "./console/MyConsole.js";
import { ErrorManager } from "./ErrorManager.js";
import { InterpreterState } from "../../interpreter/Interpreter.js";
import { HomeworkManager } from "./HomeworkManager.js";
export class BottomDiv {
    constructor(main, $bottomDiv, $mainDiv) {
        this.main = main;
        this.$bottomDiv = $bottomDiv;
        this.$mainDiv = $mainDiv;
        if (this.$bottomDiv.find('.jo_tabs>.jo_pcodeTab').length > 0) {
            this.programPrinter = new ProgramPrinter(main, $bottomDiv);
        }
        if (this.$bottomDiv.find('.jo_tabheadings>.jo_console-tab').length > 0) {
            this.console = new MyConsole(main, $bottomDiv);
        }
        else {
            this.console = new MyConsole(main, null);
        }
        if (this.$bottomDiv.find('.jo_tabheadings>.jo_homeworkTabheading').length > 0) {
            this.homeworkManager = new HomeworkManager(main, $bottomDiv);
        }
        this.errorManager = new ErrorManager(main, $bottomDiv, $mainDiv);
    }
    initGUI() {
        makeTabs(this.$bottomDiv);
        if (this.programPrinter != null)
            this.programPrinter.initGUI();
        if (this.console != null)
            this.console.initGUI();
        if (this.homeworkManager != null)
            this.homeworkManager.initGUI();
        this.$bottomDiv.find('.jo_tabs').children().first().trigger("click");
        let that = this;
        jQuery(".jo_pcodeTab").on("myshow", () => {
            that.printCurrentlyExecutedModule();
        });
    }
    printCurrentlyExecutedModule() {
        var _a;
        let interpreter = this.main.getInterpreter();
        if (interpreter.state == InterpreterState.running || interpreter.state == InterpreterState.paused) {
            let module = (_a = interpreter.currentProgram) === null || _a === void 0 ? void 0 : _a.module;
            this.printModuleToBottomDiv(null, module);
        }
    }
    printModuleToBottomDiv(currentWorkspace, module) {
        if (this.programPrinter != null)
            this.programPrinter.printModuleToBottomDiv(currentWorkspace, module);
    }
    showHomeworkTab() {
        jQuery('.jo_homeworkTabheading').css('visibility', 'visible');
        let mousePointer = window.PointerEvent ? "pointer" : "mouse";
        jQuery('.jo_homeworkTabheading').trigger(mousePointer + "down");
    }
    hideHomeworkTab() {
        jQuery('.jo_homeworkTabheading').css('visibility', 'hidden');
        let mousePointer = window.PointerEvent ? "pointer" : "mouse";
        jQuery('.jo_tabheadings').children().first().trigger(mousePointer + "down");
    }
    showHideDbBusyIcon(visible) {
        let displayValue = visible ? "block" : "none";
        jQuery(".jo_db-busy").css("display", displayValue);
    }
}
//# sourceMappingURL=data:application/json;base64,