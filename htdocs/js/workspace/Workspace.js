import { Module, ModuleStore } from "../compiler/parser/Module.js";
import { Evaluator } from "../interpreter/Evaluator.js";
export class Workspace {
    constructor(name, main, owner_id) {
        this.main = main;
        this.saved = true;
        this.settings = {
            libraries: []
        };
        this.name = name;
        this.owner_id = owner_id;
        this.moduleStore = new ModuleStore(main, true, this.settings.libraries);
        this.evaluator = new Evaluator(this, main);
    }
    toExportedWorkspace() {
        return {
            name: this.name,
            modules: this.moduleStore.getModules(false).map(m => m.toExportedModule()),
            settings: this.settings
        };
    }
    alterAdditionalLibraries() {
        this.moduleStore.setAdditionalLibraries(this.settings.libraries);
        this.moduleStore.dirty = true;
    }
    getWorkspaceData(withFiles) {
        let wd = {
            name: this.name,
            path: this.path,
            isFolder: this.isFolder,
            id: this.id,
            owner_id: this.owner_id,
            currentFileId: this.currentlyOpenModule == null ? null : this.currentlyOpenModule.file.id,
            files: [],
            version: this.version,
            repository_id: this.repository_id,
            has_write_permission_to_repository: this.has_write_permission_to_repository,
            language: 0,
            sql_baseDatabase: "",
            sql_history: "",
            sql_manipulateDatabaseStatements: "",
            settings: JSON.stringify(this.settings)
        };
        if (withFiles) {
            for (let m of this.moduleStore.getModules(false)) {
                wd.files.push(m.getFileData(this));
            }
        }
        return wd;
    }
    renderSynchronizeButton(panelElement) {
        var _a;
        let $buttonDiv = (_a = panelElement === null || panelElement === void 0 ? void 0 : panelElement.$htmlFirstLine) === null || _a === void 0 ? void 0 : _a.find('.jo_additionalButtonRepository');
        if ($buttonDiv == null)
            return;
        let that = this;
        let myMain = this.main;
        if (this.repository_id != null && this.owner_id == myMain.user.id) {
            let $button = jQuery('<div class="jo_startButton img_open-change jo_button jo_active" title="Workspace mit Repository synchronisieren"></div>');
            $buttonDiv.append($button);
            let that = this;
            $button.on('mousedown', (e) => e.stopPropagation());
            $button.on('click', (e) => {
                e.stopPropagation();
                that.synchronizeWithRepository();
            });
        }
        else {
            $buttonDiv.find('.jo_startButton').remove();
        }
    }
    synchronizeWithRepository() {
        let myMain = this.main;
        if (this.repository_id != null && this.owner_id == myMain.user.id) {
            myMain.networkManager.sendUpdates(() => {
                myMain.synchronizationManager.synchronizeWithWorkspace(this);
            }, true);
        }
    }
    static restoreFromData(ws, main) {
        let settings = (ws.settings != null && ws.settings.startsWith("{")) ? JSON.parse(ws.settings) : { libraries: [] };
        //@ts-ignore
        if (settings.libaries) {
            //@ts-ignore
            settings.libraries = settings.libaries;
        }
        let w = new Workspace(ws.name, main, ws.owner_id);
        w.id = ws.id;
        w.path = ws.path;
        w.isFolder = ws.isFolder;
        w.owner_id = ws.owner_id;
        w.version = ws.version;
        w.repository_id = ws.repository_id;
        w.has_write_permission_to_repository = ws.has_write_permission_to_repository;
        w.settings = settings;
        if (w.settings.libraries == null) {
            w.settings.libraries = [];
        }
        if (w.settings.libraries.length > 0) {
            w.moduleStore.setAdditionalLibraries(w.settings.libraries);
        }
        for (let f of ws.files) {
            let m = Module.restoreFromData(f, main);
            w.moduleStore.putModule(m);
            if (f.id == ws.currentFileId) {
                w.currentlyOpenModule = m;
            }
        }
        return w;
    }
    hasErrors() {
        return this.moduleStore.hasErrors();
    }
    getModuleByMonacoModel(model) {
        for (let m of this.moduleStore.getModules(false)) {
            if (m.model == model) {
                return m;
            }
        }
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,