import { InputManager } from "../interpreter/InputManager.js";
import { PrintManager } from "../main/gui/PrintManager.js";
import { GamepadTool } from "../tools/GamepadTool.js";
import { KeyboardTool } from "../tools/KeyboardTool.js";
import { NLoadController } from "./NLoadController.js";
import { NThreadPool, NThreadPoolLstate } from "./NThreadPool.js";
export class NInterpreter {
    constructor(main, controlButtons, $runDiv) {
        this.main = main;
        this.controlButtons = controlButtons;
        this.isExternalTimer = false;
        this.timerIntervalMs = 16;
        this.moduleStoreVersion = -100;
        this.actions = ["start", "pause", "stop", "stepOver",
            "stepInto", "stepOut", "restart"];
        //NThreadPoolLstatus { done, running, paused, not_initialized }
        // buttonActiveMatrix[button][i] tells if button is active at 
        // InterpreterState i
        this.buttonActiveMatrix = {
            "start": [true, false, true, false],
            "pause": [false, true, false, false],
            "stop": [false, true, true, false],
            "stepOver": [true, false, true, false],
            "stepInto": [true, false, true, false],
            "stepOut": [false, false, true, false],
            "restart": [true, true, true, false]
        };
        this.printManager = new PrintManager($runDiv, this.main);
        this.inputManager = new InputManager($runDiv, this.main);
        if (main.isEmbedded()) {
            this.keyboardTool = new KeyboardTool(jQuery('html'), main);
        }
        else {
            this.keyboardTool = new KeyboardTool(jQuery(window), main);
        }
        this.gamepadTool = new GamepadTool();
        // TODO: This wires up speedcontrol with interpreter
        // controlButtons.setInterpreter(this);
        this.threadPool = new NThreadPool(this);
        this.loadController = new NLoadController(this.threadPool, this);
        this.initTimer();
    }
    initTimer() {
        let that = this;
        let periodicFunction = () => {
            if (!that.isExternalTimer) {
                that.timerFunction(that.timerIntervalMs);
            }
        };
        this.timerId = setInterval(periodicFunction, this.timerIntervalMs);
    }
    timerFunction(timerIntervalMs) {
        if (this.threadPool.state == NThreadPoolLstate.running) {
            this.loadController.tick(timerIntervalMs);
        }
    }
    executeOneStep(stepInto) {
        if (this.threadPool.state != NThreadPoolLstate.paused) {
            this.init();
            if (this.threadPool.state == NThreadPoolLstate.not_initialized) {
                return;
            }
            this.resetRuntime();
        }
        this.threadPool.runSingleStepKeepingThread(stepInto, () => {
            this.pause();
        });
        if (!stepInto) {
            this.threadPool.setState(NThreadPoolLstate.running);
        }
    }
    showProgramPointer(position) {
        throw new Error("Method not implemented.");
    }
    pause() {
        this.threadPool.setState(NThreadPoolLstate.paused);
        this.threadPool.unmarkStep();
        this.showProgramPointer(this.threadPool.getNextStepPosition());
    }
    stop(restart) {
        var _a;
        this.inputManager.hide();
        this.threadPool.setState(NThreadPoolLstate.done);
        this.threadPool.unmarkStep();
        if (this.worldHelper != null) {
            this.worldHelper.spriteAnimations = [];
        }
        (_a = this.gngEreignisbehandlungHelper) === null || _a === void 0 ? void 0 : _a.detachEvents();
        this.gngEreignisbehandlungHelper = null;
        this.getTimerClass().stopTimer();
        if (this.worldHelper != null) {
            this.worldHelper.cacheAsBitmap();
        }
        setTimeout(() => {
            this.main.hideProgramPointerPosition();
            if (restart) {
                this.start();
            }
        }, 500);
    }
    start() {
        var _a, _b;
        (_b = (_a = this.main.getBottomDiv()) === null || _a === void 0 ? void 0 : _a.console) === null || _b === void 0 ? void 0 : _b.clearErrors();
        if (this.threadPool.state != NThreadPoolLstate.paused) {
            this.init();
            this.resetRuntime();
        }
        this.hideProgrampointerPosition();
        this.threadPool.setState(NThreadPoolLstate.running);
        this.getTimerClass().startTimer();
    }
    stepOut() {
        this.threadPool.stepOut(() => {
            this.pause();
        });
    }
    initGUI() {
        let that = this;
        let am = this.main.getActionManager();
        am.registerAction("interpreter.start", ['F4'], () => {
            if (am.isActive("interpreter.start")) {
                this.start();
            }
            else {
                this.pause();
            }
        }, "Programm starten", this.controlButtons.$buttonStart);
        am.registerAction("interpreter.pause", ['F4'], () => {
            if (am.isActive("interpreter.start")) {
                this.start();
            }
            else {
                this.pause();
            }
        }, "Pause", this.controlButtons.$buttonPause);
        am.registerAction("interpreter.stop", [], () => {
            this.stop(false);
        }, "Programm anhalten", this.controlButtons.$buttonStop);
        am.registerAction("interpreter.stepOver", ['F6'], () => {
            this.executeOneStep(false);
        }, "Einzelschritt (Step over)", this.controlButtons.$buttonStepOver);
        am.registerAction("interpreter.stepInto", ['F7'], () => {
            this.executeOneStep(true);
        }, "Einzelschritt (Step into)", this.controlButtons.$buttonStepInto);
        am.registerAction("interpreter.stepOut", [], () => {
            this.stepOut();
        }, "Step out", this.controlButtons.$buttonStepOut);
        am.registerAction("interpreter.restart", [], () => {
            this.stop(true);
        }, "Neu starten", this.controlButtons.$buttonRestart);
    }
    setState(oldState, state) {
        var _a;
        if (state == NThreadPoolLstate.done) {
            // TODO
            // this.closeAllWebsockets();
        }
        let am = this.main.getActionManager();
        for (let actionId of this.actions) {
            am.setActive("interpreter." + actionId, this.buttonActiveMatrix[actionId][state]);
        }
        let buttonStartActive = this.buttonActiveMatrix['start'][state];
        if (buttonStartActive) {
            this.controlButtons.$buttonStart.show();
            this.controlButtons.$buttonPause.hide();
        }
        else {
            this.controlButtons.$buttonStart.hide();
            this.controlButtons.$buttonPause.show();
        }
        let buttonStopActive = this.buttonActiveMatrix['stop'][state];
        if (state == NThreadPoolLstate.done) {
            if (this.worldHelper != null) {
                this.worldHelper.clearActorLists();
            }
            (_a = this.gngEreignisbehandlungHelper) === null || _a === void 0 ? void 0 : _a.detachEvents();
            this.gngEreignisbehandlungHelper = null;
        }
        if (oldState != NThreadPoolLstate.done && state == NThreadPoolLstate.done) {
            // TODO
            // this.debugger.disable();
            this.keyboardTool.unsubscribeAllListeners();
        }
        if ([NThreadPoolLstate.running, NThreadPoolLstate.paused].indexOf(oldState) < 0
            && state == NThreadPoolLstate.running) {
            // TODO
            //   this.debugger.enable();
        }
    }
    getStartableModule(moduleStore) {
        let cem;
        cem = this.main.getCurrentlyEditedModule();
        let currentlyEditedModuleIsClassOnly = false;
        // decide which module to start
        // first attempt: is currently edited Module startable?
        if (cem != null) {
            let currentlyEditedModule = moduleStore.findModuleByFile(cem.file);
            if (currentlyEditedModule != null) {
                currentlyEditedModuleIsClassOnly = !cem.hasErrors()
                    && !currentlyEditedModule.isStartable;
                if (currentlyEditedModule.isStartable) {
                    return currentlyEditedModule;
                }
            }
        }
        // second attempt: which module has been started last time?
        if (this.mainModule != null && currentlyEditedModuleIsClassOnly) {
            let lastMainModule = moduleStore.findModuleByFile(this.mainModule.file);
            if (lastMainModule != null && lastMainModule.isStartable) {
                return lastMainModule;
            }
        }
        // third attempt: pick first startable module of current workspace
        if (currentlyEditedModuleIsClassOnly) {
            for (let m of moduleStore.getModules(false)) {
                if (m.isStartable) {
                    return m;
                }
            }
        }
        return null;
    }
    resetRuntime() {
        var _a, _b, _c;
        this.printManager.clear();
        (_a = this.worldHelper) === null || _a === void 0 ? void 0 : _a.destroyWorld();
        (_b = this.processingHelper) === null || _b === void 0 ? void 0 : _b.destroyWorld();
        (_c = this.gngEreignisbehandlungHelper) === null || _c === void 0 ? void 0 : _c.detachEvents();
        this.gngEreignisbehandlungHelper = null;
    }
    getTimerClass() {
        let baseModule = this.main.getCurrentWorkspace().moduleStore.getModule("Base Module");
        return baseModule.typeStore.getType("Timer");
    }
    init() {
        var _a, _b, _c, _d, _e, _f;
        (_b = (_a = this.main.getBottomDiv()) === null || _a === void 0 ? void 0 : _a.console) === null || _b === void 0 ? void 0 : _b.clearErrors();
        let cem = this.main.getCurrentlyEditedModule();
        cem.getBreakpointPositionsFromEditor();
        (_d = (_c = this.main.getBottomDiv()) === null || _c === void 0 ? void 0 : _c.console) === null || _d === void 0 ? void 0 : _d.clearExceptions();
        /*
            As long as there is no startable new Version of current workspace we keep current compiled modules so
            that variables and objects defined/instantiated via console can be kept, too.
        */
        if (this.moduleStoreVersion != this.main.version && this.main.getCompiler().atLeastOneModuleIsStartable) {
            this.main.copyExecutableModuleStoreToInterpreter();
            (_f = (_e = this.main.getBottomDiv()) === null || _e === void 0 ? void 0 : _e.console) === null || _f === void 0 ? void 0 : _f.detachValues(); // detach values from console entries
        }
        let newMainModule = this.getStartableModule(this.moduleStore);
        if (newMainModule == null) {
            this.threadPool.setState(NThreadPoolLstate.not_initialized);
            return;
        }
        this.mainModule = newMainModule;
        this.threadPool.init(this.moduleStore, this.mainModule);
        this.threadPool.setState(NThreadPoolLstate.done);
    }
    hideProgrampointerPosition() {
        this.main.hideProgramPointerPosition();
    }
}
//# sourceMappingURL=data:application/json;base64,