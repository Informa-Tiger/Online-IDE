import { NThreadPoolLstate } from "./NThreadPool.js";
export class NLoadController {
    constructor(threadPool, interpreter) {
        this.threadPool = threadPool;
        this.interpreter = interpreter;
        this.maxLoadFactor = 0.7;
        this.lastTickTime = 0;
        this.setStepsPerSecond(100);
    }
    tick(deltaUntilNextTick) {
        let t0 = performance.now();
        let deltaTime = t0 - this.lastTickTime;
        if (deltaTime < this.timeBetweenStepsGoal)
            return;
        this.lastTickTime = t0;
        if (this.timeBetweenStepsGoal >= deltaUntilNextTick && this.threadPool.state == NThreadPoolLstate.running) {
            this.threadPool.run(1);
            if (this.stepsPerSecondGoal <= 12) {
                this.interpreter.showProgramPointer(this.threadPool.getNextStepPosition());
            }
            return;
        }
        let stepsPerTickGoal = this.stepsPerSecondGoal / 1000 * deltaUntilNextTick;
        let batch = Math.max(stepsPerTickGoal, 1000);
        let i = 0;
        while (i < stepsPerTickGoal &&
            (performance.now() - t0) / deltaUntilNextTick < this.maxLoadFactor &&
            this.threadPool.state == NThreadPoolLstate.running) {
            this.threadPool.run(batch);
            i += batch;
        }
    }
    setStepsPerSecond(value) {
        this.stepsPerSecondGoal = value;
        this.timeBetweenStepsGoal = 1000 / value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTkxvYWRDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NsaWVudC9uZXdjb21waWxlci9OTG9hZENvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFlLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFbEUsTUFBTSxPQUFPLGVBQWU7SUFTeEIsWUFBb0IsVUFBdUIsRUFBVSxXQUF5QjtRQUExRCxlQUFVLEdBQVYsVUFBVSxDQUFhO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQWM7UUFQdEUsa0JBQWEsR0FBVyxHQUFHLENBQUM7UUFFNUIsaUJBQVksR0FBVyxDQUFDLENBQUM7UUFNN0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxJQUFJLENBQUMsa0JBQTBCO1FBQzNCLElBQUksRUFBRSxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMzQixJQUFJLFNBQVMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUV2QyxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsb0JBQW9CO1lBQUUsT0FBTztRQUNsRCxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUV2QixJQUFJLElBQUksQ0FBQyxvQkFBb0IsSUFBSSxrQkFBa0IsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssSUFBSSxpQkFBaUIsQ0FBQyxPQUFPLEVBQUU7WUFDdkcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkIsSUFBRyxJQUFJLENBQUMsa0JBQWtCLElBQUksRUFBRSxFQUFDO2dCQUM3QixJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO2FBQzlFO1lBQ0QsT0FBTztTQUNWO1FBRUQsSUFBSSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxHQUFHLGtCQUFrQixDQUFDO1FBQzNFLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFN0MsSUFBSSxDQUFDLEdBQVcsQ0FBQyxDQUFDO1FBQ2xCLE9BQU8sQ0FBQyxHQUFHLGdCQUFnQjtZQUN2QixDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsYUFBYTtZQUNsRSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssSUFBSSxpQkFBaUIsQ0FBQyxPQUFPLEVBQUU7WUFFcEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDM0IsQ0FBQyxJQUFJLEtBQUssQ0FBQztTQUVkO0lBRUwsQ0FBQztJQUVELGlCQUFpQixDQUFDLEtBQWE7UUFDM0IsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUNoQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxHQUFHLEtBQUssQ0FBQztJQUM3QyxDQUFDO0NBSUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOSW50ZXJwcmV0ZXIgfSBmcm9tIFwiLi9OSW50ZXJwcmV0ZXIuanNcIjtcclxuaW1wb3J0IHsgTlRocmVhZFBvb2wsIE5UaHJlYWRQb29sTHN0YXRlIH0gZnJvbSBcIi4vTlRocmVhZFBvb2wuanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBOTG9hZENvbnRyb2xsZXIge1xyXG5cclxuICAgIHByaXZhdGUgbWF4TG9hZEZhY3RvcjogbnVtYmVyID0gMC43O1xyXG5cclxuICAgIHByaXZhdGUgbGFzdFRpY2tUaW1lOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIHByaXZhdGUgc3RlcHNQZXJTZWNvbmRHb2FsOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHRpbWVCZXR3ZWVuU3RlcHNHb2FsOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0aHJlYWRQb29sOiBOVGhyZWFkUG9vbCwgcHJpdmF0ZSBpbnRlcnByZXRlcjogTkludGVycHJldGVyKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGVwc1BlclNlY29uZCgxMDApO1xyXG4gICAgfVxyXG5cclxuICAgIHRpY2soZGVsdGFVbnRpbE5leHRUaWNrOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgdDAgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuICAgICAgICBsZXQgZGVsdGFUaW1lID0gdDAgLSB0aGlzLmxhc3RUaWNrVGltZTtcclxuXHJcbiAgICAgICAgaWYgKGRlbHRhVGltZSA8IHRoaXMudGltZUJldHdlZW5TdGVwc0dvYWwpIHJldHVybjtcclxuICAgICAgICB0aGlzLmxhc3RUaWNrVGltZSA9IHQwO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aW1lQmV0d2VlblN0ZXBzR29hbCA+PSBkZWx0YVVudGlsTmV4dFRpY2sgJiYgdGhpcy50aHJlYWRQb29sLnN0YXRlID09IE5UaHJlYWRQb29sTHN0YXRlLnJ1bm5pbmcpIHtcclxuICAgICAgICAgICAgdGhpcy50aHJlYWRQb29sLnJ1bigxKTtcclxuICAgICAgICAgICAgaWYodGhpcy5zdGVwc1BlclNlY29uZEdvYWwgPD0gMTIpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcnByZXRlci5zaG93UHJvZ3JhbVBvaW50ZXIodGhpcy50aHJlYWRQb29sLmdldE5leHRTdGVwUG9zaXRpb24oKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHN0ZXBzUGVyVGlja0dvYWwgPSB0aGlzLnN0ZXBzUGVyU2Vjb25kR29hbCAvIDEwMDAgKiBkZWx0YVVudGlsTmV4dFRpY2s7XHJcbiAgICAgICAgbGV0IGJhdGNoID0gTWF0aC5tYXgoc3RlcHNQZXJUaWNrR29hbCwgMTAwMCk7XHJcblxyXG4gICAgICAgIGxldCBpOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIHdoaWxlIChpIDwgc3RlcHNQZXJUaWNrR29hbCAmJlxyXG4gICAgICAgICAgICAocGVyZm9ybWFuY2Uubm93KCkgLSB0MCkgLyBkZWx0YVVudGlsTmV4dFRpY2sgPCB0aGlzLm1heExvYWRGYWN0b3IgJiZcclxuICAgICAgICAgICAgdGhpcy50aHJlYWRQb29sLnN0YXRlID09IE5UaHJlYWRQb29sTHN0YXRlLnJ1bm5pbmcpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudGhyZWFkUG9vbC5ydW4oYmF0Y2gpO1xyXG4gICAgICAgICAgICBpICs9IGJhdGNoO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHNldFN0ZXBzUGVyU2Vjb25kKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnN0ZXBzUGVyU2Vjb25kR29hbCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMudGltZUJldHdlZW5TdGVwc0dvYWwgPSAxMDAwIC8gdmFsdWU7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbn0iXX0=