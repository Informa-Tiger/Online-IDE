export class Type {
    constructor() {
        this.onlyFirstPass = false;
        this.usagePositions = new Map();
        this.documentation = "";
    }
    toTokenType() {
        return null;
    }
    ;
    clearUsagePositions() {
        this.usagePositions = new Map();
    }
}
export class PrimitiveType extends Type {
    constructor() {
        super(...arguments);
        this.initialValue = null;
        this.description = "";
        // public unboxFrom(value: Value, type: Type): Value {
        //     if ((type["unboxableAs"] || []).includes(this)){
        //         if (value.value != null) return {
        //             value: value.value,
        //             type: value.type
        //         };
        //         else {
        //             throw Error("null kann nicht in einen primitiven " + this.identifier + " umgewandelt werden.");
        //         }
        //     }
        //     return null;
        // }
    }
    equals(type) {
        return type == this;
    }
    getResultType(operation, secondOperandType) {
        let opTypeMap = this.operationTable[operation];
        if (opTypeMap == null) {
            return null; // Operation not possible
        }
        if (secondOperandType != null) {
            return opTypeMap[secondOperandType.identifier];
        }
        return opTypeMap["none"];
    }
    canCastTo(type) {
        return this.canCastToMap[type.identifier] != null;
    }
    getCastInformation(type) {
        return this.canCastToMap[type.identifier];
    }
    allowsNull() { return false; }
}
export class Attribute {
    constructor(name, type, updateValue, isStatic, visibility, isFinal, documentation) {
        this.onlyFirstPass = false;
        this.identifier = name;
        this.type = type;
        this.updateValue = updateValue;
        this.isStatic = isStatic;
        this.visibility = visibility;
        this.isFinal = isFinal;
        this.usagePositions = new Map();
        this.documentation = documentation;
    }
}
export class Method extends Type {
    constructor(name, parameterlist, returnType, invokeOrAST, isAbstract, isStatic, documentation, isConstructor = false) {
        super();
        this.onlyFirstPass = false;
        this.isConstructor = false;
        this.isVirtual = false; // true, if child class has method with same signature
        this.reserveStackForLocalVariables = 0;
        this.genericTypeMap = null;
        this.identifier = name;
        this.parameterlist = parameterlist;
        this.returnType = returnType;
        this.isAbstract = isAbstract;
        this.isStatic = isStatic;
        this.visibility = 0;
        this.documentation = documentation;
        this.isConstructor = isConstructor;
        if (invokeOrAST != null) {
            if (typeof invokeOrAST == "function") {
                this.invoke = invokeOrAST;
            }
            else {
                this.program = invokeOrAST;
                invokeOrAST.method = this;
            }
        }
        this.signature = name + parameterlist.id;
        for (let p of parameterlist.parameters) {
            if (p["isTypeVariable"] == true) {
                this.hasGenericTypes = true;
                break;
            }
        }
        this.hasGenericTypes = this.hasGenericTypes || (this.returnType != null && this.returnType["isTypeVariable"] == true);
    }
    implements(m) {
        if (this.identifier != m.identifier)
            return false;
        if (this.returnType == null || this.returnType.identifier == "void") {
            if (m.returnType != null && m.returnType.identifier != "void")
                return false;
        }
        else {
            if (m.returnType instanceof PrimitiveType) {
                if (m.returnType != this.returnType) {
                    return false;
                }
            }
            else if (!this.returnType.canCastTo(m.returnType)) {
                return false;
            }
        }
        if (this.parameterlist.parameters.length != m.parameterlist.parameters.length)
            return false;
        for (let i = 0; i < this.parameterlist.parameters.length; i++) {
            let myParameter = this.parameterlist.parameters[i];
            let mParameter = m.parameterlist.parameters[i];
            if (mParameter.type instanceof PrimitiveType) {
                if (mParameter.type != myParameter.type) {
                    return false;
                }
            }
            else if (!mParameter.type.canCastTo(myParameter.type))
                return false;
        }
        return true;
    }
    hasEllipsis() {
        if (this.parameterlist.parameters.length == 0)
            return false;
        return this.parameterlist.parameters[this.parameterlist.parameters.length - 1].isEllipsis;
    }
    getParameterType(index) {
        return this.parameterlist.parameters[index].type;
    }
    getParameter(index) {
        return this.parameterlist.parameters[index];
    }
    getReturnType() {
        return this.returnType;
    }
    getParameterCount() {
        return this.parameterlist.parameters.length;
    }
    getParameterList() {
        return this.parameterlist;
    }
    getSignatureWithReturnParameter() {
        if (this.returnType != null) {
            return this.returnType.identifier + " " + this.signature;
        }
        else {
            return "void " + this.signature;
        }
    }
    getCompletionLabel() {
        let label = "";
        if (this.returnType != null && this.returnType.identifier != "void") {
            label += getTypeIdentifier(this.returnType) + " ";
        }
        label += this.identifier + "(";
        let parameters = this.parameterlist.parameters;
        for (let i = 0; i < parameters.length; i++) {
            let p = parameters[i];
            if (p.isEllipsis) {
                let arrayType = p.type;
                label += getTypeIdentifier(arrayType.arrayOfType) + "... " + p.identifier;
            }
            else {
                label += getTypeIdentifier(p.type) + " " + p.identifier;
            }
            if (i < parameters.length - 1) {
                label += ", ";
            }
        }
        label += ")";
        return label;
    }
    getCompletionSnippet(leftBracketAlreadyThere) {
        if (leftBracketAlreadyThere)
            return this.identifier + "($0";
        let snippet = "";
        snippet += this.identifier + "(";
        let isVoidReturn = this.returnType == null || this.returnType.identifier == "void";
        let isVoidReturnDelta = isVoidReturn ? 1 : 0;
        let parameters = this.parameterlist.parameters;
        for (let i = 0; i < parameters.length; i++) {
            let p = parameters[i];
            snippet += "${" + ((i + 1) % (parameters.length + isVoidReturnDelta)) + ":" + p.identifier + "}";
            if (i < parameters.length - 1) {
                snippet += ", ";
            }
        }
        snippet += ")";
        if (this.returnType == null || this.returnType.identifier == "void") {
            snippet += ";$0";
        }
        return snippet;
    }
    debugOutput(value) {
        return "";
    }
    equals(type) {
        return type == this;
    }
    getResultType(operation, secondOperandType) {
        return null;
    }
    compute(operation, firstOperand, secondOperand) {
        return null;
    }
    canCastTo(type) {
        return false;
    }
    castTo(value, type) { return value; }
}
export class Parameterlist {
    constructor(parameters) {
        this.parameters = parameters;
        this.computeId();
    }
    computeId() {
        this.id = "(";
        let i = 0;
        while (i < this.parameters.length) {
            this.id += this.parameters[i].type.identifier;
            if (i < this.parameters.length - 1) {
                this.id += ", ";
            }
            i++;
        }
        this.id += ")";
    }
}
export function getTypeIdentifier(type) {
    var _a, _b;
    if (type["typeVariables"]) {
        if (type["typeVariables"].length > 0) {
            let s = (type["isTypeVariable"] ? (type.identifier + " extends " + ((_a = type["isGenericVariantFrom"]) === null || _a === void 0 ? void 0 : _a.identifier)) : type.identifier)
                + "<";
            s += type["typeVariables"].map(tv => getTypeIdentifier(tv.type)).join(", ");
            return s + ">";
        }
    }
    return type["isTypeVariable"] ? (type.identifier + " extends " + ((_b = type["isGenericVariantFrom"]) === null || _b === void 0 ? void 0 : _b.identifier)) : type.identifier;
}
//# sourceMappingURL=data:application/json;base64,