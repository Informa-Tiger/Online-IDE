import { UnboxableKlass, Visibility } from "../Class.js";
import { Method, Parameterlist, Attribute } from "../Types.js";
import { intPrimitiveType, stringPrimitiveType, doublePrimitiveType, floatPrimitiveType, booleanPrimitiveType } from "../PrimitiveTypes.js";
import { RuntimeObject } from "../../../interpreter/RuntimeObject.js";
import { floatToString } from "../../../tools/StringTools.js";
export class FloatClass extends UnboxableKlass {
    constructor(baseClass) {
        super("Float", null, "Wrapper-Klasse, um float-Werte in Collections verenden zu können.");
        this.baseClass = baseClass;
        this.addAttribute(new Attribute("MAX_VALUE", floatPrimitiveType, (value) => { value.value = Number.MAX_VALUE; }, true, Visibility.public, true, "Der größte Wert, den eine Variable vom Typ float annehmen kann"));
        this.addAttribute(new Attribute("MIN_VALUE", floatPrimitiveType, (value) => { value.value = Number.MIN_VALUE; }, true, Visibility.public, true, "Der kleinste Wert, den eine Variable vom Typ float annehmen kann"));
        this.addAttribute(new Attribute("NaN_VALUE", floatPrimitiveType, (value) => { value.value = Number.NaN; }, true, Visibility.public, true, "Der \"Not a Number\"-Wert vom Typ float"));
        this.addAttribute(new Attribute("NEGATIVE_INFINITY", floatPrimitiveType, (value) => { value.value = Number.NEGATIVE_INFINITY; }, true, Visibility.public, true, "Der \"negative infinity\"-Wert vom Typ float"));
        this.addAttribute(new Attribute("POSITIVE_INFINITY", floatPrimitiveType, (value) => { value.value = Number.POSITIVE_INFINITY; }, true, Visibility.public, true, "Der \"positive infinity\"-Wert vom Typ float"));
        this.staticClass.setupAttributeIndicesRecursive();
        this.staticClass.classObject = new RuntimeObject(this.staticClass);
    }
    canCastTo(type) {
        return this.unboxableAs.indexOf(type) >= 0 || super.canCastTo(type);
    }
    init() {
        this.unboxableAs = [floatPrimitiveType, doublePrimitiveType];
        this.addMethod(new Method("Float", new Parameterlist([
            { identifier: "double-value", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            parameters[0].value = parameters[1].value;
        }, false, false, "Instanziert ein neues Float-Objekt", true));
        this.addMethod(new Method("Float", new Parameterlist([
            { identifier: "int-value", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            parameters[0].value = parameters[1].value;
        }, false, false, "Instanziert ein neues Float-Objekt", true));
        this.addMethod(new Method("Float", new Parameterlist([
            { identifier: "text", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            parameters[0].value = Number.parseFloat(parameters[1].value);
        }, false, false, "Instanziert ein neues Float-Objekt, indem die übergebene Zeichenkette in einen float-Wert umgewandelt wird.", true));
        this.addMethod(new Method("doubleValue", new Parameterlist([]), doublePrimitiveType, (parameters) => { return parameters[0].value; }, false, false, "Wandelt das Float-Objekt in einen double-Wert um."));
        this.addMethod(new Method("floatValue", new Parameterlist([]), floatPrimitiveType, (parameters) => { return parameters[0].value; }, false, false, "Wandelt das Float-Objekt in einen float-Wert um."));
        this.addMethod(new Method("intValue", new Parameterlist([]), intPrimitiveType, (parameters) => { return Math.trunc(parameters[0].value); }, false, false, "Wandelt das Float-Objekt durch Abrunden in einen int-Wert um."));
        this.addMethod(new Method("compareTo", new Parameterlist([
            { identifier: "anotherFloat", type: this, declaration: null, usagePositions: null, isFinal: true }
        ]), intPrimitiveType, (parameters) => {
            let v0 = parameters[0].value;
            let v1 = parameters[1].value;
            if (v0 > v1)
                return 1;
            if (v0 < v1)
                return -1;
            return 0;
        }, false, false, "Ist der Wert größer als der übergebene Wert, so wird +1 zurückgegeben. Ist er kleiner, so wird -1 zurückgegeben. Sind die Werte gleich, so wird 0 zurückgegeben."));
        this.addMethod(new Method("equals", new Parameterlist([
            { identifier: "anotherFloat", type: this, declaration: null, usagePositions: null, isFinal: true }
        ]), booleanPrimitiveType, (parameters) => {
            return parameters[0].value == parameters[1].value;
        }, false, false, "Gibt genau dann true zurück, wenn der Wert gleich dem übergebenen Wert ist."));
        this.addMethod(new Method("toString", new Parameterlist([]), stringPrimitiveType, (parameters) => {
            return floatToString(parameters[0].value);
        }, false, false, "Gibt den Wert des Objekts als String-Wert zurück."));
        this.addMethod(new Method("hashCode", new Parameterlist([]), intPrimitiveType, (parameters) => {
            return Math.trunc(parameters[0].value);
        }, false, false, "Gibt den hashCode des Objekts zurück."));
        this.addMethod(new Method("parseFloat", new Parameterlist([
            { identifier: "s", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), floatPrimitiveType, (parameters) => {
            return Number.parseFloat(parameters[1].value);
        }, false, true, "Wandelt die Zeichenkette in einen float-Wert um"));
        this.addMethod(new Method("toString", new Parameterlist([
            { identifier: "f", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), stringPrimitiveType, (parameters) => {
            return "" + parameters[1].value;
        }, false, true, "Gibt die übergebene Zahl als String-Wert zurück."));
        this.addMethod(new Method("valueOf", new Parameterlist([
            { identifier: "f", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), this, (parameters) => {
            return parameters[1].value;
        }, false, true, "Gibt die übergebene Zahl als Float-Objekt zurück."));
        this.addMethod(new Method("valueOf", new Parameterlist([
            { identifier: "s", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), this, (parameters) => {
            return Number.parseFloat(parameters[1].value);
        }, false, true, "Interpretiert die übergebene Zeichenkette als Dezimalzahl und gib sie als Float-Objekt zurück."));
        this.addMethod(new Method("isNaN", new Parameterlist([
            { identifier: "f", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), booleanPrimitiveType, (parameters) => {
            return Number.isNaN(parameters[1].value);
        }, false, true, "Gibt genau dann true zurück, falls die übergebene float-Zahl NaN (not a Number) ist."));
        this.addMethod(new Method("isNaN", new Parameterlist([]), booleanPrimitiveType, (parameters) => {
            return Number.isNaN(parameters[0].value);
        }, false, false, "Gibt genau dann true zurück, falls das Objekt NaN (not a Number) ist."));
        this.addMethod(new Method("isInfinite", new Parameterlist([
            { identifier: "f", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), booleanPrimitiveType, (parameters) => {
            return parameters[1].value == Infinity;
        }, false, true, "Gibt genau dann true zurück, falls die übergebene float-Zahl INFINTITY ist."));
        this.addMethod(new Method("isInfinite", new Parameterlist([]), booleanPrimitiveType, (parameters) => {
            return parameters[0].value == Infinity;
        }, false, false, "Gibt genau dann true zurück, falls das Objekt INFINITY ist."));
    }
    debugOutput(value) {
        return "" + value.value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmxvYXRDbGFzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jbGllbnQvY29tcGlsZXIvdHlwZXMvYm94ZWRUeXBlcy9GbG9hdENsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBUyxjQUFjLEVBQUUsVUFBVSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBOEIsTUFBTSxhQUFhLENBQUM7QUFDM0YsT0FBTyxFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLGtCQUFrQixFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUksT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUc5RCxNQUFNLE9BQU8sVUFBVyxTQUFRLGNBQWM7SUFFMUMsWUFBWSxTQUFnQjtRQUN4QixLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxtRUFBbUUsQ0FBQyxDQUFDO1FBQzFGLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBRTNCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxTQUFTLENBQUMsV0FBVyxFQUFFLGtCQUFrQixFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLGdFQUFnRSxDQUFDLENBQUMsQ0FBQztRQUNsTixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksU0FBUyxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssR0FBRyxNQUFN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QUFXLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtTQUN4RyxDQUFDLEVBQUUsb0JBQW9CLEVBQ3BCLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDWCxPQUFPLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksUUFBUSxDQUFDO1FBQzNDLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLDZFQUE2RSxDQUFDLENBQUMsQ0FBQztRQUVwRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxJQUFJLGFBQWEsQ0FBQyxFQUN6RCxDQUFDLEVBQUUsb0JBQW9CLEVBQ3BCLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDWCxPQUFPLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksUUFBUSxDQUFDO1FBQzNDLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLDZEQUE2RCxDQUFDLENBQUMsQ0FBQztJQUV6RixDQUFDO0lBRU0sV0FBVyxDQUFDLEtBQVk7UUFDM0IsT0FBTyxFQUFFLEdBQVcsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUNwQyxDQUFDO0NBR0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLbGFzcywgVW5ib3hhYmxlS2xhc3MsIFZpc2liaWxpdHkgfSBmcm9tIFwiLi4vQ2xhc3MuanNcIjtcclxuaW1wb3J0IHsgTWV0aG9kLCBQYXJhbWV0ZXJsaXN0LCBBdHRyaWJ1dGUsIFZhbHVlLCBUeXBlLCBQcmltaXRpdmVUeXBlIH0gZnJvbSBcIi4uL1R5cGVzLmpzXCI7XHJcbmltcG9ydCB7IGludFByaW1pdGl2ZVR5cGUsIHN0cmluZ1ByaW1pdGl2ZVR5cGUsIGRvdWJsZVByaW1pdGl2ZVR5cGUsIGZsb2F0UHJpbWl0aXZlVHlwZSwgYm9vbGVhblByaW1pdGl2ZVR5cGUgfSBmcm9tIFwiLi4vUHJpbWl0aXZlVHlwZXMuanNcIjtcclxuaW1wb3J0IHsgUnVudGltZU9iamVjdCB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcnByZXRlci9SdW50aW1lT2JqZWN0LmpzXCI7XHJcbmltcG9ydCB7IGZsb2F0VG9TdHJpbmcgfSBmcm9tIFwiLi4vLi4vLi4vdG9vbHMvU3RyaW5nVG9vbHMuanNcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRmxvYXRDbGFzcyBleHRlbmRzIFVuYm94YWJsZUtsYXNzIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihiYXNlQ2xhc3M6IEtsYXNzKSB7XHJcbiAgICAgICAgc3VwZXIoXCJGbG9hdFwiLCBudWxsLCBcIldyYXBwZXItS2xhc3NlLCB1bSBmbG9hdC1XZXJ0ZSBpbiBDb2xsZWN0aW9ucyB2ZXJlbmRlbiB6dSBrw7ZubmVuLlwiKTtcclxuICAgICAgICB0aGlzLmJhc2VDbGFzcyA9IGJhc2VDbGFzcztcclxuXHJcbiAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGUobmV3IEF0dHJpYnV0ZShcIk1BWF9WQUxVRVwiLCBmbG9hdFByaW1pdGl2ZVR5cGUsICh2YWx1ZSkgPT4geyB2YWx1ZS52YWx1ZSA9IE51bWJlci5NQVhfVkFMVUUgfSwgdHJ1ZSwgVmlzaWJpbGl0eS5wdWJsaWMsIHRydWUsIFwiRGVyIGdyw7bDn3RlIFdlcnQsIGRlbiBlaW5lIFZhcmlhYmxlIHZvbSBUeXAgZmxvYXQgYW5uZWhtZW4ga2FublwiKSk7XHJcbiAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGUobmV3IEF0dHJpYnV0ZShcIk1JTl9WQUxVRVwiLCBmbG9hdFByaW1pdGl2ZVR5cGUsICh2YWx1ZSkgPT4geyB2YWx1ZS52YWx1ZSA9IE51bWJlci5NSU5fVkFMVUUgfSwgdHJ1ZSwgVmlzaWJpbGl0eS5wdWJsaWMsIHRydWUsIFwiRGVyIGtsZWluc3RlIFdlcnQsIGRlbiBlaW5lIFZhcmlhYmxlIHZvbSBUeXAgZmxvYXQgYW5uZWhtZW4ga2FublwiKSk7XHJcbiAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGUobmV3IEF0dHJpYnV0ZShcIk5hTl9WQUxVRVwiLCBmbG9hdFByaW1pdGl2ZVR5cGUsICh2YWx1ZSkgPT4geyB2YWx1ZS52YWx1ZSA9IE51bWJlci5OYU4gfSwgdHJ1ZSwgVmlzaWJpbGl0eS5wdWJsaWMsIHRydWUsIFwiRGVyIFxcXCJOb3QgYSBOdW1iZXJcXFwiLVdlcnQgdm9tIFR5cCBmbG9hdFwiKSk7XHJcbiAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGUobmV3IEF0dHJpYnV0ZShcIk5FR0FUSVZFX0lORklOSVRZXCIsIGZsb2F0UHJpbWl0aXZlVHlwZSwgKHZhbHVlKSA9PiB7IHZhbHVlLnZhbHVlID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZIH0sIHRydWUsIFZpc2liaWxpdHkucHVibGljLCB0cnVlLCBcIkRlciBcXFwibmVnYXRpdmUgaW5maW5pdHlcXFwiLVdlcnQgdm9tIFR5cCBmbG9hdFwiKSk7XHJcbiAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGUobmV3IEF0dHJpYnV0ZShcIlBPU0lUSVZFX0lORklOSVRZXCIsIGZsb2F0UHJpbWl0aXZlVHlwZSwgKHZhbHVlKSA9PiB7IHZhbHVlLnZhbHVlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIH0sIHRydWUsIFZpc2liaWxpdHkucHVibGljLCB0cnVlLCBcIkRlciBcXFwicG9zaXRpdmUgaW5maW5pdHlcXFwiLVdlcnQgdm9tIFR5cCBmbG9hdFwiKSk7XHJcbiAgICAgICAgdGhpcy5zdGF0aWNDbGFzcy5zZXR1cEF0dHJpYnV0ZUluZGljZXNSZWN1cnNpdmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0aWNDbGFzcy5jbGFzc09iamVjdCA9IG5ldyBSdW50aW1lT2JqZWN0KHRoaXMuc3RhdGljQ2xhc3MpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBjYW5DYXN0VG8odHlwZTogVHlwZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnVuYm94YWJsZUFzLmluZGV4T2YodHlwZSkgPj0gMCB8fCBzdXBlci5jYW5DYXN0VG8odHlwZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdCgpIHtcclxuXHJcbiAgICAgICAgdGhpcy51bmJveGFibGVBcyA9IFtmbG9hdFByaW1pdGl2ZVR5cGUsIGRvdWJsZVByaW1pdGl2ZVR5cGVdO1xyXG5cclxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiRmxvYXRcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xyXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwiZG91YmxlLXZhbHVlXCIsIHR5cGU6IGRvdWJsZVByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9XHJcbiAgICAgICAgXSksIG51bGwsXHJcbiAgICAgICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyc1swXS52YWx1ZSA9IHBhcmFtZXRlcnNbMV0udmFsdWU7XHJcblxyXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsIFwiSW5zdGFuemllcnQgZWluIG5ldWVzIEZsb2F0LU9iamVrdFwiLCB0cnVlKSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJGbG9hdFwiLCBuZXcgUGFyYW1ldGVybGlzdChbXHJcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJpbnQtdmFsdWVcIiwgdHlwZTogaW50UHJpbWl0aXZlVHlwZSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH1cclxuICAgICAgICBdKSwgbnVsbCxcclxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzWzBdLnZhbHVlID0gcGFyYW1ldGVyc1sxXS52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSwgXCJJbnN0YW56aWVydCBlaW4gbmV1ZXMgRmxvYXQtT2JqZWt0XCIsIHRydWUpKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIkZsb2F0XCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcclxuICAgICAgICAgICAgeyBpZGVudGlmaWVyOiBcInRleHRcIiwgdHlwZTogc3RyaW5nUHJpbWl0aXZlVHlwZSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH1cclxuICAgICAgICBdKSwgbnVsbCxcclxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzWzBdLnZhbHVlID0gTnVtYmVyLnBhcnNlRmxvYXQocGFyYW1ldGVyc1sxXS52YWx1ZSk7XHJcblxyXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsIFwiSW5zdGFuemllcnQgZWluIG5ldWVzIEZsb2F0LU9iamVrdCwgaW5kZW0gZGllIMO8YmVyZ2ViZW5lIFplaWNoZW5rZXR0ZSBpbiBlaW5lbiBmbG9hdC1XZXJ0IHVtZ2V3YW5kZWx0IHdpcmQuXCIsIHRydWUpKTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJkb3VibGVWYWx1ZVwiLCBuZXcgUGFyYW1ldGVybGlzdChbXSksIGRvdWJsZVByaW1pdGl2ZVR5cGUsXHJcbiAgICAgICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7IHJldHVybiBwYXJhbWV0ZXJzWzBdLnZhbHVlOyB9LCBmYWxzZSwgZmFsc2UsIFwiV2FuZGVsdCBkYXMgRmxvYXQtT2JqZWt0IGluIGVpbmVuIGRvdWJsZS1XZXJ0IHVtLlwiKSk7XHJcbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcImZsb2F0VmFsdWVcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW10pLCBmbG9hdFByaW1pdGl2ZVR5cGUsXHJcbiAgICAgICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7IHJldHVybiBwYXJhbWV0ZXJzWzBdLnZhbHVlOyB9LCBmYWxzZSwgZmFsc2UsIFwiV2FuZGVsdCBkYXMgRmxvYXQtT2JqZWt0IGluIGVpbmVuIGZsb2F0LVdlcnQgdW0uXCIpKTtcclxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiaW50VmFsdWVcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW10pLCBpbnRQcmltaXRpdmVUeXBlLFxyXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4geyByZXR1cm4gTWF0aC50cnVuYyhwYXJhbWV0ZXJzWzBdLnZhbHVlKTsgfSwgZmFsc2UsIGZhbHNlLCBcIldhbmRlbHQgZGFzIEZsb2F0LU9iamVrdCBkdXJjaCBBYnJ1bmRlbiBpbiBlaW5lbiBpbnQtV2VydCB1bS5cIikpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiY29tcGFyZVRvXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcclxuICAgICAgICAgICAgeyBpZGVudGlmaWVyOiBcImFub3RoZXJGbG9hdFwiLCB0eXBlOiB0aGlzLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfVxyXG4gICAgICAgIF0pLCBpbnRQcmltaXRpdmVUeXBlLFxyXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHYwID0gcGFyYW1ldGVyc1swXS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGxldCB2MSA9IHBhcmFtZXRlcnNbMV0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodjAgPiB2MSkgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICBpZiAodjAgPCB2MSkgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSwgXCJJc3QgZGVyIFdlcnQgZ3LDtsOfZXIgYWxzIGRlciDDvGJlcmdlYmVuZSBXZXJ0LCBzbyB3aXJkICsxIHp1csO8Y2tnZWdlYmVuLiBJc3QgZXIga2xlaW5lciwgc28gd2lyZCAtMSB6dXLDvGNrZ2VnZWJlbi4gU2luZCBkaWUgV2VydGUgZ2xlaWNoLCBzbyB3aXJkIDAgenVyw7xja2dlZ2ViZW4uXCIpKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcImVxdWFsc1wiLCBuZXcgUGFyYW1ldGVybGlzdChbXHJcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJhbm90aGVyRmxvYXRcIiwgdHlwZTogdGhpcywgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH1cclxuICAgICAgICBdKSwgYm9vbGVhblByaW1pdGl2ZVR5cGUsXHJcbiAgICAgICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW1ldGVyc1swXS52YWx1ZSA9PSBwYXJhbWV0ZXJzWzFdLnZhbHVlO1xyXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsIFwiR2lidCBnZW5hdSBkYW5uIHRydWUgenVyw7xjaywgd2VubiBkZXIgV2VydCBnbGVpY2ggZGVtIMO8YmVyZ2ViZW5lbiBXZXJ0IGlzdC5cIikpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwidG9TdHJpbmdcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xyXG4gICAgICAgIF0pLCBzdHJpbmdQcmltaXRpdmVUeXBlLFxyXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZsb2F0VG9TdHJpbmcocGFyYW1ldGVyc1swXS52YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSwgXCJHaWJ0IGRlbiBXZXJ0IGRlcyBPYmpla3RzIGFscyBTdHJpbmctV2VydCB6dXLDvGNrLlwiKSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJoYXNoQ29kZVwiLCBuZXcgUGFyYW1ldGVybGlzdChbXHJcbiAgICAgICAgXSksIGludFByaW1pdGl2ZVR5cGUsXHJcbiAgICAgICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC50cnVuYyhwYXJhbWV0ZXJzWzBdLnZhbHVlKTtcclxuICAgICAgICAgICAgfSwgZmFsc2UsIGZhbHNlLCBcIkdpYnQgZGVuIGhhc2hDb2RlIGRlcyBPYmpla3RzIHp1csO8Y2suXCIpKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcInBhcnNlRmxvYXRcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xyXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwic1wiLCB0eXBlOiBzdHJpbmdQcmltaXRpdmVUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfVxyXG4gICAgICAgIF0pLCBmbG9hdFByaW1pdGl2ZVR5cGUsXHJcbiAgICAgICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyLnBhcnNlRmxvYXQocGFyYW1ldGVyc1sxXS52YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sIGZhbHNlLCB0cnVlLCBcIldhbmRlbHQgZGllIFplaWNoZW5rZXR0ZSBpbiBlaW5lbiBmbG9hdC1XZXJ0IHVtXCIpKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcInRvU3RyaW5nXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcclxuICAgICAgICAgICAgeyBpZGVudGlmaWVyOiBcImZcIiwgdHlwZTogZmxvYXRQcmltaXRpdmVUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfVxyXG4gICAgICAgIF0pLCBzdHJpbmdQcmltaXRpdmVUeXBlLFxyXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyBwYXJhbWV0ZXJzWzFdLnZhbHVlO1xyXG4gICAgICAgICAgICB9LCBmYWxzZSwgdHJ1ZSwgXCJHaWJ0IGRpZSDDvGJlcmdlYmVuZSBaYWhsIGFscyBTdHJpbmctV2VydCB6dXLDvGNrLlwiKSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJ2YWx1ZU9mXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcclxuICAgICAgICAgICAgeyBpZGVudGlmaWVyOiBcImZcIiwgdHlwZTogZmxvYXRQcmltaXRpdmVUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfSxcclxuICAgICAgICBdKSwgdGhpcyxcclxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbWV0ZXJzWzFdLnZhbHVlO1xyXG4gICAgICAgICAgICB9LCBmYWxzZSwgdHJ1ZSwgXCJHaWJ0IGRpZSDDvGJlcmdlYmVuZSBaYWhsIGFscyBGbG9hdC1PYmpla3QgenVyw7xjay5cIikpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwidmFsdWVPZlwiLCBuZXcgUGFyYW1ldGVybGlzdChbXHJcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJzXCIsIHR5cGU6IHN0cmluZ1ByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9LFxyXG4gICAgICAgIF0pLCB0aGlzLFxyXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlci5wYXJzZUZsb2F0KHBhcmFtZXRlcnNbMV0udmFsdWUpO1xyXG4gICAgICAgICAgICB9LCBmYWxzZSwgdHJ1ZSwgXCJJbnRlcnByZXRpZXJ0IGRpZSDDvGJlcmdlYmVuZSBaZWljaGVua2V0dGUgYWxzIERlemltYWx6YWhsIHVuZCBnaWIgc2llIGFscyBGbG9hdC1PYmpla3QgenVyw7xjay5cIikpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiaXNOYU5cIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xyXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwiZlwiLCB0eXBlOiBmbG9hdFByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9LFxyXG4gICAgICAgIF0pLCBib29sZWFuUHJpbWl0aXZlVHlwZSxcclxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIuaXNOYU4ocGFyYW1ldGVyc1sxXS52YWx1ZSlcclxuICAgICAgICAgICAgfSwgZmFsc2UsIHRydWUsIFwiR2lidCBnZW5hdSBkYW5uIHRydWUgenVyw7xjaywgZmFsbHMgZGllIMO8YmVyZ2ViZW5lIGZsb2F0LVphaGwgTmFOIChub3QgYSBOdW1iZXIpIGlzdC5cIikpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiaXNOYU5cIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xyXG4gICAgICAgIF0pLCBib29sZWFuUHJpbWl0aXZlVHlwZSxcclxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIuaXNOYU4ocGFyYW1ldGVyc1swXS52YWx1ZSlcclxuICAgICAgICAgICAgfSwgZmFsc2UsIGZhbHNlLCBcIkdpYnQgZ2VuYXUgZGFubiB0cnVlIHp1csO8Y2ssIGZhbGxzIGRhcyBPYmpla3QgTmFOIChub3QgYSBOdW1iZXIpIGlzdC5cIikpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiaXNJbmZpbml0ZVwiLCBuZXcgUGFyYW1ldGVybGlzdChbXHJcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJmXCIsIHR5cGU6IGZsb2F0UHJpbWl0aXZlVHlwZSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH0sXHJcbiAgICAgICAgXSksIGJvb2xlYW5QcmltaXRpdmVUeXBlLFxyXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtZXRlcnNbMV0udmFsdWUgPT0gSW5maW5pdHk7XHJcbiAgICAgICAgICAgIH0sIGZhbHNlLCB0cnVlLCBcIkdpYnQgZ2VuYXUgZGFubiB0cnVlIHp1csO8Y2ssIGZhbGxzIGRpZSDDvGJlcmdlYmVuZSBmbG9hdC1aYWhsIElORklOVElUWSBpc3QuXCIpKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcImlzSW5maW5pdGVcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xyXG4gICAgICAgIF0pLCBib29sZWFuUHJpbWl0aXZlVHlwZSxcclxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbWV0ZXJzWzBdLnZhbHVlID09IEluZmluaXR5O1xyXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsIFwiR2lidCBnZW5hdSBkYW5uIHRydWUgenVyw7xjaywgZmFsbHMgZGFzIE9iamVrdCBJTkZJTklUWSBpc3QuXCIpKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlYnVnT3V0cHV0KHZhbHVlOiBWYWx1ZSk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFwiXCIgKyA8bnVtYmVyPnZhbHVlLnZhbHVlO1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuIl19