{"version":3,"file":"javaOnline-apiDoc.js","mappings":"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","sources":["webpack:///../src/client/compiler/lexer/Token.ts","webpack:///../src/client/compiler/types/Class.ts","webpack:///../src/client/compiler/types/Types.ts","webpack:///../src/client/interpreter/RuntimeObject.ts","webpack:///../src/client/compiler/parser/LabelManager.ts","webpack:///../src/client/compiler/types/Array.ts","webpack:///../src/client/tools/StringTools.ts","webpack:///../src/client/compiler/types/PrimitiveTypes.ts","webpack:///../src/client/compiler/lexer/Lexer.ts","webpack:///../src/client/compiler/types/ObjectClass.ts","webpack:///../src/client/compiler/types/boxedTypes/IntegerClass.ts","webpack:///../src/client/compiler/types/boxedTypes/LongClass.ts","webpack:///../src/client/compiler/types/boxedTypes/FloatClass.ts","webpack:///../src/client/compiler/types/boxedTypes/DoubleClass.ts","webpack:///../src/client/compiler/types/boxedTypes/CharacterClass.ts","webpack:///../src/client/compiler/types/boxedTypes/BooleanClass.ts","webpack:///../src/client/runtimelibrary/collections/ListIteratorImpl.ts","webpack:///../src/client/runtimelibrary/collections/ArrayList.ts","webpack:///../src/client/compiler/types/TypeHelper.ts","webpack:///../src/client/runtimelibrary/collections/Collection.ts","webpack:///../src/client/runtimelibrary/collections/Iterable.ts","webpack:///../src/client/runtimelibrary/collections/Iterator.ts","webpack:///../src/client/runtimelibrary/collections/List.ts","webpack:///../src/client/runtimelibrary/collections/Stack.ts","webpack:///../src/client/runtimelibrary/collections/Vector.ts","webpack:///../src/client/runtimelibrary/collections/Set.ts","webpack:///../src/client/runtimelibrary/collections/SetIteratorImpl.ts","webpack:///../src/client/runtimelibrary/collections/SetHelper.ts","webpack:///../src/client/runtimelibrary/collections/HashSet.ts","webpack:///../src/client/runtimelibrary/collections/LinkedHashSet.ts","webpack:///../src/client/runtimelibrary/collections/Queue.ts","webpack:///../src/client/runtimelibrary/collections/Deque.ts","webpack:///../src/client/runtimelibrary/collections/LinkedList.ts","webpack:///../src/client/runtimelibrary/Console.ts","webpack:///../src/client/compiler/types/Enum.ts","webpack:///../src/client/communication/AjaxHelper.ts","webpack:///../src/client/compiler/lexer/ColorLexer.ts","webpack:///../src/client/runtimelibrary/graphics/ColorHelper.ts","webpack:///../src/client/compiler/parser/SymbolTable.ts","webpack:///../src/client/compiler/parser/CodeGenerator.ts","webpack:///../src/client/compiler/parser/Parser.ts","webpack:///../src/client/compiler/types/TypeTools.ts","webpack:///../src/client/compiler/parser/TypeResolver.ts","webpack:///../src/client/tools/SoundTools.ts","webpack:///../src/client/compiler/types/DeclarationHelper.ts","webpack:///../src/client/main/gui/MyHoverProvider.ts","webpack:///../src/client/tools/HtmlTools.ts","webpack:///../src/client/main/gui/diagrams/ZoomControl.ts","webpack:///../src/client/main/gui/diagrams/Diagram.ts","webpack:///../src/client/main/gui/diagrams/DiagramElement.ts","webpack:///../src/client/compiler/Compiler.ts","webpack:///../src/client/interpreter/Interpreter.ts","webpack:///../src/client/tools/ConvexHull.ts","webpack:///../src/client/main/gui/diagrams/classdiagram/ArrowHead.ts","webpack:///../src/client/main/gui/diagrams/classdiagram/DiagramArrow.ts","webpack:///../src/client/main/gui/Formatter.ts","webpack:///../src/client/runtimelibrary/graphics/FilledShapeDefaults.ts","webpack:///../src/client/runtimelibrary/graphics/World.ts","webpack:///../src/client/runtimelibrary/graphics/Actor.ts","webpack:///../src/client/runtimelibrary/graphics/Alignment.ts","webpack:///../src/client/tools/MatheTools.ts","webpack:///../src/client/runtimelibrary/graphics/Shape.ts","webpack:///../src/client/runtimelibrary/graphics/Bitmap.ts","webpack:///../src/client/runtimelibrary/graphics/FilledShape.ts","webpack:///../src/client/runtimelibrary/graphics/Circle.ts","webpack:///../src/client/runtimelibrary/graphics/Sector.ts","webpack:///../src/client/runtimelibrary/graphics/Arc.ts","webpack:///../src/client/runtimelibrary/graphics/Color.ts","webpack:///../src/client/runtimelibrary/graphics/Ellipse.ts","webpack:///../src/client/runtimelibrary/graphics/Group.ts","webpack:///../src/client/runtimelibrary/graphics/Key.ts","webpack:///../src/client/runtimelibrary/graphics/Polygon.ts","webpack:///../src/client/runtimelibrary/graphics/Rectangle.ts","webpack:///../src/client/runtimelibrary/graphics/RepeatType.ts","webpack:///../src/client/runtimelibrary/graphics/RoundedRectangle.ts","webpack:///../src/client/runtimelibrary/graphics/ScaleMode.ts","webpack:///../src/client/runtimelibrary/graphics/Sound.ts","webpack:///../src/client/runtimelibrary/graphics/PolygonStore.ts","webpack:///../src/client/runtimelibrary/graphics/Sprite.ts","webpack:///../src/client/runtimelibrary/graphics/SpriteLibraryEnum.ts","webpack:///../src/client/runtimelibrary/graphics/Text.ts","webpack:///../src/client/runtimelibrary/Input.ts","webpack:///../src/client/runtimelibrary/Gamepad.ts","webpack:///../src/client/runtimelibrary/Math.ts","webpack:///../src/client/runtimelibrary/MathToolsClass.ts","webpack:///../src/client/runtimelibrary/System.ts","webpack:///../src/client/runtimelibrary/SystemTools.ts","webpack:///../src/client/runtimelibrary/Timer.ts","webpack:///../src/client/runtimelibrary/collections/Map.ts","webpack:///../src/client/runtimelibrary/collections/MapHelper.ts","webpack:///../src/client/runtimelibrary/collections/HashMap.ts","webpack:///../src/client/runtimelibrary/graphics/Triangle.ts","webpack:///../src/client/runtimelibrary/graphics/LocalDateTime.ts","webpack:///../src/client/runtimelibrary/graphics/Line.ts","webpack:///../src/client/runtimelibrary/Vector2.ts","webpack:///../src/client/runtimelibrary/graphics/MouseListener.ts","webpack:///../src/client/runtimelibrary/network/WebSocketClient.ts","webpack:///../src/client/runtimelibrary/network/WebSocket.ts","webpack:///../src/client/runtimelibrary/graphics/Processing.ts","webpack:///../src/client/runtimelibrary/graphics/Turtle.ts","webpack:///../src/client/runtimelibrary/Random.ts","webpack:///../src/client/runtimelibrary/graphics/Direction.ts","webpack:///../src/client/compiler/parser/Patcher.ts","webpack:///../src/client/runtimelibrary/graphics/3d/Boxes3d.ts","webpack:///../src/client/runtimelibrary/graphics/3d/RobotCubeFactory.ts","webpack:///../src/client/runtimelibrary/graphics/3d/Robot.ts","webpack:///../src/client/runtimelibrary/database/ResultSet.ts","webpack:///../src/client/runtimelibrary/database/DatabaseStatement.ts","webpack:///../src/client/tools/database/sqljsWorkerSim.ts","webpack:///../src/client/tools/database/DatabaseTool.ts","webpack:///../src/client/tools/database/DatabaseLongPollingListener.ts","webpack:///../src/client/runtimelibrary/database/DatabasePreparedStatement.ts","webpack:///../src/client/runtimelibrary/database/Connection.ts","webpack:///../src/client/runtimelibrary/database/DatabaseManager.ts","webpack:///../src/client/compiler/parser/Module.ts","webpack:///../src/client/help/ApiDoc.ts","webpack:///../src/client/main/gui/MyJava.ts"],"sourcesContent":["export enum TokenType {\r\n    identifier,\r\n    // constants\r\n    integerConstant,\r\n    longConstant,\r\n    floatingPointConstant,\r\n    booleanConstant,\r\n    stringConstant,\r\n    charConstant,\r\n    true,\r\n    false,\r\n    // keywords\r\n    keywordPrint,\r\n    keywordPrintln,\r\n    keywordClass,\r\n    keywordThis,\r\n    keywordSuper,\r\n    keywordNew,\r\n    keywordInterface,\r\n    keywordEnum,\r\n    keywordVoid,\r\n    keywordAbstract,\r\n    keywordPublic,\r\n    keywordProtected,\r\n    keywordPrivate,\r\n    keywordTransient,\r\n    keywordStatic,\r\n    keywordExtends,\r\n    keywordImplements,\r\n    keywordWhile,\r\n    keywordDo,\r\n    keywordFor,\r\n    keywordSwitch,\r\n    keywordCase,\r\n    keywordDefault,\r\n    keywordIf,\r\n    keywordThen,\r\n    keywordElse,\r\n    keywordReturn,\r\n    keywordBreak,\r\n    keywordContinue,\r\n    keywordNull,\r\n    keywordFinal,\r\n    keywordInstanceof,\r\n    // keywordInt,\r\n    // keywordBoolean,\r\n    // keywordString,\r\n    // keywordFloat,\r\n    // keywordChar,\r\n\r\n    // brackets\r\n    leftBracket, // ()\r\n    rightBracket,\r\n    leftSquareBracket, // []\r\n    rightSquareBracket,\r\n    leftCurlyBracket, // {}\r\n    rightCurlyBracket,\r\n    leftRightSquareBracket, // []\r\n    \r\n    // operators\r\n    doubleMinus, doublePlus,\r\n\r\n    // binary operators\r\n    dot, //.\r\n    modulo,\r\n    minus, plus, multiplication, division,\r\n    singleQuote, doubleQuote, // ', \"\r\n    lower, greater, lowerOrEqual, greaterOrEqual, \r\n    equal, // ==\r\n    notEqual, // !=\r\n    assignment, // =\r\n    plusAssignment, // +=\r\n    minusAssignment, // -=\r\n    multiplicationAssignment, // *=\r\n    divisionAssignment, // /=\r\n    moduloAssignment, // /%=\r\n    and, or,   // &&, ||\r\n    ampersand, // &\r\n\r\n    ANDAssigment,\r\n    XORAssigment,\r\n    ORAssigment,\r\n    shiftLeftAssigment,\r\n    shiftRightAssigment,\r\n    shiftRightUnsignedAssigment,\r\n    OR, // |\r\n    XOR, // ^\r\n    // AND, // & see TokenType.ampersand above\r\n    tilde, // ~\r\n    shiftRightUnsigned, // >>>\r\n    shiftRight, // >>\r\n    shiftLeft, // <<\r\n\r\n    ternaryOperator,\r\n    colon, //:\r\n    ellipsis, // ...\r\n\r\n    not,    // !\r\n    \r\n    // semicolon\r\n    semicolon, // ;\r\n\r\n    // comma\r\n    comma, // ,\r\n\r\n    // backslash\r\n    backslash,\r\n\r\n    // @\r\n    at,\r\n\r\n    // whitespace\r\n    space,\r\n\r\n    tab,\r\n\r\n    // newline\r\n    newline,\r\n\r\n    // line feed\r\n    linefeed,\r\n\r\n    // only lexer-internal\r\n    identifierChar,  // none of the special chars above a..zA..Z_Äö...\r\n\r\n    // Comment\r\n    comment,\r\n\r\n    // used by parser\r\n    negation, \r\n    referenceElement, // for arrays\r\n\r\n    endofSourcecode, // will be generated after sourcecode end\r\n    \r\n    // Program statement types:\r\n    binaryOp, // +, -, *, <=, ...\r\n    unaryOp, // ! and - \r\n    localVariableDeclaration,\r\n    heapVariableDeclaration,\r\n    pushLocalVariableToStack, // push value of a local variable to stack\r\n    popAndStoreIntoVariable,\r\n    pushFromHeapToStack, // push value from heap to stack\r\n    pushAttribute, // value of a attribute to stack\r\n    pushArrayLength, \r\n    pushConstant, // literal\r\n    pushStaticClassObject, // push class-Object to stack (which holds static attributes)\r\n    pushStaticAttribute, // push static attribute to stack\r\n    pushStaticAttributeIntrinsic, // push static attribute to stack\r\n    checkCast, // check if object may get casted to class or interface\r\n    castValue, // cast value on top of stack to other type\r\n    selectArrayElement, // select Element from Array (e.g. a[20])\r\n    callMethod,\r\n    callMainMethod,\r\n    processPostConstructorCallbacks, \r\n    callInputMethod, // Methods of Input class\r\n    makeEllipsisArray,\r\n    decreaseStackpointer, // decrease stack-pointer, nothing else\r\n    initStackframe,\r\n    closeStackframe,\r\n    increaseSpaceForLocalVariables,\r\n    return,\r\n    newObject,\r\n    jumpIfFalse,\r\n    jumpIfTrue,\r\n    jumpIfFalseAndLeaveOnStack,\r\n    jumpIfTrueAndLeaveOnStack,\r\n    jumpAlways,\r\n    noOp, // acts as jump destination\r\n    incrementDecrementBefore, // ++i, --i\r\n    incrementDecrementAfter, // i++, i--\r\n    programEnd,\r\n    beginArray, // push empty array to stack\r\n    addToArray, // pop element form stack and add it to array (on second stack position)\r\n    pushEmptyArray, // push multidimensional empty array to stack\r\n    forLoopOverCollection,\r\n\r\n    // additional AST node types\r\n    type, // e.g. int[][]\r\n    typeParameter, // e.g. <E extends String implements Comparable<E>>\r\n    attributeDeclaration,\r\n    methodDeclaration,\r\n    parameterDeclaration,\r\n    superConstructorCall,\r\n    constructorCall,       // call constructor with this() inside another constructor\r\n    newArray,\r\n    arrayInitialization,\r\n    print,\r\n    println, \r\n    pushEnumValue,\r\n    initializeEnumValue, \r\n    scopeNode,\r\n    returnIfDestroyed,\r\n    extendedForLoopInit,\r\n    extendedForLoopCheckCounterAndGetElement,\r\n    setPauseDuration,\r\n    pause\r\n}\r\n\r\nexport var TokenTypeReadable: {[tt: number]: string} = {\r\n    [TokenType.identifier]: \"ein Bezeichner\",\r\n    // constants\r\n    [TokenType.integerConstant]: \"eine Integer-Konstante\",\r\n    [TokenType.floatingPointConstant]: \"eine Fließkomma-Konstante\",\r\n    [TokenType.booleanConstant]: \"eine boolesche Konstante\",\r\n    [TokenType.stringConstant]: \"eine Zeichenketten-Konstante\",\r\n    [TokenType.charConstant]: \"eine char-Konstante\",\r\n    [TokenType.true]: \"true\",\r\n    [TokenType.false]: \"false\",\r\n    // keywords\r\n    [TokenType.keywordClass]: \"class\",\r\n    [TokenType.keywordThis]: \"this\",\r\n    [TokenType.keywordSuper]: \"super\",\r\n    [TokenType.keywordNew]: \"new\",\r\n    [TokenType.keywordInterface]: \"interface\",\r\n    [TokenType.keywordEnum]: \"enum\",\r\n    [TokenType.keywordVoid]: \"void\",\r\n    [TokenType.keywordAbstract]: \"abstract\",\r\n    [TokenType.keywordPublic]: \"public\",\r\n    [TokenType.keywordProtected]: \"protected\",\r\n    [TokenType.keywordPrivate]: \"private\",\r\n    [TokenType.keywordTransient]: \"transient\",\r\n    [TokenType.keywordStatic]: \"static\",\r\n    [TokenType.keywordExtends]: \"extends\",\r\n    [TokenType.keywordImplements]: \"implements\",\r\n    [TokenType.keywordWhile]: \"while\",\r\n    [TokenType.keywordDo]: \"do\",\r\n    [TokenType.keywordFor]: \"for\",\r\n    [TokenType.keywordSwitch]: \"switch\",\r\n    [TokenType.keywordCase]: \"case\",\r\n    [TokenType.keywordDefault]: \"default\",\r\n    [TokenType.keywordIf]: \"if\",\r\n    [TokenType.keywordThen]: \"then\",\r\n    [TokenType.keywordElse]: \"else\",\r\n    [TokenType.keywordReturn]: \"return\",\r\n    [TokenType.keywordBreak]: \"break\",\r\n    [TokenType.keywordContinue]: \"continue\",\r\n    [TokenType.keywordNull]: \"null\",\r\n    [TokenType.keywordFinal]: \"final\",\r\n    [TokenType.keywordInstanceof]: \"instanceof\",\r\n    [TokenType.keywordPrint]: \"print\",\r\n    [TokenType.keywordPrintln]: \"println\",\r\n    // keywordInt,\r\n    // keywordBoolean,\r\n    // keywordString,\r\n    // keywordFloat,\r\n    // keywordChar,\r\n\r\n    // brackets\r\n    [TokenType.leftBracket]: \"(\", // ()\r\n    [TokenType.rightBracket]: \")\",\r\n    [TokenType.leftSquareBracket]: \"[\", // []\r\n    [TokenType.rightSquareBracket]: \"]\",\r\n    [TokenType.leftCurlyBracket]: \"{\", // {}\r\n    [TokenType.rightCurlyBracket]: \"}\",\r\n    [TokenType.leftRightSquareBracket]: \"[]\", \r\n    \r\n    // operators\r\n    [TokenType.dot]: \".\", //.\r\n    [TokenType.minus]: \"-\", \r\n    [TokenType.modulo]: \"%\", \r\n    [TokenType.plus]: \"+\", \r\n    [TokenType.multiplication]: \"*\", \r\n    [TokenType.division]: \"/\",\r\n    [TokenType.singleQuote]: \"'\", \r\n    [TokenType.doubleQuote]: \"\\\"\", // ']: \"\", \"\r\n    [TokenType.doubleMinus]: \"--\", \r\n    [TokenType.doublePlus]: \"++\",\r\n    [TokenType.lower]: \"<\", \r\n    [TokenType.greater]: \">\", \r\n    [TokenType.lowerOrEqual]: \"<=\", \r\n    [TokenType.greaterOrEqual]: \">=\", \r\n    [TokenType.equal]: \"==\", // ==\r\n    [TokenType.notEqual]: \"!=\", // !=\r\n    [TokenType.assignment]: \"=\", // =\r\n    [TokenType.plusAssignment]: \"+=\", // +=\r\n    [TokenType.minusAssignment]: \"-=\", // -=\r\n    [TokenType.multiplicationAssignment]: \"*=\", // *=\r\n    [TokenType.divisionAssignment]: \"/=\", // /=\r\n    [TokenType.moduloAssignment]: \"%=\",\r\n    [TokenType.ampersand]: \"&\", \r\n    [TokenType.and]: \"&&\", \r\n    [TokenType.or]: \"||\", \r\n    [TokenType.not]: \"!\", \r\n\r\n    [TokenType.ANDAssigment]: \"&=\",\r\n    [TokenType.XORAssigment]: \"^=\",\r\n    [TokenType.ORAssigment]: \"|=\",\r\n    [TokenType.shiftLeftAssigment]: \"<<=\",\r\n    [TokenType.shiftRightAssigment]: \">>=\",\r\n    [TokenType.shiftRightUnsignedAssigment]: \">>>=\",\r\n    // [TokenType.AND]: \"&\", \r\n    [TokenType.OR]: \"|\",\r\n    [TokenType.XOR]: \"^\",\r\n    [TokenType.tilde]: \"~\",\r\n    [TokenType.shiftLeft]: \"<<\",\r\n    [TokenType.shiftRight]: \">>\",\r\n    [TokenType.shiftRightUnsigned]: \">>>\",\r\n\r\n\r\n    [TokenType.ternaryOperator]: \"?\", \r\n    \r\n    // semicolon\r\n    [TokenType.semicolon]: \";\", // ;\r\n\r\n    [TokenType.colon]: \":\", // ;\r\n    [TokenType.ellipsis]: \"...\", // ;\r\n\r\n    // comma\r\n    [TokenType.comma]: \",\", \r\n\r\n    // backslash\r\n    [TokenType.backslash]: \"\\\\\",\r\n\r\n    // at\r\n    [TokenType.at]: \"@\",\r\n\r\n    // whitespace\r\n    [TokenType.space]: \"ein Leerzeichen\",\r\n    [TokenType.tab]: \"ein Tabulatorzeichen\",\r\n\r\n    // newline\r\n    [TokenType.newline]: \"ein Zeilenumbruch\",\r\n\r\n    // only lexer-internal\r\n    [TokenType.identifierChar]: \"eines der Zeichen a..z, A..Z, _\",  // none of the special chars above a..zA..Z_Äö...\r\n\r\n    // Comment\r\n    [TokenType.comment]: \"ein Kommentar\",\r\n\r\n    [TokenType.endofSourcecode]: \"das Ende des Programmes\"\r\n\r\n}\r\n\r\nexport var specialCharList: {[keyword: string]:TokenType} = {\r\n    '(': TokenType.leftBracket, // ()\r\n    ')': TokenType.rightBracket,\r\n    '[': TokenType.leftSquareBracket, // []\r\n    ']': TokenType.rightSquareBracket,\r\n    '{': TokenType.leftCurlyBracket, // {}\r\n    '}': TokenType.rightCurlyBracket,\r\n    \r\n    // operators\r\n    '.': TokenType.dot, //.\r\n    ',': TokenType.comma, //.\r\n    '-': TokenType.minus,\r\n    '%': TokenType.modulo,\r\n    '+': TokenType.plus, \r\n    '*': TokenType.multiplication, \r\n    '/': TokenType.division,\r\n    '\\\\': TokenType.backslash,\r\n    '@': TokenType.at,\r\n    '\\'': TokenType.singleQuote, \r\n    '\"': TokenType.doubleQuote, // ', \"\r\n    \"<\": TokenType.lower,\r\n    \">\": TokenType.greater,\r\n    \"=\": TokenType.assignment,\r\n    \"&\": TokenType.and,\r\n    \"|\": TokenType.or,\r\n    \"!\": TokenType.not,\r\n    \"?\": TokenType.ternaryOperator,\r\n\r\n    \"^\": TokenType.XOR,\r\n    \"~\": TokenType.tilde,\r\n    \r\n    ';': TokenType.semicolon, // ;\r\n    ':': TokenType.colon, // ;\r\n\r\n    '...': TokenType.ellipsis,\r\n\r\n    // whitespace\r\n    ' ': TokenType.space,\r\n    '\\t': TokenType.tab,\r\n\r\n    // newline\r\n    '\\n': TokenType.newline,\r\n    '\\r': TokenType.linefeed\r\n}\r\n\r\nexport var keywordList: {[keyword: string]:TokenType} = {\r\n    \"class\": TokenType.keywordClass,\r\n    \"this\": TokenType.keywordThis,\r\n    \"super\": TokenType.keywordSuper,\r\n    \"new\": TokenType.keywordNew,\r\n    \"interface\": TokenType.keywordInterface,\r\n    \"enum\": TokenType.keywordEnum,\r\n    \"void\": TokenType.keywordVoid,\r\n    \"abstract\": TokenType.keywordAbstract,\r\n    \"public\": TokenType.keywordPublic,\r\n    \"protected\": TokenType.keywordProtected,\r\n    \"private\": TokenType.keywordPrivate,\r\n    \"transient\": TokenType.keywordTransient,\r\n    \"static\": TokenType.keywordStatic,\r\n    \"extends\": TokenType.keywordExtends,\r\n    \"implements\": TokenType.keywordImplements,\r\n    \"while\": TokenType.keywordWhile,\r\n    \"do\": TokenType.keywordDo,\r\n    \"for\": TokenType.keywordFor,\r\n    \"switch\": TokenType.keywordSwitch,\r\n    \"case\": TokenType.keywordCase,\r\n    \"default\": TokenType.keywordDefault,\r\n    \"if\": TokenType.keywordIf,\r\n    \"then\": TokenType.keywordThen,\r\n    \"else\": TokenType.keywordElse,\r\n    \"return\": TokenType.keywordReturn,\r\n    \"break\": TokenType.keywordBreak,\r\n    \"continue\": TokenType.keywordContinue,\r\n    \"null\": TokenType.keywordNull,\r\n    \"final\": TokenType.keywordFinal,\r\n    \"instanceof\": TokenType.keywordInstanceof,\r\n    \"true\": TokenType.true,\r\n    \"false\": TokenType.false,\r\n    \"print\": TokenType.keywordPrint,\r\n    \"println\": TokenType.keywordPrintln,\r\n    // \"int\": TokenType.keywordInt,\r\n    // \"boolean\": TokenType.keywordBoolean,\r\n    // \"String\": TokenType.keywordString,\r\n    // \"float\": TokenType.keywordFloat,\r\n    // \"char\": TokenType.keywordChar\r\n};\r\n\r\nexport var EscapeSequenceList: {[keyword: string]:string} = {\r\n    \"n\": \"\\n\",\r\n    \"r\": \"\\r\",\r\n    \"t\": \"\\t\",\r\n    \"\\\"\": \"\\\"\",\r\n    \"'\": \"'\",\r\n    \"\\\\\": \"\\\\\"\r\n}\r\n\r\nexport type TextPosition = {\r\n    line: number,\r\n    column: number, \r\n    length: number\r\n}\r\n\r\nexport type TextPositionWithoutLength = {\r\n    line: number,\r\n    column: number\r\n}\r\n\r\nexport type Token = {\r\n    tt: TokenType,\r\n    value: string|number|boolean,\r\n    position: TextPosition,\r\n    commentBefore?: Token\r\n}\r\n\r\nexport type TokenList = Token[];\r\n\r\nfunction tokenToString(t: Token){\r\n    return \"<div><span style='font-weight: bold'>\" + TokenType[t.tt] + \"</span>\" +\r\n            \"<span style='color: blue'> &nbsp;'\" + t.value + \"'</span> (l&nbsp;\" + t.position.line + \", c&nbsp;\" + t.position.column + \")</div>\";\r\n}\r\n \r\nexport function tokenListToString(tl: TokenList):string{\r\n    let s = \"\";\r\n    for(let t of tl){\r\n        s += tokenToString(t) + \"\\n\";\r\n    }\r\n    return s;\r\n}","import { ProgramStackElement } from \"../../interpreter/Interpreter.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { TextPosition, TokenType } from \"../lexer/Token.js\";\r\nimport { LabelManager } from \"../parser/LabelManager.js\";\r\nimport { Module } from \"../parser/Module.js\";\r\nimport { Program } from \"../parser/Program.js\";\r\nimport { SymbolTable } from \"../parser/SymbolTable.js\";\r\nimport { ArrayType } from \"./Array.js\";\r\nimport { nullType, stringPrimitiveType, voidPrimitiveType } from \"./PrimitiveTypes.js\";\r\nimport { Attribute, Method, Parameterlist, PrimitiveType, Type, Value } from \"./Types.js\";\r\n\r\n\r\nexport enum Visibility { public, protected, private };\r\n\r\nvar booleanPrimitiveTypeCopy: any;\r\nexport function setBooleanPrimitiveTypeCopy(bpt: Type) {\r\n    booleanPrimitiveTypeCopy = bpt;\r\n}\r\n\r\n// Used for class diagrams:\r\nexport type CompostionData = { klass: Klass | Interface, multiples: boolean, identifier: string };\r\n\r\n/**\r\n * For Generic types\r\n */\r\nexport type TypeVariable = {\r\n    identifier: string;\r\n    type: Klass;\r\n    scopeFrom: TextPosition;\r\n    scopeTo: TextPosition;\r\n}\r\n\r\n\r\nexport class Klass extends Type {\r\n\r\n    // for Generics:\r\n    typeVariables: TypeVariable[] = [];\r\n    isGenericVariantFrom: Klass;\r\n    isTypeVariable: boolean = false;\r\n    typeVariablesReady: boolean = true;\r\n\r\n    private static dontInheritFrom: string[] = [\"Integer\", \"Float\", \"Double\", \"Boolean\", \"Character\", \"String\", \"Shape\", \"FilledShape\"];\r\n\r\n    baseClass: Klass;\r\n    firstPassBaseClass: string;\r\n\r\n    staticClass: StaticClass;\r\n\r\n    module: Module;\r\n\r\n    visibility: Visibility;\r\n\r\n    implements: Interface[] = [];\r\n    firstPassImplements: string[] = [];\r\n\r\n    isAbstract: boolean = false;\r\n\r\n    attributeInitializationProgram: Program;\r\n\r\n    postConstructorCallbacks: ((r: RuntimeObject) => void)[] = null;\r\n\r\n    public methods: Method[] = [];\r\n    private methodMap: Map<string, Method> = new Map();\r\n\r\n    public attributes: Attribute[] = [];\r\n    public attributeMap: Map<string, Attribute> = new Map();\r\n    public numberOfAttributesIncludingBaseClass: number = null;\r\n\r\n    public symbolTable: SymbolTable;\r\n\r\n    constructor(identifier: string, module: Module, documentation?: string) {\r\n        super();\r\n\r\n        this.documentation = documentation;\r\n\r\n        this.identifier = identifier;\r\n        this.module = module;\r\n        this.visibility = Visibility.public;\r\n\r\n        this.staticClass = new StaticClass(this);\r\n\r\n        this.attributeInitializationProgram = {\r\n            method: null,\r\n            module: this.module,\r\n            statements: [],\r\n            labelManager: null\r\n        };\r\n\r\n        this.attributeInitializationProgram.labelManager = new LabelManager(this.attributeInitializationProgram);\r\n\r\n    }\r\n\r\n    setupAttributeIndicesRecursive() {\r\n        if (this.baseClass != null && this.baseClass.numberOfAttributesIncludingBaseClass == null) {\r\n            this.baseClass.setupAttributeIndicesRecursive();\r\n        }\r\n        let numberOfAttributesInBaseClasses = this.baseClass == null ? 0 : this.baseClass.numberOfAttributesIncludingBaseClass;\r\n\r\n        for (let a of this.attributes) {\r\n            a.index = numberOfAttributesInBaseClasses++;\r\n            // console.log(this.identifier + \".\" + a.identifier+ \": \" + a.index);\r\n        }\r\n\r\n        this.numberOfAttributesIncludingBaseClass = numberOfAttributesInBaseClasses;\r\n\r\n    }\r\n\r\n\r\n    getNonGenericClass(): Klass {\r\n        let k: Klass = this;\r\n        while (k.isGenericVariantFrom != null) k = k.isGenericVariantFrom;\r\n        return k;\r\n    }\r\n\r\n    getNonGenericIdentifier(): string {\r\n        let k: Klass = this;\r\n        while (k.isGenericVariantFrom != null) k = k.isGenericVariantFrom;\r\n        return k.identifier;\r\n    }\r\n\r\n    implementsInterface(i: Interface): boolean {\r\n        let klass: Klass = this;\r\n        while (klass != null) {\r\n            for (let i1 of klass.implements) {\r\n                if (i1.getThisOrExtendedInterface(i.getNonGenericIdentifier()) != null) return true;\r\n            }\r\n            klass = klass.baseClass;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    getImplementedInterface(identifier: string): Interface {\r\n        let klass: Klass = this;\r\n        while (klass != null) {\r\n            for (let i1 of klass.implements) {\r\n                let i2: Interface = i1.getThisOrExtendedInterface(identifier);\r\n                if (i2 != null) return i2;\r\n            }\r\n            klass = klass.baseClass;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    registerUsedSystemClasses(usedSystemClasses: (Klass | Interface)[]) {\r\n        if (this.baseClass != null && this.baseClass.module != null && this.baseClass.module.isSystemModule &&\r\n            usedSystemClasses.indexOf(this.baseClass) < 0) {\r\n            usedSystemClasses.push(this.baseClass);\r\n        }\r\n        for (let cd of this.getCompositeData()) {\r\n            if (cd.klass != null && cd.klass.module != null && cd.klass.module.isSystemModule &&\r\n                usedSystemClasses.indexOf(cd.klass) < 0) {\r\n                usedSystemClasses.push(cd.klass);\r\n            }\r\n        }\r\n        for (let interf of this.implements) {\r\n            if (interf != null && interf.module.isSystemModule &&\r\n                usedSystemClasses.indexOf(interf) < 0) {\r\n                usedSystemClasses.push(interf);\r\n            }\r\n        }\r\n    }\r\n\r\n    getCompositeData(): CompostionData[] {\r\n\r\n        let cd: CompostionData[] = [];\r\n        let cdMap: Map<Klass | Interface, CompostionData> = new Map();\r\n\r\n        for (let a of this.attributes) {\r\n            if (a.type instanceof Klass || a.type instanceof Interface) {\r\n                let cda = cdMap.get(a.type);\r\n                if (cda == null) {\r\n                    cda = {\r\n                        klass: a.type,\r\n                        multiples: false,\r\n                        identifier: a.identifier\r\n                    };\r\n                    cdMap.set(a.type, cda);\r\n                    cd.push(cda);\r\n                } else {\r\n                    cda.identifier += \", \" + a.identifier;\r\n                }\r\n            } else {\r\n                let type: Type = a.type;\r\n                while (type instanceof ArrayType) {\r\n                    type = type.arrayOfType;\r\n                }\r\n                if (type instanceof Klass || type instanceof Interface) {\r\n                    let cda = cdMap.get(type);\r\n                    if (cda == null) {\r\n                        cda = {\r\n                            klass: type,\r\n                            multiples: true,\r\n                            identifier: a.identifier\r\n                        };\r\n                        cdMap.set(type, cda);\r\n                        cd.push(cda);\r\n                    } else {\r\n                        cda.identifier += \", \" + a.identifier;\r\n                        cda.multiples = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return cd;\r\n    }\r\n\r\n\r\n    clearUsagePositions() {\r\n        super.clearUsagePositions();\r\n\r\n        for (let m of this.methods) {\r\n            m.clearUsagePositions();\r\n        }\r\n\r\n        for (let a of this.attributes) {\r\n            a.usagePositions = new Map();\r\n        }\r\n\r\n        if (this.staticClass != null) {\r\n            this.staticClass.clearUsagePositions();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    getPostConstructorCallbacks(): ((r: RuntimeObject) => void)[] {\r\n        let c: Klass = this;\r\n        let callbacks: ((r: RuntimeObject) => void)[] = null;\r\n\r\n        while (c != null) {\r\n            if (c.postConstructorCallbacks != null) {\r\n                if (callbacks == null) { callbacks = c.postConstructorCallbacks; }\r\n                else {\r\n                    callbacks = callbacks.concat(c.postConstructorCallbacks);\r\n                }\r\n            }\r\n            c = c.baseClass;\r\n        }\r\n        return callbacks;\r\n    }\r\n\r\n    getCompletionItems(visibilityUpTo: Visibility,\r\n        leftBracketAlreadyThere: boolean, identifierAndBracketAfterCursor: string,\r\n        rangeToReplace: monaco.IRange, currentMethod?: Method): monaco.languages.CompletionItem[] {\r\n\r\n        let itemList: monaco.languages.CompletionItem[] = [];\r\n\r\n        for (let attribute of this.getAttributes(visibilityUpTo)) {\r\n            itemList.push({\r\n                label: attribute.identifier + \"\",\r\n                kind: monaco.languages.CompletionItemKind.Field,\r\n                insertText: attribute.identifier,\r\n                range: rangeToReplace,\r\n                documentation: attribute.documentation == null ? undefined : {\r\n                    value: attribute.documentation\r\n                }\r\n            });\r\n        }\r\n\r\n        for (let method of this.getMethods(visibilityUpTo)) {\r\n            if (method.isConstructor) {\r\n                if (currentMethod?.isConstructor && currentMethod != method && this.baseClass.methods.indexOf(method) >= 0) {\r\n                    this.pushSuperCompletionItem(itemList, method, leftBracketAlreadyThere, rangeToReplace);\r\n                    continue;\r\n                } else {\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            itemList.push({\r\n                label: method.getCompletionLabel(),\r\n                filterText: method.identifier,\r\n                command: {\r\n                    id: \"editor.action.triggerParameterHints\",\r\n                    title: '123',\r\n                    arguments: []\r\n                },\r\n                kind: monaco.languages.CompletionItemKind.Method,\r\n                insertText: method.getCompletionSnippet(leftBracketAlreadyThere),\r\n                range: rangeToReplace,\r\n                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n                documentation: method.documentation == null ? undefined : {\r\n                    value: method.documentation\r\n                }\r\n            });\r\n        }\r\n\r\n        itemList = itemList.concat(this.staticClass.getCompletionItems(visibilityUpTo,\r\n            leftBracketAlreadyThere, identifierAndBracketAfterCursor,\r\n            rangeToReplace));\r\n\r\n        return itemList;\r\n    }\r\n\r\n    pushSuperCompletionItem(itemList: monaco.languages.CompletionItem[], method: Method, leftBracketAlreadyThere: boolean,\r\n        rangeToReplace: monaco.IRange) {\r\n        itemList.push({\r\n            label: method.getCompletionLabel().replace(method.identifier, \"super\"),\r\n            filterText: \"super\",\r\n            command: {\r\n                id: \"editor.action.triggerParameterHints\",\r\n                title: '123',\r\n                arguments: []\r\n            },\r\n            kind: monaco.languages.CompletionItemKind.Method,\r\n            insertText: method.getCompletionSnippet(leftBracketAlreadyThere).replace(method.identifier, \"super\"),\r\n            range: rangeToReplace,\r\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n            documentation: method.documentation == null ? undefined : {\r\n                value: method.documentation\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    pushStaticInitializationPrograms(programStack: ProgramStackElement[]) {\r\n\r\n        if (this.staticClass.attributeInitializationProgram.statements.length > 0) {\r\n            programStack.push({\r\n                program: this.staticClass.attributeInitializationProgram,\r\n                programPosition: 0,\r\n                textPosition: { line: 1, column: 1, length: 0 },\r\n                method: \"Initialisierung statischer Variablen der Klasse \" + this.staticClass.identifier,\r\n                callbackAfterReturn: null,\r\n                isCalledFromOutside: \"Initialisierung statischer Attribute\"\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    getMethodBySignature(signature: string): Method {\r\n\r\n        let c: Klass = this;\r\n        while (c != null) {\r\n            let method = c.methodMap.get(signature);\r\n            if (method != null) return method;\r\n            c = c.baseClass;\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    public equals(type: Type): boolean {\r\n        return type == this;\r\n    }\r\n\r\n    setBaseClass(baseClass: Klass) {\r\n        this.baseClass = baseClass;\r\n        this.staticClass.baseClass = baseClass.staticClass;\r\n    }\r\n\r\n    public addMethod(method: Method) {\r\n        if (method.isConstructor) {\r\n            method.returnType = null;\r\n        }\r\n        if (method.isStatic) {\r\n            this.staticClass.addMethod(method);\r\n        } else {\r\n            this.methods.push(method);\r\n            this.methodMap.set(method.signature, method);\r\n        }\r\n    }\r\n\r\n    public addAttribute(attribute: Attribute) {\r\n        if (attribute.isStatic) {\r\n            this.staticClass.addAttribute(attribute);\r\n        } else {\r\n            this.attributes.push(attribute);\r\n            this.attributeMap.set(attribute.identifier, attribute);\r\n        }\r\n    }\r\n\r\n    public getResultType(operation: TokenType, secondOperandType?: Type): Type {\r\n\r\n        if (operation == TokenType.equal || operation == TokenType.notEqual) {\r\n            if (secondOperandType instanceof Klass || secondOperandType == nullType) {\r\n                return booleanPrimitiveTypeCopy;\r\n            }\r\n        }\r\n\r\n        if (operation == TokenType.keywordInstanceof) {\r\n            if (secondOperandType instanceof StaticClass || secondOperandType instanceof Interface) {\r\n                return booleanPrimitiveTypeCopy;\r\n            }\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    public compute(operation: TokenType, firstOperand: Value, secondOperand?: Value) {\r\n        if (operation == TokenType.equal) {\r\n            return firstOperand.value == secondOperand.value;\r\n        }\r\n\r\n        if (operation == TokenType.notEqual) {\r\n            return firstOperand.value != secondOperand.value;\r\n        }\r\n\r\n        if (operation == TokenType.keywordInstanceof) {\r\n            let firstOpClass = firstOperand?.value?.class;\r\n            if (firstOpClass == null) return false;\r\n            let typeLeft: Klass = <Klass>firstOpClass;\r\n            let typeRight = secondOperand.type;\r\n            if (typeRight instanceof StaticClass) {\r\n\r\n                while (typeLeft != null) {\r\n                    if (typeLeft === typeRight.Klass) return true;\r\n                    typeLeft = typeLeft.baseClass;\r\n                }\r\n                return false;\r\n            }\r\n            if (typeRight instanceof Interface) {\r\n                while (typeLeft != null) {\r\n                    for (let i of typeLeft.implements) {\r\n                        if (i === typeRight) return true;\r\n                    }\r\n                    typeLeft = typeLeft.baseClass;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * returns all visible methods of this class and all of its base classes\r\n     */\r\n    public getMethods(upToVisibility: Visibility, identifier?: string): Method[] {\r\n\r\n        let methods: Method[] = this.methods.filter((method) => {\r\n            return method.visibility <= upToVisibility && (identifier == null || method.identifier == identifier);\r\n        });\r\n\r\n        if (this.baseClass != null && (identifier == null || identifier != this.identifier || methods.length == 0)) {\r\n            let baseClassUptoVisibility = upToVisibility == Visibility.public ? upToVisibility : Visibility.protected;\r\n\r\n            for (let m of this.baseClass.getMethods(baseClassUptoVisibility, identifier == this.identifier ? this.baseClass.identifier : identifier)) {\r\n\r\n                let found = false;\r\n                for (let m1 of methods) {\r\n                    if (m1.signature == m.signature) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!found) {\r\n                    methods.push(m);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return methods;\r\n    }\r\n\r\n    /**\r\n     * returns all visible attributes of this class and all of its base classes\r\n     */\r\n    public getAttributes(upToVisibility: Visibility): Attribute[] {\r\n\r\n        let attributes: Attribute[] = [];\r\n        for (let a of this.attributes) {\r\n            if (a.visibility <= upToVisibility) {\r\n                attributes.push(a);\r\n            }\r\n        }\r\n\r\n        if (this.baseClass != null) {\r\n\r\n            let upToVisibilityInBaseClass = upToVisibility == Visibility.public ? upToVisibility : Visibility.protected;\r\n\r\n            for (let a of this.baseClass.getAttributes(upToVisibilityInBaseClass)) {\r\n\r\n                let found = false;\r\n\r\n                if (a.visibility > upToVisibilityInBaseClass) continue;\r\n\r\n                for (let a1 of attributes) {\r\n                    if (a1.identifier == a.identifier) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!found) {\r\n                    attributes.push(a);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return attributes;\r\n    }\r\n\r\n    public hasConstructor() {\r\n        for (let m of this.methods) {\r\n            if (m.isConstructor) return true;\r\n        }\r\n\r\n        if (this.baseClass != null) return this.baseClass.hasConstructor();\r\n\r\n        return false;\r\n    }\r\n\r\n    public hasParameterlessConstructor() {\r\n        let hasConstructorWithParameters: boolean = false;\r\n        for (let m of this.methods) {\r\n            if (m.isConstructor) {\r\n                if (m.parameterlist.parameters.length == 0) {\r\n                    return true;\r\n                } else {\r\n                    hasConstructorWithParameters = true;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        if (!hasConstructorWithParameters && this.baseClass != null) {\r\n            return this.baseClass.hasParameterlessConstructor();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getParameterlessConstructor(): Method {\r\n        for (let m of this.methods) {\r\n            if (m.isConstructor && m.parameterlist.parameters.length == 0) return m;\r\n        }\r\n\r\n        if (this.baseClass != null) {\r\n            return this.baseClass.getParameterlessConstructor();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n\r\n    public getConstructor(parameterTypes: Type[], upToVisibility: Visibility, classIdentifier: string = this.identifier): { error: string, methodList: Method[] } {\r\n\r\n        let constructors: Method[] = this.methods.filter((m) => {\r\n            return m.isConstructor;\r\n        });\r\n\r\n        if (constructors.length == 0 && this.baseClass != null) {\r\n            return this.baseClass.getConstructor(parameterTypes, upToVisibility, classIdentifier);\r\n        } else {\r\n            return findSuitableMethods(constructors, this.identifier, parameterTypes, classIdentifier, true);\r\n        }\r\n\r\n    }\r\n\r\n    public getMethodsThatFitWithCasting(identifier: string, parameterTypes: Type[],\r\n        searchConstructor: boolean, upToVisibility: Visibility): { error: string, methodList: Method[] } {\r\n\r\n        let allMethods = this.getMethods(upToVisibility);\r\n\r\n        let methods = findSuitableMethods(allMethods, identifier, parameterTypes, this.identifier, searchConstructor);\r\n\r\n        if (methods.methodList.length == 0 && !searchConstructor) {\r\n            let staticMethods = this.staticClass.getMethodsThatFitWithCasting(identifier, parameterTypes, false, upToVisibility);\r\n            if (staticMethods.error == null) {\r\n                return staticMethods;\r\n            }\r\n\r\n            return methods;\r\n        }\r\n\r\n        return methods;\r\n\r\n    }\r\n\r\n    public getMethod(identifier: string, parameterlist: Parameterlist): Method {\r\n\r\n        let method = this.methodMap.get(identifier + parameterlist.id);\r\n\r\n        if (method == null && this.baseClass != null) {\r\n            return this.baseClass.getMethod(identifier, parameterlist);\r\n        }\r\n\r\n        return method;\r\n    }\r\n\r\n    public getAttribute(identifier: string, upToVisibility: Visibility): { attribute: Attribute, error: string, foundButInvisible: boolean } {\r\n\r\n        let error = null;\r\n        let foundButInvisible: boolean = false;\r\n\r\n        let attribute = this.attributeMap.get(identifier);\r\n        let attributeNotFound = attribute == null;\r\n\r\n        if (attribute == null) {\r\n            error = \"Das Attribut \" + identifier + \" kann nicht gefunden werden.\";\r\n        } else\r\n            if (attribute.visibility > upToVisibility) {\r\n                error = \"Das Attribut \" + identifier + \" hat die Sichtbarkeit \" + Visibility[attribute.visibility] + \" und ist daher hier nicht sichtbar.\";\r\n                attribute = null;\r\n                foundButInvisible = true;\r\n            }\r\n\r\n        if (attribute == null && this.baseClass != null) {\r\n            let upToVisibilityInBaseClass = upToVisibility == Visibility.public ? upToVisibility : Visibility.protected;\r\n\r\n            let baseClassAttribute = this.baseClass.getAttribute(identifier, upToVisibilityInBaseClass);\r\n            if (baseClassAttribute.attribute != null || attributeNotFound) {\r\n                return baseClassAttribute;\r\n            }\r\n\r\n        }\r\n\r\n        return { attribute: attribute, error: error, foundButInvisible: foundButInvisible };\r\n    }\r\n\r\n    public canCastTo(type: Type): boolean {\r\n\r\n        // casting something to a String by calling toString() is neither possible in Java nor makes sense in my opinion\r\n\r\n        if (type instanceof Klass) {\r\n            let baseClass: Klass = this;\r\n\r\n            while (baseClass != null) {\r\n                if (type.getNonGenericIdentifier() == baseClass.getNonGenericIdentifier()) {\r\n                    if (type.typeVariables.length > 0) {\r\n                        let n: number = Math.min(type.typeVariables.length, baseClass.typeVariables.length);\r\n                        for (let i = 0; i < n; i++) {\r\n                            if (!baseClass.typeVariables[i].type.canCastTo(type.typeVariables[i].type)) return false;\r\n                        }\r\n                        return true;\r\n                    }\r\n                    return true;\r\n                }\r\n                baseClass = baseClass.baseClass;\r\n            }\r\n        }\r\n\r\n        if (type instanceof Interface) {\r\n\r\n            let klass: Klass = this;\r\n            while (klass != null) {\r\n                for (let i of klass.implements) {\r\n                    let shouldImplement = type.getNonGenericIdentifier();\r\n                    // look recursively into interface inheritance chain:                    \r\n                    if (i.getThisOrExtendedInterface(shouldImplement) != null) {\r\n                        return true;\r\n                    }\r\n                }\r\n                klass = klass.baseClass;\r\n            }\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    public castTo(value: Value, type: Type): Value {\r\n\r\n        return value;\r\n\r\n    }\r\n\r\n    checkInheritance(): { message: string, missingMethods: Method[] } {\r\n\r\n        if (this.baseClass != null && Klass.dontInheritFrom.indexOf(this.baseClass.identifier) >= 0) {\r\n            return { message: \"Aus Performancegründen ist es leider nicht möglich, Unterklassen der Klassen String, Boolean, Character, Integer, Float und Double zu bilden.\", missingMethods: [] };\r\n        }\r\n\r\n        let message = \"\";\r\n        let missingAbstractMethods: Method[] = [];\r\n        let implementedMethods: Method[] = [];\r\n\r\n        let missingInterfaceMethods: Method[] = [];\r\n\r\n        let klass: Klass = this;\r\n        let hierarchy: string[] = [klass.identifier];\r\n        while (klass.baseClass != null) {\r\n            klass = klass.baseClass;\r\n            if (hierarchy.indexOf(klass.identifier) >= 0) {\r\n                klass.baseClass = null;  // This is necessary to avoid infinite loops in further compilation\r\n                hierarchy = [klass.identifier].concat(hierarchy);\r\n                message = \"Die Klasse \" + klass.identifier + \" erbt von sich selbst: \";\r\n                message += \"(\" + hierarchy.join(\" extends \") + \")\";\r\n                break;\r\n            }\r\n            hierarchy = [klass.identifier].concat(hierarchy);\r\n        }\r\n\r\n        if (message == \"\") {\r\n\r\n            if (this.baseClass != null) {\r\n\r\n                let abstractMethods: Method[] = [];\r\n\r\n                let klass: Klass = this;\r\n\r\n                // collect abstract Methods\r\n                while (klass != null) {\r\n                    for (let m of klass.methods) {\r\n                        if (m.isAbstract) {\r\n                            abstractMethods.push(m);\r\n                            let isImplemented: boolean = false;\r\n                            for (let m1 of implementedMethods) {\r\n                                if (m1.implements(m)) {\r\n                                    isImplemented = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!isImplemented) {\r\n                                missingAbstractMethods.push(m);\r\n                            }\r\n                        } else {\r\n                            implementedMethods.push(m);\r\n                        }\r\n                    }\r\n                    klass = klass.baseClass;\r\n                }\r\n\r\n            }\r\n\r\n            if (missingAbstractMethods.length > 0 && !this.isAbstract) {\r\n                message = \"Die Klasse \" + this.identifier + \" muss noch folgende Methoden ihrer abstrakten Basisklassen implementieren: \";\r\n\r\n                message += missingAbstractMethods.map((m) => m.getSignatureWithReturnParameter()).join(\", \");\r\n\r\n            }\r\n\r\n            for (let i of this.implements) {\r\n                for (let m of i.getMethods()) {\r\n                    let isImplemented: boolean = false;\r\n                    for (let m1 of implementedMethods) {\r\n                        if (m1.implements(m)) {\r\n                            isImplemented = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!isImplemented) {\r\n                        missingInterfaceMethods.push(m);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (missingInterfaceMethods.length > 0) {\r\n\r\n                if (message != \"\") message += \"\\n\";\r\n\r\n                message += \"Die Klasse \" + this.identifier + \" muss noch folgende Methoden der von ihr implementierten Interfaces implementieren: \";\r\n\r\n                message += missingInterfaceMethods.map((m) => m.signature).join(\", \");\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return { message: message, missingMethods: missingAbstractMethods.concat(missingInterfaceMethods) };\r\n\r\n    }\r\n\r\n    hasAncestorOrIs(a: Klass | StaticClass) {\r\n        let c: Klass | StaticClass = this;\r\n        let id = a.identifier;\r\n        if (a instanceof Klass) id = a.getNonGenericIdentifier();\r\n\r\n        while (c != null) {\r\n            if (c.getNonGenericIdentifier() == id) return true;\r\n            c = c.baseClass;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public debugOutput(value: Value, maxLength: number = 40): string {\r\n\r\n        let s: string = \"{\";\r\n        let attributes = this.getAttributes(Visibility.private);\r\n        let object = <RuntimeObject>value.value;\r\n\r\n        if (object == null) {\r\n            return \"null\";\r\n        }\r\n\r\n        for (let i = 0; i < attributes.length; i++) {\r\n\r\n            let attribute = attributes[i];\r\n            let v = object.getValue(attribute.index);\r\n            if (attribute.type instanceof PrimitiveType) {\r\n                s += attribute.identifier + \":&nbsp;\" + attribute.type.debugOutput(v, maxLength / 2);\r\n            } else {\r\n                s += attribute.identifier + \":&nbsp; {...}\";\r\n            }\r\n            if (i < attributes.length - 1) {\r\n                s += \",&nbsp;\";\r\n            }\r\n\r\n        }\r\n\r\n        return s + \"}\";\r\n    }\r\n\r\n    // static count: number = 0;\r\n    clone(): Klass {\r\n        // Klass.count++;\r\n\r\n        let newKlass: Klass = Object.create(this);\r\n\r\n        newKlass.implements = this.implements.slice(0);\r\n        newKlass.usagePositions = new Map();\r\n        newKlass.isGenericVariantFrom = this;\r\n\r\n        return newKlass;\r\n    }\r\n\r\n}\r\n\r\nexport class StaticClass extends Type {\r\n\r\n    baseClass: StaticClass;\r\n    Klass: Klass;\r\n    // TODO: Initialize\r\n    classObject: RuntimeObject;\r\n\r\n    attributeInitializationProgram: Program;\r\n\r\n    public methods: Method[] = [];\r\n    private methodMap: Map<string, Method> = new Map();\r\n\r\n    public attributes: Attribute[] = [];\r\n    public attributeMap: Map<string, Attribute> = new Map();\r\n    public numberOfAttributesIncludingBaseClass: number = null;\r\n\r\n    constructor(klass: Klass) {\r\n        super();\r\n\r\n        this.Klass = klass;\r\n        this.identifier = klass.identifier;\r\n\r\n        if (klass.baseClass != null) {\r\n            this.baseClass = klass.baseClass.staticClass;\r\n        }\r\n\r\n        this.attributeInitializationProgram = {\r\n            method: null,\r\n            module: this.Klass.module,\r\n            statements: [],\r\n            labelManager: null\r\n        }\r\n\r\n        this.attributeInitializationProgram.labelManager = new LabelManager(this.attributeInitializationProgram);\r\n\r\n    }\r\n\r\n    setupAttributeIndicesRecursive() {\r\n        if (this.baseClass != null && this.baseClass.numberOfAttributesIncludingBaseClass == null) {\r\n            this.baseClass.setupAttributeIndicesRecursive();\r\n        }\r\n        let numberOfAttributesInBaseClasses = this.baseClass == null ? 0 : this.baseClass.numberOfAttributesIncludingBaseClass;\r\n\r\n        for (let a of this.attributes) {\r\n            a.index = numberOfAttributesInBaseClasses++;\r\n            // console.log(this.identifier + \".\" + a.identifier+ \": \" + a.index);\r\n        }\r\n\r\n        this.numberOfAttributesIncludingBaseClass = numberOfAttributesInBaseClasses;\r\n\r\n    }\r\n\r\n\r\n    clearUsagePositions() {\r\n        super.clearUsagePositions();\r\n\r\n        for (let m of this.methods) {\r\n            m.clearUsagePositions();\r\n        }\r\n\r\n        for (let a of this.attributes) {\r\n            a.usagePositions = new Map();\r\n        }\r\n\r\n    }\r\n\r\n    public debugOutput(value: Value, maxLength: number = 40): string {\r\n\r\n        let s: string = \"{\";\r\n        let attributes = this.getAttributes(Visibility.private);\r\n        let object = this.classObject;\r\n\r\n        if (attributes == null) return \"{}\";\r\n\r\n        for (let i = 0; i < attributes.length; i++) {\r\n\r\n            let attribute = attributes[i];\r\n            s += attribute.identifier + \": \" + object == null ? '---' : attribute.type?.debugOutput(object.getValue(attribute.index), maxLength / 2);\r\n            if (i < attributes.length - 1) {\r\n                s += \", \";\r\n            }\r\n\r\n        }\r\n\r\n        return s + \"}\";\r\n    }\r\n\r\n\r\n    getCompletionItems(visibilityUpTo: Visibility,\r\n        leftBracketAlreadyThere: boolean, identifierAndBracketAfterCursor: string,\r\n        rangeToReplace: monaco.IRange): monaco.languages.CompletionItem[] {\r\n\r\n        let itemList: monaco.languages.CompletionItem[] = [];\r\n\r\n        for (let attribute of this.getAttributes(visibilityUpTo)) {\r\n\r\n            itemList.push({\r\n                label: attribute.identifier,\r\n                //@ts-ignore\r\n                detail: attribute.color ? attribute.color : undefined,\r\n                //@ts-ignore\r\n                kind: attribute.color ? monaco.languages.CompletionItemKind.Color : monaco.languages.CompletionItemKind.Field,\r\n                insertText: attribute.identifier,\r\n                range: rangeToReplace,\r\n                documentation: attribute.documentation == null ? undefined : {\r\n                    value: attribute.documentation\r\n                }\r\n            });\r\n        }\r\n\r\n        for (let method of this.getMethods(visibilityUpTo)) {\r\n            itemList.push({\r\n                label: method.getCompletionLabel(),\r\n                filterText: method.identifier,\r\n                kind: monaco.languages.CompletionItemKind.Method,\r\n                insertText: method.getCompletionSnippet(leftBracketAlreadyThere),\r\n                range: rangeToReplace,\r\n                command: {\r\n                    id: \"editor.action.triggerParameterHints\",\r\n                    title: '123',\r\n                    arguments: []\r\n                },\r\n                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n                documentation: method.documentation == null ? undefined : {\r\n                    value: method.documentation\r\n                }\r\n            });\r\n        }\r\n\r\n        return itemList;\r\n    }\r\n\r\n    public equals(type: Type): boolean {\r\n        return type == this;\r\n    }\r\n\r\n    public addMethod(method: Method) {\r\n        this.methods.push(method);\r\n        this.methodMap.set(method.signature, method);\r\n    }\r\n\r\n    public addAttribute(attribute: Attribute) {\r\n        this.attributes.push(attribute);\r\n        this.attributeMap.set(attribute.identifier, attribute);\r\n    }\r\n\r\n    public getResultType(operation: TokenType, secondOperandType?: Type): Type {\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    public compute(operation: TokenType, firstOperand: Value, secondOperand?: Value) {\r\n        return null;\r\n    }\r\n\r\n    public getMethodsThatFitWithCasting(identifier: string, parameterTypes: Type[],\r\n        searchConstructor: boolean, upToVisibility: Visibility): { error: string, methodList: Method[] } {\r\n\r\n        return findSuitableMethods(this.getMethods(upToVisibility), identifier, parameterTypes,\r\n            this.Klass.identifier, searchConstructor);\r\n\r\n    }\r\n\r\n    /**\r\n     * returns all methods of this class and all of its base classes\r\n     * @param isStatic returns only static methods if true\r\n     */\r\n    public getMethods(upToVisibility: Visibility, identifier?: string): Method[] {\r\n\r\n        let methods: Method[] = this.methods.slice().filter((method) => {\r\n            return method.visibility <= upToVisibility && (identifier == null || identifier == method.identifier);\r\n        });\r\n\r\n        if (this.baseClass != null) {\r\n            let baseClassUptoVisibility = upToVisibility == Visibility.public ? Visibility.public : Visibility.protected;\r\n            for (let m of this.baseClass.getMethods(baseClassUptoVisibility, identifier)) {\r\n\r\n                let found = false;\r\n                for (let m1 of methods) {\r\n                    if (m1.signature == m.signature) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!found) {\r\n                    methods.push(m);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return methods;\r\n    }\r\n\r\n    /**\r\n     * returns all attributes of this class and all of its base classes\r\n     * @param isStatic return only static attributes if true\r\n     */\r\n    public getAttributes(visibilityUpTo: Visibility): Attribute[] {\r\n\r\n        let attributes: Attribute[] = this.attributes.filter((attribute) => {\r\n            return attribute.visibility <= visibilityUpTo;\r\n        });\r\n\r\n        if (this.baseClass != null) {\r\n\r\n            let visibilityUpToBaseClass = visibilityUpTo == Visibility.public ? visibilityUpTo : Visibility.protected;\r\n\r\n            for (let a of this.baseClass.getAttributes(visibilityUpToBaseClass)) {\r\n\r\n                let found = false;\r\n\r\n                for (let a1 of attributes) {\r\n                    if (a1.identifier == a.identifier) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!found) {\r\n                    attributes.push(a);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return attributes;\r\n    }\r\n\r\n    public getMethod(identifier: string, parameterlist: Parameterlist): Method {\r\n\r\n        let method = this.methodMap.get(identifier + parameterlist.id);\r\n\r\n        if (method == null && this.baseClass != null) {\r\n            return this.baseClass.getMethod(identifier, parameterlist);\r\n        }\r\n\r\n        return method;\r\n    }\r\n\r\n    public getAttribute(identifier: string, upToVisibility: Visibility): { attribute: Attribute, error: string, foundButInvisible: boolean, staticClass: StaticClass } {\r\n\r\n        let error = \"\";\r\n        let notFound = false;\r\n        let attribute = this.attributeMap.get(identifier);\r\n\r\n        if (attribute == null) {\r\n            notFound = true;\r\n            error = \"Das Attribut \" + identifier + \" konnte nicht gefunden werden.\";\r\n        } else if (attribute.visibility > upToVisibility) {\r\n            error = \"Das Attribut \" + identifier + \" hat die Sichtbarkeit \" + Visibility[attribute.visibility] + \" und ist hier daher nicht sichtbar.\";\r\n            attribute = null;\r\n        }\r\n\r\n        if (attribute == null && this.baseClass != null) {\r\n            let upToVisibilityInBaseClass = upToVisibility == Visibility.public ? upToVisibility : Visibility.protected;\r\n\r\n            let baseClassAttributeWithError = this.baseClass.getAttribute(identifier, upToVisibilityInBaseClass);\r\n            if (notFound) {\r\n                return baseClassAttributeWithError;\r\n            }\r\n        }\r\n\r\n        return { attribute: attribute, error: error, foundButInvisible: !notFound, staticClass: this };\r\n    }\r\n\r\n    public canCastTo(type: Type): boolean {\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    public castTo(value: Value, type: Type): Value {\r\n        return value;\r\n    }\r\n\r\n    hasAncestorOrIs(a: Klass | StaticClass) {\r\n        let c: Klass | StaticClass = this;\r\n        while (c != null) {\r\n            if (c == a) return true;\r\n            c = c.baseClass;\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\nexport class Interface extends Type {\r\n\r\n    // for Generics:\r\n    typeVariables: TypeVariable[] = [];\r\n    isGenericVariantFrom: Interface;\r\n    typeVariablesReady: boolean = true;\r\n\r\n    public module: Module;\r\n\r\n    public extends: Interface[] = [];\r\n\r\n    public methods: Method[] = [];\r\n    private methodMap: Map<string, Method> = new Map();\r\n\r\n    constructor(identifier: string, module: Module, documentation?: string) {\r\n        super();\r\n        this.documentation = documentation;\r\n        this.identifier = identifier;\r\n        this.module = module;\r\n    }\r\n\r\n    getNonGenericIdentifier(): string {\r\n        let k: Interface = this;\r\n        while (k.isGenericVariantFrom != null) k = k.isGenericVariantFrom;\r\n        return k.identifier;\r\n    }\r\n\r\n    getThisOrExtendedInterface(identifier: String): Interface {\r\n        if (this.getNonGenericIdentifier() == identifier) return this;\r\n        for (let if1 of this.extends) {\r\n            let if2 = if1.getThisOrExtendedInterface(identifier);\r\n            if (if2 != null) return if2;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // static count: number = 0;\r\n    clone(): Interface {\r\n        // Interface.count++;\r\n        let newInterface: Interface = Object.create(this);\r\n\r\n        newInterface.usagePositions = new Map();\r\n        newInterface.isGenericVariantFrom = this;\r\n\r\n        return newInterface;\r\n    }\r\n\r\n    clearUsagePositions() {\r\n        super.clearUsagePositions();\r\n\r\n        for (let m of this.methods) {\r\n            m.clearUsagePositions();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    getCompletionItems(leftBracketAlreadyThere: boolean, identifierAndBracketAfterCursor: string,\r\n        rangeToReplace: monaco.IRange): monaco.languages.CompletionItem[] {\r\n\r\n        let itemList: monaco.languages.CompletionItem[] = [];\r\n\r\n        for (let method of this.getMethods()) {\r\n            itemList.push({\r\n                label: method.getCompletionLabel(),\r\n                filterText: method.identifier,\r\n                kind: monaco.languages.CompletionItemKind.Method,\r\n                insertText: method.getCompletionSnippet(leftBracketAlreadyThere),\r\n                range: rangeToReplace,\r\n                command: {\r\n                    id: \"editor.action.triggerParameterHints\",\r\n                    title: '123',\r\n                    arguments: []\r\n                },\r\n                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n                documentation: method.documentation == null ? undefined : {\r\n                    value: method.documentation\r\n                }\r\n            });\r\n        }\r\n\r\n        return itemList;\r\n    }\r\n\r\n    public debugOutput(value: Value, maxLength: number = 40): string {\r\n        if (value.value == null) {\r\n            return \"null\";\r\n        } else {\r\n            if (value.value instanceof RuntimeObject) {\r\n                return value.value.class.debugOutput(value);\r\n            } else {\r\n                return \"{...}\";\r\n            }\r\n        }\r\n    }\r\n\r\n    public equals(type: Type): boolean {\r\n        return type == this;\r\n    }\r\n\r\n    public addMethod(method: Method) {\r\n        method.isAbstract = true;\r\n        this.methods.push(method);\r\n        this.methodMap.set(method.signature, method);\r\n    }\r\n\r\n    public getResultType(operation: TokenType, secondOperandType?: Type): Type {\r\n\r\n        if (operation == TokenType.equal || operation == TokenType.notEqual) {\r\n            return booleanPrimitiveTypeCopy;\r\n        }\r\n\r\n        if (operation == TokenType.keywordInstanceof) {\r\n            if (secondOperandType instanceof StaticClass || secondOperandType instanceof Interface) {\r\n                return booleanPrimitiveTypeCopy;\r\n            }\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    public compute(operation: TokenType, firstOperand: Value, secondOperand?: Value) {\r\n\r\n        if (operation == TokenType.equal) {\r\n            return firstOperand.value == secondOperand.value;\r\n        }\r\n\r\n        if (operation == TokenType.notEqual) {\r\n            return firstOperand.value != secondOperand.value;\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    methodsWithSubInterfaces: Method[];\r\n\r\n    /**\r\n     * returns all methods of this interface\r\n     * @param isStatic is not used in interfaces\r\n     */\r\n    public getMethods(): Method[] {\r\n\r\n        if (this.extends.length == 0) return this.methods;\r\n\r\n        if (this.methodsWithSubInterfaces != null) return this.methodsWithSubInterfaces;\r\n\r\n        let visitedInterfaces: { [key: string]: boolean } = {};\r\n        let visitedMethods: { [signature: string]: boolean } = {};\r\n\r\n        this.methodsWithSubInterfaces = this.methods.slice(0);\r\n        for (let m of this.methods) visitedMethods[m.signature] = true;\r\n        visitedInterfaces[this.identifier] = true;\r\n\r\n        let todo: Interface[] = this.extends.slice(0);\r\n\r\n        while (todo.length > 0) {\r\n            let interf = todo.pop();\r\n            for (let m of interf.methods) {\r\n                if (!visitedMethods[m.signature]) {\r\n                    this.methodsWithSubInterfaces.push(m);\r\n                    visitedMethods[m.signature] = true;\r\n                }\r\n            }\r\n            for (let i of interf.extends) {\r\n                if (!visitedInterfaces[i.identifier]) {\r\n                    todo.push(i);\r\n                    visitedInterfaces[i.identifier] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.methodsWithSubInterfaces;\r\n\r\n    }\r\n\r\n    public getMethod(identifier: string, parameterlist: Parameterlist): Method {\r\n\r\n        return this.methodMap.get(identifier + parameterlist.id);\r\n\r\n    }\r\n\r\n    public canCastTo(type: Type): boolean {\r\n\r\n        if (type instanceof Interface) {\r\n            let nonGenericCastable = false;\r\n            if (type.getNonGenericIdentifier() == this.getNonGenericIdentifier()) {\r\n                nonGenericCastable = true;\r\n                if (this.typeVariables.length == 0) return true;\r\n                let type2 = <Interface>type;\r\n                if (this.typeVariables.length != type2.typeVariables.length) return false;\r\n                for (let i = 0; i < this.typeVariables.length; i++) {\r\n                    let tv = this.typeVariables[i];\r\n                    let tvOther = type2.typeVariables[i];\r\n                    if (!tvOther.type.canCastTo(tv.type)) return false;\r\n                }\r\n                return false;\r\n            } else {\r\n                for (let type1 of this.extends) {\r\n                    if (type1.canCastTo(type)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        } else {\r\n            if (type instanceof Klass && type.getNonGenericIdentifier() == \"Object\") {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        // return (type instanceof Klass) || (type instanceof Interface);\r\n    }\r\n\r\n    public castTo(value: Value, type: Type): Value {\r\n        return value;\r\n    }\r\n\r\n    public getMethodsThatFitWithCasting(identifier: string, parameterTypes: Type[], searchConstructor: boolean): { error: string, methodList: Method[] } {\r\n\r\n        return findSuitableMethods(this.getMethods(), identifier, parameterTypes, this.identifier, searchConstructor);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction findSuitableMethods(methodList: Method[], identifier: string, parameterTypes: Type[],\r\n    classIdentifier: string,\r\n    searchConstructor: boolean): { error: string, methodList: Method[] } {\r\n\r\n    let suitableMethods: Method[] = [];\r\n    let howManyCastingsMax: number = 10000;\r\n    let error = null;\r\n\r\n    let oneWithCorrectIdentifierFound = false;\r\n\r\n    for (let m of methodList) {\r\n\r\n        let howManyCastings = 0;\r\n        if (m.identifier == identifier || m.isConstructor && searchConstructor) {\r\n\r\n            oneWithCorrectIdentifierFound = true;\r\n\r\n            let isEllipsis = m.hasEllipsis();\r\n            if (m.getParameterCount() == parameterTypes.length || (isEllipsis && m.getParameterCount() <= parameterTypes.length)) {\r\n\r\n                let suits = true;\r\n\r\n                let i = 0;\r\n\r\n                for (i = 0; i < m.getParameterCount() - (isEllipsis ? 1 : 0); i++) {\r\n                    let mParameterType = m.getParameterType(i);\r\n                    let givenType = parameterTypes[i];\r\n\r\n                    if (givenType == null) {\r\n                        suits = false; break;\r\n                    }\r\n\r\n                    if (mParameterType == givenType) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (givenType.canCastTo(mParameterType)) {\r\n                        howManyCastings++;\r\n                        /**\r\n                         * Rechteck r; \r\n                         * GNGFigur f;\r\n                         * Bei f.berührt(r) gibt es eine Variante mit Parametertyp String (schlecht!) und\r\n                         * eine mit Parametertyp Object. Letztere soll genommen werden, also:\r\n                         */\r\n                        if (mParameterType == stringPrimitiveType) howManyCastings += 0.5;\r\n                        continue;\r\n                    }\r\n\r\n                    suits = false;\r\n                    break;\r\n                }\r\n\r\n                // Ellipsis!\r\n                if (suits && isEllipsis) {\r\n                    let mParameterEllipsis = m.getParameter(i);\r\n                    let mParameterTypeEllispsis = (<ArrayType>mParameterEllipsis.type).arrayOfType;\r\n\r\n\r\n                    for (let j = i; j < parameterTypes.length; j++) {\r\n                        let givenType = parameterTypes[i];\r\n\r\n                        if (givenType == null) {\r\n                            suits = false; break;\r\n                        }\r\n\r\n                        if (mParameterTypeEllispsis == givenType) {\r\n                            continue;\r\n                        }\r\n\r\n                        if (givenType.canCastTo(mParameterTypeEllispsis)) {\r\n                            howManyCastings++;\r\n                            /**\r\n                             * Rechteck r; \r\n                             * GNGFigur f;\r\n                             * Bei f.berührt(r) gibt es eine Variante mit Parametertyp String (schlecht!) und\r\n                             * eine mit Parametertyp Object. Letztere soll genommen werden, also:\r\n                             */\r\n                            if (mParameterTypeEllispsis == stringPrimitiveType) howManyCastings += 0.5;\r\n                            continue;\r\n                        }\r\n\r\n                        suits = false;\r\n                        break;\r\n                    }\r\n\r\n                }\r\n\r\n                if (suits && howManyCastings <= howManyCastingsMax) {\r\n                    if (howManyCastings < howManyCastingsMax) {\r\n                        suitableMethods = [];\r\n                    }\r\n                    suitableMethods.push(m);\r\n                    howManyCastingsMax = howManyCastings;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    if (suitableMethods.length == 0) {\r\n\r\n        if (oneWithCorrectIdentifierFound) {\r\n            if (parameterTypes.length == 0) {\r\n                error = searchConstructor ? \"Es gibt keinen parameterlosen Konstruktor der Klasse \" + classIdentifier : \"Die vorhandenen Methoden mit dem Bezeichner \" + identifier + \" haben alle mindestens einen Parameter. Hier wird aber kein Parameterwert übergeben.\";\r\n            } else {\r\n                let typeString = parameterTypes.map(type => type?.identifier).join(\", \");\r\n                error = searchConstructor ? `Die Parametertypen (${typeString}) passen zu keinem Konstruktor der Klasse ${classIdentifier}` : `Die Parametertypen (${typeString}) passen zu keiner der vorhandenen Methoden mit dem Bezeichner ${identifier}.`;\r\n            }\r\n        } else {\r\n            error = \"Der Typ \" + classIdentifier + \" besitzt keine Methode mit dem Bezeichner \" + identifier + \".\";\r\n            if (identifier == 'setCenter') {\r\n                error += ' Tipp: Die Methode setCenter der Klasse Shape wurde umbenannt in \"moveTo\".'\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    if (suitableMethods.length > 1) {\r\n        suitableMethods = suitableMethods.slice(0, 1);\r\n        // error = \"Zu den gegebenen Parametern hat der Typ \" + classIdentifier + \" mehrere passende Methoden.\";\r\n    }\r\n\r\n    return {\r\n        error: error,\r\n        methodList: suitableMethods\r\n    };\r\n\r\n}\r\n\r\nexport function getVisibilityUpTo(objectType: Klass | StaticClass, currentClassContext: Klass | StaticClass): Visibility {\r\n\r\n    if (currentClassContext == null) {\r\n        return Visibility.public;\r\n    }\r\n\r\n    if (objectType instanceof StaticClass) objectType = objectType.Klass;\r\n    if (currentClassContext instanceof StaticClass) currentClassContext = currentClassContext.Klass;\r\n\r\n    if (objectType == currentClassContext) {\r\n        return Visibility.private;\r\n    }\r\n\r\n    if (currentClassContext.hasAncestorOrIs(objectType)) {\r\n        return Visibility.protected;\r\n    }\r\n\r\n    return Visibility.public;\r\n\r\n}\r\n\r\n\r\nexport class UnboxableKlass extends Klass {\r\n\r\n    public unboxableAs: Type[] = [];\r\n\r\n    public castTo(value: Value, type: Type): Value {\r\n        if (!(type instanceof PrimitiveType)) return null;\r\n        if (this.unboxableAs.includes(type)) {\r\n            if (value.value == null && !type.allowsNull()) throw Error(\"null kann nicht in einen primitiven \" + type.identifier + \" umgewandelt werden.\");\r\n            else return {\r\n                value: value.value,\r\n                type: type\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    canCastTo(type: Type): boolean {\r\n        return this.unboxableAs.indexOf(type) >= 0 || super.canCastTo(type);\r\n    }\r\n\r\n}","import { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { TextPosition, TokenType } from \"../lexer/Token.js\";\r\nimport { Module } from \"../parser/Module.js\";\r\nimport { Program } from \"../parser/Program.js\";\r\nimport { ArrayType } from \"./Array.js\";\r\nimport { Visibility } from \"./Class.js\";\r\n\r\nexport type UsagePositions = Map<Module, TextPosition[]>;\r\n\r\nexport type TextPositionWithModule = {\r\n    module: Module,\r\n    position: TextPosition,\r\n    monacoModel?: monaco.editor.ITextModel\r\n}\r\n\r\nexport type CastInformation = {\r\n    automatic: boolean,\r\n    needsStatement: boolean\r\n}\r\n\r\nexport abstract class Type {\r\n\r\n    public onlyFirstPass = false;\r\n\r\n    public usagePositions: UsagePositions = new Map();\r\n    public declaration: TextPositionWithModule;\r\n\r\n    public identifier: string;\r\n    public documentation: string = \"\";\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public abstract getResultType(operation: TokenType, secondOperandType?: Type): Type;\r\n\r\n    public abstract compute(operation: TokenType, firstOperand: Value, secondOperand?: Value): any;\r\n\r\n    public abstract canCastTo(type: Type): boolean;\r\n\r\n    public abstract castTo(value: Value, type: Type): Value;\r\n\r\n    public abstract equals(type: Type): boolean;\r\n\r\n    public toTokenType(): TokenType {\r\n        return null;\r\n    };\r\n\r\n    public abstract debugOutput(value: Value, maxLength?: number): string;\r\n\r\n    clearUsagePositions() {\r\n        this.usagePositions = new Map();\r\n    }\r\n\r\n}\r\n\r\nexport abstract class PrimitiveType extends Type {\r\n\r\n    public initialValue: any = null;\r\n\r\n    public description: string = \"\";\r\n\r\n    protected operationTable: { [operation: number]: { [typename: string]: Type } }\r\n\r\n    protected canCastToMap: { [type: string]: CastInformation };\r\n\r\n    public equals(type: Type): boolean {\r\n        return type == this;\r\n    }\r\n\r\n    public getResultType(operation: TokenType, secondOperandType?: Type): Type {\r\n\r\n        let opTypeMap = this.operationTable[operation];\r\n\r\n        if (opTypeMap == null) {\r\n            return null; // Operation not possible\r\n        }\r\n\r\n        if (secondOperandType != null) {\r\n            return opTypeMap[secondOperandType.identifier];\r\n        }\r\n\r\n        return opTypeMap[\"none\"];\r\n\r\n    }\r\n\r\n    public canCastTo(type: Type): boolean {\r\n        return this.canCastToMap[type.identifier] != null;\r\n    }\r\n\r\n    public getCastInformation(type: Type): CastInformation {\r\n        return this.canCastToMap[type.identifier];\r\n    }\r\n\r\n    public allowsNull(): boolean { return false; }\r\n\r\n    public valueToString(value: Value): string {\r\n        return  \"\" + value.value;\r\n    }\r\n\r\n}\r\n\r\nexport class Attribute {\r\n\r\n    onlyFirstPass: boolean = false;\r\n\r\n    identifier: string;\r\n\r\n    index: number;\r\n\r\n    type: Type;\r\n    isStatic: boolean;\r\n    isFinal: boolean;\r\n    isTransient: boolean;\r\n    visibility: Visibility;\r\n    updateValue: (value: Value) => void;\r\n    usagePositions: UsagePositions;\r\n    declaration: TextPositionWithModule;\r\n    documentation: string;\r\n    annotation?: string;\r\n\r\n    constructor(name: string, type: Type, updateValue: (value: Value) => void,\r\n        isStatic: boolean, visibility: Visibility, isFinal: boolean, documentation?: string) {\r\n        this.identifier = name;\r\n        this.type = type;\r\n        this.updateValue = updateValue;\r\n        this.isStatic = isStatic;\r\n        this.visibility = visibility;\r\n        this.isFinal = isFinal;\r\n        this.usagePositions = new Map();\r\n        this.documentation = documentation;\r\n    }\r\n}\r\n\r\nexport class Method extends Type {\r\n\r\n    onlyFirstPass: boolean = false;\r\n\r\n    visibility: Visibility;\r\n\r\n    isAbstract: boolean;\r\n    isStatic: boolean;\r\n    isConstructor: boolean = false;\r\n    isVirtual: boolean = false; // true, if child class has method with same signature\r\n\r\n    parameterlist: Parameterlist;\r\n    returnType: Type;\r\n    annotation?: string;\r\n\r\n    invoke?: (parameters: Value[]) => any;  // only for system functions\r\n    program?: Program;\r\n\r\n    reserveStackForLocalVariables: number = 0;\r\n\r\n    hasGenericTypes: boolean;\r\n\r\n    genericTypeMap: { [identifier: string]: Type } = null;\r\n\r\n    public signature: string;\r\n\r\n    implements(m: Method): boolean {\r\n        if(this.identifier != m.identifier) return false;\r\n        if(this.returnType == null || this.returnType.identifier == \"void\"){\r\n            if(m.returnType != null && m.returnType.identifier != \"void\") return false;\r\n        } else {\r\n\r\n            if(m.returnType instanceof PrimitiveType){\r\n                if(m.returnType != this.returnType) {\r\n                    return false;\r\n                }\r\n            } else if(!this.returnType.canCastTo(m.returnType)){\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if(this.parameterlist.parameters.length != m.parameterlist.parameters.length) return false;\r\n\r\n        for(let i = 0; i < this.parameterlist.parameters.length; i++){\r\n            let myParameter = this.parameterlist.parameters[i];\r\n            let mParameter = m.parameterlist.parameters[i];\r\n\r\n            if(mParameter.type instanceof PrimitiveType){\r\n                if(mParameter.type != myParameter.type){\r\n                    return false;\r\n                }\r\n            } else if(!mParameter.type.canCastTo(myParameter.type)) return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    hasEllipsis(): boolean {\r\n        if(this.parameterlist.parameters.length == 0) return false;\r\n        return this.parameterlist.parameters[this.parameterlist.parameters.length - 1].isEllipsis;\r\n    }\r\n\r\n\r\n    getParameterType(index: number): Type {\r\n        return this.parameterlist.parameters[index].type;\r\n    }\r\n\r\n    getParameter(index: number): Variable {\r\n        return this.parameterlist.parameters[index];\r\n    }\r\n\r\n    getReturnType(): Type {\r\n        return this.returnType;\r\n    }\r\n\r\n    getParameterCount() {\r\n        return this.parameterlist.parameters.length;\r\n    }\r\n\r\n    getParameterList(): Parameterlist {\r\n        return this.parameterlist;\r\n    }\r\n\r\n\r\n\r\n    constructor(name: string, parameterlist: Parameterlist, returnType: Type,\r\n        invokeOrAST: ((parameters: Value[]) => any) | Program,\r\n        isAbstract: boolean, isStatic: boolean, documentation?: string, isConstructor: boolean = false) {\r\n        super();\r\n        this.identifier = name;\r\n        this.parameterlist = parameterlist;\r\n        this.returnType = returnType;\r\n        this.isAbstract = isAbstract;\r\n        this.isStatic = isStatic;\r\n        this.visibility = 0;\r\n        this.documentation = documentation;\r\n        this.isConstructor = isConstructor;\r\n\r\n        if (invokeOrAST != null) {\r\n            if (typeof invokeOrAST == \"function\") {\r\n                this.invoke = invokeOrAST;\r\n            } else {\r\n                this.program = invokeOrAST;\r\n                invokeOrAST.method = this;\r\n            }\r\n        }\r\n\r\n        this.signature = name + parameterlist.id;\r\n\r\n        for (let p of parameterlist.parameters) {\r\n            if (p[\"isTypeVariable\"] == true) {\r\n                this.hasGenericTypes = true; break;\r\n            }\r\n        }\r\n\r\n        this.hasGenericTypes = this.hasGenericTypes || (this.returnType != null && this.returnType[\"isTypeVariable\"] == true);\r\n    }\r\n\r\n    getSignatureWithReturnParameter(){\r\n        if(this.returnType != null){\r\n            return this.returnType.identifier + \" \" + this.signature;\r\n        } else {\r\n            return \"void \" + this.signature;\r\n        }\r\n    }\r\n\r\n    getCompletionLabel() {\r\n\r\n        let label = \"\";\r\n\r\n        if (this.returnType != null && this.returnType.identifier != \"void\") {\r\n            label += getTypeIdentifier(this.returnType) + \" \";\r\n        }\r\n\r\n        label += this.identifier + \"(\";\r\n\r\n        let parameters = this.parameterlist.parameters;\r\n        for (let i = 0; i < parameters.length; i++) {\r\n\r\n            let p = parameters[i];\r\n            if(p.isEllipsis){\r\n                let arrayType: ArrayType = <any>p.type;\r\n                label += getTypeIdentifier(arrayType.arrayOfType) + \"... \" + p.identifier;\r\n            } else {\r\n                label += getTypeIdentifier(p.type) + \" \" + p.identifier;\r\n            }\r\n\r\n            if (i < parameters.length - 1) {\r\n                label += \", \";\r\n            }\r\n\r\n        }\r\n\r\n        label += \")\";\r\n\r\n        return label;\r\n    }\r\n\r\n\r\n    getCompletionSnippet(leftBracketAlreadyThere: boolean) {\r\n\r\n        if (leftBracketAlreadyThere) return this.identifier + \"($0\";\r\n\r\n        let snippet = \"\";\r\n\r\n        snippet += this.identifier + \"(\";\r\n\r\n        let isVoidReturn = this.returnType == null || this.returnType.identifier == \"void\";\r\n        let isVoidReturnDelta = isVoidReturn ? 1 : 0;\r\n\r\n        let parameters = this.parameterlist.parameters;\r\n        for (let i = 0; i < parameters.length; i++) {\r\n\r\n            let p = parameters[i];\r\n            snippet += \"${\" + ((i + 1) % (parameters.length + isVoidReturnDelta)) + \":\" + p.identifier + \"}\";\r\n\r\n            if (i < parameters.length - 1) {\r\n                snippet += \", \";\r\n            }\r\n\r\n        }\r\n\r\n        snippet += \")\";\r\n\r\n        if(this.returnType == null || this.returnType.identifier == \"void\"){\r\n            snippet += \";$0\";\r\n        }\r\n\r\n        return snippet;\r\n    }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return \"\";\r\n    }\r\n\r\n    public equals(type: Type): boolean {\r\n        return type == this;\r\n    }\r\n\r\n    public getResultType(operation: TokenType, secondOperandType?: Type): Type {\r\n        return null;\r\n    }\r\n\r\n    public compute(operation: TokenType, firstOperand: Value, secondOperand?: Value): any {\r\n        return null;\r\n    }\r\n\r\n    public canCastTo(type: Type): boolean {\r\n        return false;\r\n    }\r\n\r\n    public castTo(value: Value, type: Type): Value { return value }\r\n\r\n\r\n}\r\n\r\nexport class Parameterlist {\r\n\r\n    id: string;\r\n\r\n    parameters: Variable[];\r\n\r\n    constructor(parameters: Variable[]) {\r\n        this.parameters = parameters;\r\n        this.computeId();\r\n    }\r\n\r\n    computeId() {\r\n        this.id = \"(\";\r\n        let i = 0;\r\n        while (i < this.parameters.length) {\r\n            this.id += this.parameters[i].type.identifier;\r\n            if (i < this.parameters.length - 1) {\r\n                this.id += \", \";\r\n            }\r\n            i++;\r\n        }\r\n        this.id += \")\";\r\n    }\r\n}\r\n\r\nexport type Variable = {\r\n    identifier: string,\r\n    type: Type,\r\n    stackPos?: number;\r\n    usagePositions: UsagePositions,\r\n    declaration: TextPositionWithModule,\r\n    isFinal: boolean,\r\n    isEllipsis?: boolean,\r\n    value?: Value // only for variables on heap,\r\n    declarationError?: any,     // if v.declarationError != null then variable has been used before initialization.\r\n    usedBeforeInitialization?: boolean,\r\n    initialized?: boolean\r\n}\r\n\r\nexport type Heap = { [identifier: string]: Variable };\r\n\r\nexport type Value = {\r\n    type: Type;\r\n    value: any;\r\n    updateValue?: (value: Value) => void;\r\n    object?: RuntimeObject;\r\n}\r\n\r\n\r\nexport function getTypeIdentifier(type: Type): string {\r\n    if(type[\"typeVariables\"]){\r\n        if(type[\"typeVariables\"].length > 0){\r\n            let s: string = (type[\"isTypeVariable\"] ? (type.identifier + \" extends \" + type[\"isGenericVariantFrom\"]?.identifier) : type.identifier) \r\n            + \"<\";\r\n               s += type[\"typeVariables\"].map(tv => getTypeIdentifier(tv.type)).join(\", \");\r\n            return s + \">\";\r\n        }\r\n    }\r\n\r\n    return type[\"isTypeVariable\"] ? (type.identifier + \" extends \" + type[\"isGenericVariantFrom\"]?.identifier) : type.identifier;\r\n}\r\n","import { Klass, StaticClass, Visibility } from \"../compiler/types/Class.js\";\r\nimport { PrimitiveType, Value } from \"../compiler/types/Types.js\";\r\n\r\n\r\n\r\nexport class RuntimeObject {\r\n\r\n    class: Klass | StaticClass;\r\n\r\n    intrinsicData: {[classIdentifier: string]: any} = {};  // for intrinsic (= builtin) classes to store data\r\n\r\n    // Attributes of class and base-classes\r\n    // Map class-identifier to Map <attribute-identifier, attribute-value>\r\n    // attributeValues: Map<string, Map<string, Value>> = new Map();\r\n    attributes: Value[];\r\n\r\n    constructor(klass: Klass | StaticClass ) {\r\n\r\n        this.class = klass;\r\n\r\n        this.initializeAttributeValues();\r\n\r\n    }\r\n\r\n    getValue(attributeIndex: number):Value{\r\n\r\n        let av: Value = this.attributes[attributeIndex];\r\n        if(av?.updateValue != null){\r\n            av.updateValue(av);\r\n        }\r\n        return av;\r\n\r\n    }\r\n\r\n    private initializeAttributeValues(){\r\n\r\n        this.attributes = Array(this.class.numberOfAttributesIncludingBaseClass).fill(null);\r\n\r\n        let klass = this.class;\r\n        while(klass != null){\r\n\r\n            for(let att of klass.attributes){\r\n                \r\n                let value:any = null;\r\n                if(att.type instanceof PrimitiveType){\r\n                    value = att.type.initialValue;\r\n                }\r\n\r\n                let v: Value = {\r\n                    type: att.type,\r\n                    value: value\r\n                };\r\n\r\n                if(att.updateValue != null){\r\n                    v.updateValue = att.updateValue;\r\n                    v.object = this;\r\n                } \r\n                \r\n                this.attributes[att.index] = v;\r\n\r\n            }\r\n\r\n            klass = klass.baseClass;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function deepCopy(obj: any): any {\r\n\r\n    var copy: any;\r\n\r\n    // Handle the 3 simple types, and null or undefined\r\n    if (null == obj || \"object\" != typeof obj) return obj;\r\n\r\n    // Handle Date\r\n    if (obj instanceof Date) {\r\n        copy = new Date();\r\n        copy.setTime(obj.getTime());\r\n        return copy;\r\n    }\r\n\r\n    // Handle Array\r\n    if (obj instanceof Array) {\r\n        copy = [];\r\n        for (var i = 0, len = obj.length; i < len; i++) {\r\n            copy[i] = deepCopy(obj[i]);\r\n        }\r\n        return copy;\r\n    }\r\n\r\n    // Handle Object\r\n    if (obj instanceof Object) {\r\n        copy = {};\r\n        for (var attr in obj) {\r\n            if (obj.hasOwnProperty(attr)) copy[attr] = deepCopy(obj[attr]);\r\n        }\r\n        return copy;\r\n    }\r\n\r\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\r\n\r\n}\r\n\r\n","import { Statement, JumpNode, Program, JumpOnSwitchStatement } from \"./Program.js\";\r\nimport { TokenType, TextPosition } from \"../lexer/Token.js\";\r\nimport { CodeGenerator } from \"./CodeGenerator.js\";\r\n\r\ntype nodeToResolve = {\r\n    node: JumpNode,\r\n    labelIndex: number\r\n}\r\n\r\ntype LabeledNode = {\r\n    node?: Statement,\r\n    labelIndex: number,\r\n    position?: number\r\n}\r\n\r\n\r\nexport class LabelManager {\r\n\r\n    maxLabelIndex: number = 0;\r\n\r\n    labeledNodes: LabeledNode[] = [];\r\n    \r\n    labelMap: Map<number, LabeledNode> = new Map();\r\n    jumpNodesToResolve: nodeToResolve[] = [];\r\n\r\n    switchStatements: JumpOnSwitchStatement[] = [];\r\n\r\n    program: Program;\r\n\r\n    constructor(program: Program){\r\n        this.program = program;\r\n    }\r\n\r\n    correctPositionsAfterInsert(insertPosition: number, insertedLength: number) {\r\n        for(let ln of this.labeledNodes){\r\n            if(ln.position != null && ln.position >= insertPosition){\r\n                ln.position += insertedLength;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    registerSwitchStatement(switchStatement: JumpOnSwitchStatement) {\r\n        this.switchStatements.push(switchStatement);\r\n    }\r\n\r\n    insertJumpNode(type: TokenType.jumpIfTrue|TokenType.jumpIfFalse|TokenType.jumpAlways|\r\n        TokenType.jumpIfFalseAndLeaveOnStack|TokenType.jumpIfTrueAndLeaveOnStack,\r\n         position: TextPosition, codeGenerator: CodeGenerator, labelIndex?: number): number {\r\n        \r\n        let statementList = this.program.statements;\r\n\r\n        if(position == null){\r\n            if(statementList.length > 0){\r\n                position = statementList[statementList.length - 1].position;\r\n            }\r\n        }\r\n\r\n        let node: JumpNode = {\r\n            type: type,\r\n            position: position,\r\n            stepFinished: true\r\n        };\r\n\r\n        codeGenerator.pushStatements(node);\r\n\r\n        return this.registerJumpNode(node, labelIndex);\r\n\r\n    }\r\n\r\n    markJumpDestination(offset: number, labelIndex?:number): number {\r\n        \r\n        let position = this.program.statements.length - 1 + offset;\r\n        \r\n        if(labelIndex == null){\r\n            labelIndex = this.maxLabelIndex++;\r\n        }\r\n\r\n        let labeledNode = {\r\n            position: position,\r\n            labelIndex: labelIndex\r\n        };\r\n\r\n        this.labeledNodes.push(labeledNode);\r\n\r\n        this.labelMap.set(labelIndex, labeledNode);\r\n\r\n        return labelIndex;\r\n\r\n    }\r\n\r\n    removeNode(node: Statement){\r\n        for(let i = 0; i < this.labeledNodes.length; i++){\r\n            let n = this.labeledNodes[i];\r\n            if(n.node == node){\r\n\r\n                let index = this.program.statements.indexOf(node);\r\n               \r\n                if(index < this.program.statements.length - 1){\r\n                    let newNode = this.program.statements[index + 1];\r\n                    n.node = newNode;\r\n                }\r\n\r\n            } else {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    private registerJumpDestination(node: Statement, labelIndex?: number): number {\r\n\r\n        if(labelIndex == null){\r\n            labelIndex = this.maxLabelIndex++;\r\n        }\r\n\r\n        let label: LabeledNode = {\r\n            node: node,\r\n            labelIndex: labelIndex\r\n        }\r\n\r\n        this.labeledNodes.push(label);\r\n        this.labelMap.set(labelIndex, label);\r\n\r\n        return labelIndex;\r\n    }\r\n\r\n    public registerJumpNode(node: JumpNode, labelIndex?: number): number {\r\n\r\n        if(labelIndex == null){\r\n            labelIndex = this.maxLabelIndex++;\r\n        }\r\n\r\n        let ntr: nodeToResolve = {\r\n            labelIndex: labelIndex,\r\n            node: node\r\n        }\r\n\r\n        this.jumpNodesToResolve.push(ntr);\r\n\r\n        return labelIndex;\r\n\r\n    }\r\n\r\n    resolveNodes(){\r\n        for(let ln of this.labeledNodes){\r\n\r\n            if(ln.position == null){\r\n                ln.position = this.program.statements.indexOf(ln.node);\r\n            } else {\r\n                while(ln.position > this.program.statements.length - 1){\r\n                    this.program.statements.push({\r\n                        type: TokenType.noOp,\r\n                        position: null\r\n                    });\r\n                }\r\n                ln.node = this.program.statements[ln.position];\r\n            }\r\n\r\n        }\r\n\r\n        for(let jn of this.jumpNodesToResolve){\r\n            let dest = this.labelMap.get(jn.labelIndex);\r\n            if(dest != null){\r\n                jn.node.destination = dest.position;\r\n            }\r\n        }\r\n\r\n        for(let sw of this.switchStatements){\r\n            for(let dl of sw.destinationLabels){\r\n                sw.destinationMap[dl.constant] = this.labelMap.get(dl.label).position;\r\n            }\r\n            sw.destinationLabels = null;\r\n            if(sw.defaultDestination != null){\r\n                sw.defaultDestination = this.labelMap.get(sw.defaultDestination).position;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n","import { Method, Attribute, Value, Type, Parameterlist, PrimitiveType } from \"./Types.js\";\r\nimport { TokenType } from \"../lexer/Token.js\";\r\nimport { intPrimitiveType } from \"./PrimitiveTypes.js\";\r\nimport { Visibility } from \"./Class.js\";\r\n\r\nexport class ArrayType extends Type {\r\n\r\n    public arrayOfType: Type;\r\n    private lengthAttribute: Attribute;\r\n\r\n    constructor(arrayOfType: Type){\r\n        super();\r\n        this.arrayOfType = arrayOfType;\r\n        this.identifier = \"Array\";\r\n\r\n        if(arrayOfType != null){\r\n            this.identifier = arrayOfType.identifier + \"[]\";\r\n        }\r\n\r\n        this.lengthAttribute = new Attribute(\"length\", intPrimitiveType, (object: Value) => {\r\n            return (<any[]>object.value).length;\r\n        }, false, Visibility.public, true);\r\n    }   \r\n\r\n    public equals(type:Type): boolean{\r\n        return (type instanceof ArrayType) && type.arrayOfType.equals(this.arrayOfType);\r\n    }\r\n\r\n    public get id():string{\r\n        return this.arrayOfType.identifier + \"[]\";\r\n    }\r\n\r\n    public getResultType(operation: TokenType, secondOperandType?: Type): Type {\r\n        if(operation == TokenType.referenceElement){\r\n            return this.arrayOfType;\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    public compute(operation: TokenType, firstOperand: Value, secondOperand?: Value): any {\r\n\r\n        if(operation == TokenType.referenceElement){\r\n            return <any[]>firstOperand.value[<number>secondOperand.value];\r\n        }\r\n\r\n    }\r\n\r\n    public getMethod(identifier: string, signature: Parameterlist): Method{\r\n        return null;\r\n    }\r\n\r\n    public getAttribute(identifier: string): Attribute{\r\n        if(identifier == \"length\"){\r\n            return this.lengthAttribute;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public canCastTo(type: Type): boolean{\r\n\r\n        if(!(type instanceof ArrayType)){\r\n            return false;\r\n        }\r\n\r\n        return this.arrayOfType.canCastTo(type.arrayOfType);\r\n    }\r\n\r\n    public castTo(value: Value, type: Type): Value {\r\n\r\n        let array = (<Value[]>value.value).slice();\r\n        let destType = (<ArrayType><unknown>type).arrayOfType;\r\n\r\n        for(let a of array){\r\n            this.arrayOfType.castTo(a, destType);\r\n        }\r\n\r\n        return {\r\n            type: type,\r\n            value: array\r\n        }\r\n\r\n    }\r\n\r\n    public debugOutput(value: Value, maxLength: number = 40):string {\r\n\r\n        let length: number = 0;\r\n\r\n        if(value.value != null){\r\n\r\n            let s: string = \"[\";\r\n\r\n                let a: Value[] = <Value[]>value.value;\r\n\r\n                for(let i = 0; i < a.length; i++){\r\n\r\n                    let v = a[i];\r\n\r\n                    let s1 = v.type.debugOutput(v, maxLength/2);\r\n\r\n                    s += s1;\r\n                    if(i < a.length - 1) s += \",&nbsp;\";\r\n                    length += s1.length;\r\n\r\n                    if(length > maxLength) break;\r\n\r\n                }\r\n\r\n            return s + \"]\"\r\n\r\n        } else return \"null\";\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n","export function hash(s: string){\r\n    let hash: number = 0;\r\n    let chr: number;\r\n    for (let i = 0; i < s.length; i++) {\r\n      chr   = s.charCodeAt(i);\r\n      hash  = ((hash << 5) - hash) + chr;\r\n      hash |= 0; // Convert to 32bit integer\r\n    }\r\n    return hash;\r\n}\r\n\r\nexport function escapeHtml(unsafe: string): string {\r\n  return unsafe\r\n      .replace(/['\"]+/g, '')\r\n       .replace(/&/g, \"&amp;\")\r\n       .replace(/</g, \"&lt;\")\r\n       .replace(/>/g, \"&gt;\")\r\n       .replace(/\"/g, \"&quot;\")\r\n       .replace(/'/g, \"&#039;\");\r\n}\r\n\r\nexport function dateToString(date: Date): string{\r\n  return `${twoDez(date.getDate())}.${twoDez(date.getMonth() + 1)}.${date.getFullYear()}, ${twoDez(date.getHours())}:${twoDez(date.getMinutes())}`;\r\n}\r\n\r\nexport function dateToStringWithoutTime(date: Date): string{\r\n  return `${twoDez(date.getDate())}.${twoDez(date.getMonth() + 1)}.${date.getFullYear()}`;\r\n}\r\n\r\nfunction twoDez(z: number):string {\r\n  if(z < 10) return \"0\" + z;\r\n  return \"\" + z;\r\n}\r\n\r\nexport function stringToDate(text: string): Date {\r\n\r\n  let match = text.match(/^(\\d{2})\\.(\\d{2})\\.(\\d{4}), (\\d{2}):(\\d{2})$/);\r\n\r\n  let date: Date = new Date(Number.parseInt(match[3]), Number.parseInt(match[2]) - 1, Number.parseInt(match[1]), Number.parseInt(match[4]), Number.parseInt(match[5]) );\r\n\r\n  return date;\r\n}\r\n\r\nexport function stringWrap(s: string, length: number ): string{\r\n  return s.replace(\r\n    new RegExp(`(?![^\\\\n]{1,${length}}$)([^\\\\n]{1,${length}})\\\\s`, 'g'), '$1\\n'\r\n  );\r\n} \r\n\r\nexport function formatAsJavadocComment(s: string, indent: number|string = \"\"): string {\r\n  let indentString = \"\";\r\n\r\n  if(typeof indent == \"string\"){\r\n    indentString = indent;\r\n  } else {\r\n    for(let i = 0; i < indent; i++){\r\n      indentString += \" \";\r\n    }\r\n  }\r\n\r\n  s = stringWrap(s, 60);\r\n  if(s.length > 0) s = \"\\n\" + s;\r\n  s = indentString + \"/**\" + s.replace(/\\n/g, \"\\n\" + indentString + \" * \") + \"\\n\" + indentString + \" */\";\r\n  return s;\r\n}\r\n\r\nexport function nullToString(s: string) {\r\n  return s == null ? \"null\" : s;\r\n}\r\n\r\nexport function floatToString(val: number){\r\n  return val + (Number.isInteger(val)? \".0\": \"\");\r\n}","import { TokenType, TokenTypeReadable } from \"../lexer/Token.js\";\r\nimport { ArrayType } from \"./Array.js\";\r\nimport { Interface, Klass, setBooleanPrimitiveTypeCopy } from \"./Class.js\";\r\nimport { ObjectClass } from \"./ObjectClass.js\";\r\nimport { Method, Parameterlist, PrimitiveType, Type, Value } from \"./Types.js\";\r\nimport { IntegerClass } from \"./boxedTypes/IntegerClass.js\";\r\nimport { LongClass } from \"./boxedTypes/LongClass.js\";\r\nimport { FloatClass } from \"./boxedTypes/FloatClass.js\";\r\nimport { CharacterClass } from \"./boxedTypes/CharacterClass.js\";\r\nimport { BooleanClass } from \"./boxedTypes/BooleanClass.js\";\r\nimport { DoubleClass } from \"./boxedTypes/DoubleClass.js\";\r\nimport { floatToString, nullToString } from \"../../tools/StringTools.js\";\r\n\r\nexport class NullType extends Type {\r\n\r\n    constructor() {\r\n        super();\r\n        this.identifier = \"null\";\r\n    }\r\n\r\n    getResultType(operation: TokenType, secondOperandType: Type) {\r\n        if (operation == TokenType.equal || operation == TokenType.notEqual) return secondOperandType.getResultType(operation,this);\r\n    }\r\n    compute(operation: TokenType, firstOperand: Value, secondOperand: Value) {\r\n        if (operation == TokenType.equal || operation == TokenType.notEqual) {\r\n            return (firstOperand.value == secondOperand.value) == (operation == TokenType.equal);\r\n        }\r\n        return null;\r\n    }\r\n    canCastTo(type: Type) {\r\n        return (type instanceof Klass || type instanceof Interface || type instanceof ArrayType);\r\n    }\r\n    castTo(value: Value, type: Type) {\r\n        return {\r\n            value: value.value,\r\n            type: type\r\n        };\r\n    }\r\n    equals(type: Type) {\r\n        return (type instanceof Klass || type instanceof Interface);\r\n    }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return \"null\";\r\n    }\r\n}\r\n\r\nexport class VarType extends Type {\r\n\r\n    constructor() {\r\n        super();\r\n        this.identifier = \"var\";\r\n    }\r\n\r\n    getResultType(operation: TokenType, secondOperandType: Type) {\r\n        return null;\r\n    }\r\n    compute(operation: TokenType, firstOperand: Value, secondOperand: Value) {\r\n        return null;\r\n    }\r\n    canCastTo(type: Type) {\r\n        return (type instanceof Klass || type instanceof Interface);\r\n    }\r\n    castTo(value: Value, type: Type) {\r\n        return value;\r\n    }\r\n    equals(type: Type) {\r\n        return (type instanceof Klass || type instanceof Interface);\r\n    }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return \"var\";\r\n    }\r\n}\r\n\r\nexport class IntPrimitiveType extends PrimitiveType {\r\n\r\n    init() {\r\n        this.initialValue = 0;\r\n\r\n        this.identifier = \"int\";\r\n\r\n        this.description = \"ganze Zahl\"\r\n\r\n        this.operationTable = {\r\n            [TokenType.plus]: { \"long\": longPrimitiveType, \"Long\": longPrimitiveType, \"int\": intPrimitiveType, \"Integer\": intPrimitiveType, \"float\": floatPrimitiveType, \"Float\": floatPrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.minus]: { \"none\": intPrimitiveType, \"long\": longPrimitiveType, \"Long\": longPrimitiveType, \"int\": intPrimitiveType, \"Integer\": intPrimitiveType, \"float\": floatPrimitiveType, \"Float\": floatPrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.multiplication]: { \"long\": longPrimitiveType, \"Long\": longPrimitiveType, \"int\": intPrimitiveType, \"Integer\": intPrimitiveType, \"float\": floatPrimitiveType, \"Float\": floatPrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.modulo]: { \"long\": longPrimitiveType, \"Long\": longPrimitiveType, \"int\": intPrimitiveType, \"Integer\": intPrimitiveType },\r\n            [TokenType.division]: { \"long\": longPrimitiveType, \"Long\": longPrimitiveType, \"int\": intPrimitiveType, \"Integer\": intPrimitiveType, \"float\": floatPrimitiveType, \"Float\": floatPrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.doublePlus]: { \"none\": intPrimitiveType },\r\n            [TokenType.doubleMinus]: { \"none\": intPrimitiveType },\r\n            [TokenType.negation]: { \"none\": intPrimitiveType },\r\n            [TokenType.tilde]: { \"none\": intPrimitiveType },\r\n            [TokenType.lower]: { \"long\": booleanPrimitiveType, \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.greater]: { \"long\": booleanPrimitiveType, \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.lowerOrEqual]: { \"long\": booleanPrimitiveType, \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.greaterOrEqual]: { \"long\": booleanPrimitiveType, \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.equal]: { \"long\": booleanPrimitiveType, \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.notEqual]: { \"long\": booleanPrimitiveType, \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n\r\n            // binary ops\r\n            [TokenType.OR]: { \"long\": longPrimitiveType, \"Long\": longPrimitiveType, \"int\": intPrimitiveType, \"Integer\": intPrimitiveType },\r\n            [TokenType.XOR]: { \"long\": longPrimitiveType, \"Long\": longPrimitiveType, \"int\": intPrimitiveType, \"Integer\": intPrimitiveType },\r\n            [TokenType.ampersand]: { \"long\": longPrimitiveType, \"Long\": longPrimitiveType, \"int\": intPrimitiveType, \"Integer\": intPrimitiveType },\r\n            [TokenType.shiftLeft]: { \"long\": longPrimitiveType, \"Long\": longPrimitiveType, \"int\": intPrimitiveType, \"Integer\": intPrimitiveType },\r\n            [TokenType.shiftRight]: { \"long\": longPrimitiveType, \"Long\": longPrimitiveType, \"int\": intPrimitiveType, \"Integer\": intPrimitiveType },\r\n            [TokenType.shiftRightUnsigned]: { \"long\": longPrimitiveType, \"Long\": longPrimitiveType, \"int\": intPrimitiveType, \"Integer\": intPrimitiveType }\r\n\r\n        };\r\n\r\n        // this.canCastTolist = [floatPrimitiveType, doublePrimitiveType, stringPrimitiveType, charPrimitiveType];\r\n\r\n        this.canCastToMap = {\r\n            \"float\": { automatic: true, needsStatement: false },\r\n            \"double\": { automatic: true, needsStatement: false },\r\n            \"char\": { automatic: true, needsStatement: true },\r\n            \"int\": { automatic: true, needsStatement: false },\r\n            \"long\": { automatic: true, needsStatement: false },\r\n            \"Integer\": { automatic: true, needsStatement: true },\r\n        }\r\n\r\n\r\n    }\r\n\r\n    toTokenType(): TokenType {\r\n        return TokenType.integerConstant;\r\n    }\r\n\r\n    public castTo(value: Value, type: Type): Value {\r\n\r\n        if (type == charPrimitiveType) {\r\n            return {\r\n                type: type,\r\n                value: String.fromCharCode(<number>value.value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public compute(operation: TokenType, firstOperand: Value, secondOperand?: Value): any {\r\n\r\n        let value = <number>(firstOperand.value);\r\n\r\n        switch (operation) {\r\n            case TokenType.plus:\r\n                if (secondOperand.type == stringPrimitiveType) {\r\n                    return value + <string>(secondOperand.value);\r\n                } else {\r\n                    return value + <number>(secondOperand.value);\r\n                }\r\n\r\n            case TokenType.minus:\r\n                if (secondOperand == null) return -value;\r\n                return value - <number>(secondOperand.value);\r\n\r\n            case TokenType.multiplication:\r\n                return value * <number>(secondOperand.value);\r\n\r\n            case TokenType.division:\r\n                if (secondOperand.type == intPrimitiveType) {\r\n                    return Math.trunc(value / <number>(secondOperand.value));\r\n                }\r\n                return value / <number>(secondOperand.value);\r\n\r\n            case TokenType.modulo:\r\n                if (secondOperand.type == intPrimitiveType) {\r\n                    return Math.trunc(value % <number>(secondOperand.value));\r\n                }\r\n                return 1;\r\n\r\n            case TokenType.doublePlus:\r\n                return value++;\r\n\r\n            case TokenType.doubleMinus:\r\n                return value--;\r\n\r\n            case TokenType.negation:\r\n                return -value;\r\n\r\n            case TokenType.tilde:\r\n                return ~value;\r\n\r\n            case TokenType.lower:\r\n                return value < (<number>(secondOperand.value));\r\n\r\n            case TokenType.greater:\r\n                return value > <number>(secondOperand.value);\r\n\r\n            case TokenType.lowerOrEqual:\r\n                return value <= <number>(secondOperand.value);\r\n\r\n            case TokenType.greaterOrEqual:\r\n                return value >= <number>(secondOperand.value);\r\n\r\n            case TokenType.equal:\r\n                return value == <number>(secondOperand.value);\r\n\r\n            case TokenType.notEqual:\r\n                return value != <number>(secondOperand.value);\r\n\r\n            case TokenType.OR:\r\n                return value | <number>(secondOperand.value);\r\n\r\n            case TokenType.XOR:\r\n                return value ^ <number>(secondOperand.value);\r\n\r\n            case TokenType.ampersand:\r\n                return value & <number>(secondOperand.value);\r\n\r\n            case TokenType.shiftLeft:\r\n                return value << <number>(secondOperand.value);\r\n\r\n            case TokenType.shiftRight:\r\n                return value >> <number>(secondOperand.value);\r\n\r\n            case TokenType.shiftRightUnsigned:\r\n                return value >>> <number>(secondOperand.value);\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return \"\" + <number>value.value;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class LongPrimitiveType extends IntPrimitiveType {\r\n    init() {\r\n\r\n        this.initialValue = 0;\r\n\r\n        this.identifier = \"long\";\r\n\r\n        this.description = \"ganze Zahl\"\r\n\r\n        this.operationTable = {\r\n            [TokenType.plus]: { \"long\": longPrimitiveType, \"int\": longPrimitiveType, \"Long\": longPrimitiveType, \"Integer\": longPrimitiveType, \"float\": floatPrimitiveType, \"Float\": floatPrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.minus]: { \"none\": intPrimitiveType, \"long\": longPrimitiveType, \"int\": longPrimitiveType, \"Long\": longPrimitiveType, \"Integer\": longPrimitiveType, \"float\": floatPrimitiveType, \"Float\": floatPrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.multiplication]: { \"long\": longPrimitiveType, \"int\": longPrimitiveType, \"Long\": longPrimitiveType, \"Integer\": longPrimitiveType, \"float\": floatPrimitiveType, \"Float\": floatPrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.modulo]: { \"long\": longPrimitiveType, \"int\": longPrimitiveType, \"Long\": longPrimitiveType, \"Integer\": longPrimitiveType },\r\n            [TokenType.division]: { \"long\": longPrimitiveType, \"int\": longPrimitiveType, \"Long\": longPrimitiveType, \"Integer\": longPrimitiveType, \"float\": floatPrimitiveType, \"Float\": floatPrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.doublePlus]: { \"none\": intPrimitiveType },\r\n            [TokenType.doubleMinus]: { \"none\": intPrimitiveType },\r\n            [TokenType.negation]: { \"none\": intPrimitiveType },\r\n            [TokenType.tilde]: { \"none\": intPrimitiveType },\r\n            [TokenType.lower]: { \"long\": booleanPrimitiveType, \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.greater]: { \"long\": booleanPrimitiveType, \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.lowerOrEqual]: { \"long\": booleanPrimitiveType, \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.greaterOrEqual]: { \"long\": booleanPrimitiveType, \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.equal]: { \"long\": booleanPrimitiveType, \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.notEqual]: { \"long\": booleanPrimitiveType, \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n\r\n            // binary ops\r\n            [TokenType.OR]: { \"long\": longPrimitiveType, \"int\": longPrimitiveType, \"Long\": longPrimitiveType, \"Integer\": longPrimitiveType },\r\n            [TokenType.XOR]: { \"long\": longPrimitiveType, \"int\": longPrimitiveType, \"Long\": longPrimitiveType, \"Integer\": longPrimitiveType },\r\n            [TokenType.ampersand]: { \"long\": longPrimitiveType, \"int\": longPrimitiveType, \"Long\": longPrimitiveType, \"Integer\": longPrimitiveType },\r\n            [TokenType.shiftLeft]: { \"long\": longPrimitiveType, \"int\": longPrimitiveType, \"Long\": longPrimitiveType, \"Integer\": longPrimitiveType },\r\n            [TokenType.shiftRight]: { \"long\": longPrimitiveType, \"int\": longPrimitiveType, \"Long\": longPrimitiveType, \"Integer\": longPrimitiveType },\r\n            [TokenType.shiftRightUnsigned]: { \"long\": longPrimitiveType, \"int\": longPrimitiveType, \"Long\": longPrimitiveType, \"Integer\": longPrimitiveType }\r\n\r\n        };\r\n\r\n        // this.canCastTolist = [floatPrimitiveType, doublePrimitiveType, stringPrimitiveType, charPrimitiveType];\r\n\r\n        this.canCastToMap = {\r\n            \"float\": { automatic: true, needsStatement: false },\r\n            \"double\": { automatic: true, needsStatement: false },\r\n            \"char\": { automatic: true, needsStatement: true },\r\n            \"int\": { automatic: false, needsStatement: false },\r\n            \"long\": { automatic: true, needsStatement: false },\r\n            \"Integer\": { automatic: true, needsStatement: false },\r\n            \"Long\": { automatic: true, needsStatement: false },\r\n        }\r\n\r\n\r\n    }\r\n\r\n    toTokenType(): TokenType {\r\n        return TokenType.longConstant;\r\n    }\r\n}\r\n\r\n\r\nexport class FloatPrimitiveType extends PrimitiveType {\r\n\r\n    init() {\r\n\r\n        this.initialValue = 0;\r\n\r\n        this.identifier = \"float\";\r\n\r\n        this.description = \"Fließkommazahl mit einfacher Genauigkeit\"\r\n\r\n        this.operationTable = {\r\n            [TokenType.plus]: { \"Integer\": floatPrimitiveType, \"int\": floatPrimitiveType, \"float\": floatPrimitiveType, \"Float\": floatPrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.minus]: { \"none\": floatPrimitiveType, \"Integer\": floatPrimitiveType, \"int\": floatPrimitiveType, \"float\": floatPrimitiveType, \"Float\": floatPrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.multiplication]: { \"Integer\": floatPrimitiveType, \"int\": floatPrimitiveType, \"float\": floatPrimitiveType, \"Float\": floatPrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.division]: { \"Integer\": floatPrimitiveType, \"int\": floatPrimitiveType, \"float\": floatPrimitiveType, \"Float\": floatPrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.doublePlus]: { \"none\": floatPrimitiveType },\r\n            [TokenType.doubleMinus]: { \"none\": floatPrimitiveType },\r\n            [TokenType.negation]: { \"none\": floatPrimitiveType },\r\n            [TokenType.lower]: { \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.greater]: { \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.lowerOrEqual]: { \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.greaterOrEqual]: { \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.equal]: { \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.notEqual]: { \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n        };\r\n\r\n        // this.canCastTolist = [intPrimitiveType, stringPrimitiveType, doublePrimitiveType];\r\n\r\n        this.canCastToMap = {\r\n            \"int\": { automatic: false, needsStatement: true },\r\n            \"double\": { automatic: true, needsStatement: false },\r\n            \"float\": { automatic: true, needsStatement: false },\r\n            \"Float\": { automatic: true, needsStatement: true },\r\n            \"Double\": { automatic: true, needsStatement: true },\r\n        }\r\n\r\n    }\r\n\r\n    toTokenType(): TokenType {\r\n        return TokenType.floatingPointConstant;\r\n    }\r\n\r\n    public castTo(value: Value, type: Type): Value {\r\n\r\n        if (type == intPrimitiveType) {\r\n            return {\r\n                type: type,\r\n                value: Math.trunc(<number>value.value)\r\n            }\r\n        }\r\n\r\n        // if (type == doublePrimitiveType || type == DoubleType || type == FloatType) {\r\n        //     return {\r\n        //         type: type,\r\n        //         value: value.value\r\n        //     }\r\n        // }\r\n\r\n    }\r\n\r\n    public valueToString(value: Value): string {\r\n        return floatToString(value.value);\r\n    }\r\n\r\n\r\n    public compute(operation: TokenType, firstOperand: Value, secondOperand?: Value): any {\r\n\r\n        let value = <number>(firstOperand.value);\r\n\r\n        switch (operation) {\r\n            case TokenType.plus:\r\n                if (secondOperand.type == stringPrimitiveType) {\r\n                    return value + <string>(secondOperand.value);\r\n                } else {\r\n                    return value + <number>(secondOperand.value);\r\n                }\r\n\r\n            case TokenType.minus:\r\n                if (secondOperand == null) return -value;\r\n                return value - <number>(secondOperand.value);\r\n\r\n            case TokenType.multiplication:\r\n                return value * <number>(secondOperand.value);\r\n\r\n            case TokenType.division:\r\n                return value / <number>(secondOperand.value);\r\n\r\n            case TokenType.doublePlus:\r\n                return value++;\r\n\r\n            case TokenType.doubleMinus:\r\n                return value--;\r\n\r\n            case TokenType.negation:\r\n                return -value;\r\n\r\n            case TokenType.lower:\r\n                return value < (<number>(secondOperand.value));\r\n\r\n            case TokenType.greater:\r\n                return value > <number>(secondOperand.value);\r\n\r\n            case TokenType.lowerOrEqual:\r\n                return value <= <number>(secondOperand.value);\r\n\r\n            case TokenType.greaterOrEqual:\r\n                return value >= <number>(secondOperand.value);\r\n\r\n            case TokenType.equal:\r\n                return value == <number>(secondOperand.value);\r\n\r\n            case TokenType.notEqual:\r\n                return value != <number>(secondOperand.value);\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return \"\" + <number>value.value;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class DoublePrimitiveType extends PrimitiveType {\r\n\r\n    init() {\r\n\r\n        this.initialValue = 0;\r\n\r\n        this.identifier = \"double\";\r\n\r\n        this.description = \"Fließkommazahl mit doppelter Genauigkeit\"\r\n\r\n        this.operationTable = {\r\n            [TokenType.plus]: { \"int\": doublePrimitiveType, \"Integer\": doublePrimitiveType, \"float\": doublePrimitiveType, \"Float\": doublePrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.minus]: { \"none\": doublePrimitiveType, \"int\": doublePrimitiveType, \"Integer\": doublePrimitiveType, \"float\": doublePrimitiveType, \"Float\": doublePrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.multiplication]: { \"int\": doublePrimitiveType, \"Integer\": doublePrimitiveType, \"float\": doublePrimitiveType, \"Float\": doublePrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.division]: { \"int\": doublePrimitiveType, \"Integer\": doublePrimitiveType, \"float\": doublePrimitiveType, \"Float\": doublePrimitiveType, \"double\": doublePrimitiveType, \"Double\": doublePrimitiveType },\r\n            [TokenType.doublePlus]: { \"none\": doublePrimitiveType },\r\n            [TokenType.doubleMinus]: { \"none\": doublePrimitiveType },\r\n            [TokenType.negation]: { \"none\": doublePrimitiveType },\r\n            [TokenType.lower]: { \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.greater]: { \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.lowerOrEqual]: { \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.greaterOrEqual]: { \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.equal]: { \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n            [TokenType.notEqual]: { \"int\": booleanPrimitiveType, \"float\": booleanPrimitiveType, \"double\": booleanPrimitiveType, \"Integer\": booleanPrimitiveType, \"Float\": booleanPrimitiveType, \"Double\": booleanPrimitiveType },\r\n        };\r\n\r\n        // this.canCastTolist = [intPrimitiveType, stringPrimitiveType, floatPrimitiveType];\r\n        this.canCastToMap = {\r\n            \"int\": { automatic: false, needsStatement: true },\r\n            \"float\": { automatic: true, needsStatement: false },\r\n            \"double\": { automatic: true, needsStatement: false },\r\n            \"Float\": { automatic: true, needsStatement: true },\r\n            \"Double\": { automatic: true, needsStatement: true },\r\n        }\r\n\r\n\r\n    }\r\n\r\n    toTokenType(): TokenType {\r\n        return TokenType.floatingPointConstant;\r\n    }\r\n\r\n    public castTo(value: Value, type: Type): Value {\r\n\r\n        if (type == intPrimitiveType) {\r\n            return {\r\n                type: type,\r\n                value: Math.trunc(<number>value.value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public valueToString(value: Value): string {\r\n        return floatToString(value.value);\r\n    }\r\n\r\n\r\n\r\n    public compute(operation: TokenType, firstOperand: Value, secondOperand?: Value): any {\r\n\r\n        let value = <number>(firstOperand.value);\r\n\r\n        switch (operation) {\r\n            case TokenType.plus:\r\n                if (secondOperand.type == stringPrimitiveType) {\r\n                    return value + <string>(secondOperand.value);\r\n                } else {\r\n                    return value + <number>(secondOperand.value);\r\n                }\r\n\r\n            case TokenType.minus:\r\n                if (secondOperand == null) return -value;\r\n                return value - <number>(secondOperand.value);\r\n\r\n            case TokenType.multiplication:\r\n                return value * <number>(secondOperand.value);\r\n\r\n            case TokenType.division:\r\n                return value / <number>(secondOperand.value);\r\n\r\n            case TokenType.doublePlus:\r\n                return value++;\r\n\r\n            case TokenType.doubleMinus:\r\n                return value--;\r\n\r\n            case TokenType.negation:\r\n                return -value;\r\n\r\n            case TokenType.lower:\r\n                return value < (<number>(secondOperand.value));\r\n\r\n            case TokenType.greater:\r\n                return value > <number>(secondOperand.value);\r\n\r\n            case TokenType.lowerOrEqual:\r\n                return value <= <number>(secondOperand.value);\r\n\r\n            case TokenType.greaterOrEqual:\r\n                return value >= <number>(secondOperand.value);\r\n\r\n            case TokenType.equal:\r\n                return value == <number>(secondOperand.value);\r\n\r\n            case TokenType.notEqual:\r\n                return value != <number>(secondOperand.value);\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return \"\" + <number>value.value;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class BooleanPrimitiveType extends PrimitiveType {\r\n\r\n    init() {\r\n\r\n        this.initialValue = false;\r\n\r\n        this.identifier = \"boolean\";\r\n\r\n        this.description = \"boolescher Wert (true oder false)\"\r\n\r\n        this.operationTable = {\r\n            [TokenType.plus]: {},\r\n            [TokenType.and]: { \"boolean\": booleanPrimitiveType },\r\n            [TokenType.or]: { \"boolean\": booleanPrimitiveType },\r\n            [TokenType.not]: { \"none\": booleanPrimitiveType },\r\n            [TokenType.equal]: { \"boolean\": booleanPrimitiveType },\r\n            [TokenType.notEqual]: { \"boolean\": booleanPrimitiveType },\r\n        };\r\n\r\n        this.canCastToMap = {\r\n            \"boolean\": { automatic: true, needsStatement: false },\r\n            \"Boolean\": { automatic: true, needsStatement: true },\r\n        }\r\n\r\n\r\n    }\r\n\r\n    toTokenType(): TokenType {\r\n        return TokenType.booleanConstant;\r\n    }\r\n\r\n    public castTo(value: Value, type: Type): Value {\r\n\r\n        return undefined;\r\n\r\n    }\r\n\r\n\r\n    public compute(operation: TokenType, firstOperand: Value, secondOperand?: Value): any {\r\n\r\n        let value = <boolean>(firstOperand.value);\r\n\r\n        switch (operation) {\r\n            case TokenType.plus:\r\n                return value + nullToString(<string>(secondOperand.value));\r\n\r\n            case TokenType.equal:\r\n                return value == <boolean>(secondOperand.value);\r\n\r\n            case TokenType.notEqual:\r\n                return value != <boolean>(secondOperand.value);\r\n\r\n            case TokenType.and:\r\n                return value && <boolean>(secondOperand.value);\r\n\r\n            case TokenType.or:\r\n                return value || <boolean>(secondOperand.value);\r\n\r\n            case TokenType.not:\r\n                return !value;\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return \"\" + <boolean>value.value;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class VoidPrimitiveType extends PrimitiveType {\r\n\r\n    init() {\r\n\r\n        this.initialValue = false;\r\n\r\n        this.identifier = \"void\";\r\n\r\n        this.description = \"leerer Rückgabewert\"\r\n\r\n        this.operationTable = {\r\n        };\r\n\r\n        this.canCastToMap = {};\r\n\r\n    }\r\n\r\n    public toTokenType(): TokenType {\r\n        return TokenType.keywordVoid;\r\n    }\r\n\r\n    public castTo(value: Value, type: Type): Value {\r\n\r\n        return value;\r\n\r\n    }\r\n\r\n\r\n    public compute(operation: TokenType, firstOperand: Value, secondOperand?: Value): any {\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return \"void\";\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class StringPrimitiveType extends Klass {\r\n\r\n    private operationTable: { [operation: number]: { [typename: string]: Type } }\r\n\r\n    public toTokenType(): TokenType {\r\n        return TokenType.stringConstant;\r\n    }\r\n\r\n    public getResultType(operation: TokenType, secondOperandType?: Type): Type {\r\n\r\n        if (operation == TokenType.keywordInstanceof) {\r\n            return super.getResultType(operation, secondOperandType);\r\n        }\r\n\r\n        let opTypeMap = this.operationTable[operation];\r\n\r\n        if (opTypeMap == null) {\r\n            return null; // Operation not possible\r\n        }\r\n\r\n        if (secondOperandType != null) {\r\n            return opTypeMap[secondOperandType.identifier];\r\n        }\r\n\r\n        return opTypeMap[\"none\"];\r\n\r\n    }\r\n\r\n\r\n    constructor(baseClass: Klass) {\r\n        super(\"String\", null, \"Ein Objekt der Klasse String speichert eine Zeichenkette.\");\r\n        this.baseClass = baseClass;\r\n        let stringClass = this;\r\n        baseClass.methods.filter(m => m.identifier == \"toString\").forEach(m => m.returnType = stringClass);\r\n    }\r\n\r\n    init() {\r\n        this.operationTable = {\r\n            [TokenType.plus]: {\r\n                \"String\": stringPrimitiveType\r\n            },\r\n            [TokenType.equal]: { \"String\": booleanPrimitiveType, \"null\": booleanPrimitiveType },\r\n            [TokenType.notEqual]: { \"String\": booleanPrimitiveType, \"null\": booleanPrimitiveType },\r\n            [TokenType.lower]: { \"String\": booleanPrimitiveType },\r\n            [TokenType.greater]: { \"String\": booleanPrimitiveType },\r\n            [TokenType.lowerOrEqual]: { \"String\": booleanPrimitiveType },\r\n            [TokenType.greaterOrEqual]: { \"String\": booleanPrimitiveType }\r\n\r\n        };\r\n\r\n\r\n        this.addMethod(new Method(\"length\", new Parameterlist([]), intPrimitiveType,\r\n            (parameters) => { return (<string>parameters[0].value).length; }, false, false, \"Länge der Zeichenkette, d.h. Anzahl der Zeichen in der Zeichenkette.\"));\r\n        this.addMethod(new Method(\"charAt\", new Parameterlist([{ identifier: \"Position\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), charPrimitiveType,\r\n            (parameters) => { return (<string>parameters[0].value).charAt(<number>(parameters[1].value)); }, false, false, \"Zeichen an der gegebenen Position.\\n**Bem.: ** Position == 0 bedeutet das erste Zeichen in der Zeichenkette, Position == 1 das zweite usw. .\"));\r\n        this.addMethod(new Method(\"equals\", new Parameterlist([{ identifier: \"otherString\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), booleanPrimitiveType,\r\n            (parameters) => { return <string>parameters[0].value == <string>(parameters[1].value); }, false, false, \"Gibt genau dann **wahr** zurück, wenn die zwei Zeichenketten übereinstimmen (unter Berücksichtigung von Klein-/Großschreibung).\"));\r\n        this.addMethod(new Method(\"compareTo\", new Parameterlist([{ identifier: \"otherString\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), intPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)).localeCompare(<string>(parameters[1].value), 'de', { caseFirst: 'upper' }); }, false, false, \"Vergleicht den String mit dem übergebenen String. Gibt -1 zurück, falls ersterer im Alphabet vor letzterem steht, +1, falls umgekehrt und 0, falls beide Strings identisch sind.\"));\r\n        this.addMethod(new Method(\"compareToIgnoreCase\", new Parameterlist([{ identifier: \"otherString\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), intPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)).localeCompare(<string>(parameters[1].value), 'de', { sensitivity: \"accent\" }); }, false, false, \"Vergleicht den String mit dem übergebenen String. Gibt -1 zurück, falls ersterer im Alphabet vor letzterem steht, +1, falls umgekehrt und 0, falls beide Strings identisch sind.\"));\r\n        this.addMethod(new Method(\"equalsIgnoreCase\", new Parameterlist([{ identifier: \"otherString\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), booleanPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)).toLowerCase() == (<string>(parameters[1].value).toLowerCase()); }, false, false, \"Gibt genau dann **wahr** zurück, wenn die zwei Zeichenketten übereinstimmen (**ohne** Berücksichtigung von Klein-/Großschreibung).\"));\r\n        this.addMethod(new Method(\"endsWith\", new Parameterlist([{ identifier: \"suffix\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), booleanPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)).endsWith(<string>(parameters[1].value)); }, false, false, \"Gibt genau dann **wahr** zurück, wenn die Zeichenkette mit der übergebenen Zeichenkette ( = suffix) endet. Klein-/Großschreibung wird dabei berücksichtigt!\"));\r\n        this.addMethod(new Method(\"startsWith\", new Parameterlist([{ identifier: \"präfix\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), booleanPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)).startsWith(<string>(parameters[1].value)); }, false, false, \"Gibt genau dann **wahr** zurück, wenn die Zeichenkette mit der übergebenen Zeichenkette ( = präfix) beginnt. Klein-/Großschreibung wird dabei berücksichtigt!\"));\r\n        this.addMethod(new Method(\"toLowerCase\", new Parameterlist([]), stringPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)).toLocaleLowerCase(); }, false, false, \"Gibt die Zeichenkette zurück, die sich ergibt, wenn man in der gegebenen Zeichnkette jeden Großbuchstaben durch den entsprechenden Kleinbuchstaben ersetzt.\\n**Bemerkung: ** Die Methode verändert die Zeichenkette selbst nicht.\"));\r\n        this.addMethod(new Method(\"toUpperCase\", new Parameterlist([]), stringPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)).toLocaleUpperCase(); }, false, false, \"Gibt die Zeichenkette zurück, die sich ergibt, wenn man in der gegebenen Zeichnkette jeden Kleinbuchstaben durch den entsprechenden Großbuchstaben ersetzt.\\n**Bemerkung: ** Die Methode verändert die Zeichenkette selbst nicht.\"));\r\n        this.addMethod(new Method(\"substring\", new Parameterlist([{ identifier: \"beginIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), stringPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)).substring(<number>(parameters[1].value)); }, false, false, \"Gibt das hintere Ende der Zeichenkette ab **beginIndex** zurück. **beginIndex** == 1 bedeutet, dass die Zeichenkette ab dem 2.(!) Zeichen zurückgegeben wird. \"));\r\n        this.addMethod(new Method(\"substring\", new Parameterlist([{ identifier: \"beginIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: false },\r\n        { identifier: \"endIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), stringPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)).substring(<number>(parameters[1].value), <number>(parameters[2].value)); }, false, false, \"Gibt die Teil-Zeichenkette von **beginIndex** bis **endIndex** zurück.\\n**Vorsicht: ** beginIndex und endIndex sind nullbasiert, d.h. beginIndex == 0 bedeutet die Position vor dem ersten Zeichen.\"));\r\n        this.addMethod(new Method(\"trim\", new Parameterlist([]), stringPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)).trim(); }, false, false, \"Gibt die Zeichenkette zurück, die entsteht, wenn man am Anfang und Ende der Zeichenkette alle Leerzeichen, Tabs und Zeilenumbrüche entfernt.\"));\r\n        this.addMethod(new Method(\"isEmpty\", new Parameterlist([]), booleanPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)) == \"\"; }, false, false, \"Gibt genau dann wahr zurück, wenn die Zeichenkette leer ist.\\n**Warnung: ** Die Methode darf nicht mit dem '''null'''-Objekt aufgerufen werden!\"));\r\n        this.addMethod(new Method(\"indexOf\", new Parameterlist([{ identifier: \"otherString\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), intPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)).indexOf(<string>(parameters[1].value)); }, false, false, \"Gibt die erste Position zurück, an der **otherString** in der Zeichenkette gefunden wird.\"));\r\n        this.addMethod(new Method(\"indexOf\", new Parameterlist([\r\n            { identifier: \"otherString\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },\r\n            { identifier: \"fromIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: false },\r\n        ]), intPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)).indexOf(<string>(parameters[1].value), <number>(parameters[2].value)); }, false, false, \"Gibt die erste Position zurück, an der **otherString** in der Zeichenkette gefunden wird. Dabei wird erst bei fromIndex mit der Suche begonnen.\"));\r\n        this.addMethod(new Method(\"lastIndexOf\", new Parameterlist([{ identifier: \"otherString\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), intPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)).lastIndexOf(<string>(parameters[1].value)); }, false, false, \"Gibt die letzte Position zurück, bei der otherString in der Zeichenkette gefunden wird.\"));\r\n        this.addMethod(new Method(\"lastIndexOf\", new Parameterlist([\r\n            { identifier: \"otherString\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },\r\n            { identifier: \"fromIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: false },\r\n        ]), intPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)).lastIndexOf(<string>(parameters[1].value), <number>(parameters[2].value)); }, false, false, \"Gibt die letzte Position zurück, bei der otherString in der Zeichenkette gefunden wird. Dabei wird erst bei fromIndex - von rechts her beginnend - gesucht.\"));\r\n        this.addMethod(new Method(\"replace\", new Parameterlist([\r\n            { identifier: \"target\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },\r\n            { identifier: \"replacement\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },\r\n        ]), stringPrimitiveType,\r\n            (parameters) => { return (<string>(parameters[0].value)).replace(<string>(parameters[1].value), <string>(parameters[2].value)); }, false, false, \"Ersetzt alle Vorkommen von **target** durch **replacement** und gibt die entstandene Zeichenkette zurück. Die Zeichenkette selbst wird nicht verändert.\"));\r\n        this.addMethod(new Method(\"replaceAll\", new Parameterlist([\r\n            { identifier: \"regex\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },\r\n            { identifier: \"replacement\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                let pattern = <string>(parameters[1].value);\r\n                let regExp = new RegExp(pattern, 'g');\r\n\r\n                return (<string>(parameters[0].value)).replace(regExp, <string>(parameters[2].value));\r\n            }, false, false, \"Durchsucht den String mit dem regulären Ausdruck (regex) und ersetzt **alle** Fundstellen durch **replacement**.\"));\r\n        this.addMethod(new Method(\"matches\", new Parameterlist([\r\n            { identifier: \"regex\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                let pattern = <string>(parameters[1].value);\r\n                let regExp = new RegExp(pattern, 'g');\r\n\r\n                return <string>(parameters[0].value).match(regExp) != null;\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Wert der Zeichenkette dem regulären Ausdruck (regex) entspricht.\"));\r\n        this.addMethod(new Method(\"replaceFirst\", new Parameterlist([\r\n            { identifier: \"regex\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },\r\n            { identifier: \"replacement\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                let pattern = <string>(parameters[1].value);\r\n                let regExp = new RegExp(pattern, '');\r\n\r\n                return (<string>(parameters[0].value)).replace(regExp, <string>(parameters[2].value));\r\n            }, false, false, \"Durchsucht den String mit dem regulären Ausdruck (regex) und ersetzt **die erste** Fundstelle durch **replacement**.\"));\r\n        this.addMethod(new Method(\"split\", new Parameterlist([\r\n            { identifier: \"regex\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },\r\n        ]), new ArrayType(stringPrimitiveType),\r\n            (parameters) => {\r\n                let pattern = <string>(parameters[1].value);\r\n                let regExp = new RegExp(pattern, '');\r\n\r\n                let strings = (<string>(parameters[0].value)).split(regExp);\r\n                let values: Value[] = [];\r\n                for (let s of strings) {\r\n                    values.push({ type: stringPrimitiveType, value: s });\r\n                }\r\n\r\n                return values;\r\n\r\n            }, false, false, \"Teilt die Zeichenkette an den Stellen, die durch den regulären Ausdruck (regex) definiert sind, in Teile auf. Die Fundstellen des regex werden dabei weggelassen. Gibt die Teile als String-Array zurück.\"));\r\n\r\n    }\r\n\r\n    public compute(operation: TokenType, firstOperand: Value, secondOperand?: Value): any {\r\n\r\n        let value = <string>(firstOperand.value);\r\n\r\n        let err: Error = checkNotNull(operation, this, firstOperand, secondOperand, [TokenType.plus, TokenType.keywordInstanceof])\r\n        if (err != null) return err;\r\n\r\n        switch (operation) {\r\n            case TokenType.plus:\r\n                if (secondOperand.type == stringPrimitiveType) {\r\n                    return nullToString(value) + <string>(secondOperand.value); // because null + null = 0 in javascript\r\n                }\r\n\r\n            case TokenType.lower:\r\n                return value.localeCompare(<string>(secondOperand.value), 'de', { caseFirst: 'upper' }) < 0;\r\n            // return value < (<string>(secondOperand.value));\r\n\r\n            case TokenType.greater:\r\n                return value.localeCompare(<string>(secondOperand.value), 'de', { caseFirst: 'upper' }) > 0;\r\n            // return value > <string>(secondOperand.value);\r\n\r\n            case TokenType.lowerOrEqual:\r\n                return value.localeCompare(<string>(secondOperand.value), 'de', { caseFirst: 'upper' }) <= 0;\r\n            // return value <= <string>(secondOperand.value);\r\n\r\n            case TokenType.greaterOrEqual:\r\n                return value.localeCompare(<string>(secondOperand.value), 'de', { caseFirst: 'upper' }) >= 0;\r\n            // return value >= <string>(secondOperand.value);\r\n\r\n            case TokenType.equal:\r\n                return value == <string>(secondOperand.value);\r\n\r\n            case TokenType.notEqual:\r\n                return value != <string>(secondOperand.value);\r\n\r\n            case TokenType.keywordInstanceof:\r\n                return super.compute(operation, firstOperand, secondOperand);\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public allowsNull(): boolean { return true; }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return '\"' + <string>value.value + '\"';\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class CharPrimitiveType extends PrimitiveType {\r\n\r\n    init() {\r\n\r\n        this.initialValue = \"\\u0000\";\r\n\r\n        this.identifier = \"char\";\r\n\r\n        this.description = \"ein Zeichen\"\r\n\r\n        this.operationTable = {\r\n            [TokenType.plus]: { \"String\": stringPrimitiveType, \"char\": stringPrimitiveType },\r\n            [TokenType.equal]: { \"char\": booleanPrimitiveType },\r\n            [TokenType.notEqual]: { \"char\": booleanPrimitiveType },\r\n            [TokenType.lower]: { \"char\": booleanPrimitiveType },\r\n            [TokenType.greater]: { \"char\": booleanPrimitiveType },\r\n            [TokenType.lowerOrEqual]: { \"char\": booleanPrimitiveType },\r\n            [TokenType.greaterOrEqual]: { \"char\": booleanPrimitiveType }\r\n\r\n        };\r\n\r\n        // this.canCastTolist = [intPrimitiveType, floatPrimitiveType, doublePrimitiveType, stringPrimitiveType];\r\n        this.canCastToMap = {\r\n            \"int\": { automatic: true, needsStatement: true },\r\n            \"float\": { automatic: true, needsStatement: true },\r\n            \"double\": { automatic: true, needsStatement: true },\r\n            \"String\": { automatic: true, needsStatement: true },\r\n            \"char\": { automatic: true, needsStatement: false },\r\n            \"Character\": { automatic: true, needsStatement: true },\r\n        }\r\n\r\n    }\r\n\r\n    public toTokenType(): TokenType {\r\n        return TokenType.charConstant;\r\n    }\r\n\r\n    public castTo(value: Value, type: Type): Value {\r\n\r\n        // let unboxed = this.unboxFrom(value, type);\r\n        // if (unboxed != null) return unboxed;\r\n\r\n        // if (type == stringPrimitiveType || type == CharacterType) {\r\n        //     return {\r\n        //         type: type,\r\n        //         value: value\r\n        //     }\r\n        // }\r\n\r\n        if (type == intPrimitiveType || type == floatPrimitiveType || type == doublePrimitiveType) {\r\n            return {\r\n                type: type,\r\n                value: (<string>value.value).charCodeAt(0)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public compute(operation: TokenType, firstOperand: Value, secondOperand?: Value): any {\r\n\r\n        let value = <string>(firstOperand.value);\r\n\r\n        switch (operation) {\r\n            case TokenType.plus:\r\n                return value + <string>(secondOperand.value);\r\n\r\n            case TokenType.lower:\r\n                return value < (<string>(secondOperand.value));\r\n\r\n            case TokenType.greater:\r\n                return value > <string>(secondOperand.value);\r\n\r\n            case TokenType.lowerOrEqual:\r\n                return value <= <string>(secondOperand.value);\r\n\r\n            case TokenType.greaterOrEqual:\r\n                return value >= <string>(secondOperand.value);\r\n\r\n            case TokenType.equal:\r\n                return value == <string>(secondOperand.value);\r\n\r\n            case TokenType.notEqual:\r\n                return value != <string>(secondOperand.value);\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return \"'\" + <string>value.value + \"'\";\r\n    }\r\n\r\n\r\n}\r\n\r\nexport var voidPrimitiveType = new VoidPrimitiveType();\r\nexport var intPrimitiveType = new IntPrimitiveType();\r\nexport var longPrimitiveType = new LongPrimitiveType();\r\nexport var floatPrimitiveType = new FloatPrimitiveType();\r\nexport var doublePrimitiveType = new DoublePrimitiveType();\r\nexport var booleanPrimitiveType = new BooleanPrimitiveType();\r\nsetBooleanPrimitiveTypeCopy(booleanPrimitiveType);\r\nexport var objectType = new ObjectClass(null);\r\nexport var stringPrimitiveType = new StringPrimitiveType(objectType);\r\nexport var charPrimitiveType = new CharPrimitiveType();\r\nexport var nullType = new NullType();\r\nexport var varType = new VarType();\r\n\r\nexport var IntegerType = new IntegerClass(objectType);\r\nexport var LongType = new LongClass(objectType);\r\nexport var FloatType = new FloatClass(objectType);\r\nexport var DoubleType = new DoubleClass(objectType);\r\nexport var CharacterType = new CharacterClass(objectType);\r\nexport var BooleanType = new BooleanClass(objectType);\r\n\r\nexport var TokenTypeToDataTypeMap: { [tt: number]: Type } = {\r\n    [TokenType.integerConstant]: intPrimitiveType,\r\n    [TokenType.longConstant]: longPrimitiveType,\r\n    [TokenType.floatingPointConstant]: floatPrimitiveType,\r\n    [TokenType.booleanConstant]: booleanPrimitiveType,\r\n    [TokenType.stringConstant]: stringPrimitiveType,\r\n    [TokenType.charConstant]: charPrimitiveType,\r\n    [TokenType.keywordNull]: nullType\r\n}\r\n\r\n\r\nfunction checkNotNull(operation: TokenType, type: Type, firstOperand: Value, secondOperand?: Value, nullAllowedFor: TokenType[] = []): Error {\r\n    if ((firstOperand.value == null || secondOperand.value == null) && !nullAllowedFor.concat([TokenType.equal, TokenType.notEqual]).includes(operation)) {\r\n        let typeAndNull: (v: Value) => string = (v: Value) => v.value == null ? \"(\" + type.identifier + \")\" + \" null\" : type.identifier;\r\n        return new OperandIsNull(\"Unerlaubte Rechnung mit null: \" + typeAndNull(firstOperand) + \" \" + TokenTypeReadable[operation] + \" \" + typeAndNull(secondOperand));\r\n    }\r\n    return null;\r\n}\r\n\r\nexport class OperandIsNull extends Error {\r\n    constructor(message?: string) {\r\n        super(message);\r\n        this.name = \"OperandIsNullError\";\r\n    }\r\n}","import { TokenList, specialCharList, TokenType, Token, EscapeSequenceList, keywordList, TextPosition, TokenTypeReadable } from \"./Token.js\";\r\nimport { text } from \"express\";\r\nimport { ColorLexer } from \"./ColorLexer.js\";\r\nimport { ColorHelper } from \"../../runtimelibrary/graphics/ColorHelper.js\";\r\n\r\nenum LexerState {\r\n    number, identifier, stringConstant, characterConstant, multilineComment, EndoflineComment\r\n}\r\n\r\nvar endChar = \"►\"; // \\u10000\r\n\r\nexport type QuickFix = {\r\n    title: string,\r\n    editsProvider: (uri: monaco.Uri) => monaco.languages.WorkspaceTextEdit[]\r\n}\r\n\r\nexport type ErrorLevel = \"info\" | \"error\" | \"warning\";\r\n\r\nexport type Error = {\r\n    position: TextPosition,\r\n    text: string,\r\n    quickFix?: QuickFix,\r\n    level: ErrorLevel\r\n}\r\n\r\nexport class Lexer {\r\n\r\n    tokenList: TokenList;\r\n    nonSpaceLastTokenType: TokenType;\r\n\r\n    errorList: Error[];\r\n    colorInformation: monaco.languages.IColorInformation[];\r\n    colorLexer: ColorLexer = new ColorLexer();\r\n\r\n    pos: number;\r\n    line: number;\r\n    column: number;\r\n\r\n    currentChar: string;\r\n    nextChar: string;\r\n\r\n    input: string;\r\n\r\n    spaceTokens: TokenType[] = [\r\n        TokenType.space, TokenType.tab, TokenType.newline\r\n    ];\r\n\r\n    bracketStack: TokenType[];\r\n    bracketError: string;\r\n    correspondingBracket: { [key: number]: TokenType } = {};\r\n    colorIndices: number[];\r\n\r\n    constructor() {\r\n        this.correspondingBracket[TokenType.leftBracket] = TokenType.rightBracket;\r\n        this.correspondingBracket[TokenType.leftCurlyBracket] = TokenType.rightCurlyBracket;\r\n        this.correspondingBracket[TokenType.leftSquareBracket] = TokenType.rightSquareBracket;\r\n        this.correspondingBracket[TokenType.rightBracket] = TokenType.leftBracket;\r\n        this.correspondingBracket[TokenType.rightCurlyBracket] = TokenType.leftCurlyBracket;\r\n        this.correspondingBracket[TokenType.rightSquareBracket] = TokenType.leftSquareBracket;\r\n    }\r\n\r\n    lex(input: string): { tokens: TokenList, errors: Error[], bracketError: string, colorInformation: monaco.languages.IColorInformation[] } {\r\n\r\n        this.input = input.replace(\"\\uc2a0\", \" \");\r\n        this.input = input.replace(\"\\u00a0\", \" \");\r\n        this.tokenList = [];\r\n        this.errorList = [];\r\n        this.bracketError = null;\r\n        this.bracketStack = [];\r\n        this.pos = 0;\r\n        this.line = 1;\r\n        this.column = 1;\r\n        this.nonSpaceLastTokenType = null;\r\n        this.colorInformation = [];\r\n        this.colorIndices = []; // indices of identifier 'Color' inside tokenList\r\n\r\n\r\n        if (input.length == 0) {\r\n            return { tokens: this.tokenList, errors: this.errorList, bracketError: null, colorInformation: [] };\r\n        }\r\n\r\n        this.currentChar = input.charAt(0);\r\n\r\n        this.nextChar = input.length > 1 ? input.charAt(1) : endChar;\r\n\r\n\r\n        while (this.currentChar != endChar) {\r\n            this.mainState();\r\n        }\r\n\r\n        if (this.bracketStack.length > 0) {\r\n            let bracketOpen = this.bracketStack.pop();\r\n            let bracketClosed = this.correspondingBracket[bracketOpen];\r\n\r\n            this.setBracketError(TokenTypeReadable[bracketOpen] + \" \" + TokenTypeReadable[bracketClosed]);\r\n        }\r\n\r\n        this.processColorIndices();\r\n\r\n        return {\r\n            tokens: this.tokenList,\r\n            errors: this.errorList,\r\n            bracketError: this.bracketError,\r\n            colorInformation: this.colorInformation\r\n        };\r\n\r\n    }\r\n\r\n    processColorIndices() {\r\n\r\n        for (let colorIndex of this.colorIndices) {\r\n\r\n            // new Color(100, 100, 100, 0.1)\r\n            // new Color(100, 100, 100)\r\n            // Color.red\r\n\r\n            let colorToken = this.tokenList[colorIndex];\r\n            let previousToken = this.getLastNonSpaceToken(colorIndex)\r\n\r\n            if (previousToken?.tt == TokenType.keywordNew) {\r\n                let nextTokens = this.getNextNonSpaceTokens(colorIndex, 7);\r\n                if (this.compareTokenTypes(nextTokens, [TokenType.leftBracket, TokenType.integerConstant, TokenType.comma,\r\n                TokenType.integerConstant, TokenType.comma, TokenType.integerConstant,\r\n                TokenType.rightBracket])) {\r\n                    this.colorInformation.push({\r\n                        color: {\r\n                            red: <number>nextTokens[1].value / 255,\r\n                            green: <number>nextTokens[3].value / 255,\r\n                            blue: <number>nextTokens[5].value / 255,\r\n                            alpha: 1\r\n                        },\r\n                        range: {\r\n                            startLineNumber: previousToken.position.line, startColumn: previousToken.position.column,\r\n                            endLineNumber: nextTokens[6].position.line, endColumn: nextTokens[6].position.column + 1\r\n                        }\r\n                    })\r\n                }\r\n            } else {\r\n                let nextTokens = this.getNextNonSpaceTokens(colorIndex, 2);\r\n                if (this.compareTokenTypes(nextTokens, [TokenType.dot, TokenType.identifier])) {\r\n                    let colorIdentifier = <string>nextTokens[1].value;\r\n                    let colorValue = ColorHelper.predefinedColors[colorIdentifier];\r\n                    if (colorValue != null) {\r\n                        this.colorInformation.push({\r\n                            color: {\r\n                                red: (colorValue >> 16) / 255,\r\n                                green: ((colorValue >> 8) & 0xff) / 255,\r\n                                blue: (colorValue & 0xff) / 255,\r\n                                alpha: 1\r\n                            }, range: {\r\n                                startLineNumber: colorToken.position.line, startColumn: colorToken.position.column,\r\n                                endLineNumber: nextTokens[1].position.line, endColumn: nextTokens[1].position.column + colorIdentifier.length\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    compareTokenTypes(tokenList: Token[], tokenTypeList: TokenType[]) {\r\n        if (tokenList.length != tokenTypeList.length) return false;\r\n        for (let i = 0; i < tokenList.length; i++) {\r\n            if (tokenList[i].tt != tokenTypeList[i]) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getNextNonSpaceTokens(tokenIndex: number, count: number): Token[] {\r\n        let tokens: Token[] = [];\r\n        let d = tokenIndex;\r\n        while (tokens.length < count && d + 1 < this.tokenList.length) {\r\n            let foundToken = this.tokenList[d + 1];\r\n            if ([TokenType.space, TokenType.newline].indexOf(foundToken.tt) < 0) {\r\n                tokens.push(foundToken);\r\n            }\r\n            d++;\r\n        }\r\n\r\n        return tokens;\r\n\r\n    }\r\n\r\n    getLastNonSpaceToken(tokenIndex: number) {\r\n        let d = tokenIndex;\r\n        while (d - 1 > 0) {\r\n            let foundToken = this.tokenList[d - 1];\r\n            if ([TokenType.space, TokenType.newline].indexOf(foundToken.tt) < 0) {\r\n                return foundToken;\r\n            }\r\n            d--;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    checkClosingBracket(tt: TokenType) {\r\n        if (this.bracketStack.length == 0) {\r\n            let bracketOpen = this.correspondingBracket[tt];\r\n            this.setBracketError(TokenTypeReadable[bracketOpen] + \" \" + TokenTypeReadable[tt]);\r\n            return;\r\n        }\r\n        let openBracket = this.bracketStack.pop();\r\n        let correspondingBracket = this.correspondingBracket[openBracket];\r\n        if (tt != correspondingBracket) {\r\n            this.setBracketError(TokenTypeReadable[openBracket] + \" \" + TokenTypeReadable[correspondingBracket]);\r\n        }\r\n    }\r\n\r\n    setBracketError(error: string) {\r\n        if (this.bracketError == null) this.bracketError = error;\r\n    }\r\n\r\n    next() {\r\n        this.pos++;\r\n        this.currentChar = this.nextChar;\r\n        if (this.pos + 1 < this.input.length) {\r\n            this.nextChar = this.input.charAt(this.pos + 1);\r\n        } else {\r\n            this.nextChar = endChar;\r\n        }\r\n        this.column++; // column of current char\r\n    }\r\n\r\n\r\n\r\n    mainState() {\r\n\r\n        let char = this.currentChar;\r\n\r\n        let specialCharToken = specialCharList[char];\r\n\r\n        if (specialCharToken != null) {\r\n            switch (specialCharToken) {\r\n                case TokenType.leftSquareBracket:\r\n                    if (this.nextChar == \"]\") {\r\n                        this.pushToken(TokenType.leftRightSquareBracket, \"[]\");\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else {\r\n                        this.pushToken(TokenType.leftSquareBracket, \"[\");\r\n                        this.bracketStack.push(specialCharToken);\r\n                        this.next();\r\n                        return;\r\n                    }\r\n                case TokenType.rightSquareBracket:\r\n                    this.checkClosingBracket(specialCharToken);\r\n                    break;\r\n                case TokenType.leftBracket:\r\n                    this.bracketStack.push(specialCharToken);\r\n                    break;\r\n                case TokenType.rightBracket:\r\n                    this.checkClosingBracket(specialCharToken);\r\n                    break;\r\n                case TokenType.leftCurlyBracket:\r\n                    this.bracketStack.push(specialCharToken);\r\n                    break;\r\n                case TokenType.rightCurlyBracket:\r\n                    this.checkClosingBracket(specialCharToken);\r\n                    break;\r\n                case TokenType.and:\r\n                    if (this.nextChar == \"&\") {\r\n                        this.pushToken(TokenType.and, \"&&\");\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else if (this.nextChar == \"=\") {\r\n                        this.pushToken(TokenType.ANDAssigment, \"&=\");\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else {\r\n                        this.pushToken(TokenType.ampersand, \"&\");\r\n                        this.next();\r\n                        return;\r\n                    }\r\n                case TokenType.or:\r\n                    if (this.nextChar == \"|\") {\r\n                        this.pushToken(TokenType.or, \"||\");\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else if (this.nextChar == \"=\") {\r\n                        this.pushToken(TokenType.ORAssigment, \"&=\");\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else {\r\n                        this.pushToken(TokenType.OR, \"|\");\r\n                        this.next();\r\n                        return;\r\n                    }\r\n                case TokenType.XOR:\r\n                    if (this.nextChar == \"=\") {\r\n                        this.pushToken(TokenType.XORAssigment, \"^=\");\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else {\r\n                        this.pushToken(TokenType.XOR, \"^\");\r\n                        this.next();\r\n                        return;\r\n                    }\r\n                case TokenType.multiplication:\r\n                    if (this.nextChar == \"=\") {\r\n                        this.pushToken(TokenType.multiplicationAssignment, \"*=\");\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else {\r\n                        this.pushToken(TokenType.multiplication, \"*\");\r\n                        this.next();\r\n                        return;\r\n                    }\r\n                case TokenType.not:\r\n                    if (this.nextChar == \"=\") {\r\n                        this.pushToken(TokenType.notEqual, \"!=\");\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else {\r\n                        this.pushToken(TokenType.not, \"!\");\r\n                        this.next();\r\n                        return;\r\n                    }\r\n                case TokenType.division:\r\n                    if (this.nextChar == \"=\") {\r\n                        this.pushToken(TokenType.divisionAssignment, \"/=\");\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else if (this.nextChar == '*') {\r\n                        this.lexMultilineComment();\r\n                        return;\r\n                    } else if (this.nextChar == '/') {\r\n                        this.lexEndofLineComment();\r\n                        return;\r\n                    }\r\n                    this.pushToken(TokenType.division, '/');\r\n                    this.next();\r\n                    return;\r\n                case TokenType.modulo:\r\n                    if (this.nextChar == \"=\") {\r\n                        this.pushToken(TokenType.moduloAssignment, \"%=\");\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else {\r\n                        this.pushToken(TokenType.modulo, \"/\");\r\n                        this.next();\r\n                        return;\r\n                    }\r\n                case TokenType.plus:\r\n                    if (this.nextChar == '+') {\r\n                        this.pushToken(TokenType.doublePlus, '++');\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else if (this.isDigit(this.nextChar, 10) && !\r\n                        ([TokenType.identifier, TokenType.integerConstant, TokenType.floatingPointConstant, TokenType.rightBracket, TokenType.rightSquareBracket].indexOf(this.nonSpaceLastTokenType) >= 0)\r\n                    ) {\r\n                        this.lexNumber();\r\n                        return;\r\n                    } else if (this.nextChar == '=') {\r\n                        this.pushToken(TokenType.plusAssignment, '+=');\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else {\r\n                        this.pushToken(TokenType.plus, '+');\r\n                        this.next();\r\n                        return;\r\n                    }\r\n                case TokenType.lower:\r\n                    if (this.nextChar == '=') {\r\n                        this.pushToken(TokenType.lowerOrEqual, '<=');\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else if (this.nextChar == '<') {\r\n                        this.lexShiftLeft();\r\n                        return;\r\n                    } else {\r\n                        this.pushToken(TokenType.lower, '<');\r\n                        this.next();\r\n                        return;\r\n                    }\r\n                case TokenType.greater:\r\n                    if (this.nextChar == '=') {\r\n                        this.pushToken(TokenType.greaterOrEqual, '>=');\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else if (this.nextChar == '>') {\r\n                        this.lexShiftRight();\r\n                        return;\r\n                    } else {\r\n                        this.pushToken(TokenType.greater, '>');\r\n                        this.next();\r\n                        return;\r\n                    }\r\n                case TokenType.dot:\r\n                    if (this.nextChar == '.' && this.pos + 2 < this.input.length && this.input[this.pos + 2] == \".\") {\r\n                        this.pushToken(TokenType.ellipsis, '...');\r\n                        this.next();\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else {\r\n                        this.pushToken(TokenType.dot, '.');\r\n                        this.next();\r\n                        return;\r\n                    }\r\n\r\n                case TokenType.assignment:\r\n                    if (this.nextChar == '=') {\r\n                        this.pushToken(TokenType.equal, '==');\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else {\r\n                        this.pushToken(TokenType.assignment, '=');\r\n                        this.next();\r\n                        return;\r\n                    }\r\n                case TokenType.minus:\r\n                    if (this.nextChar == '-') {\r\n                        this.pushToken(TokenType.doubleMinus, '--');\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    }\r\n                    else if (this.isDigit(this.nextChar, 10) && !\r\n                        ([TokenType.identifier, TokenType.integerConstant, TokenType.floatingPointConstant, TokenType.stringConstant, TokenType.rightBracket, TokenType.rightSquareBracket].indexOf(this.nonSpaceLastTokenType) >= 0)\r\n                    ) {\r\n                        this.lexNumber();\r\n                        return;\r\n                    }\r\n                    else if (this.nextChar == '=') {\r\n                        this.pushToken(TokenType.minusAssignment, '-=');\r\n                        this.next();\r\n                        this.next();\r\n                        return;\r\n                    } else {\r\n                        this.pushToken(TokenType.minus, '-');\r\n                        this.next();\r\n                        return;\r\n                    }\r\n                case TokenType.singleQuote:\r\n                    this.lexCharacterConstant();\r\n                    return;\r\n                case TokenType.doubleQuote:\r\n                    // triple double quote?\r\n                    if (this.nextChar == \"\\\"\" && this.pos + 3 < this.input.length && this.input[this.pos + 2] == \"\\\"\") {\r\n                        this.lexTripleQuoteStringConstant();\r\n                    } else {\r\n                        this.lexStringConstant();\r\n                    }\r\n                    return;\r\n                case TokenType.newline:\r\n                    this.pushToken(TokenType.newline, '\\n');\r\n                    this.line++;\r\n                    this.column = 0;\r\n                    this.next();\r\n                    return;\r\n                case TokenType.space:\r\n                case TokenType.tab:\r\n                    this.lexSpace();\r\n                    return;\r\n                case TokenType.linefeed:\r\n                    this.next();\r\n                    return;\r\n                case TokenType.at:\r\n                    this.lexAnnotation();\r\n                    return;\r\n            }\r\n\r\n            this.pushToken(specialCharToken, char);\r\n            this.next();\r\n            return;\r\n\r\n        }\r\n\r\n        // no special char. Number?\r\n\r\n        if (this.isDigit(char, 10)) {\r\n            this.lexNumber();\r\n            return;\r\n        }\r\n\r\n        this.lexIdentifierOrKeyword();\r\n\r\n    }\r\n\r\n    lexShiftRight() {\r\n        this.next(); // Consume first > of >>\r\n\r\n        if (this.nextChar == \">\") {\r\n            this.lexShiftRightUnsigned();\r\n        } else if (this.nextChar == \"=\") {\r\n            this.pushToken(TokenType.shiftRightAssigment, \">>=\")\r\n            this.next(); // Consume second >\r\n            this.next(); // Consume =\r\n        } else {\r\n            this.pushToken(TokenType.shiftRight, \">>\");\r\n            this.next(); // Consume second >\r\n        }\r\n        return;\r\n    }\r\n\r\n    lexShiftRightUnsigned() {\r\n        this.next(); // Consume second > of >>>\r\n\r\n        if (this.nextChar == \"=\") {\r\n            this.pushToken(TokenType.shiftRightUnsignedAssigment, \">>>=\")\r\n            this.next(); // Consume second >\r\n            this.next(); // Consume =\r\n        } else {\r\n            this.pushToken(TokenType.shiftRightUnsigned, \">>>\");\r\n            this.next(); // Consume next\r\n        }\r\n        return;\r\n    }\r\n\r\n    lexShiftLeft() {\r\n        this.next(); // Consume first < of <<\r\n\r\n        if (this.nextChar == '=') {\r\n            this.pushToken(TokenType.shiftLeftAssigment, \"<<=\")\r\n            this.next(); // Consume second <\r\n            this.next(); // Consume =\r\n        } else {\r\n            this.pushToken(TokenType.shiftLeft, \"<<\")\r\n            this.next(); // Consume second <\r\n        }\r\n        return;\r\n    }\r\n\r\n\r\n    pushToken(tt: TokenType, text: string | number | boolean, line: number = this.line, column: number = this.column, length: number = (\"\" + text).length) {\r\n        let t: Token = {\r\n            tt: tt,\r\n            value: text,\r\n            position: {\r\n                column: column,\r\n                line: line,\r\n                length: length\r\n            }\r\n        }\r\n\r\n        if (!(this.spaceTokens.indexOf(tt) >= 0)) {\r\n            this.nonSpaceLastTokenType = tt;\r\n        }\r\n\r\n        this.tokenList.push(t);\r\n    }\r\n\r\n    pushError(text: string, length: number, errorLevel: ErrorLevel = \"error\", line: number = this.line, column: number = this.column) {\r\n        this.errorList.push({\r\n            text: text,\r\n            position: {\r\n                line: line,\r\n                column: column,\r\n                length: length\r\n            },\r\n            level: errorLevel\r\n        });\r\n    }\r\n\r\n\r\n\r\n    isDigit(a: string, base: number) {\r\n        var charCode = a.charCodeAt(0);\r\n\r\n        if (base == 10) return (charCode >= 48 && charCode <= 57); // 0 - 9\r\n        if (base == 2) return (charCode >= 48 && charCode <= 49); // 0, 1\r\n        if (base == 8) return (charCode >= 48 && charCode <= 55); // 0 - 7\r\n        if (base == 16) return (charCode >= 48 && charCode <= 57) || (charCode >= 97 && charCode <= 102) ||\r\n            (charCode >= 65 && charCode <= 70); // 0 - 9 || a - f || A - F\r\n    }\r\n\r\n    lexSpace() {\r\n        let column = this.column;\r\n        let line = this.line;\r\n\r\n        let posStart = this.pos;\r\n        while (this.currentChar == \" \" || this.currentChar == \"\\t\") {\r\n            this.next();\r\n        }\r\n\r\n        let posEnd = this.pos;\r\n        this.pushToken(TokenType.space, this.input.substring(posStart, posEnd), line, column);\r\n        return;\r\n\r\n    }\r\n\r\n    lexCharacterConstant() {\r\n        let column = this.column;\r\n        let line = this.line;\r\n        this.next();\r\n        let char = this.currentChar;\r\n        if (char == \"\\\\\") {\r\n            let escapeChar = EscapeSequenceList[this.nextChar];\r\n            if (escapeChar == null) {\r\n                this.pushError('Die Escape-Sequenz \\\\' + this.nextChar + ' gibt es nicht.', 2);\r\n                if (this.nextChar != \"'\") {\r\n                    char = this.nextChar;\r\n                    this.next();\r\n                }\r\n            } else {\r\n                char = escapeChar;\r\n                this.next();\r\n            }\r\n        }\r\n        this.next();\r\n        if (this.currentChar != \"'\") {\r\n            this.pushError(\"Das Ende der char-Konstante wird erwartet (').\", 1);\r\n        } else {\r\n            this.next();\r\n        }\r\n\r\n        this.pushToken(TokenType.charConstant, char, line, column);\r\n\r\n    }\r\n\r\n    lexStringConstant() {\r\n        let line = this.line;\r\n        let column = this.column;\r\n        let text = \"\";\r\n\r\n        this.next();\r\n\r\n        while (true) {\r\n            let char = this.currentChar;\r\n            if (char == \"\\\\\") {\r\n                char = this.parseStringLiteralEscapeCharacter();   \r\n                text += char;\r\n                continue;             \r\n            } else if (char == '\"') {\r\n                this.next();\r\n                break;\r\n            } else if (char == \"\\n\" || char == endChar) {\r\n                this.pushError('Innerhalb einer String-Konstante wurde das Zeilenende erreicht.', text.length + 1, \"error\", line, column);\r\n                break;\r\n            }\r\n            text += char;\r\n            this.next();\r\n        }\r\n\r\n        this.pushToken(TokenType.stringConstant, text, line, column, text.length + 2);\r\n\r\n        let color = this.colorLexer.getColorInfo(text);\r\n\r\n        if (color != null) {\r\n            this.colorInformation.push({\r\n                color: color,\r\n                range: { startLineNumber: line, endLineNumber: line, startColumn: column + 1, endColumn: this.column - 1 }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    lexTripleQuoteStringConstant() {\r\n        let line = this.line;\r\n        let column = this.column;\r\n        let StringLines: string[] = [];\r\n\r\n        // skip \"\"\" and all characters in same line\r\n\r\n        this.next(); // skip \"\r\n        this.next(); // skip \"\r\n        this.next(); // skip \"\r\n\r\n        let restOfLine: string = \"\";\r\n        while ([\"\\n\", \"\\r\"].indexOf(this.currentChar) < 0 && this.currentChar != endChar) {\r\n            restOfLine += this.currentChar;\r\n            this.next();\r\n        }\r\n\r\n        restOfLine = restOfLine.trim();\r\n        if(restOfLine.length > 0 && !restOfLine.startsWith(\"//\") && !restOfLine.startsWith(\"/*\")){\r\n            this.pushError('Eine Java-Multiline-Stringkonstante beginnt immer mit \"\"\" und einem nachfolgenden Zeilenumbruch. Alle nach \"\"\" folgenden Zeichen werden überlesen!', restOfLine.length + 3);\r\n        }\r\n\r\n        if(this.currentChar == '\\r'){\r\n            this.next();\r\n        }\r\n\r\n        if(this.currentChar == '\\n'){\r\n            this.next();\r\n            this.line++;\r\n            this.column = 1;\r\n        }\r\n\r\n        let currentStringLine: string = \"\";\r\n\r\n        while (true) {\r\n            let char = this.currentChar;\r\n            if (char == \"\\\\\") {\r\n                currentStringLine += this.parseStringLiteralEscapeCharacter();\r\n            } else if (char == '\"' && this.nextChar == '\"' && this.pos + 2 < this.input.length && this.input[this.pos + 2] == '\"') {\r\n                this.next();\r\n                this.next();\r\n                this.next();\r\n                StringLines.push(currentStringLine);\r\n                break;\r\n            } else if (char == endChar) {\r\n                let length = 0;\r\n                for(let s of StringLines) length += s.length;\r\n                this.pushError('Innerhalb einer String-Konstante wurde das Textende erreicht.',length, \"error\", line, column);\r\n                StringLines.push(currentStringLine);\r\n                break;\r\n            } else \r\n            if(char == \"\\r\"){\r\n                this.next();\r\n            } else\r\n            if (char == \"\\n\"){\r\n                StringLines.push(currentStringLine);\r\n                currentStringLine = \"\";\r\n                this.line++;\r\n                this.column = 1;\r\n                this.next();\r\n                continue;\r\n            } else {\r\n                currentStringLine += char;\r\n            }\r\n            this.next();\r\n        }\r\n\r\n        if(StringLines.length == 0) return;\r\n        let lastLine = StringLines.pop();\r\n        let indent = 0;\r\n        while(lastLine.length > indent && lastLine.charAt(indent) == \" \"){\r\n            indent++;\r\n        }\r\n\r\n        let text: string = \"\"; \r\n        text = StringLines.map(s => s.substring(indent)).join(\"\\n\");\r\n\r\n        this.pushToken(TokenType.stringConstant, text, this.line, this.column, text.length + 2);\r\n\r\n    }\r\n\r\n    parseStringLiteralEscapeCharacter(): string {\r\n        this.next(); // skip \\\r\n        if(this.currentChar == \"u\"){\r\n            let hex: string = \"\";\r\n            this.next();\r\n            while(\"abcdef0123456789\".indexOf(this.currentChar) >= 0 && hex.length < 4){\r\n                hex += this.currentChar;\r\n                this.next();\r\n            }\r\n            if(hex.length < 4){\r\n                this.pushError('Die Escape-Sequenz \\\\u' + hex + ' gibt es nicht.', 1 + hex.length);\r\n                return \"\";\r\n            } else {\r\n                return String.fromCodePoint(parseInt(hex,16));\r\n            }\r\n        } else if(EscapeSequenceList[this.currentChar] != null){\r\n            let c = EscapeSequenceList[this.currentChar];\r\n            this.next();\r\n            return c;\r\n        } else {\r\n            this.pushError('Die Escape-Sequenz \\\\' + this.currentChar + ' gibt es nicht.', 2);\r\n            this.next();\r\n            return \"\";\r\n        }\r\n\r\n    }\r\n\r\n    lexMultilineComment() {\r\n        let line = this.line;\r\n        let column = this.column;\r\n        let lastCharWasNewline: boolean = false;\r\n\r\n        let text = \"/*\";\r\n        this.next();\r\n        this.next();\r\n\r\n        while (true) {\r\n            let char = this.currentChar;\r\n            if (char == \"*\" && this.nextChar == \"/\") {\r\n                this.next();\r\n                this.next();\r\n                text += \"*/\";\r\n                break;\r\n            }\r\n            if (char == endChar) {\r\n                this.pushError(\"Innerhalb eines Mehrzeilenkommentars (/*... */) wurde das Dateiende erreicht.\", 1);\r\n                break;\r\n            }\r\n            if (char == \"\\n\") {\r\n                this.line++;\r\n                this.column = 0;\r\n                lastCharWasNewline = true;\r\n                text += char;\r\n            } else if (!(lastCharWasNewline && char == \" \")) {\r\n                text += char;\r\n                lastCharWasNewline = false;\r\n            }\r\n\r\n            this.next();\r\n        }\r\n\r\n        this.pushToken(TokenType.comment, text, line, column);\r\n\r\n    }\r\n\r\n    lexEndofLineComment() {\r\n        let line = this.line;\r\n        let column = this.column;\r\n\r\n        let text = \"//\";\r\n        this.next();\r\n        this.next();\r\n\r\n        while (true) {\r\n            let char = this.currentChar;\r\n            if (char == \"\\n\") {\r\n                break;\r\n            }\r\n            if (char == endChar) {\r\n                // this.pushError(\"Innerhalb eines Einzeilenkommentars (//... ) wurde das Dateiende erreicht.\", 1);\r\n                break;\r\n            }\r\n            text += char;\r\n            this.next();\r\n        }\r\n\r\n        this.pushToken(TokenType.comment, text, line, column);\r\n\r\n    }\r\n\r\n\r\n    lexNumber() {\r\n        let line = this.line;\r\n        let column = this.column;\r\n\r\n        let sign: number = 1;\r\n        if (this.currentChar == '-') {\r\n            sign = -1;\r\n            this.next();\r\n        } else if (this.currentChar == '+') {\r\n            this.next();\r\n        }\r\n\r\n        let posStart = this.pos;\r\n\r\n        let firstChar = this.currentChar;\r\n\r\n        this.next();\r\n\r\n        let radix: number = 10;\r\n\r\n        if (firstChar == '0' && (['b', 'x', '0', '1', '2', '3', '4', '5', '6', '7'].indexOf(this.currentChar) >= 0)) {\r\n            if (this.currentChar == 'x') {\r\n                radix = 16;\r\n                this.next();\r\n            } else if (this.currentChar == 'b') {\r\n                radix = 2;\r\n                this.next();\r\n            } else radix = 8;\r\n            posStart = this.pos;\r\n        }\r\n\r\n        while (this.isDigit(this.currentChar, radix)) {\r\n            this.next();\r\n        }\r\n\r\n        let tt = TokenType.integerConstant;\r\n\r\n        if (this.currentChar == \".\") {\r\n            tt = TokenType.floatingPointConstant;\r\n\r\n            this.next();\r\n            while (this.isDigit(this.currentChar, 10)) {\r\n                this.next();\r\n            }\r\n\r\n            if (radix != 10) {\r\n                this.pushError(\"Eine float/double-Konstante darf nicht mit 0, 0b oder 0x beginnen.\", this.pos - posStart, \"error\", this.line, this.column - (this.pos - posStart));\r\n            }\r\n\r\n        }\r\n\r\n        let base = this.input.substring(posStart, this.pos);\r\n\r\n        posStart = this.pos;\r\n        let exponent: number = 0;\r\n\r\n        let hasExponential: boolean = false;\r\n        //@ts-ignore\r\n        if (this.currentChar == \"e\") {\r\n            hasExponential = true;\r\n            this.next();\r\n            let posExponentStart: number = this.pos;\r\n\r\n            //@ts-ignore\r\n            if (this.currentChar == '-') {\r\n                this.next();\r\n            }\r\n\r\n            while (this.isDigit(this.currentChar, 10)) {\r\n                this.next();\r\n            }\r\n            if (radix != 10) {\r\n                this.pushError(\"Eine float/double-Konstante darf nicht mit 0, 0b oder 0x beginnen.\", this.pos - posStart, \"error\", this.line, this.column - (this.pos - posStart));\r\n            }\r\n            let exponentString = this.input.substring(posExponentStart, this.pos);\r\n            exponent = Number.parseInt(exponentString);\r\n        }\r\n\r\n        if (this.currentChar == 'd' || this.currentChar == 'f') {\r\n            tt = TokenType.floatingPointConstant;\r\n            this.next();\r\n            if (radix != 10) {\r\n                this.pushError(\"Eine float/double-Konstante darf nicht mit 0, 0b oder 0x beginnen.\", this.pos - posStart, \"error\", this.line, this.column - (this.pos - posStart));\r\n            }\r\n        }\r\n\r\n        let value: number = (tt == TokenType.integerConstant) ? Number.parseInt(base, radix) : Number.parseFloat(base);\r\n        value *= sign;\r\n        if (exponent != 0) value *= Math.pow(10, exponent);\r\n\r\n        this.pushToken(tt, value, line, column);\r\n\r\n        if (radix == 16 && this.column - column == 8) {\r\n            this.colorInformation.push({\r\n                color: {\r\n                    red: (value >> 16) / 255,\r\n                    green: ((value >> 8) & 0xff) / 255,\r\n                    blue: (value & 0xff) / 255,\r\n                    alpha: 1\r\n                },\r\n                range: {\r\n                    startLineNumber: line, endLineNumber: line, startColumn: column, endColumn: this.column\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    lexAnnotation() {\r\n        let line = this.line;\r\n        let column = this.column - 1;\r\n        let posStart = this.pos;\r\n\r\n        this.next(); // consume @\r\n        let char = this.currentChar;\r\n\r\n        while (specialCharList[char] == null && !this.isSpace(char) && !(char == endChar)) {\r\n            this.next();\r\n            char = this.currentChar;\r\n        }\r\n\r\n        let posEnd = this.pos;\r\n\r\n        let text = this.input.substring(posStart, posEnd);\r\n        this.pushToken(TokenType.at, text, line, column, text.length + 1);\r\n    }\r\n\r\n    lexIdentifierOrKeyword() {\r\n        let line = this.line;\r\n        let column = this.column;\r\n\r\n        let posStart = this.pos;\r\n        let char = this.currentChar;\r\n\r\n        while (specialCharList[char] == null && !this.isSpace(char) && !(char == endChar)) {\r\n            this.next();\r\n            char = this.currentChar;\r\n        }\r\n\r\n        let posEnd = this.pos;\r\n\r\n        let text = this.input.substring(posStart, posEnd);\r\n\r\n        let tt = keywordList[text];\r\n        if (tt != null && typeof tt == \"number\") {\r\n\r\n            switch (tt) {\r\n                case TokenType.true:\r\n                    this.pushToken(TokenType.booleanConstant, true, line, column);\r\n                    break;\r\n                case TokenType.false:\r\n                    this.pushToken(TokenType.booleanConstant, false, line, column);\r\n                    break;\r\n                case TokenType.keywordPrint:\r\n                case TokenType.keywordPrintln:\r\n                    if (this.nonSpaceLastTokenType == TokenType.dot) {\r\n                        this.pushToken(TokenType.identifier, text, line, column);\r\n                    } else {\r\n                        this.pushToken(tt, text, line, column);\r\n                    }\r\n                    break;\r\n                default:\r\n                    this.pushToken(tt, text, line, column);\r\n                    break;\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (text == 'Color') {\r\n            this.colorIndices.push(this.tokenList.length);\r\n        }\r\n\r\n        this.pushToken(TokenType.identifier, text, line, column);\r\n\r\n    }\r\n\r\n    isSpace(char: string): boolean {\r\n        return char == \" \" || char == \"\\n\";\r\n    }\r\n\r\n\r\n}\r\n\r\nexport function errorListToString(errorList: Error[]): string {\r\n    let s = \"\";\r\n\r\n    for (let error of errorList) {\r\n\r\n        s += \"Z \" + error.position.line + \", S \" + error.position.column + \": \";\r\n        s += error.text + \"<br>\";\r\n\r\n    }\r\n\r\n    return s;\r\n}","import { Method, Parameterlist, Value } from \"./Types.js\";\r\nimport { stringPrimitiveType } from \"./PrimitiveTypes.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { Module } from \"../parser/Module.js\";\r\nimport { Interface, Klass } from \"./Class.js\";\r\n// neu:\r\nimport { Enum, EnumRuntimeObject } from \"./Enum.js\";\r\nimport { type } from \"jquery\";\r\nimport { json } from \"express\";\r\nimport { ArrayType } from \"./Array.js\";\r\n\r\n\r\n/**\r\n * Base class for all classes\r\n */\r\n\r\nexport class ObjectClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"Object\", module, \"Basisklasse aller Klassen\");\r\n\r\n        // stringPrimitiveType is used here before it is initialized. This problem is solved\r\n        // in the constructor of StringprimitiveType.\r\n        let m = new Method(\"toString\", new Parameterlist([]), stringPrimitiveType,\r\n        (parameters) => {\r\n            if(parameters[0].value instanceof RuntimeObject){\r\n                return \"(\" + (<RuntimeObject><unknown>parameters[0].value).class.identifier + \")\";\r\n            } else {\r\n                return parameters[0].value;\r\n            }\r\n\r\n\r\n        }, false, false);\r\n        m.isVirtual = true;\r\n        \r\n        this.addMethod(m);\r\n\r\n\r\n        // // Add default parameterless constructor\r\n        // let m = new Method(\"Object\", new Parameterlist([]), null,\r\n        // (parameters) => {\r\n\r\n        // }, false, false);\r\n        \r\n        // m.isConstructor = true;\r\n\r\n        // this.addMethod(m);\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n","import { Klass, UnboxableKlass, Visibility } from \"../Class.js\";\r\nimport { Method, Parameterlist, Attribute, Value, Type, PrimitiveType } from \"../Types.js\";\r\nimport { intPrimitiveType, stringPrimitiveType, doublePrimitiveType, floatPrimitiveType, booleanPrimitiveType, longPrimitiveType } from \"../PrimitiveTypes.js\";\r\nimport { RuntimeObject } from \"../../../interpreter/RuntimeObject.js\";\r\n\r\n\r\nexport class IntegerClass extends UnboxableKlass {\r\n\r\n    constructor(baseClass: Klass) {\r\n        super(\"Integer\", null, \"Wrapper-Klasse, um int-Werte in Collections verenden zu können.\");\r\n        this.baseClass = baseClass;\r\n\r\n        this.addAttribute(new Attribute(\"MAX_VALUE\", intPrimitiveType, (value) => { value.value = Number.MAX_SAFE_INTEGER }, true, Visibility.public, true, \"Der größte Wert, den eine Variable vom Typ int annehmen kann\"));\r\n        this.addAttribute(new Attribute(\"MIN_VALUE\", intPrimitiveType, (value) => { value.value = Number.MIN_SAFE_INTEGER }, true, Visibility.public, true, \"Der kleinste Wert, den eine Variable vom Typ int annehmen kann\"));\r\n\r\n        this.staticClass.setupAttributeIndicesRecursive();\r\n\r\n        this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n\r\n    }\r\n\r\n    init() {\r\n\r\n        this.unboxableAs = [intPrimitiveType, floatPrimitiveType, doublePrimitiveType, longPrimitiveType];\r\n\r\n        this.addMethod(new Method(\"Integer\", new Parameterlist([\r\n            { identifier: \"int-wert\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                parameters[0].value = parameters[1].value;\r\n\r\n            }, false, false, \"Instanziert ein neues Integer-Objekt\", true));\r\n\r\n        this.addMethod(new Method(\"Integer\", new Parameterlist([\r\n            { identifier: \"text\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                parameters[0].value = Number.parseInt(parameters[1].value);\r\n\r\n            }, false, false, \"Instanziert ein neues Integer-Objekt, indem die übergebene Zeichenkette in einen int-Wert umgewandelt wird.\", true));\r\n\r\n\r\n        this.addMethod(new Method(\"doubleValue\", new Parameterlist([]), doublePrimitiveType,\r\n            (parameters) => { return parameters[0].value; }, false, false, \"Wandelt das Integer-Objekt in einen double-Wert um\"));\r\n        this.addMethod(new Method(\"floatValue\", new Parameterlist([]), floatPrimitiveType,\r\n            (parameters) => { return parameters[0].value; }, false, false, \"Wandelt das Integer-Objekt in einen float-Wert um\"));\r\n        this.addMethod(new Method(\"intValue\", new Parameterlist([]), intPrimitiveType,\r\n            (parameters) => { return parameters[0].value; }, false, false, \"Wandelt das Integer-Objekt in einen int-Wert um\"));\r\n\r\n        this.addMethod(new Method(\"compareTo\", new Parameterlist([\r\n            { identifier: \"anotherInteger\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let v0 = parameters[0].value;\r\n                let v1 = parameters[1].value;\r\n                if (v0 > v1) return 1;\r\n                if (v0 < v1) return -1;\r\n                return 0;\r\n            }, false, false, \"Ist der Wert größer als der übergebene Wert, so wird +1 zurückgegeben. Ist er kleiner, so wird -1 zurückgegeben. Sind die Werte gleich, so wird 0 zurückgegeben.\"));\r\n\r\n        this.addMethod(new Method(\"equals\", new Parameterlist([\r\n            { identifier: \"anotherInteger\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[0].value == parameters[1].value;\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Wert gleich dem übergebenen Wert ist.\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return \"\" + parameters[0].value;\r\n            }, false, false, \"Gibt den Wert des Objekts als String-Wert zur Basis 10 zurück.\"));\r\n\r\n        this.addMethod(new Method(\"hashCode\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[0].value;\r\n            }, false, false, \"Gibt den hashCode des Objekts zurück.\"));\r\n\r\n        this.addMethod(new Method(\"parseInt\", new Parameterlist([\r\n            { identifier: \"s\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return Number.parseInt(parameters[1].value);\r\n            }, false, true, \"Wandelt die Zeichenkette in einen int-Wert um\"));\r\n\r\n        this.addMethod(new Method(\"parseInt\", new Parameterlist([\r\n            { identifier: \"s\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"radix\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return Number.parseInt(parameters[1].value, parameters[2].value);\r\n            }, false, true, \"Wandelt die Zeichenkette s in einen int-Wert um. Dabei wird s als Zahl im Zahlensystem mit der Basis radix interpretiert.\"));\r\n\r\n        this.addMethod(new Method(\"signum\", new Parameterlist([\r\n            { identifier: \"i\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return Math.sign(parameters[1].value);\r\n            }, false, true, \"Gibt das Signum der übergebenen Zahl zurück, also -1 falls negativ, 0 falls 0 und +1 falls positiv.\"));\r\n\r\n        this.addMethod(new Method(\"toBinary\", new Parameterlist([\r\n            { identifier: \"i\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return (parameters[1].value >>> 0).toString(2);\r\n            }, false, true, \"Gibt die übergebene Zahl als Binärrepräsentation zurück.\"));\r\n\r\n        this.addMethod(new Method(\"toHex\", new Parameterlist([\r\n            { identifier: \"i\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return (parameters[1].value >>> 0).toString(16);\r\n            }, false, true, \"Gibt die übergebene Zahl als Hexadezimalrepräsentation zurück.\"));\r\n\r\n        this.addMethod(new Method(\"toOctal\", new Parameterlist([\r\n            { identifier: \"i\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return (parameters[1].value >>> 0).toString(8);\r\n            }, false, true, \"Gibt die übergebene Zahl als Oktalrepräsentation zurück.\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([\r\n            { identifier: \"i\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return (parameters[1].value).toString();\r\n            }, false, true, \"Gibt die übergebene Zahl als String-Wert zur Basis 10 zurück.\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([\r\n            { identifier: \"i\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"radix\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return (parameters[1].value >>> 0).toString(parameters[2].value);\r\n            }, false, true, \"Gibt die übergebene Zahl als String-Wert zur Basis radix zurück.\"));\r\n\r\n        this.addMethod(new Method(\"valueOf\", new Parameterlist([\r\n            { identifier: \"i\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), this,\r\n            (parameters) => {\r\n                return parameters[1].value;\r\n            }, false, true, \"Gibt die übergebene Zahl als Integer-Objekt zurück.\"));\r\n\r\n        this.addMethod(new Method(\"valueOf\", new Parameterlist([\r\n            { identifier: \"s\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), this,\r\n            (parameters) => {\r\n                return Number.parseInt(parameters[1].value);\r\n            }, false, true, \"Interpretiert die übergebene Zeichenkette als Dezimalzahl und gib sie als Integer-Objekt zurück.\"));\r\n\r\n        this.addMethod(new Method(\"valueOf\", new Parameterlist([\r\n            { identifier: \"s\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"radix\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), this,\r\n            (parameters) => {\r\n                return Number.parseInt(parameters[1].value, parameters[2].value);\r\n            }, false, true, \"Interpretiert die übergebene Zeichenkette als Zahl zur Basis radix und gib sie als Integer-Objekt zurück.\"));\r\n\r\n        // this.addMethod(new Method(\"charAt\", new Parameterlist([{ identifier: \"Position\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), charPrimitiveType,\r\n        //     (parameters) => { return (<string>parameters[0].value).charAt(<number>(parameters[1].value)); }, false, false, \"Zeichen an der gegebenen Position.\\n**Bem.: ** Position == 0 bedeutet das erste Zeichen in der Zeichenkette, Position == 1 das zweite usw. .\"));\r\n\r\n    }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return \"\" + <number>value.value;\r\n    }\r\n\r\n\r\n}\r\n","import { Klass, UnboxableKlass, Visibility } from \"../Class.js\";\r\nimport { Method, Parameterlist, Attribute, Value, Type, PrimitiveType } from \"../Types.js\";\r\nimport { longPrimitiveType, stringPrimitiveType, doublePrimitiveType, floatPrimitiveType, intPrimitiveType, booleanPrimitiveType } from \"../PrimitiveTypes.js\";\r\nimport { RuntimeObject } from \"../../../interpreter/RuntimeObject.js\";\r\n\r\n\r\nexport class LongClass extends UnboxableKlass {\r\n\r\n    constructor(baseClass: Klass) {\r\n        super(\"Long\", null, \"Wrapper-Klasse, um int-Werte in Collections verenden zu können.\");\r\n        this.baseClass = baseClass;\r\n\r\n        this.addAttribute(new Attribute(\"MAX_VALUE\", longPrimitiveType, (value) => { value.value = Number.MAX_SAFE_INTEGER }, true, Visibility.public, true, \"Der größte Wert, den eine Variable vom Typ long annehmen kann\"));\r\n        this.addAttribute(new Attribute(\"MIN_VALUE\", longPrimitiveType, (value) => { value.value = Number.MIN_SAFE_INTEGER }, true, Visibility.public, true, \"Der kleinste Wert, den eine Variable vom Typ long annehmen kann\"));\r\n\r\n        this.staticClass.setupAttributeIndicesRecursive();\r\n\r\n        this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n\r\n    }\r\n\r\n    init() {\r\n\r\n        this.unboxableAs = [intPrimitiveType, longPrimitiveType, floatPrimitiveType, doublePrimitiveType];\r\n\r\n        this.addMethod(new Method(\"Long\", new Parameterlist([\r\n            { identifier: \"long-wert\", type: longPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                parameters[0].value = parameters[1].value;\r\n\r\n            }, false, false, \"Instanziert ein neues Long-Objekt\", true));\r\n\r\n        this.addMethod(new Method(\"Long\", new Parameterlist([\r\n            { identifier: \"text\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                parameters[0].value = Number.parseInt(parameters[1].value);\r\n\r\n            }, false, false, \"Instanziert ein neues Long-Objekt, indem die übergebene Zeichenkette in einen int-Wert umgewandelt wird.\", true));\r\n\r\n\r\n        this.addMethod(new Method(\"doubleValue\", new Parameterlist([]), doublePrimitiveType,\r\n            (parameters) => { return parameters[0].value; }, false, false, \"Wandelt das Long-Objekt in einen double-Wert um\"));\r\n        this.addMethod(new Method(\"floatValue\", new Parameterlist([]), floatPrimitiveType,\r\n            (parameters) => { return parameters[0].value; }, false, false, \"Wandelt das Long-Objekt in einen float-Wert um\"));\r\n        this.addMethod(new Method(\"intValue\", new Parameterlist([]), intPrimitiveType,\r\n            (parameters) => { return parameters[0].value; }, false, false, \"Wandelt das Long-Objekt in einen int-Wert um\"));\r\n        this.addMethod(new Method(\"longValue\", new Parameterlist([]), longPrimitiveType,\r\n            (parameters) => { return parameters[0].value; }, false, false, \"Wandelt das Long-Objekt in einen long-Wert um\"));\r\n\r\n        this.addMethod(new Method(\"compareTo\", new Parameterlist([\r\n            { identifier: \"anotherLong\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), longPrimitiveType,\r\n            (parameters) => {\r\n                let v0 = parameters[0].value;\r\n                let v1 = parameters[1].value;\r\n                if (v0 > v1) return 1;\r\n                if (v0 < v1) return -1;\r\n                return 0;\r\n            }, false, false, \"Ist der Wert größer als der übergebene Wert, so wird +1 zurückgegeben. Ist er kleiner, so wird -1 zurückgegeben. Sind die Werte gleich, so wird 0 zurückgegeben.\"));\r\n\r\n        this.addMethod(new Method(\"equals\", new Parameterlist([\r\n            { identifier: \"anotherLong\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[0].value == parameters[1].value;\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Wert gleich dem übergebenen Wert ist.\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return \"\" + parameters[0].value;\r\n            }, false, false, \"Gibt den Wert des Objekts als String-Wert zur Basis 10 zurück.\"));\r\n\r\n        this.addMethod(new Method(\"hashCode\", new Parameterlist([\r\n        ]), longPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[0].value;\r\n            }, false, false, \"Gibt den hashCode des Objekts zurück.\"));\r\n\r\n        this.addMethod(new Method(\"parseLong\", new Parameterlist([\r\n            { identifier: \"s\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), longPrimitiveType,\r\n            (parameters) => {\r\n                return Number.parseInt(parameters[1].value);\r\n            }, false, true, \"Wandelt die Zeichenkette in einen long-Wert um\"));\r\n\r\n        this.addMethod(new Method(\"parseLong\", new Parameterlist([\r\n            { identifier: \"s\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"radix\", type: longPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), longPrimitiveType,\r\n            (parameters) => {\r\n                return Number.parseInt(parameters[1].value, parameters[2].value);\r\n            }, false, true, \"Wandelt die Zeichenkette s in einen long-Wert um. Dabei wird s als Zahl im Zahlensystem mit der Basis radix interpretiert.\"));\r\n\r\n        this.addMethod(new Method(\"signum\", new Parameterlist([\r\n            { identifier: \"i\", type: longPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), longPrimitiveType,\r\n            (parameters) => {\r\n                return Math.sign(parameters[1].value);\r\n            }, false, true, \"Gibt das Signum der übergebenen Zahl zurück, also -1 falls negativ, 0 falls 0 und +1 falls positiv.\"));\r\n\r\n        this.addMethod(new Method(\"toBinary\", new Parameterlist([\r\n            { identifier: \"i\", type: longPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return (parameters[1].value >>> 0).toString(2);\r\n            }, false, true, \"Gibt die übergebene Zahl als Binärrepräsentation zurück.\"));\r\n\r\n        this.addMethod(new Method(\"toHex\", new Parameterlist([\r\n            { identifier: \"i\", type: longPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return (parameters[1].value >>> 0).toString(16);\r\n            }, false, true, \"Gibt die übergebene Zahl als Hexadezimalrepräsentation zurück.\"));\r\n\r\n        this.addMethod(new Method(\"toOctal\", new Parameterlist([\r\n            { identifier: \"i\", type: longPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return (parameters[1].value >>> 0).toString(8);\r\n            }, false, true, \"Gibt die übergebene Zahl als Oktalrepräsentation zurück.\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([\r\n            { identifier: \"i\", type: longPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return (parameters[1].value).toString();\r\n            }, false, true, \"Gibt die übergebene Zahl als String-Wert zur Basis 10 zurück.\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([\r\n            { identifier: \"i\", type: longPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"radix\", type: longPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return (parameters[1].value >>> 0).toString(parameters[2].value);\r\n            }, false, true, \"Gibt die übergebene Zahl als String-Wert zur Basis radix zurück.\"));\r\n\r\n        this.addMethod(new Method(\"valueOf\", new Parameterlist([\r\n            { identifier: \"i\", type: longPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), this,\r\n            (parameters) => {\r\n                return parameters[1].value;\r\n            }, false, true, \"Gibt die übergebene Zahl als Long-Objekt zurück.\"));\r\n\r\n        this.addMethod(new Method(\"valueOf\", new Parameterlist([\r\n            { identifier: \"s\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), this,\r\n            (parameters) => {\r\n                return Number.parseInt(parameters[1].value);\r\n            }, false, true, \"Interpretiert die übergebene Zeichenkette als Dezimalzahl und gib sie als Long-Objekt zurück.\"));\r\n\r\n        this.addMethod(new Method(\"valueOf\", new Parameterlist([\r\n            { identifier: \"s\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"radix\", type: longPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), this,\r\n            (parameters) => {\r\n                return Number.parseInt(parameters[1].value, parameters[2].value);\r\n            }, false, true, \"Interpretiert die übergebene Zeichenkette als Zahl zur Basis radix und gib sie als Long-Objekt zurück.\"));\r\n\r\n        // this.addMethod(new Method(\"charAt\", new Parameterlist([{ identifier: \"Position\", type: longPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), charPrimitiveType,\r\n        //     (parameters) => { return (<string>parameters[0].value).charAt(<number>(parameters[1].value)); }, false, false, \"Zeichen an der gegebenen Position.\\n**Bem.: ** Position == 0 bedeutet das erste Zeichen in der Zeichenkette, Position == 1 das zweite usw. .\"));\r\n\r\n    }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return \"\" + <number>value.value;\r\n    }\r\n\r\n\r\n}\r\n","import { Klass, UnboxableKlass, Visibility } from \"../Class.js\";\r\nimport { Method, Parameterlist, Attribute, Value, Type, PrimitiveType } from \"../Types.js\";\r\nimport { intPrimitiveType, stringPrimitiveType, doublePrimitiveType, floatPrimitiveType, booleanPrimitiveType } from \"../PrimitiveTypes.js\";\r\nimport { RuntimeObject } from \"../../../interpreter/RuntimeObject.js\";\r\nimport { floatToString } from \"../../../tools/StringTools.js\";\r\n\r\n\r\nexport class FloatClass extends UnboxableKlass {\r\n\r\n    constructor(baseClass: Klass) {\r\n        super(\"Float\", null, \"Wrapper-Klasse, um float-Werte in Collections verenden zu können.\");\r\n        this.baseClass = baseClass;\r\n\r\n        this.addAttribute(new Attribute(\"MAX_VALUE\", floatPrimitiveType, (value) => { value.value = Number.MAX_VALUE }, true, Visibility.public, true, \"Der größte Wert, den eine Variable vom Typ float annehmen kann\"));\r\n        this.addAttribute(new Attribute(\"MIN_VALUE\", floatPrimitiveType, (value) => { value.value = Number.MIN_VALUE }, true, Visibility.public, true, \"Der kleinste Wert, den eine Variable vom Typ float annehmen kann\"));\r\n        this.addAttribute(new Attribute(\"NaN_VALUE\", floatPrimitiveType, (value) => { value.value = Number.NaN }, true, Visibility.public, true, \"Der \\\"Not a Number\\\"-Wert vom Typ float\"));\r\n        this.addAttribute(new Attribute(\"NEGATIVE_INFINITY\", floatPrimitiveType, (value) => { value.value = Number.NEGATIVE_INFINITY }, true, Visibility.public, true, \"Der \\\"negative infinity\\\"-Wert vom Typ float\"));\r\n        this.addAttribute(new Attribute(\"POSITIVE_INFINITY\", floatPrimitiveType, (value) => { value.value = Number.POSITIVE_INFINITY }, true, Visibility.public, true, \"Der \\\"positive infinity\\\"-Wert vom Typ float\"));\r\n        this.staticClass.setupAttributeIndicesRecursive();\r\n\r\n        this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n\r\n    }\r\n\r\n    init() {\r\n\r\n        this.unboxableAs = [floatPrimitiveType, doublePrimitiveType];\r\n\r\n        this.addMethod(new Method(\"Float\", new Parameterlist([\r\n            { identifier: \"double-value\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                parameters[0].value = parameters[1].value;\r\n\r\n            }, false, false, \"Instanziert ein neues Float-Objekt\", true));\r\n\r\n        this.addMethod(new Method(\"Float\", new Parameterlist([\r\n            { identifier: \"int-value\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                parameters[0].value = parameters[1].value;\r\n\r\n            }, false, false, \"Instanziert ein neues Float-Objekt\", true));\r\n\r\n        this.addMethod(new Method(\"Float\", new Parameterlist([\r\n            { identifier: \"text\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                parameters[0].value = Number.parseFloat(parameters[1].value);\r\n\r\n            }, false, false, \"Instanziert ein neues Float-Objekt, indem die übergebene Zeichenkette in einen float-Wert umgewandelt wird.\", true));\r\n\r\n\r\n        this.addMethod(new Method(\"doubleValue\", new Parameterlist([]), doublePrimitiveType,\r\n            (parameters) => { return parameters[0].value; }, false, false, \"Wandelt das Float-Objekt in einen double-Wert um.\"));\r\n        this.addMethod(new Method(\"floatValue\", new Parameterlist([]), floatPrimitiveType,\r\n            (parameters) => { return parameters[0].value; }, false, false, \"Wandelt das Float-Objekt in einen float-Wert um.\"));\r\n        this.addMethod(new Method(\"intValue\", new Parameterlist([]), intPrimitiveType,\r\n            (parameters) => { return Math.trunc(parameters[0].value); }, false, false, \"Wandelt das Float-Objekt durch Abrunden in einen int-Wert um.\"));\r\n\r\n        this.addMethod(new Method(\"compareTo\", new Parameterlist([\r\n            { identifier: \"anotherFloat\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let v0 = parameters[0].value;\r\n                let v1 = parameters[1].value;\r\n                if (v0 > v1) return 1;\r\n                if (v0 < v1) return -1;\r\n                return 0;\r\n            }, false, false, \"Ist der Wert größer als der übergebene Wert, so wird +1 zurückgegeben. Ist er kleiner, so wird -1 zurückgegeben. Sind die Werte gleich, so wird 0 zurückgegeben.\"));\r\n\r\n        this.addMethod(new Method(\"equals\", new Parameterlist([\r\n            { identifier: \"anotherFloat\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[0].value == parameters[1].value;\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Wert gleich dem übergebenen Wert ist.\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return floatToString(parameters[0].value);\r\n            }, false, false, \"Gibt den Wert des Objekts als String-Wert zurück.\"));\r\n\r\n        this.addMethod(new Method(\"hashCode\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return Math.trunc(parameters[0].value);\r\n            }, false, false, \"Gibt den hashCode des Objekts zurück.\"));\r\n\r\n        this.addMethod(new Method(\"parseFloat\", new Parameterlist([\r\n            { identifier: \"s\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), floatPrimitiveType,\r\n            (parameters) => {\r\n                return Number.parseFloat(parameters[1].value);\r\n            }, false, true, \"Wandelt die Zeichenkette in einen float-Wert um\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([\r\n            { identifier: \"f\", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return floatToString(parameters[1].value);\r\n            }, false, true, \"Gibt die übergebene Zahl als String-Wert zurück.\"));\r\n\r\n        this.addMethod(new Method(\"valueOf\", new Parameterlist([\r\n            { identifier: \"f\", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), this,\r\n            (parameters) => {\r\n                return parameters[1].value;\r\n            }, false, true, \"Gibt die übergebene Zahl als Float-Objekt zurück.\"));\r\n\r\n        this.addMethod(new Method(\"valueOf\", new Parameterlist([\r\n            { identifier: \"s\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), this,\r\n            (parameters) => {\r\n                return Number.parseFloat(parameters[1].value);\r\n            }, false, true, \"Interpretiert die übergebene Zeichenkette als Dezimalzahl und gib sie als Float-Objekt zurück.\"));\r\n\r\n        this.addMethod(new Method(\"isNaN\", new Parameterlist([\r\n            { identifier: \"f\", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return Number.isNaN(parameters[1].value)\r\n            }, false, true, \"Gibt genau dann true zurück, falls die übergebene float-Zahl NaN (not a Number) ist.\"));\r\n\r\n        this.addMethod(new Method(\"isNaN\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return Number.isNaN(parameters[0].value)\r\n            }, false, false, \"Gibt genau dann true zurück, falls das Objekt NaN (not a Number) ist.\"));\r\n\r\n        this.addMethod(new Method(\"isInfinite\", new Parameterlist([\r\n            { identifier: \"f\", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[1].value == Infinity;\r\n            }, false, true, \"Gibt genau dann true zurück, falls die übergebene float-Zahl INFINTITY ist.\"));\r\n\r\n        this.addMethod(new Method(\"isInfinite\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[0].value == Infinity;\r\n            }, false, false, \"Gibt genau dann true zurück, falls das Objekt INFINITY ist.\"));\r\n\r\n    }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return \"\" + <number>value.value;\r\n    }\r\n\r\n\r\n}\r\n","import { Klass, UnboxableKlass, Visibility } from \"../Class.js\";\r\nimport { Method, Parameterlist, Attribute, Value, Type, PrimitiveType } from \"../Types.js\";\r\nimport { intPrimitiveType, stringPrimitiveType, floatPrimitiveType, doublePrimitiveType, booleanPrimitiveType } from \"../PrimitiveTypes.js\";\r\nimport { RuntimeObject } from \"../../../interpreter/RuntimeObject.js\";\r\nimport { floatToString } from \"../../../tools/StringTools.js\";\r\n\r\n\r\nexport class DoubleClass extends UnboxableKlass {\r\n\r\n    constructor(baseClass: Klass) {\r\n        super(\"Double\", null, \"Wrapper-Klasse, um double-Werte in Collections verenden zu können.\");\r\n        this.baseClass = baseClass;\r\n\r\n        this.addAttribute(new Attribute(\"MAX_VALUE\", doublePrimitiveType, (value) => { value.value = Number.MAX_VALUE }, true, Visibility.public, true, \"Der größte Wert, den eine Variable vom Typ double annehmen kann\"));\r\n        this.addAttribute(new Attribute(\"MIN_VALUE\", doublePrimitiveType, (value) => { value.value = Number.MIN_VALUE }, true, Visibility.public, true, \"Der kleinste Wert, den eine Variable vom Typ double annehmen kann\"));\r\n        this.addAttribute(new Attribute(\"NaN_VALUE\", doublePrimitiveType, (value) => { value.value = Number.NaN }, true, Visibility.public, true, \"Der \\\"Not a Number\\\"-Wert vom Typ double\"));\r\n        this.addAttribute(new Attribute(\"NEGATIVE_INFINITY\", doublePrimitiveType, (value) => { value.value = Number.NEGATIVE_INFINITY }, true, Visibility.public, true, \"Der \\\"negative infinity\\\"-Wert vom Typ double\"));\r\n        this.addAttribute(new Attribute(\"POSITIVE_INFINITY\", doublePrimitiveType, (value) => { value.value = Number.POSITIVE_INFINITY }, true, Visibility.public, true, \"Der \\\"positive infinity\\\"-Wert vom Typ double\"));\r\n        this.staticClass.setupAttributeIndicesRecursive();\r\n\r\n        this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n\r\n    }\r\n\r\n    init() {\r\n\r\n        this.unboxableAs = [doublePrimitiveType];\r\n\r\n        this.addMethod(new Method(\"Double\", new Parameterlist([\r\n            { identifier: \"double-value\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                parameters[0].value = parameters[1].value;\r\n\r\n            }, false, false, \"Instanziert ein neues Double-Objekt\", true));\r\n\r\n        this.addMethod(new Method(\"Double\", new Parameterlist([\r\n            { identifier: \"int-value\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                parameters[0].value = parameters[1].value;\r\n\r\n            }, false, false, \"Instanziert ein neues Double-Objekt\", true));\r\n\r\n        this.addMethod(new Method(\"Double\", new Parameterlist([\r\n            { identifier: \"text\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                parameters[0].value = Number.parseFloat(parameters[1].value);\r\n\r\n            }, false, false, \"Instanziert ein neues Double-Objekt, indem die übergebene Zeichenkette in einen double-Wert umgewandelt wird.\", true));\r\n\r\n\r\n        this.addMethod(new Method(\"doubleValue\", new Parameterlist([]), doublePrimitiveType,\r\n            (parameters) => { return parameters[0].value; }, false, false, \"Wandelt das Double-Objekt in einen double-Wert um.\"));\r\n        this.addMethod(new Method(\"floatValue\", new Parameterlist([]), floatPrimitiveType,\r\n            (parameters) => { return parameters[0].value; }, false, false, \"Wandelt das Double-Objekt in einen float-Wert um.\"));\r\n        this.addMethod(new Method(\"intValue\", new Parameterlist([]), intPrimitiveType,\r\n            (parameters) => { return Math.trunc(parameters[0].value); }, false, false, \"Wandelt das Double-Objekt durch Abrunden in einen int-Wert um.\"));\r\n\r\n        this.addMethod(new Method(\"compareTo\", new Parameterlist([\r\n            { identifier: \"anotherDouble\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let v0 = parameters[0].value;\r\n                let v1 = parameters[1].value;\r\n                if (v0 > v1) return 1;\r\n                if (v0 < v1) return -1;\r\n                return 0;\r\n            }, false, false, \"Ist der Wert größer als der übergebene Wert, so wird +1 zurückgegeben. Ist er kleiner, so wird -1 zurückgegeben. Sind die Werte gleich, so wird 0 zurückgegeben.\"));\r\n\r\n        this.addMethod(new Method(\"equals\", new Parameterlist([\r\n            { identifier: \"anotherDouble\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[0].value == parameters[1].value;\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Wert gleich dem übergebenen Wert ist.\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return floatToString(parameters[0].value);\r\n            }, false, false, \"Gibt den Wert des Objekts als String-Wert zurück.\"));\r\n\r\n        this.addMethod(new Method(\"hashCode\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return Math.trunc(parameters[0].value);\r\n            }, false, false, \"Gibt den hashCode des Objekts zurück.\"));\r\n\r\n        this.addMethod(new Method(\"parseDouble\", new Parameterlist([\r\n            { identifier: \"s\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Number.parseFloat(parameters[1].value);\r\n            }, false, true, \"Wandelt die Zeichenkette in einen double-Wert um\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([\r\n            { identifier: \"f\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return floatToString(parameters[1].value);\r\n            }, false, true, \"Gibt die übergebene Zahl als String-Wert zurück.\"));\r\n\r\n        this.addMethod(new Method(\"valueOf\", new Parameterlist([\r\n            { identifier: \"f\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), this,\r\n            (parameters) => {\r\n                return parameters[1].value;\r\n            }, false, true, \"Gibt die übergebene Zahl als Double-Objekt zurück.\"));\r\n\r\n        this.addMethod(new Method(\"valueOf\", new Parameterlist([\r\n            { identifier: \"s\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), this,\r\n            (parameters) => {\r\n                return Number.parseFloat(parameters[1].value);\r\n            }, false, true, \"Interpretiert die übergebene Zeichenkette als Dezimalzahl und gib sie als Double-Objekt zurück.\"));\r\n\r\n        this.addMethod(new Method(\"isNaN\", new Parameterlist([\r\n            { identifier: \"f\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return Number.isNaN(parameters[1].value)\r\n            }, false, true, \"Gibt genau dann true zurück, falls die übergebene double-Zahl NaN (not a Number) ist.\"));\r\n\r\n        this.addMethod(new Method(\"isNaN\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return Number.isNaN(parameters[0].value)\r\n            }, false, false, \"Gibt genau dann true zurück, falls das Objekt NaN (not a Number) ist.\"));\r\n\r\n        this.addMethod(new Method(\"isInfinite\", new Parameterlist([\r\n            { identifier: \"f\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[1].value == Infinity;\r\n            }, false, true, \"Gibt genau dann true zurück, falls die übergebene double-Zahl INFINTITY ist.\"));\r\n\r\n        this.addMethod(new Method(\"isInfinite\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[0].value == Infinity;\r\n            }, false, false, \"Gibt genau dann true zurück, falls das Objekt INFINITY ist.\"));\r\n\r\n    }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return \"\" + <number>value.value;\r\n    }\r\n\r\n\r\n}\r\n","import { RuntimeObject } from \"../../../interpreter/RuntimeObject.js\";\r\nimport { Klass, UnboxableKlass } from \"../Class.js\";\r\nimport { booleanPrimitiveType, charPrimitiveType, intPrimitiveType, stringPrimitiveType } from \"../PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Type, Value } from \"../Types.js\";\r\n\r\n\r\nexport class CharacterClass extends UnboxableKlass {\r\n\r\n    constructor(baseClass: Klass) {\r\n        super(\"Character\", null, \"Wrapper-Klasse, um char-Werte in Collections verenden zu können.\");\r\n        this.baseClass = baseClass;\r\n        this.staticClass.setupAttributeIndicesRecursive();\r\n\r\n        this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n\r\n    }\r\n\r\n    init() {\r\n\r\n        this.unboxableAs = [charPrimitiveType, stringPrimitiveType];\r\n\r\n        this.addMethod(new Method(\"Character\", new Parameterlist([\r\n            { identifier: \"char-value\", type: charPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                parameters[0].value = parameters[1].value;\r\n\r\n            }, false, false, \"Instanziert ein neues Character-Objekt\", true));\r\n\r\n\r\n        this.addMethod(new Method(\"charValue\", new Parameterlist([]), charPrimitiveType,\r\n            (parameters) => { return parameters[0].value; }, false, false, \"Wandelt das Character-Objekt in einen char-Wert um\"));\r\n\r\n        this.addMethod(new Method(\"compareTo\", new Parameterlist([\r\n            { identifier: \"anotherCharacter\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let v0 = parameters[0].value;\r\n                let v1 = parameters[1].value;\r\n                if (v0 > v1) return 1;\r\n                if (v0 < v1) return -1;\r\n                return 0;\r\n            }, false, false, \"Ist der Wert größer als der übergebene Wert, so wird +1 zurückgegeben. Ist er kleiner, so wird -1 zurückgegeben. Sind die Werte gleich, so wird 0 zurückgegeben.\"));\r\n\r\n        this.addMethod(new Method(\"equals\", new Parameterlist([\r\n            { identifier: \"anotherCharacter\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[0].value == parameters[1].value;\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Wert gleich dem übergebenen Wert ist.\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[0].value;\r\n            }, false, false, \"Gibt den Wert des Objekts als String-Wert zurück.\"));\r\n\r\n        this.addMethod(new Method(\"hashCode\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return (<string>parameters[0].value).charCodeAt(0);\r\n            }, false, false, \"Gibt den hashCode des Objekts zurück.\"));\r\n\r\n        this.addMethod(new Method(\"charValue\", new Parameterlist([\r\n        ]), charPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[0].value;\r\n            }, false, false, \"Gibt den char-Wert des Objekts zurück.\"));\r\n\r\n        this.addMethod(new Method(\"digit\", new Parameterlist([\r\n            { identifier: \"char-value\", type: charPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"radix\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return Number.parseInt(parameters[1].value, parameters[2].value);\r\n            }, false, true, \"Gibt den numerischen Wert des Zeichens zur Basis radix zurück.\"));\r\n\r\n        this.addMethod(new Method(\"forDigit\", new Parameterlist([\r\n            { identifier: \"int-value\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"radix\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), charPrimitiveType,\r\n            (parameters) => {\r\n                return (<number>parameters[1].value).toString(parameters[2].value).charAt(0);\r\n            }, false, true, \"Gibt den übergebenen Wert als Ziffer im Zahlensystem zur Basis radix zurück.\"));\r\n\r\n        this.addMethod(new Method(\"getNumericValue\", new Parameterlist([\r\n            { identifier: \"char-value\", type: charPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return (<string>parameters[1].value).charCodeAt(0);\r\n            }, false, true, \"Wandelt das Zeichen in einen numerischen Wert (Unicode-Wert) um.\"));\r\n\r\n        this.addMethod(new Method(\"isLetter\", new Parameterlist([\r\n            { identifier: \"char-value\", type: charPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return (<string>parameters[1].value).match(/[a-zäöüß]/i) != null;\r\n            }, false, true, \"Gibt genau dann true zurück, wenn das Zeichen ein deutsches Alphabet-Zeichen ist.\"));\r\n\r\n        this.addMethod(new Method(\"isLetterOrDigit\", new Parameterlist([\r\n            { identifier: \"char-value\", type: charPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return (<string>parameters[1].value).match(/[a-zäöüß0-9]/i) != null;\r\n            }, false, true, \"Gibt genau dann true zurück, wenn das Zeichen ein deutsches Alphabet-Zeichen oder eine Ziffer ist.\"));\r\n\r\n        this.addMethod(new Method(\"isDigit\", new Parameterlist([\r\n            { identifier: \"char-value\", type: charPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return (<string>parameters[1].value).match(/[0-9]/i) != null;\r\n            }, false, true, \"Gibt genau dann true zurück, wenn das Zeichen eine Ziffer ist.\"));\r\n\r\n            this.addMethod(new Method(\"isWhitespace\", new Parameterlist([\r\n            { identifier: \"char-value\", type: charPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return (<string>parameters[1].value).match(/[ \\r\\n\\t]/i) != null;\r\n            }, false, true, \"Gibt genau dann true zurück, wenn das Zeichen ein Leerzeichen, Tabulatorzeichen oder Zeilenumbruch ist.\"));\r\n\r\n        this.addMethod(new Method(\"toUpperCase\", new Parameterlist([\r\n            { identifier: \"char-value\", type: charPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), charPrimitiveType,\r\n            (parameters) => {\r\n                return (<string>parameters[1].value).toLocaleUpperCase();\r\n            }, false, true, \"Wandelt das Zeichen in Großschreibung um.\"));\r\n\r\n        this.addMethod(new Method(\"toLowerCase\", new Parameterlist([\r\n            { identifier: \"char-value\", type: charPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), charPrimitiveType,\r\n            (parameters) => {\r\n                return (<string>parameters[1].value).toLocaleLowerCase();\r\n            }, false, true, \"Wandelt das Zeichen in Kleinschreibung um.\"));\r\n\r\n        this.addMethod(new Method(\"valueOf\", new Parameterlist([\r\n            { identifier: \"char-value\", type: charPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), this,\r\n            (parameters) => {\r\n                return parameters[1].value;\r\n            }, false, true, \"Wandelt den char-Wert in ein Character-Objekt um.\"));\r\n\r\n\r\n    }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return \"\" + <number>value.value;\r\n    }\r\n\r\n}\r\n","import { RuntimeObject } from \"../../../interpreter/RuntimeObject.js\";\r\nimport { Klass, UnboxableKlass, Visibility } from \"../Class.js\";\r\nimport { booleanPrimitiveType, charPrimitiveType, intPrimitiveType, stringPrimitiveType } from \"../PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Type, Value, Attribute } from \"../Types.js\";\r\n\r\n\r\nexport class BooleanClass extends UnboxableKlass {\r\n\r\n    constructor(baseClass: Klass) {\r\n        super(\"Boolean\", null, \"Wrapper-Klasse, um boolean-Werte in Collections verenden zu können.\");\r\n        this.baseClass = baseClass;\r\n\r\n        this.addAttribute(new Attribute(\"TRUE\", this, (value) => { value.value = true }, true, Visibility.public, true, \"das Boolean-Objekt, das TRUE repräsentiert\"));\r\n        this.addAttribute(new Attribute(\"FALSE\", this, (value) => { value.value = false }, true, Visibility.public, true, \"das Boolean-Objekt, das FALSE repräsentiert\"));\r\n        this.staticClass.setupAttributeIndicesRecursive();\r\n\r\n        this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n\r\n    }\r\n\r\n    init() {\r\n\r\n        this.unboxableAs = [booleanPrimitiveType];\r\n\r\n        this.addMethod(new Method(\"Boolean\", new Parameterlist([\r\n            { identifier: \"boolean-value\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                parameters[0].value = parameters[1].value;\r\n\r\n            }, false, false, \"Instanziert ein neues Boolean-Objekt\", true));\r\n\r\n        this.addMethod(new Method(\"Boolean\", new Parameterlist([\r\n            { identifier: \"string-value\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                parameters[0].value = parameters[1] != null && parameters[1].value.toLowerCase() == \"true\";\r\n\r\n            }, false, false, \"Instanziert ein neues Boolean-Objekt: Es nimmt genau dann den Wert true an, wenn die übergebene Zeichenkette ohne Berücksichtigung von Klein-/Großschreibung den Wert \\\"true\\\" hat.\", true));\r\n\r\n        this.addMethod(new Method(\"booleanValue\", new Parameterlist([]), booleanPrimitiveType,\r\n            (parameters) => { return parameters[0].value; }, false, false, \"Wandelt das Boolean-Objekt in einen boolean-Wert um\"));\r\n\r\n        this.addMethod(new Method(\"compareTo\", new Parameterlist([\r\n            { identifier: \"anotherBoolean\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let v0 = parameters[0].value;\r\n                let v1 = parameters[1].value;\r\n                return v0 == v1 ? 0 : 1;\r\n            }, false, false, \"Gibt genau dann 0 zurück, wenn der Wert des Objekts gleich dem übergebenen Wert ist, ansonsten 1.\"));\r\n\r\n        this.addMethod(new Method(\"equals\", new Parameterlist([\r\n            { identifier: \"anotherBoolean\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[0].value == parameters[1].value;\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Wert gleich dem übergebenen Wert ist.\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return \"\" + parameters[0].value;\r\n            }, false, false, \"Gibt den Wert des Objekts als String-Wert zurück.\"));\r\n\r\n        this.addMethod(new Method(\"hashCode\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return (<boolean>parameters[0].value) ? 0 : 1;\r\n            }, false, false, \"Gibt den hashCode des Objekts zurück.\"));\r\n\r\n        this.addMethod(new Method(\"booleanValue\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[0].value;\r\n            }, false, false, \"Gibt den boolean-Wert des Objekts zurück.\"));\r\n\r\n        this.addMethod(new Method(\"valueOf\", new Parameterlist([\r\n            { identifier: \"boolean-value\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), this,\r\n            (parameters) => {\r\n                return parameters[1].value;\r\n            }, false, true, \"Wandelt den boolean-Wert in ein Boolean-Objekt um.\"));\r\n\r\n        this.addMethod(new Method(\"valueOf\", new Parameterlist([\r\n            { identifier: \"string-value\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[1].value != null && (<string>parameters[1].value).toLowerCase() == \"true\";\r\n            }, false, true, \"Wandelt die Zeichenkette in einen boolean-Wert um. Er ergibt true genau dann, wenn die Zeichenkette != null ist und - ohne Berücksichtigung von Klein-/Großschreibung - den Wert \\\"true\\\" hat.\"));\r\n\r\n        this.addMethod(new Method(\"parseBoolean\", new Parameterlist([\r\n            { identifier: \"string-value\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return parameters[1].value != null && (<string>parameters[1].value).toLowerCase() == \"true\";\r\n            }, false, true, \"Wandelt die Zeichenkette in einen boolean-Wert um. Er ergibt true genau dann, wenn die Zeichenkette != null ist und - ohne Berücksichtigung von Klein-/Großschreibung - den Wert \\\"true\\\" hat.\"));\r\n\r\n\r\n    }\r\n\r\n    public debugOutput(value: Value): string {\r\n        return \"\" + <number>value.value;\r\n    }\r\n\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Interface, Klass, TypeVariable } from \"../../compiler/types/Class.js\";\r\nimport { booleanPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Value } from \"../../compiler/types/Types.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { ListHelper } from \"./ArrayList.js\";\r\n\r\nexport type IteratorKind = \"descending\" | \"ascending\";\r\n\r\nexport class ListIteratorImplClass extends Klass {\r\n\r\n    public static getIterator(listHelper: ListHelper, interpreter: Interpreter, module: Module, kind: IteratorKind): Value {\r\n\r\n        let klass = <Klass>module.typeStore.getType(\"ListIteratorImpl\");\r\n        let rt: RuntimeObject = new RuntimeObject(klass);\r\n        rt.intrinsicData[\"IteratorHelper\"] = new IteratorHelper(listHelper, interpreter, kind);\r\n\r\n        return {\r\n            value: rt,\r\n            type: klass\r\n        }\r\n    }\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"ListIteratorImpl\", module);\r\n\r\n        let objectType = module.typeStore.getType(\"Object\");\r\n\r\n        this.setBaseClass(<Klass>objectType);\r\n\r\n        let typeE: Klass = (<Klass>objectType).clone();\r\n        typeE.identifier = \"E\";\r\n        typeE.isTypeVariable = true;\r\n\r\n        let tvE: TypeVariable = {\r\n            identifier: \"E\",\r\n            scopeFrom: { line: 1, column: 1, length: 1 },\r\n            scopeTo: { line: 1, column: 1, length: 1 },\r\n            type: typeE\r\n        };\r\n\r\n        this.typeVariables.push(tvE);\r\n\r\n        let iteratorInterface = (<Interface>module.typeStore.getType(\"Iterator\")).clone();\r\n        iteratorInterface.typeVariables = [tvE];\r\n\r\n        this.implements.push(iteratorInterface);\r\n\r\n        this.addMethod(new Method(\"hasNext\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: IteratorHelper = o.intrinsicData[\"IteratorHelper\"];\r\n\r\n                return ah.hasNext();\r\n\r\n            },\r\n            false, false, \"Gibt genau dann true zurück, wenn sich noch mindestens ein weiteres Element in der Collection befindet.\"));\r\n\r\n        this.addMethod(new Method(\"next\", new Parameterlist([\r\n        ]), typeE,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: IteratorHelper = o.intrinsicData[\"IteratorHelper\"];\r\n\r\n                return ah.next();\r\n\r\n            },\r\n            false, false, \"Gibt das nächste Element der Collection zurück.\"));\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: IteratorHelper = o.intrinsicData[\"IteratorHelper\"];\r\n\r\n                return ah.remove();\r\n\r\n            },\r\n            false, false, \"Löscht das letzte durch next zurückgegebene Objekt. Diese Methode beeinflusst nicht, welches Element als nächstes durch next zurückgegeben wird.\"));\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nclass IteratorHelper {\r\n\r\n    nextPos: number;\r\n\r\n    constructor(private listHelper: ListHelper, private interpreter: Interpreter, private kind: IteratorKind) {\r\n        switch (kind) {\r\n            case \"ascending\": this.nextPos = 0; break;\r\n            case \"descending\": this.nextPos = listHelper.objectArray.length - 1; break;\r\n        }\r\n    }\r\n\r\n    remove() {\r\n        switch (this.kind) {\r\n            case \"ascending\":\r\n                if (this.nextPos == 0) {\r\n                    this.interpreter.throwException(\"Die Methode remove() des Iterators wurde aufgerufen, obwohl noch nie next() aufgerufen wurde.\")\r\n                } else if (this.nextPos > this.listHelper.objectArray.length - 1) {\r\n                    this.interpreter.throwException(\"Die Methode remove() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.\")\r\n                } else {\r\n                    this.listHelper.valueArray.splice(this.nextPos - 1, 1);\r\n                    this.listHelper.objectArray.splice(this.nextPos - 1, 1);\r\n                    this.nextPos -= 1;\r\n                }\r\n                break;\r\n            case \"descending\":\r\n                if (this.nextPos == this.listHelper.objectArray.length - 1) {\r\n                    this.interpreter.throwException(\"Die Methode remove() des Iterators wurde aufgerufen, obwohl noch nie next() aufgerufen wurde.\")\r\n                } else if (this.nextPos < 0) {\r\n                    this.interpreter.throwException(\"Die Methode remove() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.\")\r\n                } else {\r\n                    this.listHelper.valueArray.splice(this.nextPos + 1, 1);\r\n                    this.listHelper.objectArray.splice(this.nextPos + 1, 1);\r\n                    this.nextPos += 1;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    next(): any {\r\n        switch (this.kind) {\r\n            case \"ascending\":\r\n                if (this.nextPos > this.listHelper.objectArray.length - 1) {\r\n                    this.interpreter.throwException(\"Die Methode next() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.\")\r\n                    return null;\r\n                }\r\n                return this.listHelper.objectArray[this.nextPos++].value;\r\n            case \"descending\":\r\n                if (this.nextPos < 0) {\r\n                    this.interpreter.throwException(\"Die Methode next() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.\")\r\n                    return null;\r\n                }\r\n                return this.listHelper.objectArray[this.nextPos--].value;\r\n        }\r\n    }\r\n\r\n    hasNext(): boolean {\r\n        switch (this.kind) {\r\n            case \"ascending\":\r\n                return this.nextPos < this.listHelper.objectArray.length;\r\n            case \"descending\":\r\n                return this.nextPos >= 0;\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Interface, Klass, TypeVariable } from \"../../compiler/types/Class.js\";\r\nimport { booleanPrimitiveType, intPrimitiveType, stringPrimitiveType, objectType, StringPrimitiveType, DoubleType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Value, PrimitiveType, getTypeIdentifier } from \"../../compiler/types/Types.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { Program, Statement } from \"../../compiler/parser/Program.js\";\r\nimport { TokenType, TextPosition } from \"../../compiler/lexer/Token.js\";\r\nimport { ArrayType } from \"../../compiler/types/Array.js\";\r\nimport { ListIteratorImplClass } from \"./ListIteratorImpl.js\";\r\nimport { Enum } from \"../../compiler/types/Enum.js\";\r\nimport { getTypeFromValue } from \"../../compiler/types/TypeHelper.js\";\r\n\r\nexport class ArrayListClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"ArrayList\", module, \"Liste mit Zugriff auf das n-te Objekt in konstanter Zeit, Einfügen in konstanter Zeit und Suchen in linearer Zeit\");\r\n\r\n        let objectType = module.typeStore.getType(\"Object\");\r\n\r\n        this.setBaseClass(<Klass>objectType);\r\n\r\n        let collectionInterface = (<Interface>module.typeStore.getType(\"Collection\"));\r\n\r\n        let typeA: Klass = (<Klass>objectType).clone();\r\n        typeA.identifier = \"A\";\r\n        typeA.isTypeVariable = true;\r\n\r\n        let tvA: TypeVariable = {\r\n            identifier: \"A\",\r\n            scopeFrom: { line: 1, column: 1, length: 1 },\r\n            scopeTo: { line: 1, column: 1, length: 1 },\r\n            type: typeA\r\n        };\r\n\r\n        this.typeVariables.push(tvA);\r\n\r\n        let listInterface = (<Interface>module.typeStore.getType(\"List\")).clone();\r\n        listInterface.typeVariables = [tvA];\r\n\r\n        this.implements.push(listInterface);\r\n\r\n        let iteratorType = (<Klass>module.typeStore.getType(\"Iterator\")).clone();\r\n        iteratorType.typeVariables = [tvA];\r\n\r\n        this.addMethod(new Method(\"ArrayList\", new Parameterlist([\r\n            // { identifier: \"mx\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let ah = new ListHelper(o, module.main.getInterpreter(), module);\r\n                o.intrinsicData[\"ListHelper\"] = ah;\r\n\r\n            }, false, false, 'Instanziert eine neue ArrayList', true));\r\n\r\n        this.addMethod(new Method(\"iterator\", new Parameterlist([\r\n        ]), iteratorType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ListIteratorImplClass.getIterator(ah, ah.interpreter, module, \"ascending\").value;\r\n\r\n            }, true, false, \"Gibt einen Iterator über die Elemente dieser Collection zurück.\"));\r\n\r\n        this.addMethod(new Method(\"add\", new Parameterlist([\r\n            { identifier: \"element\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let r: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.add(r);\r\n\r\n            }, false, false, \"Fügt der Liste ein Element hinzu. Gibt genau dann true zurück, wenn sich der Zustand der Liste dadurch geändert hat.\"));\r\n\r\n        this.addMethod(new Method(\"set\", new Parameterlist([\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"element\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), typeA,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let index: number = parameters[1].value;\r\n                let element: Value = parameters[2];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.set(index, element);\r\n\r\n            }, false, false, \"Ersetzt das Element an Position index der Liste durch das übergebene Element; gibt das vorherige Element zurück.\"));\r\n\r\n        this.addMethod(new Method(\"add\", new Parameterlist([\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"element\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let index: number = parameters[1].value;\r\n                let r: Value = parameters[2];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.add(r, index);\r\n\r\n            }, false, false, \"Fügt das Element an der Position index der Liste ein. Tipp: Das erste Element der Liste hat index == 0.\"));\r\n\r\n        this.addMethod(new Method(\"get\", new Parameterlist([\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), typeA,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let index: number = parameters[1].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.get(index)?.value;\r\n\r\n            }, false, false, \"Gibt das i-te Element der Liste zurück.\"));\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let index: number = parameters[1].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                ah.remove(index);\r\n\r\n                return null;\r\n\r\n            }, true, false, \"Entfernt das Element an der Stelle index. WICHTIG: Das erste Element hat den Index 0. Es ist 0 <= index < size()\"));\r\n\r\n        this.addMethod(new Method(\"indexOf\", new Parameterlist([\r\n            { identifier: \"o\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.indexOf(object);\r\n\r\n            }, true, false, \"Gibt den Index des Elements o zurück. Gibt -1 zurück, wenn die Liste das Element o nicht enthält. WICHTIG: Das erste Element hat den Index 0, das letzte den Index size() - 1. \"));\r\n\r\n        this.addMethod(new Method(\"addAll\", new Parameterlist([\r\n            { identifier: \"c\", type: collectionInterface, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: RuntimeObject = parameters[1].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.addAll(object);\r\n\r\n            },\r\n            true, false, \"Fügt alle Elemente von c dieser Collection hinzu.\"));\r\n\r\n        this.addMethod(new Method(\"clear\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.clear();\r\n\r\n            },\r\n            true, false, \"Entfernt alle Element aus dieser Collection.\"));\r\n\r\n        this.addMethod(new Method(\"contains\", new Parameterlist([\r\n            { identifier: \"o\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.contains(object);\r\n\r\n            },\r\n            true, false, \"Testet, ob die Collection das Element enthält.\"));\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n            { identifier: \"o\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.removeObject(object);\r\n\r\n            },\r\n            true, false, \"Entfernt das Element o aus der Collection. Gibt true zurück, wenn die Collection das Element enthalten hatte.\"));\r\n\r\n        this.addMethod(new Method(\"isEmpty\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.isEmpty();\r\n\r\n            },\r\n            true, false, \"Testet, ob die Collection das leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"size\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.size();\r\n\r\n            },\r\n            true, false, \"Gibt die Anzahl der Elemente der Collection zurück.\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([]), stringPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.to_String();\r\n\r\n            }, false, false));\r\n\r\n    }\r\n\r\n}\r\n\r\nexport class ListHelper {\r\n\r\n    valueArray: Value[] = [];\r\n    objectArray: any[] = []; // wird mitgeführt, um schnelle indexOf-Operationen zu ermöglichen\r\n\r\n    constructor(private runtimeObject: RuntimeObject, public interpreter: Interpreter, private module: Module) {\r\n    }\r\n\r\n    allElementsPrimitive(): boolean {\r\n        for (let v of this.valueArray) {\r\n            if (!(v.type instanceof PrimitiveType || [\"String\", \"_Double\", \"Integer\", \"Boolean\", \"Character\"].indexOf(v.type.identifier) >= 0)) {\r\n                return false;\r\n                break;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    to_String(): any {\r\n\r\n        if (this.allElementsPrimitive()) {\r\n            return \"[\" + this.objectArray.map(o => \"\" + o).join(\", \") + \"]\";\r\n        }\r\n\r\n        let position: TextPosition = {\r\n            line: 1,\r\n            column: 1,\r\n            length: 1\r\n        }\r\n\r\n        let statements: Statement[] = [\r\n            {\r\n                type: TokenType.noOp,\r\n                position: position,\r\n                stepFinished: false\r\n            },\r\n            {\r\n                type: TokenType.pushConstant,\r\n                dataType: stringPrimitiveType,\r\n                value: \"[\",\r\n                position: position,\r\n                stepFinished: false\r\n            },\r\n        ];\r\n\r\n        let toStringParameters = new Parameterlist([]);\r\n\r\n        for (let i = 0; i < this.valueArray.length; i++) {\r\n            let value = this.valueArray[i];\r\n            if (value.value == null || value.type instanceof PrimitiveType || value.type instanceof StringPrimitiveType) {\r\n                statements.push({\r\n                    type: TokenType.pushConstant,\r\n                    dataType: stringPrimitiveType,\r\n                    value: value.value == null ? \"null\" : value.type.castTo(value, stringPrimitiveType).value,\r\n                    position: position,\r\n                    stepFinished: false\r\n                });\r\n            } else {\r\n                statements.push({\r\n                    type: TokenType.pushConstant,\r\n                    dataType: value.type,\r\n                    value: value.value,\r\n                    stepFinished: false,\r\n                    position: position\r\n                });\r\n                statements.push({\r\n                    type: TokenType.callMethod,\r\n                    method: (<Klass | Interface | Enum>value.type).getMethod(\"toString\", toStringParameters),\r\n                    isSuperCall: false,\r\n                    stackframeBegin: -1,\r\n                    stepFinished: false,\r\n                    position: position\r\n                });\r\n\r\n            }\r\n\r\n            statements.push({\r\n                type: TokenType.binaryOp,\r\n                operator: TokenType.plus,\r\n                leftType: stringPrimitiveType,\r\n                stepFinished: false,\r\n                position: position\r\n            });\r\n\r\n            if (i < this.valueArray.length - 1) {\r\n                statements.push({\r\n                    type: TokenType.pushConstant,\r\n                    dataType: stringPrimitiveType,\r\n                    value: \", \",\r\n                    position: position,\r\n                    stepFinished: false\r\n                });\r\n                statements.push({\r\n                    type: TokenType.binaryOp,\r\n                    operator: TokenType.plus,\r\n                    leftType: stringPrimitiveType,\r\n                    stepFinished: false,\r\n                    position: position\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n\r\n        statements.push({\r\n            type: TokenType.pushConstant,\r\n            dataType: stringPrimitiveType,\r\n            value: \"]\",\r\n            position: position,\r\n            stepFinished: false\r\n        });\r\n\r\n        statements.push({\r\n            type: TokenType.binaryOp,\r\n            operator: TokenType.plus,\r\n            leftType: stringPrimitiveType,\r\n            stepFinished: false,\r\n            position: position\r\n        });\r\n\r\n        // statements.push({\r\n        //     type: TokenType.binaryOp,\r\n        //     operator: TokenType.plus,\r\n        //     leftType: stringPrimitiveType,\r\n        //     stepFinished: false,\r\n        //     position: position\r\n        // });\r\n\r\n        statements.push({\r\n            type: TokenType.return,\r\n            copyReturnValueToStackframePos0: true,\r\n            leaveThisObjectOnStack: false,\r\n            stepFinished: false,\r\n            position: position,\r\n            methodWasInjected: true\r\n        });\r\n\r\n        let program: Program = {\r\n            module: this.module,\r\n            statements: statements,\r\n            labelManager: null\r\n        }\r\n\r\n        let method: Method = new Method(\"toString\", new Parameterlist([]), stringPrimitiveType, program, false, false);\r\n        this.interpreter.runTimer(method, [], () => { }, true);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    addAll(object: RuntimeObject): boolean {\r\n\r\n        if (object.intrinsicData[\"ListHelper\"] instanceof ListHelper) {\r\n            let ah: ListHelper = object.intrinsicData[\"ListHelper\"];\r\n            if (ah != null) {\r\n                this.valueArray = this.valueArray.concat(ah.valueArray.map(v => { return { type: v.type, value: v.value } }));\r\n                this.objectArray = this.objectArray.concat(ah.objectArray);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        let getIteratorMethod = object.class.getMethod(\"iterator\", new Parameterlist([]));\r\n        if (getIteratorMethod == null) {\r\n            this.interpreter.throwException(\"Der an die Methode addAll übergebene Paramter besitzt keine Methode iterator().\");\r\n            return false;\r\n        }\r\n\r\n        if (getIteratorMethod.invoke) {\r\n\r\n            let iterator: RuntimeObject = getIteratorMethod.invoke([{ value: object, type: object.class }]);\r\n            let nextMethod = iterator.class.getMethod(\"next\", new Parameterlist([]));\r\n            let hasNextMethod = iterator.class.getMethod(\"hasNext\", new Parameterlist([]));\r\n            let type = nextMethod.returnType;\r\n\r\n            let iteratorAsValue: Value = { value: iterator, type: iterator.class };\r\n\r\n            while (hasNextMethod.invoke([iteratorAsValue])) {\r\n                let obj: any = nextMethod.invoke([iteratorAsValue]);\r\n                this.objectArray.push(obj);\r\n                this.valueArray.push({\r\n                    value: obj,\r\n                    type: getTypeFromValue(obj)\r\n                })\r\n            }\r\n\r\n            return;\r\n        } else {\r\n            let iteratorWithError = this.execute(getIteratorMethod, [{ value: object, type: object.class }]);\r\n            if (iteratorWithError.error != null) { this.interpreter.throwException(\"Fehler beim holen des Iterators.\"); return false; }\r\n            let iterator = iteratorWithError.value.value;\r\n\r\n            let nextMethod = iterator.class.getMethod(\"next\", new Parameterlist([]));\r\n            let hasNextMethod = iterator.class.getMethod(\"hasNext\", new Parameterlist([]));\r\n            let type = nextMethod.returnType;\r\n            let iteratorAsValue: Value = { value: iterator, type: iterator.class };\r\n\r\n            while (true) {\r\n                let hasNext = this.execute(hasNextMethod, [iteratorAsValue]);\r\n                if (hasNext.error != null) { this.interpreter.throwException(\"Fehler beim Ausführen der hasNext-Methode\"); return false; }\r\n                if (hasNext.value.value != true) break;\r\n                let objWithError = this.execute(nextMethod, [iteratorAsValue]);\r\n                if (objWithError.error != null) { this.interpreter.throwException(\"Fehler beim Ausführen der next-Methode\"); return false; }\r\n                let obj = objWithError.value.value;\r\n                this.objectArray.push(obj);\r\n                this.valueArray.push({ value: obj, type: type });\r\n            }\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    execute(method: Method, parameters: Value[]): { error: string, value: Value } {\r\n        if (method.invoke) {\r\n            return { value: { value: method.invoke([]), type: method.returnType }, error: null };\r\n        } else {\r\n            return this.interpreter.executeImmediatelyInNewStackframe(method.program, parameters);\r\n        }\r\n    }\r\n\r\n    get(index: number): Value {\r\n        if (index >= 0 && index < this.valueArray.length) {\r\n            return this.valueArray[index];\r\n        }\r\n        this.interpreter.throwException(\"Der ArrayList-Index ist außerhalb des Intervalls von 0 bis \" + (this.valueArray.length - 1) + \". \")\r\n        return null;\r\n    }\r\n\r\n    remove(index: number): Value {\r\n\r\n        if (index >= 0 && index < this.valueArray.length) {\r\n            this.valueArray.splice(index, 1);\r\n            this.objectArray.splice(index, 1);\r\n            return null;\r\n        }\r\n\r\n        this.interpreter.throwException(\"Der ArrayList-Index ist außerhalb des Intervalls von 0 bis \" + (this.valueArray.length - 1) + \". \")\r\n\r\n        return null;\r\n    }\r\n\r\n    add(r: Value, index?): boolean {\r\n        if (index == null) {\r\n            this.valueArray.push({ type: r.type, value: r.value });\r\n            this.objectArray.push(r.value);\r\n        } else {\r\n            if (index <= this.objectArray.length && index >= 0) {\r\n                this.valueArray.splice(index, 0, { type: r.type, value: r.value });\r\n                this.objectArray.splice(index, 0, r.value);\r\n            } else {\r\n                this.interpreter.throwException(\"Der ArrayList-Index ist außerhalb des Intervalls von 0 bis \" + (this.valueArray.length - 1) + \". \")\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    set(index: number, r: Value): boolean {\r\n        if (index < this.objectArray.length && index >= 0) {\r\n            let oldValue = this.objectArray[index];\r\n            this.valueArray[index] = { type: r.type, value: r.value };\r\n            this.objectArray[index] = r.value;\r\n            return oldValue;\r\n        } else {\r\n            this.interpreter.throwException(\"Der ArrayList-Index ist außerhalb des Intervalls von 0 bis \" + (this.valueArray.length - 1) + \". \")\r\n        }\r\n        return true;\r\n    }\r\n\r\n    pop(): any {\r\n        if (this.objectArray.length == 0) {\r\n            this.interpreter.throwException(\"Der ArrayList-Index ist außerhalb des Intervalls von 0 bis \" + (this.valueArray.length - 1) + \". \")\r\n            return null;\r\n        } else {\r\n            this.valueArray.pop();\r\n            return this.objectArray.pop();\r\n        }\r\n    }\r\n\r\n    peek(): any {\r\n        if (this.objectArray.length == 0) {\r\n            this.interpreter.throwException(\"Der ArrayList-Index ist außerhalb des Intervalls von 0 bis \" + (this.valueArray.length - 1) + \". \")\r\n            return null;\r\n        } else {\r\n            return this.objectArray[this.objectArray.length - 1];\r\n        }\r\n    }\r\n\r\n    indexOf(o: Value): number {\r\n        return this.objectArray.indexOf(o.value);\r\n    }\r\n\r\n    size(): number {\r\n        return this.objectArray.length;\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return this.valueArray.length == 0;\r\n    }\r\n\r\n    removeObject(object: Value) {\r\n        let index = this.objectArray.indexOf(object.value);\r\n        if (index >= 0) {\r\n            this.objectArray.splice(index, 1);\r\n            this.valueArray.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    contains(object: Value): any {\r\n        return this.objectArray.indexOf(object.value) >= 0;\r\n    }\r\n\r\n    clear() {\r\n        this.valueArray = [];\r\n        this.objectArray = [];\r\n    }\r\n\r\n    peek_last_or_null(): any {\r\n        if (this.objectArray.length == 0) {\r\n            return null;\r\n        } else {\r\n            return this.objectArray[this.objectArray.length - 1];\r\n        }\r\n    }\r\n    peek_first_or_null(): any {\r\n        if (this.objectArray.length == 0) {\r\n            return null;\r\n        } else {\r\n            return this.objectArray[0];\r\n        }\r\n    }\r\n\r\n    removeLast_or_error() {\r\n        if (this.objectArray.length == 0) {\r\n            return null;\r\n        } else {\r\n            this.valueArray.pop();\r\n            return this.objectArray.pop();\r\n        }\r\n    };\r\n\r\n    addLast(object: Value) {\r\n        this.valueArray.push({ type: object.type, value: object.value });\r\n        this.objectArray.push(object.value);\r\n        return true;\r\n    }\r\n    addFirst(object: Value): any {\r\n        this.valueArray.splice(0, 0, { type: object.type, value: object.value });\r\n        this.objectArray.splice(0, 0, object.value);\r\n        return true;\r\n    }\r\n    removeFirstOccurrence(object: Value): boolean {\r\n        let index = this.objectArray.indexOf(object.value);\r\n        if (index >= 0) {\r\n            this.valueArray.splice(index, 1);\r\n            this.objectArray.splice(index, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    peek_or_null(): any {\r\n        if (this.objectArray.length == 0) {\r\n            return null;\r\n        } else {\r\n            return this.objectArray[this.objectArray.length - 1];\r\n        }\r\n    }\r\n\r\n    poll_or_null(): any {\r\n        if (this.objectArray.length == 0) {\r\n            return null;\r\n        } else {\r\n            this.valueArray.pop();\r\n            return this.objectArray.pop();\r\n        }\r\n    }\r\n\r\n    removeFirst_or_error(): any {\r\n        if (this.objectArray.length == 0) {\r\n            this.interpreter.throwException(\"Der ArrayList-Index ist außerhalb des Intervalls von 0 bis \" + (this.valueArray.length - 1) + \". \")\r\n        } else {\r\n            let object = this.objectArray[0];\r\n            this.objectArray.splice(0, 1);\r\n            this.valueArray.splice(0, 1);\r\n            return object;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { booleanPrimitiveType, doublePrimitiveType, floatPrimitiveType, intPrimitiveType, stringPrimitiveType } from \"./PrimitiveTypes.js\";\r\n\r\nexport function getTypeFromValue(value: any){\r\n    if(typeof value == \"string\"){\r\n        return stringPrimitiveType;\r\n    } else if(typeof value == \"number\"){\r\n        if(Number.isInteger(value)) return intPrimitiveType;\r\n        return floatPrimitiveType;\r\n    } else if(typeof value == \"boolean\"){\r\n        return booleanPrimitiveType;\r\n    } else if(value instanceof RuntimeObject){\r\n        return value.class;\r\n    }\r\n}","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { Interface, TypeVariable, Klass } from \"../../compiler/types/Class.js\";\r\nimport { voidPrimitiveType, booleanPrimitiveType, intPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\n\r\nexport class CollectionClass extends Interface {\r\n\r\n    constructor(module: Module) {\r\n        \r\n        super(\"Collection\", module, \"Interface für Listen, Maps, Sets usw. mit Methoden zum Einfügen von Objekten, Zugriff auf Objekte und zur Ermittlung der Anzahl der Objekte\");\r\n\r\n        let objectType = module.typeStore.getType(\"Object\");\r\n\r\n        let typeE: Klass = (<Klass>objectType).clone();\r\n        typeE.identifier = \"E\";\r\n        typeE.isTypeVariable = true;\r\n\r\n        let tvE: TypeVariable = {\r\n            identifier: \"E\",\r\n            scopeFrom: {line: 1, column: 1, length: 1},\r\n            scopeTo: {line: 1, column: 1, length: 1},\r\n            type: typeE\r\n        };\r\n        this.typeVariables.push(tvE);\r\n\r\n        let iterableInterface = (<Interface>module.typeStore.getType(\"Iterable\")).clone();\r\n        iterableInterface.typeVariables = [tvE];\r\n\r\n        this.extends.push(iterableInterface);\r\n\r\n\r\n        this.addMethod(new Method(\"add\", new Parameterlist([\r\n            { identifier: \"element\", type: typeE, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Fügt der Collection ein Element hinzu. Gibt genau dann true zurück, wenn sich der Zustand der Collection dadurch geändert hat.\"));\r\n\r\n        this.addMethod(new Method(\"addAll\", new Parameterlist([\r\n            { identifier: \"c\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Fügt alle Elemente von c dieser Collection hinzu.\"));\r\n\r\n        // TODO: Implement\r\n        // this.addMethod(new Method(\"removeAll\", new Parameterlist([\r\n        //     { identifier: \"c\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        // ]), booleanPrimitiveType,\r\n        //     null,  // no implementation!\r\n        //     true, false, \"Löscht alle Elemente aus dieser Collection, die in c enthalten sind.\"));\r\n\r\n        this.addMethod(new Method(\"clear\", new Parameterlist([\r\n        ]), null,\r\n            null,  // no implementation!\r\n            true, false, \"Entfernt alle Element aus dieser Collection.\"));\r\n\r\n        this.addMethod(new Method(\"contains\", new Parameterlist([\r\n            { identifier: \"o\", type: objectType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Testet, ob die Collection das Element enthält.\"));\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n            { identifier: \"o\", type: objectType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Entfernt das Element o aus der Collection. Gibt true zurück, wenn die Collection das Element enthalten hatte.\"));\r\n\r\n        this.addMethod(new Method(\"isEmpty\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Testet, ob die Collection das leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"size\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt die Anzahl der Elemente der Collection zurück.\"));\r\n    \r\n    }\r\n\r\n}\r\n\r\n\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { Interface, TypeVariable, Klass } from \"../../compiler/types/Class.js\";\r\nimport { voidPrimitiveType, booleanPrimitiveType, intPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\n\r\nexport class IterableClass extends Interface {\r\n\r\n    constructor(module: Module) {\r\n        \r\n        super(\"Iterable\", module, \"Interface mit Funktionalität zum iterieren (d.h. Durchlaufen aller Elemente)\");\r\n\r\n        let typeE: Klass = (<Klass>module.typeStore.getType(\"Object\")).clone();\r\n        typeE.identifier = \"E\";\r\n        typeE.isTypeVariable = true;\r\n\r\n        let tvE: TypeVariable = {\r\n            identifier: \"E\",\r\n            scopeFrom: {line: 1, column: 1, length: 1},\r\n            scopeTo: {line: 1, column: 1, length: 1},\r\n            type: typeE\r\n        };\r\n        this.typeVariables.push(tvE);\r\n\r\n        let iteratorType = (<Klass>module.typeStore.getType(\"Iterator\")).clone();\r\n        iteratorType.typeVariables = [tvE];\r\n\r\n\r\n        this.addMethod(new Method(\"iterator\", new Parameterlist([\r\n        ]), iteratorType,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt einen Iterator über die Elemente dieser Collection zurück.\"));\r\n\r\n    }\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { Interface, TypeVariable, Klass } from \"../../compiler/types/Class.js\";\r\nimport { voidPrimitiveType, booleanPrimitiveType, intPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\n\r\nexport class IteratorClass extends Interface {\r\n\r\n    constructor(module: Module) {\r\n        \r\n        super(\"Iterator\", module);\r\n\r\n        let typeA: Klass = (<Klass>module.typeStore.getType(\"Object\")).clone();\r\n        typeA.identifier = \"E\";\r\n        typeA.isTypeVariable = true;\r\n\r\n        let tvE: TypeVariable = {\r\n            identifier: \"E\",\r\n            scopeFrom: {line: 1, column: 1, length: 1},\r\n            scopeTo: {line: 1, column: 1, length: 1},\r\n            type: typeA\r\n        };\r\n\r\n        this.typeVariables.push(tvE);\r\n\r\n\r\n        this.addMethod(new Method(\"hasNext\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt genau dann true zurück, wenn sich noch mindestens ein weiteres Element in der Collection befindet.\"));\r\n\r\n        this.addMethod(new Method(\"next\", new Parameterlist([\r\n            // { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), typeA,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt das nächste Element der Collection zurück.\"));\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n            // { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            null,  // no implementation!\r\n            true, false, \"Löscht das letzte durch next zurückgegebene Objekt. Diese Methode beeinflusst nicht, welches Element als nächstes durch next zurückgegeben wird.\"));\r\n\r\n    }\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { Interface, TypeVariable, Klass } from \"../../compiler/types/Class.js\";\r\nimport { voidPrimitiveType, booleanPrimitiveType, intPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\n\r\nexport class ListClass extends Interface {\r\n\r\n    constructor(module: Module) {\r\n        \r\n        super(\"List\", module, \"Interface mit Methoden einer Liste (d.h. Anfügen von Elementen nur am Ende)\");\r\n\r\n        let objectType = module.typeStore.getType(\"Object\");\r\n\r\n        let typeE: Klass = (<Klass>module.typeStore.getType(\"Object\")).clone();\r\n        typeE.identifier = \"E\";\r\n        typeE.isTypeVariable = true;\r\n\r\n        let tvE: TypeVariable = {\r\n            identifier: \"E\",\r\n            scopeFrom: {line: 1, column: 1, length: 1},\r\n            scopeTo: {line: 1, column: 1, length: 1},\r\n            type: typeE\r\n        };\r\n\r\n        this.typeVariables.push(tvE);\r\n\r\n        let collectionInterface = (<Interface>module.typeStore.getType(\"Collection\")).clone();\r\n        collectionInterface.typeVariables = [tvE];\r\n\r\n        this.extends.push(collectionInterface);\r\n\r\n        this.addMethod(new Method(\"get\", new Parameterlist([\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), typeE,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt das Element der Liste an der Stelle index zurück. WICHTIG: Das erste Element hat den Index 0. Es ist 0 <= index < size()\"));\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            null,  // no implementation!\r\n            true, false, \"Entfernt das Element an der Stelle index. WICHTIG: Das erste Element hat den Index 0. Es ist 0 <= index < size()\"));\r\n\r\n            this.addMethod(new Method(\"indexOf\", new Parameterlist([\r\n            { identifier: \"o\", type: objectType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt den Index des Elements o zurück. Gibt -1 zurück, wenn die Liste das Element o nicht enthält. WICHTIG: Das erste Element hat den Index 0, das letzte den Index size() - 1. \"));\r\n    }\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { booleanPrimitiveType, intPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Value } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { ListHelper } from \"./ArrayList.js\";\r\n\r\nexport class StackClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Stack\", module, \"Stack (Stapelspeicher)\");\r\n\r\n        let objectType = module.typeStore.getType(\"Object\");\r\n        let vectorType = <Klass>module.typeStore.getType(\"Vector\");\r\n\r\n        this.setBaseClass(vectorType);\r\n        this.typeVariables = vectorType.typeVariables;\r\n        let typeE = this.typeVariables[0].type;\r\n\r\n        this.addMethod(new Method(\"push\", new Parameterlist([\r\n            { identifier: \"element\", type: typeE, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), typeE,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let r: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                ah.add(r);\r\n\r\n                return r.value;\r\n\r\n            }, false, false, \"Pushed ein Element oben auf den Stack. Gibt das gerade gepushte Element zurück.\"));\r\n\r\n        this.addMethod(new Method(\"pop\", new Parameterlist([\r\n        ]), typeE,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.pop();\r\n\r\n            }, false, false, \"Nimmt das oberste Element vom Stack und gibt es zurück.\"));\r\n\r\n            this.addMethod(new Method(\"peek\", new Parameterlist([\r\n        ]), typeE,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.peek();\r\n\r\n            }, false, false, \"Gibt das oberste Element des Stacks zurück, nimmt es aber nicht vom Stack herunter.\"));\r\n\r\n        this.addMethod(new Method(\"empty\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.isEmpty();\r\n\r\n            },\r\n            true, false, \"Testet, ob die Collection das leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"search\", new Parameterlist([\r\n            { identifier: \"element\", type: typeE, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let r: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                let index = ah.indexOf(r);\r\n                return index == -1 ? index : ah.objectArray.length - index;\r\n\r\n            },\r\n            true, false, \"Gibt die Position des Objekts auf dem Stack zurück. Dabei hat das oberste Element den Index 1, das nächstunterste den Index 2 usw. . Falls sich das Objekt nicht auf dem Stack befindet, wird -1 zurückgegeben.\"));\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass, TypeVariable, Interface } from \"../../compiler/types/Class.js\";\r\nimport { doublePrimitiveType, booleanPrimitiveType, intPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Value } from \"../../compiler/types/Types.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { ListHelper } from \"./ArrayList.js\";\r\nimport { ListIteratorImplClass } from \"./ListIteratorImpl.js\";\r\n\r\nexport class VectorClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Vector\", module, \"Liste mit Zugriff auf das n-te Element in konstanter Zeit\");\r\n\r\n        let objectType = module.typeStore.getType(\"Object\");\r\n\r\n        this.setBaseClass(<Klass>objectType);\r\n\r\n        let typeA: Klass = (<Klass>objectType).clone();\r\n        typeA.identifier = \"A\";\r\n        typeA.isTypeVariable = true;\r\n\r\n        let tvA: TypeVariable = {\r\n            identifier: \"A\",\r\n            scopeFrom: { line: 1, column: 1, length: 1 },\r\n            scopeTo: { line: 1, column: 1, length: 1 },\r\n            type: typeA\r\n        };\r\n\r\n        this.typeVariables.push(tvA);\r\n\r\n        let listInterface = (<Interface>module.typeStore.getType(\"List\")).clone();\r\n        listInterface.typeVariables = [tvA];\r\n\r\n        this.implements.push(listInterface);\r\n\r\n        let iteratorType = (<Klass>module.typeStore.getType(\"Iterator\")).clone();\r\n        iteratorType.typeVariables = [tvA];\r\n\r\n        this.addMethod(new Method(\"Vector\", new Parameterlist([\r\n            // { identifier: \"mx\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let ah = new ListHelper(o, module.main.getInterpreter(), module);\r\n                o.intrinsicData[\"ListHelper\"] = ah;\r\n\r\n            }, false, false, 'Instanziert ein neues Vector-Objekt', true));\r\n\r\n            this.addMethod(new Method(\"iterator\", new Parameterlist([\r\n            ]), iteratorType,\r\n                (parameters) => {\r\n    \r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n    \r\n                    return ListIteratorImplClass.getIterator(ah, ah.interpreter, module, \"ascending\").value;\r\n    \r\n                }, false, false, \"Gibt einen Iterator über die Elemente dieser Collection zurück.\"));\r\n    \r\n\r\n        this.addMethod(new Method(\"add\", new Parameterlist([\r\n            { identifier: \"element\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let r: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.add(r);\r\n\r\n            }, false, false, \"Fügt der Liste ein Element hinzu. Gibt genau dann true zurück, wenn sich der Zustand der Liste dadurch geändert hat.\"));\r\n\r\n        this.addMethod(new Method(\"get\", new Parameterlist([\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), typeA,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let index: number = parameters[1].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.get(index).value;\r\n\r\n            }, false, false, \"Gibt das i-te Element der Liste zurück.\"));\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let index: number = parameters[1].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                ah.remove(index).value;\r\n\r\n                return null;\r\n\r\n            }, false, false, \"Entfernt das Element an der Stelle index. WICHTIG: Das erste Element hat den Index 0. Es ist 0 <= index < size()\"));\r\n\r\n        this.addMethod(new Method(\"indexOf\", new Parameterlist([\r\n            { identifier: \"o\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.indexOf(object);\r\n\r\n            }, false, false, \"Gibt den Index des Elements o zurück. Gibt -1 zurück, wenn die Liste das Element o nicht enthält. WICHTIG: Das erste Element hat den Index 0, das letzte den Index size() - 1. \"));\r\n\r\n        this.addMethod(new Method(\"addAll\", new Parameterlist([\r\n            { identifier: \"c\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: RuntimeObject = parameters[1].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.addAll(object);\r\n\r\n            },\r\n            false, false, \"Fügt alle Elemente von c dieser Collection hinzu.\"));\r\n\r\n        this.addMethod(new Method(\"clear\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.clear();\r\n\r\n            },\r\n            false, false, \"Entfernt alle Element aus dieser Collection.\"));\r\n\r\n        this.addMethod(new Method(\"contains\", new Parameterlist([\r\n            { identifier: \"o\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.contains(object);\r\n\r\n            },\r\n            false, false, \"Testet, ob die Collection das Element enthält.\"));\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n            { identifier: \"o\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.removeObject(object);\r\n\r\n            },\r\n            false, false, \"Entfernt das Element o aus der Collection. Gibt true zurück, wenn die Collection das Element enthalten hatte.\"));\r\n\r\n        this.addMethod(new Method(\"isEmpty\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.isEmpty();\r\n\r\n            },\r\n            false, false, \"Testet, ob die Collection das leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"size\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.size();\r\n\r\n            },\r\n            false, false, \"Gibt die Anzahl der Elemente der Collection zurück.\"));\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { Interface, TypeVariable, Klass } from \"../../compiler/types/Class.js\";\r\nimport { voidPrimitiveType, booleanPrimitiveType, intPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\n\r\nexport class SetClass extends Interface {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Set\", module, \"Interface mit Methoden eines Set, d.h. einer Menge, die jedes Element maximal einmal enthält\");\r\n\r\n        let objectType = module.typeStore.getType(\"Object\");\r\n\r\n        let typeE: Klass = (<Klass>module.typeStore.getType(\"Object\")).clone();\r\n        typeE.identifier = \"E\";\r\n        typeE.isTypeVariable = true;\r\n\r\n        let tvE: TypeVariable = {\r\n            identifier: \"E\",\r\n            scopeFrom: { line: 1, column: 1, length: 1 },\r\n            scopeTo: { line: 1, column: 1, length: 1 },\r\n            type: typeE\r\n        };\r\n\r\n        this.typeVariables.push(tvE);\r\n\r\n        let collectionInterface = (<Interface>module.typeStore.getType(\"Collection\")).clone();\r\n        collectionInterface.typeVariables = [tvE];\r\n\r\n        this.extends.push(collectionInterface);\r\n\r\n        this.addMethod(new Method(\"contains\", new Parameterlist([\r\n            { identifier: \"o\", type: objectType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt genau dann true zurück, wenn das Set das Objekt o enthält.\"));\r\n\r\n        this.addMethod(new Method(\"containsAll\", new Parameterlist([\r\n            { identifier: \"c\", type: collectionInterface, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt genau dann true zurück, wenn das Set alle Elemente der übergebenen Collection enthält.\"));\r\n\r\n    }\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Interface, Klass, TypeVariable } from \"../../compiler/types/Class.js\";\r\nimport { booleanPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Value } from \"../../compiler/types/Types.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { SetHelper } from \"./SetHelper.js\";\r\n\r\nexport type IteratorKind = \"descending\" | \"ascending\";\r\n\r\nexport class SetIteratorImplClass extends Klass {\r\n\r\n    public static getIterator(MapHelper: SetHelper, interpreter: Interpreter, module: Module, kind: IteratorKind): Value {\r\n\r\n        let klass = <Klass>module.typeStore.getType(\"SetIteratorImpl\");\r\n        let rt: RuntimeObject = new RuntimeObject(klass);\r\n        rt.intrinsicData[\"SetIteratorHelper\"] = new SetIteratorHelper(MapHelper, interpreter, kind);\r\n\r\n        return {\r\n            value: rt,\r\n            type: klass\r\n        }\r\n    }\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"SetIteratorImpl\", module);\r\n\r\n        let objectType = module.typeStore.getType(\"Object\");\r\n\r\n        this.setBaseClass(<Klass>objectType);\r\n\r\n        let typeE: Klass = (<Klass>objectType).clone();\r\n        typeE.identifier = \"E\";\r\n        typeE.isTypeVariable = true;\r\n\r\n        let tvE: TypeVariable = {\r\n            identifier: \"E\",\r\n            scopeFrom: { line: 1, column: 1, length: 1 },\r\n            scopeTo: { line: 1, column: 1, length: 1 },\r\n            type: typeE\r\n        };\r\n\r\n        this.typeVariables.push(tvE);\r\n\r\n        let iteratorInterface = (<Interface>module.typeStore.getType(\"Iterator\")).clone();\r\n        iteratorInterface.typeVariables = [tvE];\r\n\r\n        this.implements.push(iteratorInterface);\r\n\r\n        this.addMethod(new Method(\"hasNext\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: SetIteratorHelper = o.intrinsicData[\"SetIteratorHelper\"];\r\n\r\n                return ah.hasNext();\r\n\r\n            },\r\n            false, false, \"Gibt genau dann true zurück, wenn sich noch mindestens ein weiteres Element in der Collection befindet.\"));\r\n\r\n        this.addMethod(new Method(\"next\", new Parameterlist([\r\n        ]), typeE,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: SetIteratorHelper = o.intrinsicData[\"SetIteratorHelper\"];\r\n\r\n                return ah.next();\r\n\r\n            },\r\n            false, false, \"Gibt das nächste Element der Collection zurück.\"));\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: SetIteratorHelper = o.intrinsicData[\"SetIteratorHelper\"];\r\n\r\n                return ah.remove();\r\n\r\n            },\r\n            false, false, \"Löscht das letzte durch next zurückgegebene Objekt. Diese Methode beeinflusst nicht, welches Element als nächstes durch next zurückgegeben wird.\"));\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nclass SetIteratorHelper {\r\n\r\n    nextPos: number;\r\n\r\n    constructor(private MapHelper: SetHelper, private interpreter: Interpreter, private kind: IteratorKind) {\r\n        switch (kind) {\r\n            case \"ascending\": this.nextPos = 0; break;\r\n            case \"descending\": this.nextPos = MapHelper.valueArray.length - 1; break;\r\n        }\r\n    }\r\n\r\n    remove() {\r\n        switch (this.kind) {\r\n            case \"ascending\":\r\n                if (this.nextPos == 0) {\r\n                    this.interpreter.throwException(\"Die Methode remove() des Iterators wurde aufgerufen, obwohl noch nie next() aufgerufen wurde.\")\r\n                } else if (this.nextPos > this.MapHelper.valueArray.length - 1) {\r\n                    this.interpreter.throwException(\"Die Methode remove() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.\")\r\n                } else {\r\n                    this.MapHelper.removeObject(this.MapHelper.valueArray[this.nextPos - 1].value);\r\n                    this.nextPos -= 1;\r\n                }\r\n                break;\r\n            case \"descending\":\r\n                if (this.nextPos == this.MapHelper.valueArray.length - 1) {\r\n                    this.interpreter.throwException(\"Die Methode remove() des Iterators wurde aufgerufen, obwohl noch nie next() aufgerufen wurde.\")\r\n                } else if (this.nextPos < 0) {\r\n                    this.interpreter.throwException(\"Die Methode remove() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.\")\r\n                } else {\r\n                    this.MapHelper.removeObject(this.MapHelper.valueArray[this.nextPos + 1].value);\r\n                    this.nextPos += 1;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    next(): any {\r\n        switch (this.kind) {\r\n            case \"ascending\":\r\n                if (this.nextPos > this.MapHelper.valueArray.length - 1) {\r\n                    this.interpreter.throwException(\"Die Methode next() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.\")\r\n                    return null;\r\n                }\r\n                return this.MapHelper.valueArray[this.nextPos++].value;\r\n            case \"descending\":\r\n                if (this.nextPos < 0) {\r\n                    this.interpreter.throwException(\"Die Methode next() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.\")\r\n                    return null;\r\n                }\r\n                return this.MapHelper.valueArray[this.nextPos--].value;\r\n        }\r\n    }\r\n\r\n    hasNext(): boolean {\r\n        switch (this.kind) {\r\n            case \"ascending\":\r\n                return this.nextPos < this.MapHelper.valueArray.length;\r\n            case \"descending\":\r\n                return this.nextPos >= 0;\r\n        }\r\n    }\r\n\r\n\r\n\r\n}","import { TextPosition, TokenType } from \"../../compiler/lexer/Token.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Program, Statement } from \"../../compiler/parser/Program.js\";\r\nimport { Interface, Klass } from \"../../compiler/types/Class.js\";\r\nimport { Enum } from \"../../compiler/types/Enum.js\";\r\nimport { booleanPrimitiveType, stringPrimitiveType, StringPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, PrimitiveType, Value } from \"../../compiler/types/Types.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { ListHelper } from \"./ArrayList.js\";\r\n\r\n\r\nexport class SetHelper {\r\n\r\n    valueArray: Value[] = [];\r\n\r\n    map: Map<any, boolean> = new Map(); // Maps key objects to index in keyArray/valueArray\r\n\r\n    constructor(private runtimeObject: RuntimeObject, public interpreter: Interpreter, private module: Module) {\r\n    }\r\n\r\n    allElementsPrimitive(): boolean {\r\n        for (let v of this.valueArray) {\r\n            if (!(v.type instanceof PrimitiveType || [\"String\", \"_Double\", \"Integer\", \"Boolean\" ,\"Character\"].indexOf(v.type.identifier) >= 0)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    to_String(): any {\r\n\r\n        if (this.allElementsPrimitive()) {\r\n            return \"[\" + this.valueArray.map(o => \"\" + o.value).join(\", \") + \"]\";\r\n        }\r\n\r\n        let position: TextPosition = {\r\n            line: 1,\r\n            column: 1,\r\n            length: 1\r\n        }\r\n\r\n        let statements: Statement[] = [\r\n            {\r\n                type: TokenType.noOp,\r\n                position: position,\r\n                stepFinished: false\r\n            },\r\n            {\r\n                type: TokenType.pushConstant,\r\n                dataType: stringPrimitiveType,\r\n                value: \"[\",\r\n                position: position,\r\n                stepFinished: false\r\n            },\r\n        ];\r\n\r\n        let toStringParameters = new Parameterlist([]);\r\n\r\n        for (let i = 0; i < this.valueArray.length; i++) {\r\n\r\n            let key = this.valueArray[i];\r\n            if (key.type instanceof PrimitiveType || key.type instanceof StringPrimitiveType) {\r\n                statements.push({\r\n                    type: TokenType.pushConstant,\r\n                    dataType: stringPrimitiveType,\r\n                    value: key.type.castTo(key, stringPrimitiveType).value,\r\n                    position: position,\r\n                    stepFinished: false\r\n                });\r\n            } else {\r\n                statements.push({\r\n                    type: TokenType.pushConstant,\r\n                    dataType: key.type,\r\n                    value: key.value,\r\n                    stepFinished: false,\r\n                    position: position\r\n                });\r\n                statements.push({\r\n                    type: TokenType.callMethod,\r\n                    method: (<Klass | Interface | Enum>key.type).getMethod(\"toString\", toStringParameters),\r\n                    isSuperCall: false,\r\n                    stackframeBegin: -1,\r\n                    stepFinished: false,\r\n                    position: position\r\n                });\r\n\r\n            }\r\n\r\n            statements.push({\r\n                type: TokenType.binaryOp,\r\n                operator: TokenType.plus,\r\n                leftType: stringPrimitiveType,\r\n                stepFinished: false,\r\n                position: position\r\n            });\r\n\r\n            statements.push({\r\n                type: TokenType.binaryOp,\r\n                operator: TokenType.plus,\r\n                leftType: stringPrimitiveType,\r\n                stepFinished: false,\r\n                position: position\r\n            });\r\n\r\n            if (i < this.valueArray.length - 1) {\r\n                statements.push({\r\n                    type: TokenType.pushConstant,\r\n                    dataType: stringPrimitiveType,\r\n                    value: \", \",\r\n                    position: position,\r\n                    stepFinished: false\r\n                });\r\n                statements.push({\r\n                    type: TokenType.binaryOp,\r\n                    operator: TokenType.plus,\r\n                    leftType: stringPrimitiveType,\r\n                    stepFinished: false,\r\n                    position: position\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n\r\n        statements.push({\r\n            type: TokenType.pushConstant,\r\n            dataType: stringPrimitiveType,\r\n            value: \"]\",\r\n            position: position,\r\n            stepFinished: false\r\n        });\r\n\r\n        statements.push({\r\n            type: TokenType.binaryOp,\r\n            operator: TokenType.plus,\r\n            leftType: stringPrimitiveType,\r\n            stepFinished: false,\r\n            position: position\r\n        });\r\n\r\n        // statements.push({\r\n        //     type: TokenType.binaryOp,\r\n        //     operator: TokenType.plus,\r\n        //     leftType: stringPrimitiveType,\r\n        //     stepFinished: false,\r\n        //     position: position\r\n        // });\r\n\r\n        statements.push({\r\n            type: TokenType.return,\r\n            copyReturnValueToStackframePos0: true,\r\n            leaveThisObjectOnStack: false,\r\n            stepFinished: false,\r\n            position: position,\r\n            methodWasInjected: true\r\n        });\r\n\r\n        let program: Program = {\r\n            module: this.module,\r\n            statements: statements,\r\n            labelManager: null\r\n        }\r\n\r\n        let method: Method = new Method(\"toString\", new Parameterlist([]), stringPrimitiveType, program, false, false);\r\n        this.interpreter.runTimer(method, [], () => console.log(\"List.toString fertig!\"), true)\r\n\r\n        return \"\";\r\n    }\r\n\r\n    // Only for Set\r\n    adAll(object: RuntimeObject): boolean {\r\n\r\n        let ret: boolean = false;\r\n        let ah: SetHelper | ListHelper = object.intrinsicData[\"ListHelper\"];\r\n        if (ah != null) {\r\n            for (let value of ah.valueArray) {\r\n                ret = ret || this.addToSet(value);\r\n            }\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    addToSet(r: Value): boolean {\r\n        if (this.contains(r)) return false;\r\n\r\n        this.valueArray.push(r);\r\n        this.map.set(r.value, true);\r\n        return true;\r\n    }\r\n\r\n    size(): number {\r\n        return this.valueArray.length;\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return this.valueArray.length == 0;\r\n    }\r\n\r\n    removeObject(object: Value) {\r\n\r\n        if(this.map.get(object.value) == null) return false;\r\n\r\n        for(let i = 0; i < this.valueArray.length; i++){\r\n            if(this.valueArray[i].value == object.value){\r\n                this.valueArray.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        this.map.delete(object.value);\r\n    }\r\n\r\n    contains(object: Value): any {\r\n        return this.map.get(object.value) != null;\r\n    }\r\n\r\n    clear() {\r\n        this.valueArray = [];\r\n        this.map.clear();\r\n    }\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Interface, Klass, TypeVariable } from \"../../compiler/types/Class.js\";\r\nimport { booleanPrimitiveType, intPrimitiveType, stringPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Value } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { SetIteratorImplClass } from \"./SetIteratorImpl.js\";\r\nimport { SetHelper } from \"./SetHelper.js\";\r\n\r\nexport class HashSetClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"HashSet\", module, \"Set mit Zugriffszeit proportional zu log(Anzahl der Elemente)\");\r\n\r\n        let objectType = module.typeStore.getType(\"Object\");\r\n\r\n        this.setBaseClass(<Klass>objectType);\r\n\r\n        let typeE: Klass = (<Klass>objectType).clone();\r\n        typeE.identifier = \"E\";\r\n        typeE.isTypeVariable = true;\r\n\r\n        let tvE: TypeVariable = {\r\n            identifier: \"E\",\r\n            scopeFrom: { line: 1, column: 1, length: 1 },\r\n            scopeTo: { line: 1, column: 1, length: 1 },\r\n            type: typeE\r\n        };\r\n\r\n        this.typeVariables.push(tvE);\r\n\r\n        let setInterface = (<Interface>module.typeStore.getType(\"Set\")).clone();\r\n        setInterface.typeVariables = [tvE];\r\n\r\n        this.implements.push(setInterface);\r\n\r\n        let iteratorType = (<Klass>module.typeStore.getType(\"Iterator\")).clone();\r\n        iteratorType.typeVariables = [tvE];\r\n\r\n        this.addMethod(new Method(\"HashSet\", new Parameterlist([\r\n            // { identifier: \"mx\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let mh = new SetHelper(o, module.main.getInterpreter(), module);\r\n                o.intrinsicData[\"ListHelper\"] = mh;\r\n\r\n            }, false, false, 'Instanziert ein neues HashSet', true));\r\n\r\n        this.addMethod(new Method(\"iterator\", new Parameterlist([\r\n        ]), iteratorType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return SetIteratorImplClass.getIterator(ah, ah.interpreter, module, \"ascending\").value;\r\n\r\n            }, false, false, \"Gibt einen Iterator über die Elemente dieser Collection zurück.\"));\r\n\r\n        this.addMethod(new Method(\"add\", new Parameterlist([\r\n            { identifier: \"element\", type: typeE, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let r: Value = parameters[1];\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.addToSet(r);\r\n\r\n            }, false, false, \"Fügt der Liste ein Element hinzu. Gibt genau dann true zurück, wenn sich der Zustand der Liste dadurch geändert hat.\"));\r\n\r\n        this.addMethod(new Method(\"addAll\", new Parameterlist([\r\n            { identifier: \"c\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: RuntimeObject = parameters[1].value;\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.adAll(object);\r\n\r\n            },\r\n            false, false, \"Fügt alle Elemente von c dieser Collection hinzu.\"));\r\n\r\n        this.addMethod(new Method(\"clear\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.clear();\r\n\r\n            },\r\n            false, false, \"Entfernt alle Element aus dieser Collection.\"));\r\n\r\n        this.addMethod(new Method(\"contains\", new Parameterlist([\r\n            { identifier: \"o\", type: typeE, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.contains(object);\r\n\r\n            },\r\n            false, false, \"Testet, ob die Collection das Element enthält.\"));\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n            { identifier: \"o\", type: typeE, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.removeObject(object);\r\n\r\n            },\r\n            false, false, \"Entfernt das Element o aus der Collection. Gibt true zurück, wenn die Collection das Element enthalten hatte.\"));\r\n\r\n        this.addMethod(new Method(\"isEmpty\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.isEmpty();\r\n\r\n            },\r\n            false, false, \"Testet, ob die Collection das leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"size\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.size();\r\n\r\n            },\r\n            false, false, \"Gibt die Anzahl der Elemente der Collection zurück.\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([]), stringPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.to_String();\r\n\r\n            }, false, false));\r\n\r\n    }\r\n\r\n}","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Interface, Klass, TypeVariable } from \"../../compiler/types/Class.js\";\r\nimport { booleanPrimitiveType, intPrimitiveType, stringPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Value } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { SetIteratorImplClass } from \"./SetIteratorImpl.js\";\r\nimport { SetHelper } from \"./SetHelper.js\";\r\n\r\nexport class LinkedHashSetClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"LinkedHashSet\", module, \"Ein LinkedHashSet speichert jedes Element nur genau ein Mal.\");\r\n\r\n        let objectType = module.typeStore.getType(\"Object\");\r\n\r\n        this.setBaseClass(<Klass>objectType);\r\n\r\n        let typeE: Klass = (<Klass>objectType).clone();\r\n        typeE.identifier = \"E\";\r\n        typeE.isTypeVariable = true;\r\n\r\n        let tvE: TypeVariable = {\r\n            identifier: \"E\",\r\n            scopeFrom: { line: 1, column: 1, length: 1 },\r\n            scopeTo: { line: 1, column: 1, length: 1 },\r\n            type: typeE\r\n        };\r\n\r\n        this.typeVariables.push(tvE);\r\n\r\n        let setInterface = (<Interface>module.typeStore.getType(\"Set\")).clone();\r\n        setInterface.typeVariables = [tvE];\r\n\r\n        this.implements.push(setInterface);\r\n\r\n        let iteratorType = (<Klass>module.typeStore.getType(\"Iterator\")).clone();\r\n        iteratorType.typeVariables = [tvE];\r\n\r\n        this.addMethod(new Method(\"LinkedHashSet\", new Parameterlist([\r\n            // { identifier: \"mx\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let mh = new SetHelper(o, module.main.getInterpreter(), module);\r\n                o.intrinsicData[\"MapHelper\"] = mh;\r\n\r\n            }, false, false, 'Instanziert ein neues LinkedHashSet', true));\r\n\r\n        this.addMethod(new Method(\"iterator\", new Parameterlist([\r\n        ]), iteratorType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return SetIteratorImplClass.getIterator(ah, ah.interpreter, module, \"ascending\").value;\r\n\r\n            }, false, false, \"Gibt einen Iterator über die Elemente dieser Collection zurück.\"));\r\n\r\n        this.addMethod(new Method(\"add\", new Parameterlist([\r\n            { identifier: \"element\", type: typeE, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let r: Value = parameters[1];\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.addToSet(r);\r\n\r\n            }, false, false, \"Fügt der Liste ein Element hinzu. Gibt genau dann true zurück, wenn sich der Zustand der Liste dadurch geändert hat.\"));\r\n\r\n        this.addMethod(new Method(\"addAll\", new Parameterlist([\r\n            { identifier: \"c\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: RuntimeObject = parameters[1].value;\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.adAll(object);\r\n\r\n            },\r\n            false, false, \"Fügt alle Elemente von c dieser Collection hinzu.\"));\r\n\r\n        this.addMethod(new Method(\"clear\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.clear();\r\n\r\n            },\r\n            false, false, \"Entfernt alle Element aus dieser Collection.\"));\r\n\r\n        this.addMethod(new Method(\"contains\", new Parameterlist([\r\n            { identifier: \"o\", type: typeE, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.contains(object);\r\n\r\n            },\r\n            false, false, \"Testet, ob die Collection das Element enthält.\"));\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n            { identifier: \"o\", type: typeE, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.removeObject(object);\r\n\r\n            },\r\n            false, false, \"Entfernt das Element o aus der Collection. Gibt true zurück, wenn die Collection das Element enthalten hatte.\"));\r\n\r\n        this.addMethod(new Method(\"isEmpty\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.isEmpty();\r\n\r\n            },\r\n            false, false, \"Testet, ob die Collection das leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"size\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.size();\r\n\r\n            },\r\n            false, false, \"Gibt die Anzahl der Elemente der Collection zurück.\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([]), stringPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: SetHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.to_String();\r\n\r\n            }, false, false));\r\n\r\n    }\r\n\r\n}\r\n\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { Interface, TypeVariable, Klass } from \"../../compiler/types/Class.js\";\r\nimport { voidPrimitiveType, booleanPrimitiveType, intPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\n\r\nexport class QueueClass extends Interface {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Queue\", module);\r\n\r\n        let objectType = <Klass>module.typeStore.getType(\"Object\");\r\n\r\n        let typeE: Klass = objectType.clone();\r\n        typeE.identifier = \"E\";\r\n        typeE.isTypeVariable = true;\r\n\r\n        let tvE: TypeVariable = {\r\n            identifier: \"E\",\r\n            scopeFrom: { line: 1, column: 1, length: 1 },\r\n            scopeTo: { line: 1, column: 1, length: 1 },\r\n            type: typeE\r\n        };\r\n\r\n        this.typeVariables.push(tvE);\r\n\r\n        let collectionInterface = (<Interface>module.typeStore.getType(\"Collection\")).clone();\r\n        collectionInterface.typeVariables = [tvE];\r\n\r\n        this.extends.push(collectionInterface);\r\n\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n        ]), typeE,\r\n            null,  // no implementation!\r\n            true, false, \"Entfernt das Element am Kopf der Liste und gibt es zurück. Führt zum Fehler, wenn die Liste leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"poll\", new Parameterlist([\r\n            { identifier: \"element\", type: typeE, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), typeE,\r\n            null,  // no implementation!\r\n            true, false, \"Entfernt das Element am Kopf der Liste und gibt es zurück. Gibt null zurück, wenn die Liste leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"peek\", new Parameterlist([\r\n        ]), typeE,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt das Element am Kopf der Liste zurück, entfernt es aber nicht. Gib null zurück, wenn die Liste leer ist.\"));\r\n\r\n    }\r\n\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { Interface, TypeVariable, Klass } from \"../../compiler/types/Class.js\";\r\nimport { voidPrimitiveType, booleanPrimitiveType, intPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\n\r\nexport class DequeClass extends Interface {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Deque\", module, \"Interface für Liste mit zweiseitigem Zugriff (insbesondere Anfügen an beiden Enden)\");\r\n\r\n        let objectType = <Klass>module.typeStore.getType(\"Object\");\r\n\r\n        let typeE: Klass = objectType.clone();\r\n        typeE.identifier = \"E\";\r\n        typeE.isTypeVariable = true;\r\n\r\n        let tvE: TypeVariable = {\r\n            identifier: \"E\",\r\n            scopeFrom: { line: 1, column: 1, length: 1 },\r\n            scopeTo: { line: 1, column: 1, length: 1 },\r\n            type: typeE\r\n        };\r\n\r\n        this.typeVariables.push(tvE);\r\n\r\n        let QueueInterface = (<Interface>module.typeStore.getType(\"Queue\")).clone();\r\n        QueueInterface.typeVariables = [tvE];\r\n\r\n        this.extends.push(QueueInterface);\r\n\r\n\r\n        this.addMethod(new Method(\"removeFirstOccurrence\", new Parameterlist([\r\n            { identifier: \"element\", type: typeE, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Löscht das Erste Vorkommen des Objekts. Gibt true zurück, wenn die Liste dadurch verändert wurde.\"));\r\n\r\n        this.addMethod(new Method(\"removeLastOccurrence\", new Parameterlist([\r\n            { identifier: \"element\", type: typeE, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Löscht das Letzte Vorkommen des Objekts. Gibt true zurück, wenn die Liste dadurch verändert wurde.\"));\r\n\r\n        this.addMethod(new Method(\"addFirst\", new Parameterlist([\r\n            { identifier: \"element\", type: typeE, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            null,  // no implementation!\r\n            true, false, \"Fügt das Element am Anfang der Liste hinzu.\"));\r\n\r\n        this.addMethod(new Method(\"addLast\", new Parameterlist([\r\n            { identifier: \"element\", type: typeE, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            null,  // no implementation!\r\n            true, false, \"Fügt das Element am Ende der Liste hinzu.\"));\r\n\r\n        this.addMethod(new Method(\"removeFirst\", new Parameterlist([\r\n        ]), typeE,\r\n            null,  // no implementation!\r\n            true, false, \"Entfernt das Element am Anfang der Liste und gibt es zurück. Führt zum Fehler, wenn die Liste leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"removeLast\", new Parameterlist([\r\n        ]), typeE,\r\n            null,  // no implementation!\r\n            true, false, \"Entfernt das Element am Ende der Liste und gibt es zurück. Führt zum Fehler, wenn die Liste leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"peekFirst\", new Parameterlist([\r\n        ]), typeE,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt das Element am Anfang der Liste zurück, entfernt es aber nicht. Gib null zurück, wenn die Liste leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"peekLast\", new Parameterlist([\r\n        ]), typeE,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt das Element am Ende der Liste zurück, entfernt es aber nicht. Gib null zurück, wenn die Liste leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"push\", new Parameterlist([\r\n            { identifier: \"element\", type: typeE, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            null,  // no implementation!\r\n            true, false, \"Fügt das Element am Ende der Liste hinzu.\"));\r\n\r\n        this.addMethod(new Method(\"pop\", new Parameterlist([\r\n        ]), typeE,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt das Element am Ende der Liste zurück und entfernt es von der Liste. Erzeugt einen Fehler, wenn die Liste leer ist.\"));\r\n\r\n        let iteratorType = (<Klass>module.typeStore.getType(\"Iterator\")).clone();\r\n        iteratorType.typeVariables = [tvE];\r\n\r\n        this.addMethod(new Method(\"descendingIterator\", new Parameterlist([\r\n        ]), iteratorType,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt einen Iterator über die Elemente dieser Collection zurück, der die Liste in umgekehrter Reihenfolge (Ende -> Anfang) durchläuft.\"));\r\n\r\n    }\r\n\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Interface, Klass, TypeVariable } from \"../../compiler/types/Class.js\";\r\nimport { booleanPrimitiveType, intPrimitiveType, stringPrimitiveType, objectType, StringPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Value, PrimitiveType } from \"../../compiler/types/Types.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { Program, Statement } from \"../../compiler/parser/Program.js\";\r\nimport { TokenType, TextPosition } from \"../../compiler/lexer/Token.js\";\r\nimport { ArrayType } from \"../../compiler/types/Array.js\";\r\nimport { ListIteratorImplClass } from \"./ListIteratorImpl.js\";\r\nimport { Enum } from \"../../compiler/types/Enum.js\";\r\nimport { ListHelper } from \"./ArrayList.js\";\r\n\r\nexport class LinkedListClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"LinkedList\", module, \"Verkettete Liste\");\r\n\r\n        let objectType = module.typeStore.getType(\"Object\");\r\n\r\n        this.setBaseClass(<Klass>objectType);\r\n\r\n        let typeA: Klass = (<Klass>objectType).clone();\r\n        typeA.identifier = \"A\";\r\n        typeA.isTypeVariable = true;\r\n\r\n        let tvA: TypeVariable = {\r\n            identifier: \"A\",\r\n            scopeFrom: { line: 1, column: 1, length: 1 },\r\n            scopeTo: { line: 1, column: 1, length: 1 },\r\n            type: typeA\r\n        };\r\n\r\n        this.typeVariables.push(tvA);\r\n\r\n        let dequeInterface = (<Interface>module.typeStore.getType(\"Deque\")).clone();\r\n        dequeInterface.typeVariables = [tvA];\r\n\r\n        this.implements.push(dequeInterface);\r\n\r\n        let iteratorType = (<Klass>module.typeStore.getType(\"Iterator\")).clone();\r\n        iteratorType.typeVariables = [tvA];\r\n\r\n        this.addMethod(new Method(\"LinkedList\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let ah = new ListHelper(o, module.main.getInterpreter(), module);\r\n                o.intrinsicData[\"ListHelper\"] = ah;\r\n\r\n            }, false, false, 'Instanziert eine neue LinkedList', true));\r\n\r\n        this.addMethod(new Method(\"iterator\", new Parameterlist([\r\n        ]), iteratorType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ListIteratorImplClass.getIterator(ah, ah.interpreter, module, \"ascending\").value;\r\n\r\n            }, false, false, \"Gibt einen Iterator über die Elemente dieser Collection zurück.\"));\r\n\r\n        this.addMethod(new Method(\"descendingIterator\", new Parameterlist([\r\n        ]), iteratorType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ListIteratorImplClass.getIterator(ah, ah.interpreter, module, \"descending\").value;\r\n\r\n            }, false, false, \"Gibt einen Iterator über die Elemente dieser Collection zurück, der die Liste in umgekehrter Reihenfolge durchläuft (Ende -> Anfang).\"));\r\n\r\n        this.addMethod(new Method(\"add\", new Parameterlist([\r\n            { identifier: \"element\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let r: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.add(r);\r\n\r\n            }, false, false, \"Fügt der Liste am Ende ein Element hinzu. Gibt genau dann true zurück, wenn sich der Zustand der Liste dadurch geändert hat.\"));\r\n\r\n        this.addMethod(new Method(\"addAll\", new Parameterlist([\r\n            { identifier: \"c\", type: this, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: RuntimeObject = parameters[1].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.addAll(object);\r\n\r\n            },\r\n            false, false, \"Fügt alle Elemente von c dieser Collection hinzu.\"));\r\n\r\n        this.addMethod(new Method(\"clear\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.clear();\r\n\r\n            },\r\n            false, false, \"Entfernt alle Element aus dieser Collection.\"));\r\n\r\n        this.addMethod(new Method(\"contains\", new Parameterlist([\r\n            { identifier: \"o\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.contains(object);\r\n\r\n            },\r\n            false, false, \"Testet, ob die Collection das Element enthält.\"));\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n            { identifier: \"o\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.removeObject(object);\r\n\r\n            },\r\n            false, false, \"Entfernt das Element o aus der Collection. Gibt true zurück, wenn die Collection das Element enthalten hatte.\"));\r\n\r\n        this.addMethod(new Method(\"isEmpty\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.isEmpty();\r\n\r\n            },\r\n            false, false, \"Testet, ob die Collection das leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"size\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.size();\r\n\r\n            },\r\n            false, false, \"Gibt die Anzahl der Elemente der Collection zurück.\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([]), stringPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.to_String();\r\n\r\n            }, false, false));\r\n\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n        ]), typeA,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.removeFirst_or_error();\r\n\r\n            },\r\n            false, false, \"Entfernt das Element am Kopf der Liste und gibt es zurück. Führt zum Fehler, wenn die Liste leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"poll\", new Parameterlist([\r\n        ]), typeA,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.poll_or_null();\r\n\r\n            },\r\n            false, false, \"Entfernt das Element am Kopf der Liste und gibt es zurück. Gibt null zurück, wenn die Liste leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"peek\", new Parameterlist([\r\n        ]), typeA,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.peek_or_null();\r\n\r\n            },\r\n            false, false, \"Gibt das Element am Kopf der Liste zurück, entfernt es aber nicht. Gib null zurück, wenn die Liste leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"removeFirstOccurrence\", new Parameterlist([\r\n            { identifier: \"element\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.removeFirstOccurrence(object);\r\n\r\n            },\r\n            false, false, \"Löscht das Erste Vorkommen des Objekts. Gibt true zurück, wenn die Liste dadurch verändert wurde.\"));\r\n\r\n        this.addMethod(new Method(\"removeLastOccurrence\", new Parameterlist([\r\n            { identifier: \"element\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.removeFirstOccurrence(object);\r\n\r\n            },\r\n            false, false, \"Löscht das Letzte Vorkommen des Objekts. Gibt true zurück, wenn die Liste dadurch verändert wurde.\"));\r\n\r\n        this.addMethod(new Method(\"addFirst\", new Parameterlist([\r\n            { identifier: \"element\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.addFirst(object);\r\n\r\n            },\r\n            false, false, \"Fügt das Element am Anfang der Liste hinzu.\"));\r\n\r\n        this.addMethod(new Method(\"addLast\", new Parameterlist([\r\n            { identifier: \"element\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.addLast(object);\r\n\r\n            },\r\n            false, false, \"Fügt das Element am Ende der Liste hinzu.\"));\r\n\r\n        this.addMethod(new Method(\"removeFirst\", new Parameterlist([\r\n        ]), typeA,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.removeFirst_or_error();\r\n\r\n            },\r\n            false, false, \"Entfernt das Element am Anfang der Liste und gibt es zurück. Führt zum Fehler, wenn die Liste leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"removeLast\", new Parameterlist([\r\n        ]), typeA,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.removeLast_or_error();\r\n\r\n            },\r\n            false, false, \"Entfernt das Element am Ende der Liste und gibt es zurück. Führt zum Fehler, wenn die Liste leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"peekFirst\", new Parameterlist([\r\n        ]), typeA,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.peek_first_or_null();\r\n\r\n            },\r\n            false, false, \"Gibt das Element am Anfang der Liste zurück, entfernt es aber nicht. Gib null zurück, wenn die Liste leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"peekLast\", new Parameterlist([\r\n        ]), typeA,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.peek_last_or_null();\r\n\r\n            },\r\n            false, false, \"Gibt das Element am Ende der Liste zurück, entfernt es aber nicht. Gib null zurück, wenn die Liste leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"push\", new Parameterlist([\r\n            { identifier: \"element\", type: typeA, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let object: Value = parameters[1];\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.add(object);\r\n\r\n            },\r\n            false, false, \"Fügt das Element am Ende der Liste hinzu.\"));\r\n\r\n        this.addMethod(new Method(\"pop\", new Parameterlist([\r\n        ]), typeA,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ListHelper = o.intrinsicData[\"ListHelper\"];\r\n\r\n                return ah.pop();\r\n\r\n            },\r\n            false, false, \"Gibt das Element am Ende der Liste zurück und entfernt es von der Liste. Erzeugt einen Fehler, wenn die Liste leer ist.\"));\r\n\r\n    }\r\n\r\n}\r\n\r\n","import { Type, Method, Parameterlist, Value, Attribute } from \"../compiler/types/Types.js\";\r\nimport { Klass } from \"../compiler/types/Class.js\";\r\nimport { stringPrimitiveType } from \"../compiler/types/PrimitiveTypes.js\";\r\nimport { Module } from \"../compiler/parser/Module.js\";\r\nimport { PrintManager } from \"../main/gui/PrintManager.js\";\r\n\r\nexport class ConsoleClass extends Klass {\r\n\r\n    constructor(module: Module){\r\n        super(\"Console\", module, \"Klasse zur Textausgabe in der Konsole.\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        this.addMethod( new Method(\"log\", new Parameterlist([{identifier: \"text\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false}]), null, \r\n                (parameters) => { \r\n                    // console.log(<string>(parameters[0].value)); \r\n                    module.main.getBottomDiv()?.console.$consoleTab.find('.jo_console-top').append(\"<div>\" + <string>(parameters[1].value) + \"</div>\"); \r\n                }, false, true));\r\n\r\n    }\r\n\r\n}","import { Program } from \"../parser/Program.js\";\r\nimport { Klass, Visibility } from \"./Class.js\";\r\nimport { Value, Attribute, Method, Parameterlist, Type } from \"./Types.js\";\r\nimport { Module } from \"../parser/Module.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { ArrayType } from \"./Array.js\";\r\nimport { TextPosition } from \"../lexer/Token.js\";\r\nimport { EnumValueNode } from \"../parser/AST.js\";\r\nimport { stringPrimitiveType, intPrimitiveType, objectType } from \"./PrimitiveTypes.js\";\r\n\r\nexport class EnumRuntimeObject extends RuntimeObject {\r\n\r\n    enumValue: EnumInfo;\r\n\r\n    constructor(en: Enum, enumValue: EnumInfo) {\r\n        super(en);\r\n        this.enumValue = enumValue;\r\n    }\r\n\r\n}\r\n\r\nexport type EnumInfo = {\r\n    identifier: string,\r\n    ordinal: number,\r\n    position?: TextPosition,\r\n    object?: EnumRuntimeObject,\r\n    constructorCallProgram?: Program\r\n}\r\n\r\n\r\nexport class Enum extends Klass {\r\n\r\n    enumInfoList: EnumInfo[] = [];\r\n    identifierToInfoMap: { [identifier: string]: EnumInfo } = {};\r\n    indexToInfoMap: { [index: number]: EnumInfo } = {};\r\n\r\n    valueList: Value = null;\r\n\r\n    getOrdinal(valueIdentifier: string): number {\r\n\r\n        let enumInfo: EnumInfo = this.identifierToInfoMap[valueIdentifier];\r\n        if (enumInfo == null) return -1;\r\n        return enumInfo.ordinal;\r\n\r\n    }\r\n\r\n    public debugOutput(value: Value, maxLength: number = 40): string {\r\n        let enumObject = <EnumRuntimeObject>value.value;\r\n        return this.identifier + \".\" + enumObject.enumValue.identifier;\r\n    }\r\n\r\n    constructor(identifier: string, module: Module, enumValueNodes: EnumValueNode[]) {\r\n\r\n        super(identifier, module);\r\n        this.baseClass = objectType;\r\n\r\n        let i: number = 0;\r\n\r\n        for (let evn of enumValueNodes) {\r\n\r\n            let attribute: Attribute = new Attribute(evn.identifier, this, null, true, Visibility.public, true);\r\n\r\n            if (evn.position != null) {\r\n                attribute.declaration = {\r\n                    module: module,\r\n                    position: evn.position\r\n                }\r\n\r\n                attribute.usagePositions.set(module, [evn.position]);\r\n            }\r\n\r\n            this.staticClass.addAttribute(\r\n                attribute\r\n            );\r\n\r\n\r\n            let ev: EnumInfo = {\r\n                identifier: evn.identifier,\r\n                ordinal: i++\r\n            }\r\n\r\n            this.enumInfoList.push(ev);\r\n            this.identifierToInfoMap[evn.identifier] = ev;\r\n            this.indexToInfoMap[ev.ordinal] = ev;\r\n\r\n        }\r\n\r\n        if(module.isSystemModule){\r\n            this.valueList = {\r\n                type: new ArrayType(this),\r\n                value: []\r\n            };\r\n            for(let ei of this.enumInfoList){\r\n\r\n                ei.object = new EnumRuntimeObject(this, ei);\r\n\r\n                this.valueList.value.push({\r\n                    type: this,\r\n                    value: ei.object\r\n                })\r\n            }\r\n        }\r\n\r\n        let that = this;\r\n\r\n        this.staticClass.addMethod(new Method(\"getValues\",\r\n            new Parameterlist([]), new ArrayType(this), (parameters: Value[]) => {\r\n\r\n                if (this.valueList == null) {\r\n\r\n                    let values = [];\r\n                    for (let vi of this.enumInfoList) {\r\n\r\n                        values.push({\r\n                            type: that,\r\n                            value: vi.object\r\n                        });\r\n\r\n                    }\r\n\r\n                    this.valueList = {\r\n                        type: new ArrayType(that),\r\n                        value: values\r\n                    }\r\n\r\n                }\r\n\r\n                return this.valueList.value;\r\n\r\n            }, false, true)\r\n        );\r\n\r\n        this.addMethod(new Method(\"toString\",\r\n            new Parameterlist([]), stringPrimitiveType, (parameters: Value[]) => {\r\n\r\n                let erto: EnumRuntimeObject = <EnumRuntimeObject>(parameters[0].value);\r\n\r\n                return erto.enumValue.identifier;\r\n\r\n            }, false, false)\r\n        );\r\n\r\n        this.addMethod(new Method(\"toOrdinal\",\r\n            new Parameterlist([]), intPrimitiveType, (parameters: Value[]) => {\r\n\r\n                let erto: EnumRuntimeObject = <EnumRuntimeObject>(parameters[0].value);\r\n\r\n                return erto.enumValue.ordinal;\r\n\r\n            }, false, false)\r\n        );\r\n\r\n    }\r\n\r\n    public canCastTo(type: Type): boolean {\r\n\r\n        if (type == intPrimitiveType) {\r\n            return true;\r\n        }\r\n\r\n        return super.canCastTo(type);\r\n\r\n    }\r\n\r\n    public castTo(value: Value, type: Type): Value {\r\n\r\n        if (type == intPrimitiveType) {\r\n            let en = <EnumRuntimeObject>value.value;\r\n            return {\r\n                type: intPrimitiveType,\r\n                value: en.enumValue.ordinal\r\n            };\r\n        }\r\n\r\n        return super.castTo(value, type);\r\n    }\r\n\r\n\r\n}\r\n","import { LoginRequest, PerformanceData } from \"./Data.js\";\r\n\r\n// export var credentials: { username: string, password: string } = { username: null, password: null };\r\n\r\nexport class PerformanceCollector {\r\n    static performanceData: PerformanceData[] = [];\r\n    static performanceDataCount: number = 0;\r\n    static lastTimeSent: number = performance.now();\r\n\r\n    static registerPerformanceEntry(url: string, startTime: number) {\r\n        let pe: PerformanceData = PerformanceCollector.performanceData.find(pe => pe.url == url);\r\n        if (pe == null) {\r\n            pe = { count: 0, sumTime: 0, url: url };\r\n            PerformanceCollector.performanceData.push(pe);\r\n        }\r\n        pe.count++; //Test\r\n        let dt = Math.round(performance.now() - startTime);\r\n        pe.sumTime += dt;\r\n        PerformanceCollector.performanceDataCount++;\r\n        // console.log(\"Performance entry for path \" + pe.url + \": \" + dt + \" ms, aggregated: \" + pe.sumTime + \" for \" + pe.count + \" requests.\");\r\n    }\r\n\r\n    static sendDataToServer() {\r\n        if (performance.now() - PerformanceCollector.lastTimeSent > 3 * 60 * 1000) {\r\n            let request = {\r\n                data: PerformanceCollector.performanceData\r\n            }\r\n\r\n            PerformanceCollector.performanceData = [];\r\n            PerformanceCollector.performanceDataCount = 0;\r\n            PerformanceCollector.lastTimeSent = performance.now();\r\n\r\n            ajax(\"collectPerformanceData\", request, () => { })\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport function ajax(url: string, request: any, successCallback: (response: any) => void,\r\n\r\n    errorCallback?: (message: string) => void) {\r\n\r\n        if(!url.startsWith(\"http\")){\r\n            url = \"servlet/\" + url;\r\n        }\r\n   \r\n\r\n    showNetworkBusy(true);\r\n    let time = performance.now();\r\n\r\n    $.ajax({\r\n        type: 'POST',\r\n        async: true,\r\n        data: JSON.stringify(request),\r\n        contentType: 'application/json',\r\n        url: url,\r\n        success: function (response: any) {\r\n\r\n            PerformanceCollector.registerPerformanceEntry(url, time);\r\n\r\n            showNetworkBusy(false);\r\n            if (response.success != null && response.success == false || typeof (response) == \"string\" && response == '') {\r\n                let error = \"Fehler bei der Bearbeitung der Anfrage\"\r\n                if (response.message != null) error = response.message;\r\n                if (response.error != null) error = response.error;\r\n\r\n                if (error.indexOf(\"Not logged in\") >= 0) {\r\n                    // setTimeout(() => newLogin(url, request, successCallback, errorCallback), 10000);\r\n                    // location.reload();\r\n                }\r\n                \r\n                console.log(\"Netzwerkfehler: \" + error);\r\n\r\n                if (errorCallback) errorCallback(error);\r\n            } else {\r\n                successCallback(response);\r\n            }\r\n            return;\r\n\r\n        },\r\n        error: function (jqXHR, message) {\r\n            showNetworkBusy(false);\r\n            if (errorCallback) {\r\n                let statusText = \"Server nicht erreichbar.\"\r\n                if (jqXHR.status != 0) {\r\n                    statusText = \"\" + jqXHR.status\r\n                }\r\n                errorCallback(message + \": \" + statusText);\r\n                return;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function showNetworkBusy(busy: boolean) {\r\n    if (busy) {\r\n        jQuery('.jo_network-busy').show();\r\n    } else {\r\n        jQuery('.jo_network-busy').hide();\r\n    }\r\n}\r\n\r\n\r\n\r\n// export function newLogin(url: string, request: any, successCallback: (response: any) => void,\r\n//     errorCallback?: (message: string) => void) {\r\n\r\n//     if (credentials.username == null) return;\r\n//     let loginRequest: LoginRequest = {username: credentials.username, password: credentials.password};\r\n\r\n//     $.ajax({\r\n//         type: 'POST',\r\n//         data: JSON.stringify(loginRequest),\r\n//         contentType: 'application/json',\r\n//         url: \"login\",\r\n//         success: function (response: any) {\r\n//             if (response.success != null && response.success == false || typeof (response) == \"string\" && response == '') {\r\n//             } else {\r\n//                 ajax(url, request, successCallback, errorCallback);\r\n//             }\r\n//             return;\r\n//         },\r\n//         error: function (jqXHR, message) {\r\n// //            ajax(url, request, successCallback, errorCallback);\r\n//         }\r\n//     });\r\n// }\r\n","export class ColorLexer {\r\n    hexColorRegExp = /^#([a-fA-F0-9]{6})$/;\r\n    rgbColorRegExp = /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/;\r\n    rgbaColorRegExp = /^rgba\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d*(?:\\.\\d+)?)\\)$/;\r\n\r\n    getColorInfo(s: string): monaco.languages.IColor {\r\n\r\n        if(s.startsWith('#')){\r\n            let m1 = s.match(this.hexColorRegExp);\r\n            if(m1 == null) return null;\r\n\r\n            let value = Number.parseInt(m1[1], 16);\r\n            return {\r\n                red: (value >> 16)/255,\r\n                green: ((value >> 8) & 0xff) / 255,\r\n                blue: (value & 0xff)/255,\r\n                alpha: 1\r\n            }\r\n\r\n        } else if(s.startsWith('rgb')){\r\n\r\n            if(s.startsWith('rgba')){\r\n                let m2 = s.match(this.rgbaColorRegExp);\r\n                if(m2 == null) return null;\r\n\r\n                return {\r\n                    red: Number.parseInt(m2[1])/255,\r\n                    green: Number.parseInt(m2[2]) / 255,\r\n                    blue: Number.parseInt(m2[3])/255,\r\n                    alpha: Number.parseFloat(m2[4])\r\n                }\r\n            } else {\r\n                let m3 = s.match(this.rgbColorRegExp);\r\n                if(m3 == null) return null;\r\n\r\n                return {\r\n                    red: Number.parseInt(m3[1])/255,\r\n                    green: Number.parseInt(m3[2]) / 255,\r\n                    blue: Number.parseInt(m3[3])/255,\r\n                    alpha: 1\r\n                }\r\n    \r\n\r\n            }\r\n\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n\r\n}","export class ColorHelper {\r\n\r\n    static predefinedColors = {\r\n        \"aliceblue\": 0xF0F8FF,\r\n        \"antiquewhite\": 0xFAEBD7,\r\n        \"aqua\": 0x00FFFF,\r\n        \"aquamarine\": 0x7FFFD4,\r\n        \"azure\": 0xF0FFFF,\r\n        \"beige\": 0xF5F5DC,\r\n        \"bisque\": 0xFFE4C4,\r\n        \"black\": 0x000000,\r\n        \"blanchedAlmond\": 0xFFEBCD,\r\n        \"blue\": 0x0000FF,\r\n        \"blueviolet\": 0x8A2BE2,\r\n        \"brown\": 0xA52A2A,\r\n        \"burlywood\": 0xDEB887,\r\n        \"cadetblue\": 0x5F9EA0,\r\n        \"chartreuse\": 0x7FFF00,\r\n        \"chocolate\": 0xD2691E,\r\n        \"coral\": 0xFF7F50,\r\n        \"cornflowerblue\": 0x6495ED,\r\n        \"cornsilk\": 0xFFF8DC,\r\n        \"crimson\": 0xDC143C,\r\n        \"cyan\": 0x00FFFF,\r\n        \"darkblue\": 0x00008B,\r\n        \"darkcyan\": 0x008B8B,\r\n        \"darkgoldenrod\": 0xB8860B,\r\n        \"darkgray\": 0xA9A9A9,\r\n        \"darkgrey\": 0xA9A9A9,\r\n        \"darkgreen\": 0x006400,\r\n        \"darkkhaki\": 0xBDB76B,\r\n        \"darkmagenta\": 0x8B008B,\r\n        \"darkolivegreen\": 0x556B2F,\r\n        \"darkorange\": 0xFF8C00,\r\n        \"darkorchid\": 0x9932CC,\r\n        \"darkred\": 0x8B0000,\r\n        \"darksalmon\": 0xE9967A,\r\n        \"darkseagreen\": 0x8FBC8F,\r\n        \"darkslateblue\": 0x483D8B,\r\n        \"darkslategray\": 0x2F4F4F,\r\n        \"darkslategrey\": 0x2F4F4F,\r\n        \"darkturquoise\": 0x00CED1,\r\n        \"darkviolet\": 0x9400D3,\r\n        \"deeppink\": 0xFF1493,\r\n        \"deepskyblue\": 0x00BFFF,\r\n        \"dimgray\": 0x696969,\r\n        \"dimgrey\": 0x696969,\r\n        \"dodgerblue\": 0x1E90FF,\r\n        \"firebrick\": 0xB22222,\r\n        \"floralwhite\": 0xFFFAF0,\r\n        \"forestgreen\": 0x228B22,\r\n        \"fuchsia\": 0xFF00FF,\r\n        \"gainsboro\": 0xDCDCDC,\r\n        \"ghostwhite\": 0xF8F8FF,\r\n        \"gold\": 0xFFD700,\r\n        \"goldenrod\": 0xDAA520,\r\n        \"gray\": 0x808080,\r\n        \"grau\": 0x808080,\r\n        \"green\": 0x008000,\r\n        \"greenyellow\": 0xADFF2F,\r\n        \"honeydew\": 0xF0FFF0,\r\n        \"hotpink\": 0xFF69B4,\r\n        \"indianred\": 0xCD5C5C,\r\n        \"indigo\": 0x4B0082,\r\n        \"ivory\": 0xFFFFF0,\r\n        \"khaki\": 0xF0E68C,\r\n        \"lavender\": 0xE6E6FA,\r\n        \"lavenderblush\": 0xFFF0F5,\r\n        \"lawngreen\": 0x7CFC00,\r\n        \"lemonchiffon\": 0xFFFACD,\r\n        \"lightblue\": 0xADD8E6,\r\n        \"lightcoral\": 0xF08080,\r\n        \"lightcyan\": 0xE0FFFF,\r\n        \"lightgoldenrodyellow\": 0xFAFAD2,\r\n        \"lightgray\": 0xD3D3D3,\r\n        \"lightgrey\": 0xD3D3D3,\r\n        \"lightgreen\": 0x90EE90,\r\n        \"lightpink\": 0xFFB6C1,\r\n        \"lightsalmon\": 0xFFA07A,\r\n        \"lightseagreen\": 0x20B2AA,\r\n        \"lightskyblue\": 0x87CEFA,\r\n        \"lightslategray\": 0x778899,\r\n        \"lightslategrey\": 0x778899,\r\n        \"lightsteelblue\": 0xB0C4DE,\r\n        \"lightyellow\": 0xFFFFE0,\r\n        \"lime\": 0x00FF00,\r\n        \"limegreen\": 0x32CD32,\r\n        \"linen\": 0xFAF0E6,\r\n        \"magenta\": 0xFF00FF,\r\n        \"maroon\": 0x800000,\r\n        \"mediumaquamarine\": 0x66CDAA,\r\n        \"mediumblue\": 0x0000CD,\r\n        \"mediumorchid\": 0xBA55D3,\r\n        \"mediumpurple\": 0x9370DB,\r\n        \"mediumseagreen\": 0x3CB371,\r\n        \"mediumslateblue\": 0x7B68EE,\r\n        \"mediumspringgreen\": 0x00FA9A,\r\n        \"mediumturquoise\": 0x48D1CC,\r\n        \"mediumvioletred\": 0xC71585,\r\n        \"midnightblue\": 0x191970,\r\n        \"mintcream\": 0xF5FFFA,\r\n        \"mistyrose\": 0xFFE4E1,\r\n        \"moccasin\": 0xFFE4B5,\r\n        \"navajowhite\": 0xFFDEAD,\r\n        \"navy\": 0x000080,\r\n        \"oldLace\": 0xFDF5E6,\r\n        \"olive\": 0x808000,\r\n        \"olivedrab\": 0x6B8E23,\r\n        \"orange\": 0xFFA500,\r\n        \"orangered\": 0xFF4500,\r\n        \"orchid\": 0xDA70D6,\r\n        \"palegoldenrod\": 0xEEE8AA,\r\n        \"palegreen\": 0x98FB98,\r\n        \"paleturquoise\": 0xAFEEEE,\r\n        \"palevioletred\": 0xDB7093,\r\n        \"papayawhip\": 0xFFEFD5,\r\n        \"peachpuff\": 0xFFDAB9,\r\n        \"peru\": 0xCD853F,\r\n        \"pink\": 0xFFC0CB,\r\n        \"plum\": 0xDDA0DD,\r\n        \"powderblue\": 0xB0E0E6,\r\n        \"purple\": 0x800080,\r\n        \"rebeccapurple\": 0x663399,\r\n        \"red\": 0xFF0000,\r\n        \"rosybrown\": 0xBC8F8F,\r\n        \"royalblue\": 0x4169E1,\r\n        \"saddlebrown\": 0x8B4513,\r\n        \"salmon\": 0xFA8072,\r\n        \"sandybrown\": 0xF4A460,\r\n        \"sand\": 0xF4A460,\r\n        \"seagreen\": 0x2E8B57,\r\n        \"seashell\": 0xFFF5EE,\r\n        \"sienna\": 0xA0522D,\r\n        \"silver\": 0xC0C0C0,\r\n        \"skyblue\": 0x87CEEB,\r\n        \"slateblue\": 0x6A5ACD,\r\n        \"slategray\": 0x708090,\r\n        \"slategrey\": 0x708090,\r\n        \"snow\": 0xFFFAFA,\r\n        \"springgreen\": 0x00FF7F,\r\n        \"steelblue\": 0x4682B4,\r\n        \"tan\": 0xD2B48C,\r\n        \"teal\": 0x008080,\r\n        \"thistle\": 0xD8BFD8,\r\n        \"tomato\": 0xFF6347,\r\n        \"turquoise\": 0x40E0D0,\r\n        \"violet\": 0xEE82EE,\r\n        \"wheat\": 0xF5DEB3,\r\n        \"white\": 0xFFFFFF,\r\n        \"whitesmoke\": 0xF5F5F5,\r\n        \"yellow\": 0xFFFF00,\r\n        \"yellowgreen\": 0x9ACD32,\r\n    };\r\n\r\n    static intColorToHexRGB(color: number) {\r\n        if(color == null){\r\n            return \"---\";\r\n        } else {\r\n            let s: string = color.toString(16);\r\n            while (s.length < 6) s = \"0\" + s;\r\n            return \"#\" + s;\r\n        }\r\n    }\r\n\r\n    static intColorToRGB(color: number) {\r\n        if(color == null) {return \"---\";} else\r\n        {return \"rgb(\" + ((color & 0xff0000) >> 16) + \", \" + ((color & 0xff00) >> 8) + \", \" + (color & 0xff) + \")\";}\r\n    }\r\n\r\n    static parseColorToOpenGL(color: string): { color: number, alpha: number } {\r\n\r\n        if(color == null){\r\n            return {\r\n                color: null,\r\n                alpha: 1\r\n            };\r\n        }\r\n\r\n        let c = this.predefinedColors[color];\r\n        if (c != null) return { color: c, alpha: 1 };\r\n\r\n        // see https://stackoverflow.com/questions/11068240/what-is-the-most-efficient-way-to-parse-a-css-color-in-javascript\r\n\r\n        let m2 = color.match(/^#([0-9a-f]{6})$/i);\r\n        if (m2 && m2.length > 1) {\r\n            let m = m2[1];\r\n            if (m) {\r\n                return {\r\n                    color: 0x10000 * parseInt(m.substr(0, 2), 16) + 0x100 * parseInt(m.substr(2, 2), 16) + parseInt(m.substr(4, 2), 16),\r\n                    alpha: 1\r\n                };\r\n            }\r\n        }\r\n\r\n        let m3 = color.match(/^#([0-9a-f]{8})$/i);\r\n        if (m3 && m3.length > 1){\r\n            let m = m3[1];\r\n            if (m) {\r\n                return {\r\n                    color: 0x10000 * parseInt(m.substr(0, 2), 16) + 0x100 * parseInt(m.substr(2, 2), 16) + parseInt(m.substr(4, 2), 16),\r\n                    alpha: parseInt(m.substr(6, 2), 16) / 0xff\r\n                };\r\n            }\r\n        }\r\n\r\n        let m1 = color.match(/^rgb\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$/i);\r\n        if (m1) {\r\n            return {\r\n                color: parseInt(m1[1]) * 0x10000 + parseInt(m1[2]) * 0x100 + parseInt(m1[3]),\r\n                alpha: 1\r\n            };\r\n        }\r\n\r\n        m1 = color.match(/^rgba\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+\\.?\\d+)\\s*\\)$/i);\r\n        if (m1) {\r\n            return {\r\n                color: parseInt(m1[1]) * 0x10000 + parseInt(m1[2]) * 0x100 + parseInt(m1[3]),\r\n                alpha: parseFloat(m1[4]) \r\n            };\r\n        }\r\n\r\n        return { color: 0xff0000, alpha: 1 };\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}","import { TextPosition } from \"../lexer/Token.js\";\r\nimport { Type, Variable, Method } from \"../types/Types.js\";\r\nimport { Klass, StaticClass } from \"../types/Class.js\";\r\nimport { ArrayType } from \"../types/Array.js\";\r\n\r\n\r\nexport class SymbolTable {\r\n\r\n    static maxId: number = 0;\r\n\r\n    public id = SymbolTable.maxId++;\r\n\r\n    parent: SymbolTable; // SymbolTable of parent scope\r\n    positionFrom: TextPosition;\r\n    positionTo: TextPosition;\r\n\r\n    beginsNewStackframe: boolean = false;\r\n    stackframeSize: number;\r\n\r\n    childSymbolTables: SymbolTable[] = [];\r\n\r\n    variableMap: Map<string, Variable> = new Map();\r\n\r\n    classContext: Klass | StaticClass = null;\r\n    method: Method = null;\r\n\r\n    constructor(parentSymbolTable: SymbolTable, positionFrom: TextPosition, positionTo: TextPosition) {\r\n\r\n        this.parent = parentSymbolTable;\r\n\r\n        this.positionFrom = positionFrom;\r\n        this.positionTo = positionTo;\r\n\r\n        this.classContext = parentSymbolTable == null ? null : parentSymbolTable.classContext;\r\n\r\n        if (this.parent != null) {\r\n            this.parent.childSymbolTables.push(this);\r\n            this.method = this.parent.method;\r\n        }\r\n    }\r\n\r\n    getImitation(): SymbolTable {\r\n        let imitation = new SymbolTable(null, { line: 1, column: 1, length: 0 }, { line: 1, column: 10000, length: 0 });\r\n\r\n        imitation.beginsNewStackframe = true;\r\n        let st: SymbolTable = this;\r\n\r\n        let maxStackPos = -1;\r\n\r\n        while (st != null) {\r\n            if (st.classContext != null) {\r\n                imitation.classContext = st.classContext;\r\n            }\r\n\r\n            st.variableMap.forEach((variable, identifier) => {\r\n\r\n                if (imitation.variableMap.get(identifier) == null) {\r\n                    imitation.variableMap.set(identifier, variable);\r\n                }\r\n\r\n                if (variable.stackPos > maxStackPos) {\r\n                    maxStackPos = variable.stackPos;\r\n                }\r\n\r\n            });\r\n\r\n            st = st.parent;\r\n\r\n        }\r\n\r\n        imitation.stackframeSize = maxStackPos + 1;\r\n\r\n        return imitation;\r\n    }\r\n\r\n\r\n\r\n    getLocalVariableCompletionItems(rangeToReplace: monaco.IRange): monaco.languages.CompletionItem[] {\r\n\r\n        let completionItems: monaco.languages.CompletionItem[] = [];\r\n\r\n        this.variableMap.forEach((variable, identifier) => {\r\n\r\n            //@ts-ignore\r\n            if(identifier == 0) return;\r\n\r\n            // TODO: Zu einem Objekt mit identifier == 0 kommt es, wenn man ArrayList<In tippt und dann <Strg + Leertaste>.\r\n\r\n            if (variable != null && variable.type != null && variable.type instanceof ArrayType) {\r\n                completionItems.push({\r\n                    label: identifier + \"[]\",\r\n                    insertText: identifier + \"[$0]\",\r\n                    documentation: \"Element des Arrays\",\r\n                    insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n                    kind: monaco.languages.CompletionItemKind.Snippet,\r\n                    range: rangeToReplace\r\n                });\r\n\r\n            }\r\n            \r\n            completionItems.push({\r\n                label: identifier,\r\n                insertText: identifier,\r\n                kind: monaco.languages.CompletionItemKind.Variable,\r\n                range: rangeToReplace\r\n            });\r\n\r\n\r\n        });\r\n\r\n        if (this.parent != null && this.parent.classContext == this.classContext) {\r\n            completionItems = completionItems.concat(this.parent.getLocalVariableCompletionItems(rangeToReplace));\r\n        }\r\n\r\n        return completionItems;\r\n    }\r\n\r\n    findTableAtPosition(line: number, column: number): SymbolTable {\r\n\r\n        if (!this.containsPosition(line, column)) {\r\n            return null;\r\n        }\r\n\r\n        let shortestSymbolTableContainingPosition = null;\r\n        let shortestPosition = 10000000;\r\n\r\n        for (let st of this.childSymbolTables) {\r\n            if (st.containsPosition(line, column)) {\r\n                let st1 = st.findTableAtPosition(line, column);\r\n                if (st1.positionTo.line - st1.positionFrom.line < shortestPosition) {\r\n                    shortestSymbolTableContainingPosition = st1;\r\n                    shortestPosition = st1.positionTo.line - st1.positionFrom.line;\r\n                }\r\n            }\r\n            // if(st.containsPosition(line, column) && st.positionTo.line - st.positionFrom.line < shortestPosition){\r\n            //     shortestSymbolTableContainingPosition = st;\r\n            //     shortestPosition = st.positionTo.line - st.positionFrom.line;\r\n            // }\r\n        }\r\n\r\n        if (shortestSymbolTableContainingPosition != null) {\r\n            return shortestSymbolTableContainingPosition;\r\n        } else {\r\n            return this;\r\n        }\r\n\r\n    }\r\n\r\n    containsPosition(line: number, column: number) {\r\n        if (line < this.positionFrom.line || line > this.positionTo.line) {\r\n            return false;\r\n        }\r\n\r\n        if (line == this.positionFrom.line) return column >= this.positionFrom.column;\r\n        if (line == this.positionTo.line) return column <= this.positionTo.column;\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n","import { Error, QuickFix, ErrorLevel } from \"../lexer/Lexer.js\";\r\nimport { TextPosition, TokenType, TokenTypeReadable } from \"../lexer/Token.js\";\r\nimport { ArrayType } from \"../types/Array.js\";\r\nimport { Klass, Interface, StaticClass, Visibility, getVisibilityUpTo, UnboxableKlass } from \"../types/Class.js\";\r\nimport { booleanPrimitiveType, charPrimitiveType, floatPrimitiveType, intPrimitiveType, stringPrimitiveType, objectType, nullType, voidPrimitiveType, varType, doublePrimitiveType } from \"../types/PrimitiveTypes.js\";\r\nimport { Attribute, Type, Variable, Value, PrimitiveType, UsagePositions, Method, Heap, getTypeIdentifier, Parameterlist } from \"../types/Types.js\";\r\nimport { ASTNode, AttributeDeclarationNode, BinaryOpNode, ClassDeclarationNode, ConstantNode, DoWhileNode, ForNode, IdentifierNode, IfNode, IncrementDecrementNode, MethodcallNode, MethodDeclarationNode, NewObjectNode, ReturnNode, SelectArrayElementNode, SelectArributeNode, SuperconstructorCallNode, SuperNode, ThisNode, UnaryOpNode, WhileNode, LocalVariableDeclarationNode, ArrayInitializationNode, NewArrayNode, PrintNode, CastManuallyNode, EnumDeclarationNode, TermNode, SwitchNode, ScopeNode, ParameterNode, ForNodeOverCollecion, ConstructorCallNode } from \"./AST.js\";\r\nimport { LabelManager } from \"./LabelManager.js\";\r\nimport { Module, ModuleStore } from \"./Module.js\";\r\nimport { AssignmentStatement, InitStackframeStatement, JumpAlwaysStatement, Program, Statement, BeginArrayStatement, NewObjectStatement, JumpOnSwitchStatement, ExtendedForLoopCheckCounterAndGetElement } from \"./Program.js\";\r\nimport { SymbolTable } from \"./SymbolTable.js\";\r\nimport { Enum, EnumInfo } from \"../types/Enum.js\";\r\n\r\ntype StackType = {\r\n    type: Type,\r\n    isAssignable: boolean,\r\n    isSuper?: boolean, // used for method calls with super.\r\n    withReturnStatement?: boolean\r\n};\r\n\r\nexport class CodeGenerator {\r\n\r\n    static assignmentOperators = [TokenType.assignment, TokenType.plusAssignment, TokenType.minusAssignment,\r\n    TokenType.multiplicationAssignment, TokenType.divisionAssignment, TokenType.ANDAssigment, TokenType.ORAssigment,\r\n    TokenType.XORAssigment, TokenType.shiftLeftAssigment, TokenType.shiftRightAssigment, TokenType.shiftRightUnsignedAssigment];\r\n\r\n    moduleStore: ModuleStore;\r\n    module: Module;\r\n\r\n    symbolTableStack: SymbolTable[];\r\n    currentSymbolTable: SymbolTable;\r\n\r\n    heap: Heap;\r\n\r\n    currentProgram: Program;\r\n\r\n    errorList: Error[];\r\n\r\n    nextFreeRelativeStackPos: number;\r\n\r\n    breakNodeStack: JumpAlwaysStatement[][];\r\n    continueNodeStack: JumpAlwaysStatement[][];\r\n\r\n    startAdhocCompilation(module: Module, moduleStore: ModuleStore, symbolTable: SymbolTable, heap: Heap): Error[] {\r\n\r\n        this.moduleStore = moduleStore;\r\n        this.module = module;\r\n\r\n        this.symbolTableStack = [];\r\n        this.symbolTableStack.push(symbolTable);\r\n        this.currentSymbolTable = symbolTable;\r\n\r\n        this.heap = heap;\r\n\r\n        let oldStackframeSize = symbolTable.stackframeSize;\r\n        this.nextFreeRelativeStackPos = oldStackframeSize;\r\n\r\n        this.currentProgram = null;\r\n        this.errorList = [];\r\n\r\n        this.breakNodeStack = [];\r\n        this.continueNodeStack = [];\r\n\r\n        this.generateMain(true);\r\n\r\n        return this.errorList;\r\n\r\n    }\r\n\r\n    start(module: Module, moduleStore: ModuleStore) {\r\n\r\n        this.moduleStore = moduleStore;\r\n        this.module = module;\r\n\r\n        this.symbolTableStack = [];\r\n        this.currentSymbolTable = null;\r\n\r\n        this.currentProgram = null;\r\n        this.errorList = [];\r\n\r\n        this.nextFreeRelativeStackPos = 0;\r\n\r\n        if (this.module.tokenList.length > 0) {\r\n            let lastToken = this.module.tokenList[this.module.tokenList.length - 1];\r\n            this.module.mainSymbolTable.positionTo = { line: lastToken.position.line, column: lastToken.position.column + 1, length: 1 };\r\n        }\r\n\r\n        this.symbolTableStack.push(this.module.mainSymbolTable);\r\n        this.currentSymbolTable = this.module.mainSymbolTable;\r\n\r\n        this.breakNodeStack = [];\r\n        this.continueNodeStack = [];\r\n\r\n        this.generateMain();\r\n\r\n        this.generateClasses();\r\n\r\n        this.lookForStaticVoidMain();\r\n\r\n        this.module.errors[3] = this.errorList;\r\n\r\n    }\r\n\r\n    lookForStaticVoidMain() {\r\n\r\n        let mainProgram = this.module.mainProgram;\r\n\r\n        if (mainProgram != null && mainProgram.statements.length > 2) return;\r\n\r\n        let mainMethod: Method = null;\r\n        let staticClass: StaticClass = null;\r\n        let classNode1: ASTNode;\r\n\r\n        for (let classNode of this.module.classDefinitionsAST) {\r\n            if (classNode.type == TokenType.keywordClass) {\r\n\r\n                let ct = classNode.resolvedType;\r\n\r\n                for (let m of ct.staticClass.methods) {\r\n                    if (m.identifier == \"main\" && m.parameterlist.parameters.length == 1) {\r\n                        let pt = m.parameterlist.parameters[0];\r\n                        if (pt.type instanceof ArrayType && pt.type.arrayOfType == stringPrimitiveType) {\r\n                            if (mainMethod != null) {\r\n                                this.pushError(\"Es existieren mehrere Klassen mit statischen main-Methoden.\", classNode.position);\r\n                            } else {\r\n                                mainMethod = m;\r\n                                staticClass = ct.staticClass;\r\n                                classNode1 = classNode;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (mainMethod != null) {\r\n\r\n            let position: TextPosition = mainMethod.usagePositions[0];\r\n            if (mainMethod.program != null && mainMethod.program.statements.length > 0) {\r\n                position = mainMethod.program.statements[0].position;\r\n            }\r\n\r\n            this.initCurrentProgram();\r\n\r\n            this.module.mainProgram = this.currentProgram;\r\n\r\n            this.pushStatements([{\r\n                type: TokenType.callMainMethod,\r\n                position: position,\r\n                stepFinished: false,\r\n                method: mainMethod,\r\n                staticClass: staticClass\r\n            }, {\r\n                type: TokenType.closeStackframe,\r\n                position: mainMethod.usagePositions.get(this.module)[0]\r\n            }\r\n            ], false);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    generateClasses() {\r\n        if (this.module.classDefinitionsAST == null) return;\r\n\r\n        for (let classNode of this.module.classDefinitionsAST) {\r\n            if (classNode.type == TokenType.keywordClass) {\r\n                this.generateClass(classNode);\r\n            }\r\n            if (classNode.type == TokenType.keywordEnum) {\r\n                this.generateEnum(classNode);\r\n            }\r\n            if (classNode.type == TokenType.keywordInterface) {\r\n                let interf = classNode.resolvedType;\r\n                if (interf != null) {\r\n                    this.checkDoubleMethodDeclaration(interf);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    generateEnum(enumNode: EnumDeclarationNode) {\r\n\r\n        if (enumNode.resolvedType == null) return;\r\n\r\n        this.pushNewSymbolTable(false, enumNode.scopeFrom, enumNode.scopeTo);\r\n\r\n        let enumClass = <Enum>enumNode.resolvedType;\r\n\r\n        // this.pushUsagePosition(enumNode.position, enumClass);\r\n\r\n        this.currentSymbolTable.classContext = enumClass;\r\n        this.currentProgram = enumClass.attributeInitializationProgram;\r\n\r\n        for (let attribute of enumNode.attributes) {\r\n            if (attribute != null && !attribute.isStatic && attribute.initialization != null) {\r\n                this.initializeAttribute(attribute);\r\n            }\r\n        }\r\n\r\n        if (enumClass.attributeInitializationProgram.statements.length > 0) {\r\n            this.pushStatements({\r\n                type: TokenType.return,\r\n                position: this.lastStatement.position,\r\n                copyReturnValueToStackframePos0: false,\r\n                stepFinished: false,\r\n                leaveThisObjectOnStack: true\r\n            });\r\n        }\r\n\r\n\r\n        this.currentProgram.labelManager.resolveNodes();\r\n\r\n        for (let methodNode of enumNode.methods) {\r\n            if (methodNode != null && !methodNode.isAbstract && !methodNode.isStatic) {\r\n                this.compileMethod(methodNode);\r\n            }\r\n        }\r\n\r\n        this.popSymbolTable(null);\r\n\r\n        // constructor calls\r\n        this.pushNewSymbolTable(false, enumNode.scopeFrom, enumNode.scopeTo);\r\n\r\n        for (let enumValueNode of enumNode.values) {\r\n\r\n            if (enumValueNode.constructorParameters != null) {\r\n\r\n                let p: Program = {\r\n                    module: this.module,\r\n                    labelManager: null,\r\n                    statements: []\r\n                }\r\n\r\n                this.currentProgram = p;\r\n\r\n                this.pushStatements({\r\n                    type: TokenType.pushEnumValue,\r\n                    position: enumValueNode.position,\r\n                    enumClass: enumClass,\r\n                    valueIdentifier: enumValueNode.identifier\r\n                });\r\n\r\n                this.processEnumConstructorCall(enumClass, enumValueNode.constructorParameters,\r\n                    enumValueNode.position, enumValueNode.commaPositions, enumValueNode.rightBracketPosition);\r\n\r\n                this.pushStatements({\r\n                    type: TokenType.programEnd,\r\n                    position: enumValueNode.position,\r\n                    stepFinished: true\r\n                });\r\n\r\n                let enumInfo: EnumInfo = enumClass.identifierToInfoMap[enumValueNode.identifier];\r\n                enumInfo.constructorCallProgram = p;\r\n                enumInfo.position = enumValueNode.position;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        this.popSymbolTable(null);\r\n\r\n\r\n        // static attributes/methods\r\n        this.pushNewSymbolTable(false, enumNode.scopeFrom, enumNode.scopeTo);\r\n\r\n        this.currentSymbolTable.classContext = enumClass.staticClass;\r\n        this.currentProgram = enumClass.staticClass.attributeInitializationProgram;\r\n\r\n        for (let attribute of enumNode.attributes) {\r\n            if (attribute != null && attribute.isStatic && attribute.initialization != null) {\r\n                this.initializeAttribute(attribute);\r\n            }\r\n        }\r\n\r\n        this.currentProgram.labelManager.resolveNodes();\r\n\r\n        for (let methodNode of enumNode.methods) {\r\n            if (methodNode != null && methodNode.isStatic) {\r\n                this.compileMethod(methodNode);\r\n            }\r\n        }\r\n        this.checkDoubleMethodDeclaration(enumClass);\r\n\r\n        this.popSymbolTable(null);\r\n\r\n    }\r\n\r\n    processEnumConstructorCall(enumClass: Enum, parameterNodes: TermNode[],\r\n        position: TextPosition, commaPositions: TextPosition[], rightBracketPosition: TextPosition) {\r\n        let parameterTypes: Type[] = [];\r\n\r\n        for (let p of parameterNodes) {\r\n            let typeNode = this.processNode(p);\r\n            if (typeNode == null) continue;\r\n            parameterTypes.push(typeNode.type);\r\n        }\r\n\r\n        let methods = enumClass.getMethodsThatFitWithCasting(enumClass.identifier,\r\n            parameterTypes, true, Visibility.private);\r\n\r\n        this.module.pushMethodCallPosition(position, commaPositions, enumClass.getMethods(Visibility.private, enumClass.identifier), rightBracketPosition);\r\n\r\n\r\n        if (methods.error != null) {\r\n            this.pushError(methods.error, position);\r\n            return { type: stringPrimitiveType, isAssignable: false }; // try to continue...\r\n        }\r\n\r\n        let method = methods.methodList[0];\r\n\r\n        let destType: Type = null;\r\n        for (let i = 0; i < parameterTypes.length; i++) {\r\n            if (i < method.getParameterCount()) {  // possible ellipsis!\r\n                destType = method.getParameterType(i);\r\n                if (i == method.getParameterCount() - 1 && method.hasEllipsis()) {\r\n                    destType = (<ArrayType>destType).arrayOfType;\r\n                }\r\n            }\r\n\r\n            let srcType = parameterTypes[i];\r\n            if (!srcType.equals(destType)) {\r\n\r\n                if (srcType instanceof PrimitiveType && destType instanceof PrimitiveType) {\r\n                    if (srcType.getCastInformation(destType).needsStatement) {\r\n                        this.pushStatements({\r\n                            type: TokenType.castValue,\r\n                            position: null,\r\n                            newType: destType,\r\n                            stackPosRelative: -parameterTypes.length + 1 + i\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        let stackframeDelta = 0;\r\n        if (method.hasEllipsis()) {\r\n            let ellipsisParameterCount = parameterTypes.length - method.getParameterCount() + 1; // last parameter and subsequent ones\r\n            stackframeDelta = - (ellipsisParameterCount - 1);\r\n            this.pushStatements({\r\n                type: TokenType.makeEllipsisArray,\r\n                position: parameterNodes[method.getParameterCount() - 1].position,\r\n                parameterCount: ellipsisParameterCount,\r\n                stepFinished: false,\r\n                arrayType: method.getParameter(method.getParameterCount() - 1).type\r\n            })\r\n        }\r\n\r\n        this.pushStatements({\r\n            type: TokenType.callMethod,\r\n            method: method,\r\n            position: position,\r\n            stepFinished: true,\r\n            isSuperCall: false,\r\n            stackframeBegin: -(parameterTypes.length + 1 + stackframeDelta) // this-object followed by parameters\r\n        });\r\n    }\r\n\r\n    generateClass(classNode: ClassDeclarationNode) {\r\n\r\n        if (classNode.resolvedType == null) return;\r\n\r\n        this.pushNewSymbolTable(false, classNode.scopeFrom, classNode.scopeTo);\r\n\r\n        let klass = <Klass>classNode.resolvedType;\r\n\r\n        //this.pushUsagePosition(classNode.position, klass);\r\n\r\n        let inheritanceError = klass.checkInheritance();\r\n\r\n        if (inheritanceError.message != \"\") {\r\n            this.pushError(inheritanceError.message, classNode.position, \"error\", this.getInheritanceQuickFix(classNode.scopeTo, inheritanceError));\r\n        }\r\n\r\n        let baseClass = klass.baseClass;\r\n        if (baseClass != null && baseClass.module != klass.module && baseClass.visibility == Visibility.private) {\r\n            this.pushError(\"Die Basisklasse \" + baseClass.identifier + \" der Klasse \" + klass.identifier + \" ist hier nicht sichtbar.\", classNode.position);\r\n        }\r\n\r\n        this.currentSymbolTable.classContext = klass;\r\n        this.currentProgram = klass.attributeInitializationProgram;\r\n\r\n        for (let attribute of classNode.attributes) {\r\n            if (attribute != null && !attribute.isStatic && attribute.initialization != null) {\r\n                this.initializeAttribute(attribute);\r\n            }\r\n        }\r\n\r\n        if (klass.attributeInitializationProgram.statements.length > 0) {\r\n            this.pushStatements({\r\n                type: TokenType.return,\r\n                position: this.lastStatement.position,\r\n                copyReturnValueToStackframePos0: false,\r\n                stepFinished: false,\r\n                leaveThisObjectOnStack: true\r\n            });\r\n        }\r\n\r\n\r\n        this.currentProgram.labelManager.resolveNodes();\r\n\r\n        for (let methodNode of classNode.methods) {\r\n            if (methodNode != null && !methodNode.isAbstract && !methodNode.isStatic) {\r\n                this.compileMethod(methodNode);\r\n                let m: Method = methodNode.resolvedType;\r\n                if (m != null && m.annotation == \"@Override\") {\r\n                    if (klass.baseClass != null) {\r\n                        if (klass.baseClass.getMethodBySignature(m.signature) == null) {\r\n                            this.pushError(\"Die Methode \" + m.signature + \" ist mit @Override annotiert, überschreibt aber keine Methode gleicher Signatur einer Oberklasse.\", methodNode.position, \"warning\");\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        this.checkDoubleMethodDeclaration(klass);\r\n\r\n        this.popSymbolTable(null);\r\n\r\n        // static attributes/methods\r\n        this.pushNewSymbolTable(false, classNode.scopeFrom, classNode.scopeTo);\r\n\r\n        this.currentSymbolTable.classContext = klass.staticClass;\r\n        this.currentProgram = klass.staticClass.attributeInitializationProgram;\r\n\r\n        for (let attribute of classNode.attributes) {\r\n            if (attribute != null && attribute.isStatic && attribute.initialization != null) {\r\n                this.initializeAttribute(attribute);\r\n            }\r\n        }\r\n\r\n        if (klass.staticClass.attributeInitializationProgram.statements.length > 0) {\r\n            this.pushStatements({\r\n                type: TokenType.return,\r\n                position: this.lastStatement.position,\r\n                copyReturnValueToStackframePos0: false,\r\n                stepFinished: false,\r\n                leaveThisObjectOnStack: true\r\n            });\r\n        }\r\n\r\n\r\n        this.currentProgram.labelManager.resolveNodes();\r\n\r\n        for (let methodNode of classNode.methods) {\r\n            if (methodNode != null && methodNode.isStatic) {\r\n                this.compileMethod(methodNode);\r\n            }\r\n        }\r\n\r\n        this.popSymbolTable(null);\r\n\r\n    }\r\n\r\n    checkDoubleMethodDeclaration(cie: Klass | Interface) {  // N.B.: Enum extends Klass\r\n\r\n        let signatureMap: { [key: string]: Method } = {};\r\n\r\n        for (let m of cie.methods) {\r\n\r\n            let signature = m.getSignatureWithReturnParameter();\r\n            if (signatureMap[signature] != null) {\r\n\r\n                let cieType: String = \"In der Klasse \";\r\n                if (cie instanceof Interface) cieType = \"Im Interface \";\r\n                if (cie instanceof Enum) cieType = \"Im Enum \";\r\n\r\n                this.pushError(cieType + cie.identifier + \" gibt es zwei Methoden mit derselben Signatur: \" + signature, m.usagePositions.get(this.module)[0], \"error\");\r\n                this.pushError(cieType + cie.identifier + \" gibt es zwei Methoden mit derselben Signatur: \" + signature, signatureMap[signature].usagePositions.get(this.module)[0], \"error\");\r\n\r\n            } else {\r\n                signatureMap[signature] = m;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    getInheritanceQuickFix(position: TextPosition, inheritanceError: { message: string; missingMethods: Method[]; }): QuickFix {\r\n\r\n        let s: string = \"\";\r\n        for (let m of inheritanceError.missingMethods) {\r\n            s += \"\\tpublic \" + (m.returnType == null ? \" void\" : getTypeIdentifier(m.returnType)) + \" \" + m.identifier + \"(\";\r\n            s += m.parameterlist.parameters.map(p => getTypeIdentifier(p.type) + \" \" + p.identifier).join(\", \");\r\n            s += \") {\\n\\t\\t//TODO: Methode füllen\\n\\t}\\n\\n\";\r\n        }\r\n\r\n        return {\r\n            title: \"Fehlende Methoden einfügen\",\r\n            editsProvider: (uri) => {\r\n                return [\r\n                    {\r\n                        resource: uri,\r\n                        edit: {\r\n                            range: { startLineNumber: position.line, startColumn: position.column - 1, endLineNumber: position.line, endColumn: position.column - 1 },\r\n                            text: s\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    getSuperconstructorCalls(nodes: ASTNode[], superconstructorCallsFound: ASTNode[], isFirstStatement: boolean): boolean {\r\n        for (let node of nodes) {\r\n            if (node == null) continue;\r\n            if (node.type == TokenType.superConstructorCall) {\r\n\r\n                if (!isFirstStatement) {\r\n                    if (superconstructorCallsFound.length > 0) {\r\n                        this.pushError(\"Ein Konstruktor darf nur einen einzigen Aufruf des Superkonstruktors enthalten.\", node.position, \"error\");\r\n                    } else {\r\n                        this.pushError(\"Vor dem Aufruf des Superkonstruktors darf keine andere Anweisung stehen.\", node.position, \"error\");\r\n                    }\r\n                }\r\n\r\n                superconstructorCallsFound.push(node);\r\n                isFirstStatement = false;\r\n            } else if (node.type == TokenType.scopeNode && node.statements != null) {\r\n                isFirstStatement = isFirstStatement && this.getSuperconstructorCalls(node.statements, superconstructorCallsFound, isFirstStatement);\r\n            } else {\r\n                isFirstStatement = false;\r\n            }\r\n        }\r\n        return isFirstStatement;\r\n    }\r\n\r\n\r\n    compileMethod(methodNode: MethodDeclarationNode) {\r\n        // Assumption: methodNode != null\r\n        let method = methodNode.resolvedType;\r\n\r\n        this.checkIfMethodIsVirtual(method);\r\n\r\n        if (method == null) return;\r\n\r\n        // this.pushUsagePosition(methodNode.position, method);\r\n\r\n        this.initCurrentProgram();\r\n        method.program = this.currentProgram;\r\n\r\n        this.pushNewSymbolTable(false, methodNode.scopeFrom, methodNode.scopeTo);\r\n        this.currentSymbolTable.method = method;\r\n\r\n        let stackPos: number = 1;\r\n\r\n        for (let v of method.getParameterList().parameters) {\r\n            v.stackPos = stackPos++;\r\n\r\n            this.currentSymbolTable.variableMap.set(v.identifier, v);\r\n        }\r\n\r\n        // \" + 1\" is for \"this\"-object\r\n        this.nextFreeRelativeStackPos = methodNode.parameters.length + 1;\r\n\r\n        if (method.isConstructor && this.currentSymbolTable.classContext instanceof Klass && methodNode.statements != null) {\r\n            let c: Klass = this.currentSymbolTable.classContext;\r\n\r\n            let superconstructorCalls: ASTNode[] = [];\r\n            this.getSuperconstructorCalls(methodNode.statements, superconstructorCalls, true);\r\n\r\n            let superconstructorCallEnsured: boolean = superconstructorCalls.length > 0;\r\n\r\n            // if (methodNode.statements.length > 0 && methodNode.statements[0].type == TokenType.scopeNode) {\r\n            //     let stm = methodNode.statements[0].statements;\r\n            //     if (stm.length > 0 && [TokenType.superConstructorCall, TokenType.constructorCall].indexOf(stm[0].type) >= 0) {\r\n            //         superconstructorCallEnsured = true;\r\n            //     }\r\n            // } else if ([TokenType.superConstructorCall, TokenType.constructorCall].indexOf(methodNode.statements[0].type) >= 0) {\r\n            //     superconstructorCallEnsured = true;\r\n            // }\r\n\r\n            if (c != null && c.baseClass?.hasConstructor() && !c.baseClass?.hasParameterlessConstructor()) {\r\n                let error: boolean = false;\r\n                if (methodNode.statements == null || methodNode.statements.length == 0) error = true;\r\n                if (!error) {\r\n                    error = !superconstructorCallEnsured;\r\n                }\r\n                if (error) {\r\n                    let quickFix: QuickFix = null;\r\n                    let constructors = c.baseClass.methods.filter(m => m.isConstructor);\r\n                    if (constructors.length == 1) {\r\n                        let methodCall = \"super(\" + constructors[0].parameterlist.parameters.map(p => p.identifier).join(\", \") + \");\";\r\n                        let position = methodNode.position;\r\n                        quickFix = {\r\n                            title: 'Aufruf des Konstruktors der Basisklasse einfügen',\r\n                            //06.06.2020\r\n                            editsProvider: (uri) => {\r\n                                return [{\r\n                                    resource: uri,\r\n                                    edit: {\r\n                                        range: {\r\n                                            startLineNumber: position.line + 1, startColumn: 0, endLineNumber: position.line + 1, endColumn: 0,\r\n                                            message: \"\",\r\n                                            severity: monaco.MarkerSeverity.Error\r\n                                        },\r\n                                        text: \"\\t\\t\" + methodCall + \"\\n\"\r\n                                    }\r\n                                }\r\n                                ];\r\n                            }\r\n                        }\r\n                    }\r\n                    this.pushError(\"Die Basisklasse der Klasse \" + c.identifier + \" besitzt keinen parameterlosen Konstruktor, daher muss diese Konstruktordefinition mit einem Aufruf eines Konstruktors der Basisklasse (super(...)) beginnen.\",\r\n                        methodNode.position, \"error\", quickFix);\r\n                }\r\n            } else if (!superconstructorCallEnsured && c.baseClass?.hasParameterlessConstructor()) {\r\n                // invoke parameterless constructor\r\n                let baseClassConstructor = c.baseClass.getParameterlessConstructor();\r\n                this.pushStatements([\r\n                    // Push this-object to stack:\r\n                    {\r\n                        type: TokenType.pushLocalVariableToStack,\r\n                        position: methodNode.position,\r\n                        stackposOfVariable: 0\r\n                    },\r\n                    {\r\n                        type: TokenType.callMethod,\r\n                        method: baseClassConstructor,\r\n                        isSuperCall: true,\r\n                        position: methodNode.position,\r\n                        stackframeBegin: -1 // this-object followed by parameters\r\n                    }\r\n\r\n                ])\r\n            }\r\n        }\r\n\r\n        let actorClass = <Klass>this.moduleStore.getType(\"Actor\").type;\r\n        let methodIdentifiers = [\"act\", \"onKeyTyped\", \"onKeyDown\", \"onKeyUp\",\r\n            \"onMouseDown\", \"onMouseUp\", \"onMouseMove\", \"onMouseEnter\", \"onMouseLeave\"];\r\n        if (methodIdentifiers.indexOf(method.identifier) >= 0 && this.currentSymbolTable.classContext.hasAncestorOrIs(actorClass)) {\r\n            this.pushStatements([\r\n\r\n                {\r\n                    type: TokenType.returnIfDestroyed,\r\n                    position: methodNode.position\r\n                },\r\n            ]);\r\n        }\r\n\r\n        let withReturnStatement = this.generateStatements(methodNode.statements).withReturnStatement;\r\n\r\n        if (!withReturnStatement) {\r\n            this.pushStatements({\r\n                type: TokenType.return,\r\n                position: methodNode.scopeTo,\r\n                copyReturnValueToStackframePos0: false,\r\n                stepFinished: true,\r\n                leaveThisObjectOnStack: false\r\n            });\r\n\r\n            let rt = method.getReturnType();\r\n            if (!method.isConstructor && rt != null && rt != voidPrimitiveType) {\r\n                this.pushError(\"Die Deklaration der Methode verlangt die Rückgabe eines Wertes vom Typ \" + rt.identifier + \". Es fehlt (mindestens) eine entsprechende return-Anweisung.\", methodNode.position);\r\n            }\r\n        }\r\n\r\n        method.reserveStackForLocalVariables = this.nextFreeRelativeStackPos\r\n            - methodNode.parameters.length - 1;\r\n\r\n        this.popSymbolTable();\r\n        this.currentProgram.labelManager.resolveNodes();\r\n    }\r\n\r\n\r\n    /**\r\n     * checks if child classes have method with same signature\r\n     */\r\n    checkIfMethodIsVirtual(method: Method) {\r\n\r\n        let klass = this.currentSymbolTable.classContext;\r\n        if (klass != null) {\r\n\r\n            for (let mo of this.moduleStore.getModules(false)) {\r\n                for (let c of mo.typeStore.typeList) {\r\n                    if (c instanceof Klass && c != klass && c.hasAncestorOrIs(klass)) {\r\n                        for (let m of c.methods) {\r\n                            if (m != null && method != null && m.signature == method.signature) {\r\n                                method.isVirtual = true;\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    initializeAttribute(attribute: AttributeDeclarationNode) {\r\n\r\n        if (attribute == null) return;\r\n\r\n        // assumption: attribute != null\r\n        if (attribute.identifier == null || attribute.initialization == null || attribute.resolvedType == null) return;\r\n\r\n        if (attribute.isStatic) {\r\n            this.pushStatements({\r\n                type: TokenType.pushStaticAttribute,\r\n                attributeIndex: attribute.resolvedType.index,\r\n                attributeIdentifier: attribute.resolvedType.identifier,\r\n                position: attribute.initialization.position,\r\n                klass: <StaticClass>(this.currentSymbolTable.classContext)\r\n            });\r\n        } else {\r\n            this.pushStatements({\r\n                type: TokenType.pushAttribute,\r\n                attributeIndex: attribute.resolvedType.index,\r\n                attributeIdentifier: attribute.identifier,\r\n                position: attribute.initialization.position,\r\n                useThisObject: true\r\n            });\r\n        }\r\n\r\n\r\n        let initializationType = this.processNode(attribute.initialization);\r\n\r\n        if (initializationType != null && initializationType.type != null) {\r\n            if (!this.ensureAutomaticCasting(initializationType.type, attribute.attributeType.resolvedType)) {\r\n\r\n                if (attribute.attributeType.resolvedType == null) {\r\n                    this.pushError(\"Der Datentyp von \" + attribute.identifier + \" konnte nicht ermittelt werden. \", attribute.position);\r\n                } else {\r\n                    this.pushError(\"Der Wert des Term vom Datentyp \" + initializationType.type + \" kann dem Attribut \" + attribute.identifier + \" vom Typ \" + attribute.attributeType.resolvedType.identifier + \" nicht zugewiesen werden.\", attribute.initialization.position);\r\n                }\r\n\r\n\r\n            }\r\n\r\n            this.pushStatements({\r\n                type: TokenType.assignment,\r\n                position: attribute.initialization.position,\r\n                stepFinished: false,\r\n                leaveValueOnStack: false\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    initCurrentProgram() {\r\n\r\n        this.currentProgram = {\r\n            module: this.module,\r\n            statements: [],\r\n            labelManager: null\r\n        };\r\n\r\n        this.currentProgram.labelManager = new LabelManager(this.currentProgram);\r\n\r\n        this.lastStatement = null;\r\n\r\n    }\r\n\r\n    generateMain(isAdhocCompilation: boolean = false) {\r\n\r\n        this.initCurrentProgram();\r\n\r\n        let position: TextPosition = { line: 1, column: 1, length: 0 };\r\n\r\n        let mainProgramAst = this.module.mainProgramAst;\r\n        if (mainProgramAst != null && mainProgramAst.length > 0 && mainProgramAst[0] != null) {\r\n            position = this.module.mainProgramAst[0].position;\r\n        }\r\n\r\n        if (!isAdhocCompilation) {\r\n            this.pushNewSymbolTable(true, position, { line: 100000, column: 1, length: 0 }, this.currentProgram);\r\n            this.heap = {};\r\n        }\r\n\r\n        this.module.mainProgram = this.currentProgram;\r\n\r\n        let hasMainProgram: boolean = false;\r\n\r\n        if (this.module.mainProgramAst != null && this.module.mainProgramAst.length > 0) {\r\n\r\n            hasMainProgram = true;\r\n            this.generateStatements(this.module.mainProgramAst);\r\n\r\n            if (isAdhocCompilation && this.lastStatement != null && this.lastStatement.type == TokenType.decreaseStackpointer) {\r\n                this.removeLastStatement();\r\n            }\r\n\r\n            this.lastPosition = this.module.mainProgramEnd;\r\n            if (this.lastPosition == null) this.lastPosition = { line: 100000, column: 0, length: 0 };\r\n            // if(this.lastPosition == null) this.lastPosition = {line: 100000, column: 0, length: 0};\r\n\r\n            this.currentSymbolTable.positionTo = this.lastPosition;\r\n            if (!isAdhocCompilation) this.popSymbolTable(this.currentProgram, true);\r\n            this.heap = null;\r\n\r\n            this.pushStatements({\r\n                type: TokenType.programEnd,\r\n                position: this.lastPosition,\r\n                stepFinished: true,\r\n                pauseAfterProgramEnd: true\r\n            }, true);\r\n\r\n        }\r\n\r\n        this.currentProgram.labelManager.resolveNodes();\r\n\r\n        if (!isAdhocCompilation && !hasMainProgram) {\r\n            this.popSymbolTable(this.currentProgram);\r\n            this.heap = null;\r\n        }\r\n\r\n    }\r\n\r\n    ensureAutomaticCasting(typeFrom: Type, typeTo: Type, position?: TextPosition, nodeFrom?: ASTNode): boolean {\r\n\r\n        if (typeFrom == null || typeTo == null) return false;\r\n\r\n        if (typeFrom.equals(typeTo)) {\r\n            return true;\r\n        }\r\n\r\n        if (typeFrom.canCastTo(typeTo)) {\r\n            if (typeFrom instanceof PrimitiveType && (typeTo instanceof PrimitiveType || typeTo == stringPrimitiveType)) {\r\n                let castInfo = typeFrom.getCastInformation(typeTo);\r\n                if (!castInfo.automatic) {\r\n                    return false;\r\n                }\r\n            }\r\n            this.pushStatements({\r\n                type: TokenType.castValue,\r\n                position: position,\r\n                newType: typeTo\r\n            });\r\n            return true;\r\n        }\r\n\r\n        else {\r\n            if (!typeFrom.canCastTo(typeTo)) {\r\n                if (typeTo == booleanPrimitiveType && nodeFrom != null) {\r\n                    this.checkIfAssignmentInstedOfEqual(nodeFrom);\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    ensureAutomaticToString(typeFrom: Type, codepos: number = undefined, textposition?: TextPosition): boolean {\r\n        if (typeFrom == stringPrimitiveType) return true;\r\n        if (typeFrom == voidPrimitiveType) return false;\r\n        let automaticToString: Method;\r\n\r\n        if (typeFrom instanceof PrimitiveType) {\r\n            automaticToString = new Method(\"toString\", new Parameterlist([]), stringPrimitiveType, (parameters: Value[]) => {\r\n                let value = parameters[0];\r\n                return ((<PrimitiveType>value.type).valueToString(value));\r\n            }, false, true);\r\n\r\n        }\r\n        if ((typeFrom instanceof Klass) || (typeFrom == nullType)) {\r\n\r\n            let toStringMethod: Method;\r\n            if (typeFrom == nullType) {\r\n                toStringMethod = objectType.getMethodBySignature(\"toString()\");\r\n            }\r\n            else {\r\n                toStringMethod = (<Klass>typeFrom).getMethodBySignature(\"toString()\");\r\n            }\r\n            if (toStringMethod != null && toStringMethod.getReturnType() == stringPrimitiveType) {\r\n                automaticToString = new Method(toStringMethod.identifier, toStringMethod.parameterlist, stringPrimitiveType, (parameters: Value[]) => {\r\n                    let value = parameters[0].value;\r\n                    if (value == null) return \"null\";\r\n                    return toStringMethod.invoke(parameters);\r\n                }, toStringMethod.isAbstract, true, toStringMethod.documentation, toStringMethod.isConstructor);\r\n\r\n            }\r\n\r\n        }\r\n        if (automaticToString != undefined) {\r\n            this.insertOrPushStatements({\r\n                type: TokenType.callMethod,\r\n                position: textposition,\r\n                method: automaticToString,\r\n                isSuperCall: false,\r\n                stackframeBegin: -1,\r\n                stepFinished: false\r\n            }, codepos);\r\n            return true;\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n\r\n    checkIfAssignmentInstedOfEqual(nodeFrom: ASTNode, conditionType?: Type) {\r\n        if (nodeFrom == null) return;\r\n\r\n        if (nodeFrom.type == TokenType.binaryOp && nodeFrom.operator == TokenType.assignment) {\r\n            let pos = nodeFrom.position;\r\n            this.pushError(\"= ist der Zuweisungsoperator. Du willst sicher zwei Werte vergleichen. Dazu benötigst Du den Vergleichsoperator ==.\",\r\n                pos, conditionType == booleanPrimitiveType ? \"warning\" : \"error\", {\r\n                title: '= durch == ersetzen',\r\n                editsProvider: (uri) => {\r\n                    return [{\r\n                        resource: uri,\r\n                        edit: {\r\n                            range: {\r\n                                startLineNumber: pos.line, startColumn: pos.column, endLineNumber: pos.line, endColumn: pos.column + 1,\r\n                                message: \"\",\r\n                                severity: monaco.MarkerSeverity.Error\r\n                            },\r\n                            text: \"==\"\r\n                        }\r\n                    }\r\n                    ];\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    generateStatements(nodes: ASTNode[]): { withReturnStatement: boolean, endPosition?: TextPosition } {\r\n\r\n\r\n        if (nodes == null || nodes.length == 0 || nodes[0] == null) return { withReturnStatement: false };\r\n\r\n        let withReturnStatement: boolean = this.processStatementsInsideBlock(nodes);\r\n\r\n        let lastNode = nodes[nodes.length - 1];\r\n        let endPosition: TextPosition;\r\n        if (lastNode != null) {\r\n            if (lastNode.type == TokenType.scopeNode) {\r\n                endPosition = lastNode.positionTo;\r\n            } else {\r\n                endPosition = Object.assign({}, lastNode.position);\r\n                if (endPosition != null) {\r\n                    endPosition.column += endPosition.length;\r\n                    endPosition.length = 1;\r\n                }\r\n            }\r\n            this.lastPosition = endPosition;\r\n        } else {\r\n            endPosition = this.lastPosition;\r\n        }\r\n\r\n        return { withReturnStatement: withReturnStatement, endPosition: endPosition };\r\n\r\n    }\r\n\r\n    processStatementsInsideBlock(nodes: ASTNode[]) {\r\n        let withReturnStatement = false;\r\n\r\n        for (let node of nodes) {\r\n\r\n            if (node == null) continue;\r\n\r\n            let type = this.processNode(node);\r\n\r\n            if (type != null && type.withReturnStatement != null && type.withReturnStatement) {\r\n                withReturnStatement = true;\r\n            }\r\n\r\n            // If last Statement has value which is not used further then pop this value from stack.\r\n            // e.g. statement 12 + 17 -7;\r\n            // Parser issues a warning in this case, see Parser.checkIfStatementHasNoEffekt\r\n            if (type != null && type.type != null && type.type != voidPrimitiveType) {\r\n\r\n                if (this.lastStatement != null &&\r\n                    this.lastStatement.type == TokenType.assignment && this.lastStatement.leaveValueOnStack) {\r\n                    this.lastStatement.leaveValueOnStack = false;\r\n                } else {\r\n                    this.pushStatements({\r\n                        type: TokenType.decreaseStackpointer,\r\n                        position: null,\r\n                        popCount: 1,\r\n                        stepFinished: true\r\n                    }, true)\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return withReturnStatement;\r\n    }\r\n\r\n\r\n    lastPosition: TextPosition;\r\n    lastStatement: Statement;\r\n\r\n    insertStatements(pos: number, statements: Statement | Statement[]) {\r\n        if (statements == null) return;\r\n        if (!Array.isArray(statements)) statements = [statements];\r\n        for (let st of statements) {\r\n            this.currentProgram.statements.splice(pos++, 0, st);\r\n        }\r\n    }\r\n\r\n    pushStatements(statement: Statement | Statement[], deleteStepFinishedFlagOnStepBefore: boolean = false) {\r\n\r\n        if (statement == null) return;\r\n\r\n        if (deleteStepFinishedFlagOnStepBefore && this.currentProgram.statements.length > 0) {\r\n            let stepBefore: Statement = this.currentProgram.statements[this.currentProgram.statements.length - 1];\r\n            stepBefore.stepFinished = false;\r\n        }\r\n\r\n        if (Array.isArray(statement)) {\r\n            for (let st of statement) {\r\n                this.currentProgram.statements.push(st);\r\n                if (st.type == TokenType.return || st.type == TokenType.jumpAlways) {\r\n                    if (this.lastStatement != null) this.lastStatement.stepFinished = false;\r\n                }\r\n                if (st.position != null) {\r\n                    this.lastPosition = st.position;\r\n                } else {\r\n                    st.position = this.lastPosition;\r\n                }\r\n                this.lastStatement = st;\r\n            }\r\n        } else {\r\n            this.currentProgram.statements.push(statement);\r\n            if (statement.type == TokenType.return || statement.type == TokenType.jumpAlways) {\r\n                if (this.lastStatement != null && this.lastStatement.type != TokenType.noOp) this.lastStatement.stepFinished = false;\r\n            }\r\n            if (statement.position != null) {\r\n                this.lastPosition = statement.position;\r\n            } else {\r\n                statement.position = this.lastPosition;\r\n            }\r\n\r\n            this.lastStatement = statement;\r\n        }\r\n    }\r\n\r\n    insertOrPushStatements(statements: Statement | Statement[], pos?: number) {\r\n        if (pos == null && pos == undefined) this.pushStatements(statements);\r\n        else this.insertStatements(pos, statements);\r\n    }\r\n\r\n    removeLastStatement() {\r\n        let lst = this.currentProgram.statements.pop();\r\n        if (this.currentProgram.labelManager != null) {\r\n            this.currentProgram.labelManager.removeNode(lst);\r\n        }\r\n    }\r\n\r\n    initStackFrameNodes: InitStackframeStatement[] = [];\r\n\r\n\r\n    pushNewSymbolTable(beginNewStackframe: boolean, positionFrom: TextPosition, positionTo: TextPosition,\r\n        program?: Program): SymbolTable {\r\n\r\n        let st = new SymbolTable(this.currentSymbolTable, positionFrom, positionTo);\r\n\r\n        this.symbolTableStack.push(this.currentSymbolTable);\r\n\r\n        if (beginNewStackframe) {\r\n            st.beginsNewStackframe = true;\r\n            this.currentSymbolTable.stackframeSize = this.nextFreeRelativeStackPos;\r\n            this.nextFreeRelativeStackPos = 0;\r\n\r\n            if (program != null) {\r\n                let initStackFrameNode: InitStackframeStatement = {\r\n                    type: TokenType.initStackframe,\r\n                    position: positionFrom,\r\n                    reserveForLocalVariables: 0\r\n                }\r\n\r\n                program.statements.push(initStackFrameNode);\r\n                this.initStackFrameNodes.push(initStackFrameNode);\r\n            }\r\n\r\n        }\r\n\r\n        this.currentSymbolTable = st;\r\n\r\n        return st;\r\n\r\n    }\r\n\r\n    popSymbolTable(program?: Program, deleteStepFinishedFlagOnStepBefore: boolean = false): void {\r\n\r\n        let st = this.currentSymbolTable;\r\n        this.currentSymbolTable = this.symbolTableStack.pop();\r\n\r\n        // if v.declarationError != null then variable has been used before initialization.\r\n        st.variableMap.forEach(v => {\r\n            if (v.declarationError != null && v.usedBeforeInitialization) {\r\n                this.errorList.push(v.declarationError);\r\n                v.declarationError = null;\r\n            }\r\n        });\r\n\r\n        // if (!st.beginsNewStackframe && st.variableMap.size == 0 && removeI) {\r\n        //     // empty symbol table => remove it!\r\n        //     if (st.parent != null) {\r\n        //         st.parent.childSymbolTables.pop();\r\n        //     }\r\n        // } else \r\n        {\r\n            // TODO: add length of token\r\n\r\n            if (st.beginsNewStackframe) {\r\n\r\n                st.stackframeSize = this.nextFreeRelativeStackPos;\r\n                this.nextFreeRelativeStackPos = this.currentSymbolTable.stackframeSize;\r\n\r\n                if (program != null) {\r\n                    let initStackframeNode = this.initStackFrameNodes.pop();\r\n                    if (initStackframeNode != null) initStackframeNode.reserveForLocalVariables = st.stackframeSize;\r\n\r\n                    if (program.statements.length > 0 && deleteStepFinishedFlagOnStepBefore) {\r\n                        let statement = program.statements[program.statements.length - 1];\r\n\r\n                        // don't set stepFinished = false in jump-statements\r\n                        // as this could lead to infinity-loop is user sets \"while(true);\" just before program end\r\n                        if ([TokenType.jumpAlways, TokenType.jumpIfTrue, TokenType.jumpIfFalse, TokenType.jumpIfFalseAndLeaveOnStack, TokenType.jumpIfTrueAndLeaveOnStack].indexOf(statement.type) == -1) {\r\n                            program.statements[program.statements.length - 1].stepFinished = false;\r\n                        }\r\n                    }\r\n\r\n                    program.statements.push({\r\n                        type: TokenType.closeStackframe,\r\n                        position: st.positionTo\r\n                    });\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    pushError(text: string, position: TextPosition, errorLevel: ErrorLevel = \"error\", quickFix?: QuickFix) {\r\n        this.errorList.push({\r\n            text: text,\r\n            position: position,\r\n            quickFix: quickFix,\r\n            level: errorLevel\r\n        });\r\n    }\r\n\r\n    openBreakScope() {\r\n        this.breakNodeStack.push([]);\r\n    }\r\n\r\n    openContinueScope() {\r\n        this.continueNodeStack.push([]);\r\n    }\r\n\r\n    pushBreakNode(breakNode: JumpAlwaysStatement) {\r\n        if (this.breakNodeStack.length == 0) {\r\n            this.pushError(\"Eine break-Anweisung ist nur innerhalb einer umgebenden Schleife oder switch-Anweisung sinnvoll.\", breakNode.position);\r\n        } else {\r\n            this.breakNodeStack[this.breakNodeStack.length - 1].push(breakNode);\r\n            this.pushStatements(breakNode);\r\n        }\r\n    }\r\n\r\n    pushContinueNode(continueNode: JumpAlwaysStatement) {\r\n        if (this.continueNodeStack.length == 0) {\r\n            this.pushError(\"Eine continue-Anweisung ist nur innerhalb einer umgebenden Schleife oder switch-Anweisung sinnvoll.\", continueNode.position);\r\n        } else {\r\n            this.continueNodeStack[this.continueNodeStack.length - 1].push(continueNode);\r\n            this.pushStatements(continueNode);\r\n        }\r\n    }\r\n\r\n    closeBreakScope(breakTargetLabel: number, lm: LabelManager) {\r\n        let breakNodes = this.breakNodeStack.pop();\r\n        for (let bn of breakNodes) {\r\n            lm.registerJumpNode(bn, breakTargetLabel);\r\n        }\r\n    }\r\n\r\n    closeContinueScope(continueTargetLabel: number, lm: LabelManager) {\r\n        let continueNodes = this.continueNodeStack.pop();\r\n        for (let bn of continueNodes) {\r\n            lm.registerJumpNode(bn, continueTargetLabel);\r\n        }\r\n    }\r\n\r\n    breakOccured(): boolean {\r\n        return this.breakNodeStack.length > 0 && this.breakNodeStack[this.breakNodeStack.length - 1].length > 0;\r\n    }\r\n\r\n    processNode(node: ASTNode, isLeftSideOfAssignment: boolean = false): StackType {\r\n\r\n        if (node == null) return;\r\n\r\n        switch (node.type) {\r\n            case TokenType.binaryOp:\r\n                return this.processBinaryOp(node);\r\n            case TokenType.unaryOp:\r\n                return this.processUnaryOp(node);\r\n            case TokenType.pushConstant:\r\n                return this.pushConstant(node);\r\n            case TokenType.callMethod:\r\n                return this.callMethod(node);\r\n            case TokenType.identifier:\r\n                {\r\n                    let stackType = this.resolveIdentifier(node);\r\n                    let v = node.variable;\r\n                    if (v != null) {\r\n                        if (isLeftSideOfAssignment) {\r\n                            v.initialized = true;\r\n                            if (!v.usedBeforeInitialization) {\r\n                                v.declarationError = null;\r\n                            }\r\n                        } else {\r\n                            if (v.initialized != null && !v.initialized) {\r\n                                v.usedBeforeInitialization = true;\r\n                                this.pushError(\"Die Variable \" + v.identifier + \" wird hier benutzt bevor sie initialisiert wurde.\", node.position, \"info\");\r\n                            }\r\n                        }\r\n                    }\r\n                    return stackType;\r\n                }\r\n            case TokenType.selectArrayElement:\r\n                return this.selectArrayElement(node);\r\n            case TokenType.incrementDecrementBefore:\r\n            case TokenType.incrementDecrementAfter:\r\n                return this.incrementDecrementBeforeOrAfter(node);\r\n            case TokenType.superConstructorCall:\r\n                return this.superconstructorCall(node);\r\n            case TokenType.constructorCall:\r\n                return this.superconstructorCall(node);\r\n            case TokenType.keywordThis:\r\n                return this.pushThisOrSuper(node, false);\r\n            case TokenType.keywordSuper:\r\n                return this.pushThisOrSuper(node, true);\r\n            case TokenType.pushAttribute:\r\n                return this.pushAttribute(node);\r\n            case TokenType.newObject:\r\n                return this.newObject(node);\r\n            case TokenType.keywordWhile:\r\n                return this.processWhile(node);\r\n            case TokenType.keywordDo:\r\n                return this.processDo(node);\r\n            case TokenType.keywordFor:\r\n                return this.processFor(node);\r\n            case TokenType.forLoopOverCollection:\r\n                return this.processForLoopOverCollection(node);\r\n            case TokenType.keywordIf:\r\n                return this.processIf(node);\r\n            case TokenType.keywordSwitch:\r\n                return this.processSwitch(node);\r\n            case TokenType.keywordReturn:\r\n                return this.processReturn(node);\r\n            case TokenType.localVariableDeclaration:\r\n                return this.localVariableDeclaration(node);\r\n            case TokenType.arrayInitialization:\r\n                return this.processArrayLiteral(node);\r\n            case TokenType.newArray:\r\n                return this.processNewArray(node);\r\n            case TokenType.keywordPrint:\r\n            case TokenType.keywordPrintln:\r\n                return this.processPrint(node);\r\n            case TokenType.castValue:\r\n                return this.processManualCast(node);\r\n            case TokenType.keywordBreak:\r\n                this.pushBreakNode({\r\n                    type: TokenType.jumpAlways,\r\n                    position: node.position\r\n                });\r\n                return null;\r\n            case TokenType.keywordContinue:\r\n                this.pushContinueNode({\r\n                    type: TokenType.jumpAlways,\r\n                    position: node.position\r\n                });\r\n                return null;\r\n            case TokenType.rightBracket:\r\n                let type = this.processNode(node.termInsideBrackets);\r\n                if (type != null && type.type instanceof Klass) this.pushTypePosition(node.position, type.type);\r\n                return type;\r\n            case TokenType.scopeNode:\r\n                this.pushNewSymbolTable(false, node.position, node.positionTo);\r\n\r\n                let withReturnStatement = this.processStatementsInsideBlock(node.statements);\r\n\r\n                this.popSymbolTable();\r\n\r\n                return { type: null, isAssignable: false, withReturnStatement: withReturnStatement };\r\n\r\n        }\r\n\r\n    }\r\n\r\n    processManualCast(node: CastManuallyNode): StackType {\r\n\r\n        let typeFrom1 = this.processNode(node.whatToCast);\r\n\r\n        if (typeFrom1 == null || typeFrom1.type == null) return;\r\n        let typeFrom: Type = typeFrom1.type;\r\n\r\n        if (typeFrom != null && node.castToType != null && node.castToType.resolvedType != null) {\r\n\r\n            let typeTo = node.castToType.resolvedType;\r\n\r\n            if (typeFrom.canCastTo(typeTo)) {\r\n\r\n                this.pushCastToStatement(typeFrom, typeTo, node);\r\n\r\n                return {\r\n                    isAssignable: typeFrom1.isAssignable,\r\n                    type: typeTo\r\n                };\r\n\r\n            }\r\n\r\n            if ((typeFrom instanceof Klass || typeFrom instanceof Interface) && (typeTo instanceof Klass || typeTo instanceof Interface))\r\n\r\n            // if (typeFrom instanceof Klass &&\r\n            //     (typeTo instanceof Klass && !typeFrom.hasAncestorOrIs(typeTo) && typeTo.hasAncestorOrIs(typeFrom)) ||\r\n            //     (typeTo instanceof Interface && !(<Klass>typeFrom).implementsInterface(typeTo))) \r\n            {\r\n\r\n                this.pushStatements({\r\n                    type: TokenType.checkCast,\r\n                    position: node.position,\r\n                    newType: typeTo,\r\n                    stepFinished: false\r\n                });\r\n\r\n                return {\r\n                    isAssignable: typeFrom1.isAssignable,\r\n                    type: typeTo\r\n                };\r\n            }\r\n            else {\r\n                this.pushError(\"Der Datentyp \" + typeFrom.identifier + \" kann (zumindest durch casting) nicht in den Datentyp \" + typeTo.identifier + \" umgewandelt werden.\", node.position);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    pushCastToStatement(typeFrom: Type, typeTo: Type, node: CastManuallyNode) {\r\n        let needsStatement: boolean = typeFrom != typeTo;\r\n\r\n        if (needsStatement) this.pushStatements({\r\n            type: TokenType.castValue,\r\n            position: node.position,\r\n            newType: typeTo\r\n        });\r\n\r\n    }\r\n\r\n    processPrint(node: PrintNode): StackType {\r\n\r\n        let type = node.type == TokenType.keywordPrint ? TokenType.print : TokenType.println;\r\n\r\n        this.module.pushMethodCallPosition(node.position, node.commaPositions, TokenTypeReadable[node.type], node.rightBracketPosition);\r\n\r\n        if (node.text != null) {\r\n\r\n            let type = this.processNode(node.text);\r\n\r\n            if (type != null) {\r\n                if (!this.ensureAutomaticToString(type.type)) {\r\n                    this.pushError(\"Die Methoden print und println erwarten einen Parameter vom Typ String. Gefunden wurde ein Wert vom Typ \" + type.type?.identifier + \".\", node.position);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        let withColor: boolean = false;\r\n\r\n        if (node.color != null) {\r\n\r\n            let type = this.processNode(node.color);\r\n\r\n            if (type != null) {\r\n                if (type.type != stringPrimitiveType && type.type != intPrimitiveType) {\r\n                    if (!this.ensureAutomaticCasting(type.type, stringPrimitiveType)) {\r\n                        this.pushError(\"Die Methoden print und println erwarten als Farbe einen Parameter vom Typ String oder int. Gefunden wurde ein Wert vom Typ \" + type.type.identifier + \".\", node.position);\r\n                    }\r\n                }\r\n            }\r\n\r\n            withColor = true;\r\n        }\r\n\r\n\r\n        this.pushStatements({\r\n            type: type,\r\n            position: node.position,\r\n            empty: (node.text == null),\r\n            stepFinished: true,\r\n            withColor: withColor\r\n        });\r\n\r\n\r\n        return null;\r\n    }\r\n\r\n    processNewArray(node: NewArrayNode): StackType {\r\n\r\n        if (node.initialization != null) {\r\n            return this.processArrayLiteral(node.initialization);\r\n        }\r\n\r\n        // int[7][2][] are 7 arrays each with arrays of length 2 which are empty\r\n\r\n        let dimension = 0;\r\n        for (let ec of node.elementCount) {\r\n            if (ec != null) {\r\n                this.processNode(ec); // push number of elements for this dimension on stack\r\n                dimension++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // for the array above: arrayType is array of array of int; dimension is 2; stack: 7 2\r\n        this.pushStatements({\r\n            type: TokenType.pushEmptyArray,\r\n            position: node.position,\r\n            arrayType: node.arrayType.resolvedType,\r\n            dimension: dimension\r\n        });\r\n\r\n        return {\r\n            isAssignable: false,\r\n            type: node.arrayType.resolvedType\r\n        }\r\n\r\n    }\r\n\r\n\r\n    processArrayLiteral(node: ArrayInitializationNode): StackType {\r\n\r\n        let bes: BeginArrayStatement = {\r\n            type: TokenType.beginArray,\r\n            position: node.position,\r\n            arrayType: node.arrayType.resolvedType\r\n        };\r\n\r\n        this.pushStatements(bes);\r\n\r\n        for (let ain of node.nodes) {\r\n\r\n            // Did an error occur when parsing a constant?\r\n            if (ain == null) {\r\n                continue;\r\n            }\r\n\r\n            if (ain.type == TokenType.arrayInitialization) {\r\n                this.processArrayLiteral(ain);\r\n            } else {\r\n                let sType = this.processNode(ain);\r\n                if (sType == null) {\r\n                    return;\r\n                }\r\n                let targetType = (<ArrayType>node.arrayType.resolvedType).arrayOfType;\r\n                if (!this.ensureAutomaticCasting(sType.type, targetType, ain.position)) {\r\n                    this.pushError(\"Der Datentyp des Terms (\" + sType.type?.identifier + \") kann nicht in den Datentyp \" + targetType?.identifier + \" konvertiert werden.\", ain.position);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this.pushStatements({\r\n            type: TokenType.addToArray,\r\n            position: node.position,\r\n            numberOfElementsToAdd: node.nodes.length\r\n        });\r\n\r\n        return {\r\n            isAssignable: false,\r\n            type: node.arrayType.resolvedType\r\n        }\r\n\r\n    }\r\n\r\n    localVariableDeclaration(node: LocalVariableDeclarationNode, dontWarnWhenNoInitialization: boolean = false): StackType {\r\n\r\n        if (node.variableType.resolvedType == null) {\r\n            node.variableType.resolvedType = nullType; // Make the best out of it...\r\n        }\r\n\r\n        let declareVariableOnHeap = (this.heap != null && this.symbolTableStack.length <= 2);\r\n\r\n        let variable: Variable = {\r\n            identifier: node.identifier,\r\n            stackPos: declareVariableOnHeap ? null : this.nextFreeRelativeStackPos++,\r\n            type: node.variableType.resolvedType,\r\n            usagePositions: new Map(),\r\n            declaration: { module: this.module, position: node.position },\r\n            isFinal: node.isFinal\r\n        };\r\n\r\n        this.pushUsagePosition(node.position, variable);\r\n\r\n        if (declareVariableOnHeap) {\r\n\r\n            this.pushStatements({\r\n                type: TokenType.heapVariableDeclaration,\r\n                position: node.position,\r\n                pushOnTopOfStackForInitialization: node.initialization != null,\r\n                variable: variable,\r\n                stepFinished: node.initialization == null\r\n            });\r\n\r\n            if (this.heap[variable.identifier]) {\r\n                this.pushError(\"Die Variable \" + node.identifier + \" darf im selben Sichtbarkeitsbereich (Scope) nicht mehrmals definiert werden.\", node.position);\r\n            }\r\n\r\n            this.heap[variable.identifier] = variable;\r\n            // only for code completion:\r\n            this.currentSymbolTable.variableMap.set(node.identifier, variable);\r\n\r\n        } else {\r\n\r\n            if (this.currentSymbolTable.variableMap.get(node.identifier)) {\r\n                this.pushError(\"Die Variable \" + node.identifier + \" darf im selben Sichtbarkeitsbereich (Scope) nicht mehrmals definiert werden.\", node.position);\r\n            }\r\n\r\n            this.currentSymbolTable.variableMap.set(node.identifier, variable);\r\n\r\n            this.pushStatements({\r\n                type: TokenType.localVariableDeclaration,\r\n                position: node.position,\r\n                pushOnTopOfStackForInitialization: node.initialization != null,\r\n                variable: variable,\r\n                stepFinished: node.initialization == null\r\n            })\r\n\r\n        }\r\n\r\n        if (node.initialization != null) {\r\n            let initType = this.processNode(node.initialization);\r\n\r\n            if (initType != null) {\r\n\r\n                if (variable.type == varType) {\r\n                    variable.type = initType.type;\r\n                } else if (initType.type == null) {\r\n                    this.pushError(\"Der Typ des Terms auf der rechten Seite des Zuweisungsoperators (=) konnte nicht bestimmt werden.\", node.initialization.position);\r\n                } else\r\n                    if (!this.ensureAutomaticCasting(initType.type, variable.type)) {\r\n                        this.pushError(\"Der Term vom Typ \" + initType.type.identifier + \" kann der Variable vom Typ \" + variable.type.identifier + \" nicht zugeordnet werden.\", node.initialization.position);\r\n                    };\r\n                this.pushStatements({\r\n                    type: TokenType.assignment,\r\n                    position: node.initialization.position,\r\n                    stepFinished: true,\r\n                    leaveValueOnStack: false\r\n                });\r\n            }\r\n\r\n        } else {\r\n            if (variable.type == varType) {\r\n                this.pushError(\"Die Verwendung von var ist nur dann zulässig, wenn eine lokale Variable in einer Anweisung deklariert und initialisiert wird, also z.B. var i = 12;\", node.variableType.position);\r\n            } else {\r\n                let initializer: string = \" = null\";\r\n                if (variable.type == intPrimitiveType) initializer = \" = 0\";\r\n                if (variable.type == doublePrimitiveType) initializer = \" = 0.0\";\r\n                if (variable.type == booleanPrimitiveType) initializer = \" = false\";\r\n                if (variable.type == charPrimitiveType) initializer = \" = ' '\";\r\n                if (variable.type == stringPrimitiveType) initializer = ' = \"\"';\r\n\r\n                variable.declarationError = {\r\n                    text: \"Jede lokale Variable sollte vor ihrer ersten Verwendung initialisiert werden.\",\r\n                    position: node.position,\r\n                    quickFix:\r\n                    {\r\n                        title: initializer + \" ergänzen\",\r\n                        editsProvider: (uri) => {\r\n                            let pos = node.position;\r\n                            return [\r\n                                {\r\n                                    resource: uri,\r\n                                    edit: {\r\n                                        range: { startLineNumber: pos.line, startColumn: pos.column + pos.length, endLineNumber: pos.line, endColumn: pos.column + pos.length },\r\n                                        text: initializer\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    level: \"info\"\r\n                }\r\n\r\n                variable.usedBeforeInitialization = false;\r\n                variable.initialized = dontWarnWhenNoInitialization;\r\n\r\n            }\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    processReturn(node: ReturnNode): StackType {\r\n\r\n        let method = this.currentSymbolTable.method;\r\n\r\n        if (method == null) {\r\n            this.pushError(\"Eine return-Anweisung ist nur im Kontext einer Methode erlaubt.\", node.position);\r\n            return null;\r\n        }\r\n\r\n        if (node.term != null) {\r\n\r\n            if (method.getReturnType() == null) {\r\n                this.pushError(\"Die Methode \" + method.identifier + \" erwartet keinen Rückgabewert.\", node.position);\r\n                return null;\r\n            }\r\n\r\n            let type = this.processNode(node.term);\r\n\r\n            if (type != null) {\r\n                if (!this.ensureAutomaticCasting(type.type, method.getReturnType(), null, node)) {\r\n                    this.pushError(\"Die Methode \" + method.identifier + \" erwartet einen Rückgabewert vom Typ \" + method.getReturnType().identifier + \". Gefunden wurde ein Wert vom Typ \" + type.type.identifier + \".\", node.position);\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n            if (method.getReturnType() != null && method.getReturnType() != voidPrimitiveType) {\r\n                this.pushError(\"Die Methode \" + method.identifier + \" erwartet einen Rückgabewert vom Typ \" + method.getReturnType().identifier + \", daher ist die leere Return-Anweisung (return;) nicht ausreichend.\", node.position);\r\n            }\r\n        }\r\n\r\n        this.pushStatements({\r\n            type: TokenType.return,\r\n            position: node.position,\r\n            copyReturnValueToStackframePos0: node.term != null,\r\n            stepFinished: true,\r\n            leaveThisObjectOnStack: false\r\n        });\r\n\r\n        return { type: null, isAssignable: false, withReturnStatement: true };\r\n\r\n    }\r\n\r\n    processSwitch(node: SwitchNode): StackType {\r\n\r\n        let lm = this.currentProgram.labelManager;\r\n\r\n        this.pushNewSymbolTable(false, node.scopeFrom, node.scopeTo);\r\n\r\n        let ct = this.processNode(node.condition);\r\n        if (ct == null || ct.type == null) return;\r\n\r\n        let conditionType = ct.type;\r\n\r\n        let isString = conditionType == stringPrimitiveType || conditionType == charPrimitiveType;\r\n        let isInteger = conditionType == intPrimitiveType;\r\n        let isEnum = conditionType instanceof Enum;\r\n\r\n        if (!(isString || isInteger || isEnum)) {\r\n            this.pushError(\"Der Unterscheidungsterms einer switch-Anweisung muss den Datentyp String, char, int oder enum besitzen. Dieser hier ist vom Typ \" + conditionType.identifier, node.condition.position);\r\n        }\r\n\r\n        if (isEnum) {\r\n            this.pushStatements({\r\n                type: TokenType.castValue,\r\n                position: node.condition.position,\r\n                newType: intPrimitiveType\r\n            });\r\n        }\r\n\r\n        let switchStatement: JumpOnSwitchStatement = {\r\n            type: TokenType.keywordSwitch,\r\n            position: node.position,\r\n            defaultDestination: null,\r\n            switchType: isString ? \"string\" : \"number\",\r\n            destinationLabels: [],\r\n            destinationMap: {}\r\n        }\r\n\r\n        this.pushStatements(switchStatement);\r\n\r\n        // if value not included in case-statement and no default-statement present:\r\n        let endLabel = lm.insertJumpNode(TokenType.jumpAlways, node.position, this);\r\n\r\n        switchStatement.stepFinished = true;\r\n\r\n        lm.registerSwitchStatement(switchStatement);\r\n\r\n        this.openBreakScope();\r\n\r\n        let withReturnStatement = node.caseNodes.length > 0;\r\n\r\n        for (let caseNode of node.caseNodes) {\r\n\r\n            let isDefault = caseNode.caseTerm == null;\r\n\r\n            if (!isDefault) {\r\n\r\n                let constant: string | number = null;\r\n\r\n                if (isEnum && caseNode.caseTerm.type == TokenType.identifier) {\r\n                    let en: Enum = <Enum>conditionType;\r\n                    let info = en.identifierToInfoMap[caseNode.caseTerm.identifier];\r\n                    if (info == null) {\r\n                        this.pushError(\"Die Enum-Klasse \" + conditionType.identifier + \" hat kein Element mit dem Bezeichner \" + caseNode.caseTerm.identifier, caseNode.position, \"error\");\r\n                    } else {\r\n                        constant = info.ordinal;\r\n                    }\r\n                } else {\r\n                    let caseTerm = this.processNode(caseNode.caseTerm);\r\n\r\n                    let ls = this.lastStatement;\r\n\r\n                    if (ls.type == TokenType.pushConstant) {\r\n                        constant = ls.value;\r\n                    }\r\n\r\n                    if (ls.type == TokenType.pushEnumValue) {\r\n                        constant = ls.enumClass.getOrdinal(ls.valueIdentifier);\r\n                    }\r\n\r\n                    this.removeLastStatement();\r\n                }\r\n\r\n                if (constant == null) {\r\n                    this.pushError(\"Der Term bei case muss konstant sein.\", caseNode.caseTerm.position);\r\n                }\r\n\r\n                let label = lm.markJumpDestination(1);\r\n                let statements = this.generateStatements(caseNode.statements);\r\n\r\n                if (statements?.withReturnStatement == null || !statements.withReturnStatement) {\r\n                    withReturnStatement = false;\r\n                }\r\n\r\n                switchStatement.destinationLabels.push({\r\n                    constant: constant,\r\n                    label: label\r\n                });\r\n            } else {\r\n                // default case\r\n                let label = lm.markJumpDestination(1);\r\n                let statements = this.generateStatements(caseNode.statements);\r\n                if (statements?.withReturnStatement == null || !statements.withReturnStatement) {\r\n                    withReturnStatement = false;\r\n                }\r\n                switchStatement.defaultDestination = label;\r\n            }\r\n\r\n        }\r\n\r\n        if (switchStatement.defaultDestination == null) {\r\n            withReturnStatement = false;\r\n        }\r\n\r\n        lm.markJumpDestination(1, endLabel);\r\n\r\n        this.closeBreakScope(endLabel, lm);\r\n\r\n        this.popSymbolTable(null);\r\n\r\n        return { type: null, isAssignable: false, withReturnStatement: withReturnStatement };\r\n    }\r\n\r\n    processIf(node: IfNode): StackType {\r\n\r\n        let lm = this.currentProgram.labelManager;\r\n\r\n        let conditionType = this.processNode(node.condition);\r\n\r\n        this.checkIfAssignmentInstedOfEqual(node.condition, conditionType?.type);\r\n        if (conditionType != null && conditionType.type != booleanPrimitiveType) {\r\n            this.pushError(\"Der Wert des Terms in Klammern hinter 'if' muss den Datentyp boolean besitzen.\", node.condition.position);\r\n        }\r\n\r\n        let beginElse = lm.insertJumpNode(TokenType.jumpIfFalse, null, this);\r\n\r\n        let withReturnStatementIf = this.generateStatements(node.statementsIfTrue).withReturnStatement;\r\n\r\n        let endOfIf: number;\r\n        if (node.statementsIfFalse != null) {\r\n            endOfIf = lm.insertJumpNode(TokenType.jumpAlways, null, this);\r\n        }\r\n\r\n        lm.markJumpDestination(1, beginElse);\r\n\r\n        let withReturnStatementElse: boolean;\r\n        if (node.statementsIfFalse == null || node.statementsIfFalse.length == 0) {\r\n            withReturnStatementElse = false;\r\n        } else {\r\n            withReturnStatementElse = this.generateStatements(node.statementsIfFalse).withReturnStatement;\r\n        }\r\n\r\n        if (endOfIf != null) {\r\n            lm.markJumpDestination(1, endOfIf);\r\n        }\r\n\r\n        return { type: null, isAssignable: false, withReturnStatement: withReturnStatementIf && withReturnStatementElse };\r\n\r\n    }\r\n\r\n\r\n    processFor(node: ForNode): StackType {\r\n\r\n        let lm = this.currentProgram.labelManager;\r\n\r\n        this.pushNewSymbolTable(false, node.scopeFrom, node.scopeTo);\r\n\r\n        this.generateStatements(node.statementsBefore);\r\n\r\n        let labelBeforeCondition = lm.markJumpDestination(1);\r\n\r\n        let conditionType = this.processNode(node.condition);\r\n\r\n        if (conditionType != null && conditionType.type != booleanPrimitiveType) {\r\n            this.checkIfAssignmentInstedOfEqual(node.condition);\r\n            this.pushError(\"Der Wert der Bedingung muss den Datentyp boolean besitzen.\", node.condition.position);\r\n        }\r\n\r\n        let labelAfterForLoop = lm.insertJumpNode(TokenType.jumpIfFalse, null, this);\r\n\r\n        this.openBreakScope();\r\n        this.openContinueScope();\r\n\r\n        let statements = this.generateStatements(node.statements);\r\n        let withReturnStatement = statements.withReturnStatement;\r\n\r\n        let continueLabelIndex = lm.markJumpDestination(1);\r\n        this.closeContinueScope(continueLabelIndex, lm);\r\n        this.generateStatements(node.statementsAfter);\r\n\r\n        lm.insertJumpNode(TokenType.jumpAlways, statements.endPosition, this, labelBeforeCondition);\r\n\r\n        lm.markJumpDestination(1, labelAfterForLoop);\r\n\r\n        this.closeBreakScope(labelAfterForLoop, lm);\r\n\r\n        this.popSymbolTable();\r\n\r\n        return { type: null, isAssignable: false, withReturnStatement: withReturnStatement };\r\n\r\n    }\r\n\r\n    processForLoopOverCollection(node: ForNodeOverCollecion): StackType {\r\n\r\n        let lm = this.currentProgram.labelManager;\r\n\r\n        this.pushNewSymbolTable(false, node.scopeFrom, node.scopeTo);\r\n\r\n        // reserve position on stack for collection\r\n        let stackPosForCollection = this.nextFreeRelativeStackPos++;\r\n\r\n        // assign value of collection term to collection\r\n        let ct = this.processNode(node.collection);\r\n        if (ct == null) return;\r\n        let collectionType = ct.type;\r\n\r\n        this.pushStatements({\r\n            type: TokenType.popAndStoreIntoVariable,\r\n            position: node.collection.position,\r\n            stackposOfVariable: stackPosForCollection,\r\n            stepFinished: false\r\n        })\r\n\r\n        let collectionElementType: Type;\r\n\r\n        let kind: \"array\" | \"internalList\" | \"group\" | \"userDefinedIterable\" = null;\r\n\r\n        if (collectionType instanceof ArrayType) {\r\n            collectionElementType = collectionType.arrayOfType;\r\n            kind = \"array\";\r\n        } else if (collectionType instanceof Klass && collectionType.getImplementedInterface(\"Iterable\") != null) {\r\n            if (collectionType.module.isSystemModule) {\r\n                kind = \"internalList\";\r\n            } else {\r\n                kind = \"userDefinedIterable\";\r\n            }\r\n            let iterableInterface = collectionType.getImplementedInterface(\"Iterable\");\r\n            if (collectionType.typeVariables.length == 0) {\r\n                collectionElementType = objectType;\r\n            } else {\r\n                collectionElementType = collectionType.typeVariables[0].type;\r\n            }\r\n        } else if (collectionType instanceof Klass && collectionType.identifier == \"Group\") {\r\n            kind = \"group\";\r\n            collectionElementType = this.moduleStore.getType(\"Shape\").type;\r\n        }\r\n        else {\r\n            this.pushError(\"Mit der vereinfachten for-Schleife (for identifier : collectionOrArray) kann man nur über Arrays oder Klassen, die das Interface Iterable implementieren, iterieren.\", node.collection.position);\r\n            return null;\r\n        }\r\n\r\n        let variableType = node.variableType.resolvedType;\r\n        if (variableType == null) return null;\r\n\r\n        let noCastingNeeded = variableType == varType;\r\n        if (noCastingNeeded) {\r\n            variableType = collectionElementType;\r\n            node.variableType.resolvedType = collectionElementType\r\n        } else {\r\n            if (!collectionElementType.canCastTo(variableType)) {\r\n                this.pushError(\"Der ElementTyp \" + collectionElementType.identifier + \" der Collection kann nicht in den Typ \" + variableType.identifier + \" der Iterationsvariable \" + node.variableIdentifier + \" konvertiert werden.\", node.position);\r\n                return null;\r\n            }\r\n        }\r\n\r\n        this.localVariableDeclaration({\r\n            type: TokenType.localVariableDeclaration,\r\n            identifier: node.variableIdentifier,\r\n            initialization: null,\r\n            isFinal: false,\r\n            position: node.variablePosition,\r\n            variableType: node.variableType\r\n        }, true)\r\n\r\n        let variableStackPos = this.nextFreeRelativeStackPos - 1;\r\n        let stackPosOfCounterVariableOrIterator = this.nextFreeRelativeStackPos++;\r\n\r\n        if (kind == \"array\" || kind == \"internalList\" || kind == \"group\") {\r\n            this.pushStatements([{\r\n                type: TokenType.extendedForLoopInit,\r\n                position: node.position,\r\n                stepFinished: false,\r\n                stackPosOfCollection: stackPosForCollection,\r\n                stackPosOfElement: variableStackPos,\r\n                typeOfElement: variableType,\r\n                stackPosOfCounter: stackPosOfCounterVariableOrIterator\r\n            }], true);\r\n        } else {\r\n            // get Iterator from collection\r\n            this.pushStatements([\r\n                {\r\n                    type: TokenType.pushLocalVariableToStack,\r\n                    position: node.position,\r\n                    stackposOfVariable: stackPosOfCounterVariableOrIterator,\r\n                    stepFinished: false\r\n                },\r\n                {\r\n                    type: TokenType.pushLocalVariableToStack,\r\n                    position: node.position,\r\n                    stackposOfVariable: stackPosForCollection,\r\n                    stepFinished: false\r\n                },\r\n                {\r\n                    type: TokenType.callMethod,\r\n                    position: node.position,\r\n                    stepFinished: false,\r\n                    isSuperCall: false,\r\n                    method: collectionType.getMethod(\"iterator\", new Parameterlist([])),\r\n                    stackframeBegin: -1\r\n                },\r\n                {\r\n                    type: TokenType.assignment,\r\n                    position: node.position,\r\n                    stepFinished: true,\r\n                    leaveValueOnStack: false\r\n                }], true);\r\n        }\r\n\r\n        let labelBeforeCondition = lm.markJumpDestination(1);\r\n        let labelAfterForLoop: number;\r\n        let lastStatementBeforeCasting: Statement;\r\n\r\n        if (kind == \"array\" || kind == \"internalList\" || kind == \"group\") {\r\n            let jumpNode: ExtendedForLoopCheckCounterAndGetElement = {\r\n                type: TokenType.extendedForLoopCheckCounterAndGetElement,\r\n                kind: kind,\r\n                position: node.variablePosition,\r\n                stepFinished: true,\r\n                stackPosOfCollection: stackPosForCollection,\r\n                stackPosOfElement: variableStackPos,\r\n                stackPosOfCounter: stackPosOfCounterVariableOrIterator,\r\n                destination: 0 // gets filled in later,\r\n            };\r\n            lastStatementBeforeCasting = jumpNode;\r\n            labelAfterForLoop = lm.registerJumpNode(jumpNode);\r\n\r\n            this.pushStatements(\r\n                jumpNode\r\n            );\r\n\r\n        } else {\r\n            // call collection.hasNext()\r\n            this.pushStatements([\r\n                {\r\n                    type: TokenType.pushLocalVariableToStack,\r\n                    position: node.variablePosition,\r\n                    stackposOfVariable: stackPosForCollection,\r\n                    stepFinished: false\r\n                },\r\n                {\r\n                    type: TokenType.callMethod,\r\n                    position: node.position,\r\n                    stepFinished: false,\r\n                    isSuperCall: false,\r\n                    method: collectionType.getMethod(\"hasNext\", new Parameterlist([])),\r\n                    stackframeBegin: -1\r\n                },\r\n            ]);\r\n            labelAfterForLoop = lm.insertJumpNode(TokenType.jumpIfFalse, null, this);\r\n            // call collection.next() and assign to loop variable\r\n            this.pushStatements([\r\n                {\r\n                    type: TokenType.pushLocalVariableToStack,\r\n                    position: node.position,\r\n                    stackposOfVariable: variableStackPos,\r\n                    stepFinished: false\r\n                },\r\n                {\r\n                    type: TokenType.pushLocalVariableToStack,\r\n                    position: node.position,\r\n                    stackposOfVariable: stackPosForCollection,\r\n                    stepFinished: false\r\n                },\r\n                {\r\n                    type: TokenType.callMethod,\r\n                    position: node.position,\r\n                    stepFinished: false,\r\n                    isSuperCall: false,\r\n                    method: collectionType.getMethod(\"next\", new Parameterlist([])),\r\n                    stackframeBegin: -1\r\n                },\r\n                {\r\n                    type: TokenType.assignment,\r\n                    position: node.position,\r\n                    stepFinished: true,\r\n                    leaveValueOnStack: false\r\n                }]);\r\n        }\r\n\r\n        if (!noCastingNeeded) {\r\n            let oldStatementCount = this.currentProgram.statements.length;\r\n            this.pushStatements({\r\n                type: TokenType.pushLocalVariableToStack,\r\n                position: node.position,\r\n                stackposOfVariable: variableStackPos,\r\n                stepFinished: false\r\n            });\r\n            this.ensureAutomaticCasting(collectionElementType, variableType);\r\n            if (this.currentProgram.statements.length < oldStatementCount + 2) {\r\n                // casting needed no statement, so delete pushLocalVariabletoStack-Statement\r\n                this.currentProgram.statements.pop();\r\n            } else {\r\n                this.pushStatements({\r\n                    type: TokenType.popAndStoreIntoVariable,\r\n                    stackposOfVariable: variableStackPos,\r\n                    position: node.position,\r\n                    stepFinished: true\r\n                });\r\n                lastStatementBeforeCasting.stepFinished = false;\r\n            }\r\n        }\r\n\r\n        this.openBreakScope();\r\n        this.openContinueScope();\r\n\r\n        let statements = this.generateStatements(node.statements);\r\n        let withReturnStatement = statements.withReturnStatement;\r\n\r\n        let continueLabelIndex = lm.markJumpDestination(1);\r\n        this.closeContinueScope(continueLabelIndex, lm);\r\n\r\n        lm.insertJumpNode(TokenType.jumpAlways, statements.endPosition, this, labelBeforeCondition);\r\n\r\n        lm.markJumpDestination(1, labelAfterForLoop);\r\n\r\n        this.closeBreakScope(labelAfterForLoop, lm);\r\n\r\n        this.popSymbolTable();\r\n\r\n        return { type: null, isAssignable: false, withReturnStatement: withReturnStatement };\r\n\r\n    }\r\n\r\n    processWhile(node: WhileNode): StackType {\r\n\r\n        let lm = this.currentProgram.labelManager;\r\n\r\n        this.pushNewSymbolTable(false, node.scopeFrom, node.scopeTo);\r\n\r\n        let conditionBeginLabel = lm.markJumpDestination(1);\r\n\r\n        let conditionType = this.processNode(node.condition);\r\n\r\n        if (conditionType != null && conditionType.type != booleanPrimitiveType) {\r\n            this.checkIfAssignmentInstedOfEqual(node.condition);\r\n            this.pushError(\"Der Wert des Terms in Klammern hinter 'while' muss den Datentyp boolean besitzen.\", node.condition.position);\r\n        }\r\n\r\n        let position = node.position;\r\n\r\n        if (node.condition != null) {\r\n            position = node.condition.position;\r\n        }\r\n\r\n        let afterWhileStatementLabel = lm.insertJumpNode(TokenType.jumpIfFalse, position, this);\r\n\r\n        this.openBreakScope();\r\n        this.openContinueScope();\r\n\r\n        let pc = this.currentProgram.statements.length;\r\n        let statements = this.generateStatements(node.statements);\r\n        let withReturnStatement = statements.withReturnStatement;\r\n\r\n        if (this.currentProgram.statements.length == pc) {\r\n            this.insertNoOp(node.scopeTo, false);\r\n        }\r\n\r\n        this.closeContinueScope(conditionBeginLabel, lm);\r\n        lm.insertJumpNode(TokenType.jumpAlways, statements.endPosition, this, conditionBeginLabel);\r\n\r\n        lm.markJumpDestination(1, afterWhileStatementLabel);\r\n\r\n        this.closeBreakScope(afterWhileStatementLabel, lm);\r\n\r\n        this.popSymbolTable();\r\n\r\n        return { type: null, isAssignable: false, withReturnStatement: withReturnStatement };\r\n\r\n    }\r\n\r\n    insertNoOp(position: TextPosition, stepFinished: boolean) {\r\n        this.pushStatements({\r\n            type: TokenType.noOp,\r\n            position: position,\r\n            stepFinished: stepFinished\r\n        })\r\n    }\r\n\r\n    processDo(node: DoWhileNode): StackType {\r\n\r\n        let lm = this.currentProgram.labelManager;\r\n\r\n        this.pushNewSymbolTable(false, node.scopeFrom, node.scopeTo);\r\n\r\n        let statementsBeginLabel = lm.markJumpDestination(1);\r\n\r\n        this.openBreakScope();\r\n        this.openContinueScope();\r\n\r\n        let pc = this.currentProgram.statements.length;\r\n        let statements = this.generateStatements(node.statements);\r\n        let withReturnStatement = statements.withReturnStatement;\r\n\r\n        if (this.currentProgram.statements.length == pc) {\r\n            this.insertNoOp(node.scopeTo, false);\r\n        }\r\n\r\n        let continueLabelIndex = lm.markJumpDestination(1);\r\n        this.closeContinueScope(continueLabelIndex, lm);\r\n\r\n        let conditionType = this.processNode(node.condition);\r\n\r\n        if (conditionType != null && conditionType.type != booleanPrimitiveType) {\r\n            this.checkIfAssignmentInstedOfEqual(node.condition);\r\n            this.pushError(\"Der Wert des Terms in Klammern hinter 'while' muss den Datentyp boolean besitzen.\", node.condition.position);\r\n        }\r\n\r\n        lm.insertJumpNode(TokenType.jumpIfTrue, statements.endPosition, this, statementsBeginLabel);\r\n\r\n        let endLabel = lm.markJumpDestination(1);\r\n\r\n        this.closeBreakScope(endLabel, lm);\r\n\r\n        this.popSymbolTable();\r\n\r\n        return { type: null, isAssignable: false, withReturnStatement: withReturnStatement };\r\n\r\n    }\r\n\r\n    newObject(node: NewObjectNode): StackType {\r\n\r\n        if (node.classType == null || node.classType.resolvedType == null) return null;\r\n\r\n        let resolvedType: Klass = <Klass>node.classType.resolvedType;\r\n        if (!(resolvedType instanceof Klass)) {\r\n            this.pushError(node.classType.identifier + \" ist keine Klasse, daher kann davon mit 'new' kein Objekt erzeugt werden.\", node.position);\r\n            return null;\r\n        }\r\n\r\n        if (resolvedType.isAbstract) {\r\n            this.pushError(`${node.classType.identifier} ist eine abstrakte Klasse, daher kann von ihr mit 'new' kein Objekt instanziert werden. Falls ${node.classType.identifier} nicht-abstrakte Kindklassen besitzt, könntest Du von DENEN mit new Objekte instanzieren...`, node.position);\r\n            return null;\r\n        }\r\n\r\n        //this.pushTypePosition(node.rightBracketPosition, classType);\r\n\r\n        if (resolvedType.module != this.module && resolvedType.visibility != Visibility.public) {\r\n            this.pushError(\"Die Klasse \" + resolvedType.identifier + \" ist hier nicht sichtbar.\", node.position);\r\n        }\r\n\r\n        let newStatement: NewObjectStatement = {\r\n            type: TokenType.newObject,\r\n            position: node.position,\r\n            class: resolvedType,\r\n            subsequentConstructorCall: false,\r\n            stepFinished: true\r\n        };\r\n\r\n        this.pushStatements(newStatement);\r\n        this.pushTypePosition(node.rightBracketPosition, resolvedType); // to enable code completion when typing a point after the closing bracket\r\n\r\n        let parameterTypes: Type[] = [];\r\n        // let parameterStatements: Statement[][] = [];\r\n        let positionsAfterParameterStatements: number[] = []\r\n        let allStatements = this.currentProgram.statements;\r\n\r\n        if (node.constructorOperands?.length > 0) {\r\n            // for (let p of node.constructorOperands) {\r\n            for (let j = 0; j < node.constructorOperands.length; j++) {\r\n                let p = node.constructorOperands[j];\r\n                // let programPointer = allStatements.length;\r\n                let typeNode = this.processNode(p);\r\n                // parameterStatements.push(allStatements.splice(programPointer, allStatements.length - programPointer));\r\n                positionsAfterParameterStatements.push(allStatements.length);\r\n                if (typeNode == null) {\r\n                    parameterTypes.push(voidPrimitiveType);\r\n                } else {\r\n                    parameterTypes.push(typeNode.type);\r\n                }\r\n            }\r\n        }\r\n\r\n        let upToVisibility = getVisibilityUpTo(resolvedType, this.currentSymbolTable.classContext);\r\n\r\n        // let methods = resolvedType.getMethodsThatFitWithCasting(resolvedType.identifier,\r\n        //     parameterTypes, true, upToVisibility);\r\n\r\n        let methods = resolvedType.getConstructor(parameterTypes, upToVisibility);\r\n\r\n        this.module.pushMethodCallPosition(node.position, node.commaPositions, resolvedType.getMethods(Visibility.public, resolvedType.identifier), node.rightBracketPosition);\r\n\r\n        // if there's no parameterless constructor then return without error:\r\n        if (parameterTypes.length > 0 || resolvedType.hasConstructor()) {\r\n\r\n            if (methods.error != null) {\r\n                this.pushError(methods.error, node.position);\r\n                return { type: resolvedType, isAssignable: false }; // try to continue...\r\n            }\r\n\r\n            let method = methods.methodList[0];\r\n            this.pushUsagePosition(node.position, method);\r\n\r\n            let staticClassContext = null;\r\n            let classContext = this.currentSymbolTable.classContext;\r\n            if (classContext != null && classContext instanceof Klass) {\r\n                staticClassContext = classContext.staticClass;\r\n            }\r\n\r\n            if (method.visibility == Visibility.private && resolvedType != classContext && resolvedType != staticClassContext) {\r\n                let ok = (resolvedType == classContext || resolvedType != staticClassContext || (classContext instanceof StaticClass && resolvedType == classContext.Klass));\r\n                if (!ok) {\r\n                    this.pushError(\"Die Konstruktormethode ist private und daher hier nicht sichtbar.\", node.position);\r\n                }\r\n            }\r\n\r\n            let destType: Type = null;\r\n            for (let i = 0; i < parameterTypes.length; i++) {\r\n                if (i < method.getParameterCount()) {  // possible ellipsis!\r\n                    destType = method.getParameterType(i);\r\n                    if (i == method.getParameterCount() - 1 && method.hasEllipsis()) {\r\n                        destType = (<ArrayType>destType).arrayOfType;\r\n                    }\r\n                }\r\n\r\n                let srcType = parameterTypes[i];\r\n                // for (let st of parameterStatements[i]) {\r\n                //     this.currentProgram.statements.push(st);\r\n                // }\r\n                let programPosition = allStatements.length;\r\n                if (!this.ensureAutomaticCasting(srcType, destType, node.constructorOperands[i].position, node.constructorOperands[i])) {\r\n                    this.pushError(\"Der Wert vom Datentyp \" + srcType.identifier + \" kann nicht als Parameter (Datentyp \" + destType.identifier + \") verwendet werden.\", node.constructorOperands[i].position);\r\n                }\r\n\r\n                if (allStatements.length > programPosition) {\r\n                    let castingStatements = allStatements.splice(programPosition, allStatements.length - programPosition);\r\n                    allStatements.splice(positionsAfterParameterStatements[i], 0, ...castingStatements);\r\n                    this.currentProgram.labelManager.correctPositionsAfterInsert(positionsAfterParameterStatements[i], castingStatements.length);\r\n                }\r\n\r\n            }\r\n\r\n            let stackframeDelta = 0;\r\n            if (method.hasEllipsis()) {\r\n                let ellipsisParameterCount = parameterTypes.length - method.getParameterCount() + 1; // last parameter and subsequent ones\r\n                stackframeDelta = - (ellipsisParameterCount - 1);\r\n                this.pushStatements({\r\n                    type: TokenType.makeEllipsisArray,\r\n                    position: node.constructorOperands[method.getParameterCount() - 1].position,\r\n                    parameterCount: ellipsisParameterCount,\r\n                    stepFinished: false,\r\n                    arrayType: method.getParameter(method.getParameterCount() - 1).type\r\n                })\r\n            }\r\n\r\n\r\n            this.pushStatements({\r\n                type: TokenType.callMethod,\r\n                method: method,\r\n                position: node.position,\r\n                isSuperCall: false,\r\n                stepFinished: resolvedType.getPostConstructorCallbacks() == null,\r\n                stackframeBegin: -(parameterTypes.length + 1 + stackframeDelta) // this-object followed by parameters\r\n            }, true);\r\n\r\n            newStatement.subsequentConstructorCall = true;\r\n            newStatement.stepFinished = false;\r\n\r\n        }\r\n\r\n        if (resolvedType.getPostConstructorCallbacks() != null) {\r\n            this.pushStatements({\r\n                type: TokenType.processPostConstructorCallbacks,\r\n                position: node.position,\r\n                stepFinished: true\r\n            }, true);\r\n        }\r\n\r\n        return { type: resolvedType, isAssignable: false };\r\n\r\n    }\r\n\r\n    pushAttribute(node: SelectArributeNode): StackType {\r\n\r\n        if (node.object == null || node.identifier == null) return null;\r\n\r\n        let ot = this.processNode(node.object);\r\n        if (ot == null) {\r\n            this.pushError('Links vom Punkt steht kein Objekt.', node.position);\r\n            return null;\r\n        }\r\n\r\n        if (!(ot.type instanceof Klass || ot.type instanceof StaticClass || ot.type instanceof ArrayType)) {\r\n            if (ot.type == null) {\r\n                this.pushError('Der Ausdruck links vom Punkt hat kein Attribut ' + node.identifier + \".\", node.position);\r\n            } else {\r\n                this.pushError('Links vom Punkt steht ein Ausdruck vom Datentyp ' + ot.type.identifier + \". Dieser hat kein Attribut \" + node.identifier + \".\", node.position);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        let objectType: Klass | StaticClass | ArrayType = ot.type;\r\n\r\n        if (objectType instanceof Klass) {\r\n\r\n            let visibilityUpTo = getVisibilityUpTo(objectType, this.currentSymbolTable.classContext);\r\n\r\n            let attributeWithError = objectType.getAttribute(node.identifier, visibilityUpTo);\r\n\r\n            let staticAttributeWithError: { attribute: Attribute, error: string, foundButInvisible: boolean, staticClass: StaticClass }\r\n                = null;\r\n            if (attributeWithError.attribute == null) {\r\n                staticAttributeWithError = objectType.staticClass.getAttribute(node.identifier, visibilityUpTo);\r\n            }\r\n\r\n            if (attributeWithError.attribute == null && staticAttributeWithError.attribute == null) {\r\n                if (attributeWithError.foundButInvisible || !staticAttributeWithError.foundButInvisible) {\r\n                    this.pushError(attributeWithError.error, node.position);\r\n                } else {\r\n                    this.pushError(staticAttributeWithError.error, node.position);\r\n                }\r\n                return {\r\n                    type: objectType,\r\n                    isAssignable: false\r\n                }\r\n            } else {\r\n                let attribute: Attribute;\r\n                if (attributeWithError.attribute != null) {\r\n                    this.pushStatements({\r\n                        type: TokenType.pushAttribute,\r\n                        position: node.position,\r\n                        attributeIndex: attributeWithError.attribute.index,\r\n                        attributeIdentifier: attributeWithError.attribute.identifier,\r\n                        useThisObject: false\r\n                    });\r\n                    attribute = attributeWithError.attribute;\r\n                } else {\r\n                    this.pushStatements([{\r\n                        type: TokenType.decreaseStackpointer,\r\n                        position: node.position,\r\n                        popCount: 1\r\n                    }, {\r\n                        type: TokenType.pushStaticAttribute,\r\n                        position: node.position,\r\n                        // klass: (<Klass>objectType).staticClass,\r\n                        klass: staticAttributeWithError.staticClass,\r\n                        attributeIndex: staticAttributeWithError.attribute.index,\r\n                        attributeIdentifier: staticAttributeWithError.attribute.identifier\r\n                    }]);\r\n                    attribute = staticAttributeWithError.attribute;\r\n                }\r\n\r\n                this.pushUsagePosition(node.position, attribute);\r\n\r\n                return {\r\n                    type: attribute.type,\r\n                    isAssignable: !attribute.isFinal\r\n                }\r\n            }\r\n\r\n        } else if (objectType instanceof StaticClass) {\r\n            // Static class\r\n            if (objectType.Klass instanceof Enum) {\r\n                this.removeLastStatement(); // remove push static enum class to stack\r\n\r\n                let enumInfo = objectType.Klass.enumInfoList.find(ei => ei.identifier == node.identifier);\r\n\r\n                if (enumInfo == null) {\r\n                    this.pushError(\"Die enum-Klasse \" + objectType.identifier + \" hat keinen enum-Wert mit dem Bezeichner \" + node.identifier, node.position);\r\n                }\r\n\r\n                this.pushStatements({\r\n                    type: TokenType.pushEnumValue,\r\n                    position: node.position,\r\n                    enumClass: objectType.Klass,\r\n                    valueIdentifier: node.identifier\r\n                });\r\n\r\n                return {\r\n                    type: objectType.Klass,\r\n                    isAssignable: false\r\n                }\r\n\r\n            } else {\r\n                let upToVisibility = getVisibilityUpTo(objectType, this.currentSymbolTable.classContext);\r\n                let staticAttributeWithError = objectType.getAttribute(node.identifier, upToVisibility);\r\n                if (staticAttributeWithError.attribute != null) {\r\n                    // if (staticAttributeWithError.attribute.updateValue != undefined) {\r\n                    //     this.removeLastStatement();\r\n                    //     this.pushStatements({\r\n                    //         type: TokenType.pushStaticAttributeIntrinsic,\r\n                    //         position: node.position,\r\n                    //         attribute: staticAttributeWithError.attribute\r\n                    //     });\r\n                    // } else \r\n                    {\r\n                        this.removeLastStatement();\r\n                        this.pushStatements({\r\n                            type: TokenType.pushStaticAttribute,\r\n                            position: node.position,\r\n                            attributeIndex: staticAttributeWithError.attribute.index,\r\n                            attributeIdentifier: staticAttributeWithError.attribute.identifier,\r\n                            klass: staticAttributeWithError.staticClass\r\n                        });\r\n                        this.pushUsagePosition(node.position, staticAttributeWithError.attribute);\r\n\r\n                    }\r\n                    return {\r\n                        type: staticAttributeWithError.attribute.type,\r\n                        isAssignable: !staticAttributeWithError.attribute.isFinal\r\n                    }\r\n                } else {\r\n                    this.pushError(staticAttributeWithError.error, node.position);\r\n                    return {\r\n                        type: objectType,\r\n                        isAssignable: false\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else {\r\n\r\n            if (node.identifier != \"length\") {\r\n                this.pushError('Der Wert vom Datentyp ' + ot.type.identifier + \" hat kein Attribut \" + node.identifier, node.position);\r\n                return null;\r\n            }\r\n\r\n            this.pushStatements({\r\n                type: TokenType.pushArrayLength,\r\n                position: node.position\r\n            });\r\n\r\n            let element: Attribute = new Attribute(\"length\", intPrimitiveType, null, true, Visibility.public, true, \"Länge des Arrays\");\r\n\r\n            this.module.addIdentifierPosition(node.position, element);\r\n\r\n            return {\r\n                type: intPrimitiveType,\r\n                isAssignable: false\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    pushThisOrSuper(node: ThisNode | SuperNode, isSuper: boolean): StackType {\r\n\r\n        let classContext = this.currentSymbolTable.classContext;\r\n\r\n        if (isSuper && classContext != null) {\r\n            classContext = classContext.baseClass;\r\n        }\r\n\r\n        let methodContext = this.currentSymbolTable.method;\r\n\r\n        if (classContext == null || methodContext == null) {\r\n            this.pushError(\"Das Objekt \" + (isSuper ? \"super\" : \"this\") + \" existiert nur innerhalb einer Methodendeklaration.\", node.position);\r\n            return null;\r\n        } else {\r\n            this.pushStatements({\r\n                type: TokenType.pushLocalVariableToStack,\r\n                position: node.position,\r\n                stackposOfVariable: 0\r\n            })\r\n\r\n            this.pushTypePosition(node.position, classContext);\r\n            return { type: classContext, isAssignable: false, isSuper: isSuper };\r\n        }\r\n\r\n    }\r\n\r\n    superconstructorCall(node: SuperconstructorCallNode | ConstructorCallNode): StackType {\r\n\r\n        let classContext = this.currentSymbolTable.classContext;\r\n\r\n        let isSuperConstructorCall: boolean = node.type == TokenType.superConstructorCall;\r\n\r\n        if (isSuperConstructorCall) {\r\n            if (classContext?.baseClass == null || classContext.baseClass.identifier == \"Object\") {\r\n                this.pushError(\"Die Klasse ist nur Kindklasse der Klasse Object, daher ist der Aufruf des Superkonstruktors nicht möglich.\", node.position);\r\n            }\r\n        }\r\n\r\n        let methodContext = this.currentSymbolTable.method;\r\n\r\n        if (classContext == null || methodContext == null || !methodContext.isConstructor) {\r\n            this.pushError(\"Ein Aufruf des Konstruktors oder des Superkonstructors ist nur innerhalb des Konstruktors einer Klasse möglich.\", node.position);\r\n            return null;\r\n        }\r\n\r\n\r\n        let superclassType: Klass | StaticClass;\r\n\r\n        if (isSuperConstructorCall) {\r\n            superclassType = <Klass>classContext.baseClass;\r\n            if (superclassType instanceof StaticClass) {\r\n                this.pushError(\"Statische Methoden haben keine super-Methodenaufrufe.\", node.position);\r\n                return { type: null, isAssignable: false };\r\n            }\r\n            if (superclassType == null) superclassType = <Klass>this.moduleStore.getType(\"Object\").type;\r\n        } else {\r\n            superclassType = <Klass>classContext;\r\n            if (superclassType instanceof StaticClass) {\r\n                this.pushError(\"Statische Methoden haben keine this-Methodenaufrufe.\", node.position);\r\n                return { type: null, isAssignable: false };\r\n            }\r\n        }\r\n\r\n        // Push this-object to stack:\r\n        this.pushStatements({\r\n            type: TokenType.pushLocalVariableToStack,\r\n            position: node.position,\r\n            stackposOfVariable: 0\r\n        });\r\n\r\n        let parameterTypes: Type[] = [];\r\n\r\n        if (node.operands != null) {\r\n            let errorInOperands: boolean = false;\r\n            for (let p of node.operands) {\r\n                let pt = this.processNode(p);\r\n                if (pt != null) {\r\n                    parameterTypes.push(pt.type);\r\n                } else {\r\n                    errorInOperands = true;\r\n                }\r\n            }\r\n            if (errorInOperands) {\r\n                return { type: stringPrimitiveType, isAssignable: false }; // try to continue...\r\n            }\r\n        }\r\n\r\n        let methods = superclassType.getConstructor(parameterTypes, Visibility.protected);\r\n\r\n        this.module.pushMethodCallPosition(node.position, node.commaPositions, superclassType.getMethods(Visibility.protected, superclassType.identifier),\r\n            node.rightBracketPosition);\r\n\r\n        if (methods.error != null) {\r\n            this.pushError(methods.error, node.position);\r\n            return { type: stringPrimitiveType, isAssignable: false }; // try to continue...\r\n        }\r\n\r\n        let method = methods.methodList[0];\r\n\r\n        this.pushUsagePosition(node.position, method);\r\n\r\n        let stackframeDelta = 0;\r\n        if (method.hasEllipsis()) {\r\n            let ellipsisParameterCount = parameterTypes.length - method.getParameterCount() + 1; // last parameter and subsequent ones\r\n            stackframeDelta = - (ellipsisParameterCount - 1);\r\n            this.pushStatements({\r\n                type: TokenType.makeEllipsisArray,\r\n                position: node.operands[method.getParameterCount() - 1].position,\r\n                parameterCount: ellipsisParameterCount,\r\n                stepFinished: false,\r\n                arrayType: method.getParameter(method.getParameterCount() - 1).type\r\n            })\r\n        }\r\n\r\n        this.pushStatements({\r\n            type: TokenType.callMethod,\r\n            method: method,\r\n            isSuperCall: isSuperConstructorCall,\r\n            position: node.position,\r\n            stackframeBegin: -(parameterTypes.length + 1 + stackframeDelta) // this-object followed by parameters\r\n        });\r\n        // Pabst, 21.10.2020:\r\n        // super method is constructor => returns nothing even if method.getReturnType() is class object\r\n        // return { type: method.getReturnType(), isAssignable: false };\r\n        return { type: null, isAssignable: false };\r\n\r\n    }\r\n\r\n    incrementDecrementBeforeOrAfter(node: IncrementDecrementNode): StackType {\r\n        let type = this.processNode(node.operand);\r\n\r\n        if (type == null) return;\r\n\r\n        if (!type.isAssignable) {\r\n            this.pushError(\"Die Operatoren ++ und -- können nur auf Variablen angewendet werden, nicht auf konstante Werte oder Rückgabewerte von Methoden.\", node.position);\r\n            return type;\r\n        }\r\n\r\n        if (!type.type.canCastTo(floatPrimitiveType)) {\r\n            this.pushError(\"Die Operatoren ++ und -- können nur auf Zahlen angewendet werden, nicht auf Werte des Datentyps \" + type.type.identifier, node.position);\r\n            return type;\r\n        }\r\n\r\n        this.pushStatements({\r\n            type: node.type,\r\n            position: node.position,\r\n            incrementDecrementBy: node.operator == TokenType.doubleMinus ? - 1 : 1\r\n\r\n        });\r\n\r\n        return type;\r\n\r\n    }\r\n\r\n    selectArrayElement(node: SelectArrayElementNode): StackType {\r\n\r\n        let arrayType = this.processNode(node.object); // push array-object \r\n        let indexType = this.processNode(node.index); // push index\r\n\r\n        if (arrayType == null || indexType == null) return;\r\n\r\n        if (!(arrayType.type instanceof ArrayType)) {\r\n            this.pushError(\"Der Typ der Variablen ist kein Array, daher ist [] nicht zulässig. \", node.object.position);\r\n            return null;\r\n        }\r\n\r\n        this.module.addIdentifierPosition({\r\n            line: node.position.line,\r\n            column: node.position.column + node.position.length,\r\n            length: 0  // Module.getTypeAtPosition needs length == 0 here to know that this type-position is not in static context for code completion\r\n        }, arrayType.type.arrayOfType);\r\n\r\n        if (!this.ensureAutomaticCasting(indexType.type, intPrimitiveType)) {\r\n            this.pushError(\"Als Index eines Arrays wird ein ganzzahliger Wert erwartet. Gefunden wurde ein Wert vom Typ \" + indexType.type.identifier + \".\", node.index.position);\r\n            return { type: (<ArrayType>arrayType.type).arrayOfType, isAssignable: arrayType.isAssignable };\r\n        }\r\n\r\n\r\n        this.pushStatements({\r\n            type: TokenType.selectArrayElement,\r\n            position: node.position\r\n        })\r\n\r\n        return { type: (<ArrayType>arrayType.type).arrayOfType, isAssignable: arrayType.isAssignable };\r\n\r\n    }\r\n\r\n    pushTypePosition(position: TextPosition, type: Type) {\r\n        if (position == null) return;\r\n        if (position.length > 0) {\r\n            position = {\r\n                line: position.line,\r\n                column: position.column + position.length,\r\n                length: 0\r\n            }\r\n        }\r\n        this.module.addIdentifierPosition(position, type);\r\n    }\r\n\r\n\r\n\r\n    pushUsagePosition(position: TextPosition, element: Klass | Interface | Method | Attribute | Variable) {\r\n\r\n        this.module.addIdentifierPosition(position, element);\r\n\r\n        if (element instanceof PrimitiveType) {\r\n            return;\r\n        }\r\n\r\n        let positionList: TextPosition[] = element.usagePositions.get(this.module);\r\n        if (positionList == null) {\r\n            positionList = [];\r\n            element.usagePositions.set(this.module, positionList);\r\n        }\r\n\r\n        positionList.push(position);\r\n\r\n    }\r\n\r\n    resolveIdentifier(node: IdentifierNode): StackType {\r\n\r\n        if (node.identifier == null) return null;\r\n\r\n        let variable = this.findLocalVariable(node.identifier);\r\n        if (variable != null) {\r\n            this.pushStatements({\r\n                type: TokenType.pushLocalVariableToStack,\r\n                position: node.position,\r\n                stackposOfVariable: variable.stackPos\r\n            })\r\n\r\n            this.pushUsagePosition(node.position, variable);\r\n            node.variable = variable;\r\n\r\n            return { type: variable.type, isAssignable: !variable.isFinal };\r\n        }\r\n\r\n        if (this.heap != null) {\r\n            let variable = this.heap[node.identifier];\r\n            if (variable != null) {\r\n                this.pushStatements({\r\n                    type: TokenType.pushFromHeapToStack,\r\n                    position: node.position,\r\n                    identifier: node.identifier\r\n                })\r\n\r\n                this.pushUsagePosition(node.position, variable);\r\n                node.variable = variable;\r\n\r\n\r\n                return { type: variable.type, isAssignable: !variable.isFinal };\r\n            }\r\n\r\n        }\r\n\r\n        let attribute = this.findAttribute(node.identifier, node.position);\r\n        if (attribute != null) {\r\n\r\n            if (attribute.isStatic) {\r\n                let cc = this.currentSymbolTable.classContext;\r\n                let scc = (cc instanceof StaticClass) ? cc : cc.staticClass;\r\n\r\n                while (scc != null && scc.attributes.indexOf(attribute) == -1) {\r\n                    scc = scc.baseClass;\r\n                }\r\n\r\n                this.pushStatements({\r\n                    type: TokenType.pushStaticAttribute,\r\n                    position: node.position,\r\n                    klass: scc,\r\n                    attributeIndex: attribute.index,\r\n                    attributeIdentifier: attribute.identifier\r\n                });\r\n            } else {\r\n                this.pushStatements({\r\n                    type: TokenType.pushAttribute,\r\n                    position: node.position,\r\n                    attributeIndex: attribute.index,\r\n                    attributeIdentifier: attribute.identifier,\r\n                    useThisObject: true\r\n                });\r\n                node.attribute = attribute;\r\n            }\r\n\r\n\r\n            this.pushUsagePosition(node.position, attribute);\r\n\r\n            return { type: attribute.type, isAssignable: !attribute.isFinal };\r\n        }\r\n\r\n        let klassModule = this.moduleStore.getType(node.identifier);\r\n        if (klassModule != null) {\r\n            let klass = klassModule.type;\r\n            if (!(klass instanceof Klass || klass instanceof Interface)) {\r\n                this.pushError(\"Der Typ \" + klass.identifier + \" hat keine statischen Attribute/Methoden.\", node.position);\r\n            } else {\r\n                this.pushStatements({\r\n                    type: TokenType.pushStaticClassObject,\r\n                    position: node.position,\r\n                    klass: klass\r\n                });\r\n\r\n                this.pushUsagePosition(node.position, klass);\r\n\r\n                return {\r\n                    type: klass instanceof Klass ? klass.staticClass : klass,\r\n                    isAssignable: false\r\n                }\r\n            }\r\n\r\n            return {\r\n                type: klass,\r\n                isAssignable: false\r\n            }\r\n        }\r\n\r\n        this.pushError(\"Der Bezeichner \" + node.identifier + \" ist hier nicht bekannt.\", node.position);\r\n\r\n    }\r\n\r\n    findLocalVariable(identifier: string): Variable {\r\n        let st = this.currentSymbolTable;\r\n\r\n        while (st != null) {\r\n\r\n            let variable = st.variableMap.get(identifier);\r\n\r\n            if (variable != null && variable.stackPos != null) {\r\n                return variable;\r\n            }\r\n\r\n            st = st.parent;\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    findAttribute(identifier: string, position: TextPosition): Attribute {\r\n        let classContext = this.currentSymbolTable.classContext;\r\n        if (classContext == null) {\r\n            return null;\r\n        }\r\n\r\n        let attribute = classContext.getAttribute(identifier, Visibility.private);\r\n        if (attribute.attribute != null) return attribute.attribute;\r\n\r\n        if (classContext instanceof Klass) {\r\n            let staticAttribute = classContext.staticClass.getAttribute(identifier, Visibility.private);\r\n            if (staticAttribute.attribute != null) return staticAttribute.attribute;\r\n        }\r\n\r\n        // this.pushError(attribute.error, position);\r\n\r\n        return null;\r\n    }\r\n\r\n    callMethod(node: MethodcallNode): StackType {\r\n\r\n        let objectNode: StackType = null;\r\n\r\n        if (node.object == null) {\r\n\r\n            // call method of this-class?\r\n\r\n            let thisClass = this.currentSymbolTable.classContext;\r\n            if (thisClass != null) {\r\n\r\n                this.pushStatements({\r\n                    type: TokenType.pushLocalVariableToStack,\r\n                    position: node.position,\r\n                    stackposOfVariable: 0\r\n                });\r\n\r\n                objectNode = {\r\n                    type: thisClass,\r\n                    isAssignable: false\r\n                }\r\n\r\n            } else {\r\n                this.pushError(\"Ein Methodenaufruf (hier: \" + node.identifier +\r\n                    \") ohne Punktschreibweise ist nur innerhalb anderer Methoden möglich.\", node.position);\r\n                return null;\r\n            }\r\n\r\n        } else {\r\n            objectNode = this.processNode(node.object);\r\n        }\r\n\r\n        if (objectNode == null) return null;\r\n\r\n        if (!(\r\n            (objectNode.type instanceof Klass) || (objectNode.type instanceof StaticClass) ||\r\n            (objectNode.type instanceof Interface && (node.object[\"variable\"] != null || node.object[\"attribute\"] != null || node.object[\"termInsideBrackets\"] != null)) || (objectNode.type instanceof Enum))) {\r\n\r\n            if (objectNode.type == null) {\r\n                this.pushError(\"Werte dieses Datentyps besitzen keine Methoden.\", node.position);\r\n            } else {\r\n                if (objectNode.type instanceof Interface) {\r\n                    this.pushError('Methodendefinitionen eines Interfaces können nicht statisch aufgerufen werden.', node.position);\r\n                } else {\r\n                    this.pushError('Werte des Datentyps ' + objectNode.type.identifier + \" besitzen keine Methoden.\", node.position);\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        let objectType: Klass | StaticClass | Interface = <any>objectNode.type;\r\n\r\n        let posBeforeParameterEvaluation = this.currentProgram.statements.length;\r\n\r\n        let parameterTypes: Type[] = [];\r\n        // let parameterStatements: Statement[][] = [];\r\n        let positionsAfterParameterStatements: number[] = []\r\n\r\n        let allStatements = this.currentProgram.statements;\r\n        if (node.operands != null) {\r\n            // for (let p of node.operands) {\r\n            for (let j = 0; j < node.operands.length; j++) {\r\n                let p = node.operands[j];\r\n                // let programPointer = allStatements.length;\r\n                let typeNode = this.processNode(p);\r\n                // parameterStatements.push(allStatements.splice(programPointer, allStatements.length - programPointer));\r\n                positionsAfterParameterStatements.push(allStatements.length);\r\n                if (typeNode == null) {\r\n                    parameterTypes.push(voidPrimitiveType);\r\n                } else {\r\n                    parameterTypes.push(typeNode.type);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        let methods: { error: string, methodList: Method[] };\r\n        if (objectType instanceof Interface) {\r\n            methods = objectType.getMethodsThatFitWithCasting(node.identifier,\r\n                parameterTypes, false);\r\n        } else {\r\n            let upToVisibility = getVisibilityUpTo(objectType, this.currentSymbolTable.classContext);\r\n\r\n            methods = objectType.getMethodsThatFitWithCasting(node.identifier,\r\n                parameterTypes, false, upToVisibility);\r\n\r\n        }\r\n\r\n        this.module.pushMethodCallPosition(node.position, node.commaPositions, objectType.getMethods(Visibility.private, node.identifier), node.rightBracketPosition);\r\n\r\n        if (methods.error != null) {\r\n            this.pushError(methods.error, node.position);\r\n            return { type: stringPrimitiveType, isAssignable: false }; // try to continue...\r\n        }\r\n\r\n        let method = methods.methodList[0];\r\n\r\n        this.pushUsagePosition(node.position, method);\r\n\r\n        // You CAN call a static method on a object..., so:\r\n        if (method.isStatic && objectType instanceof Klass && objectType.identifier != \"PrintStream\") {\r\n            this.pushError(\"Es ist kein guter Programmierstil, statische Methoden einer Klasse mithilfe eines Objekts aufzurufen. Besser wäre hier \" + objectType.identifier + \".\" + method.identifier + \"(...).\", node.position, \"info\");\r\n            this.insertStatements(posBeforeParameterEvaluation, [{\r\n                type: TokenType.decreaseStackpointer,\r\n                position: node.position,\r\n                popCount: 1\r\n            },\r\n            {\r\n                type: TokenType.pushStaticClassObject,\r\n                position: node.position,\r\n                klass: objectType\r\n            }\r\n            ]);\r\n        }\r\n\r\n        let destType: Type = null;\r\n        for (let i = 0; i < parameterTypes.length; i++) {\r\n            if (i < method.getParameterCount()) {  // possible ellipsis!\r\n                destType = method.getParameterType(i);\r\n                if (i == method.getParameterCount() - 1 && method.hasEllipsis()) {\r\n                    destType = (<ArrayType>destType).arrayOfType;\r\n                }\r\n            }\r\n\r\n            // Marker 1\r\n            let srcType = parameterTypes[i];\r\n            // for (let st of parameterStatements[i]) {\r\n            //     this.currentProgram.statements.push(st);\r\n            // }\r\n            let programPosition = allStatements.length;\r\n\r\n            if (!this.ensureAutomaticCasting(srcType, destType, node.operands[i].position, node.operands[i])) {\r\n                this.pushError(\"Der Wert vom Datentyp \" + srcType.identifier + \" kann nicht als Parameter (Datentyp \" + destType.identifier + \") verwendet werden.\", node.operands[i].position);\r\n            }\r\n\r\n            if (allStatements.length > programPosition) {\r\n                let castingStatements = allStatements.splice(programPosition, allStatements.length - programPosition);\r\n                allStatements.splice(positionsAfterParameterStatements[i], 0, ...castingStatements);\r\n                this.currentProgram.labelManager.correctPositionsAfterInsert(positionsAfterParameterStatements[i], castingStatements.length);\r\n            }\r\n\r\n\r\n            // if (srcType instanceof PrimitiveType && destType instanceof PrimitiveType) {\r\n            //     if (srcType.getCastInformation(destType).needsStatement) {\r\n            //         this.pushStatements({\r\n            //             type: TokenType.castValue,\r\n            //             position: null,\r\n            //             newType: destType,\r\n            //             stackPosRelative: -parameterTypes.length + 1 + i\r\n            //         });\r\n            //     }\r\n            // }\r\n\r\n        }\r\n\r\n        let stackframeDelta = 0;\r\n        if (method.hasEllipsis()) {\r\n            let ellipsisParameterCount = parameterTypes.length - method.getParameterCount() + 1; // last parameter and subsequent ones\r\n            stackframeDelta = - (ellipsisParameterCount - 1);\r\n            this.pushStatements({\r\n                type: TokenType.makeEllipsisArray,\r\n                position: node.operands[method.getParameterCount() - 1].position,\r\n                parameterCount: ellipsisParameterCount,\r\n                stepFinished: false,\r\n                arrayType: method.getParameter(method.getParameterCount() - 1).type\r\n            })\r\n        }\r\n\r\n        if (method.visibility != Visibility.public) {\r\n\r\n            let visible = true;\r\n            let classContext = this.currentSymbolTable.classContext;\r\n            if (classContext == null) {\r\n                visible = false;\r\n            } else {\r\n                if (classContext != objectType &&\r\n                    !(classContext instanceof Klass && classContext.implements.indexOf(<Interface>objectType) > 0)) {\r\n                    if (method.visibility == Visibility.private) {\r\n                        visible = false;\r\n                    } else {\r\n                        visible = classContext.hasAncestorOrIs(<Klass | StaticClass>objectType);\r\n                    }\r\n                }\r\n            }\r\n            if (!visible) {\r\n                this.pushError(\"Die Methode \" + method.identifier + \" ist an dieser Stelle des Programms nicht sichtbar.\", node.position);\r\n            }\r\n        }\r\n\r\n        let isSystemMethod: boolean = false;\r\n        if (method.isStatic && objectNode.type != null &&\r\n            (objectNode.type instanceof StaticClass)) {\r\n            let classIdentifier = objectNode.type.Klass.identifier;\r\n\r\n            switch (classIdentifier) {\r\n                case \"Input\":\r\n                    this.pushStatements({\r\n                        type: TokenType.callInputMethod,\r\n                        method: method,\r\n                        position: node.position,\r\n                        stepFinished: true,\r\n                        stackframeBegin: -(parameterTypes.length + 1 + stackframeDelta) // this-object followed by parameters\r\n                    });\r\n                    isSystemMethod = true;\r\n                    break;\r\n                case \"SystemTools\":\r\n                case \"Robot\":\r\n                    if ([\"pause\", \"warten\"].indexOf(method.identifier) >= 0) {\r\n                        this.pushStatements([{\r\n                            type: TokenType.setPauseDuration,\r\n                            position: node.position,\r\n                            stepFinished: true\r\n                        }, {\r\n                            type: TokenType.pause,\r\n                            position: node.position,\r\n                            stepFinished: true\r\n                        }\r\n                        ]);\r\n                        isSystemMethod = true;\r\n                    }\r\n                    break;\r\n            }\r\n\r\n        }\r\n\r\n        if (!isSystemMethod) {\r\n            this.pushStatements({\r\n                type: TokenType.callMethod,\r\n                method: method,\r\n                position: node.position,\r\n                isSuperCall: objectNode.isSuper == null ? false : objectNode.isSuper,\r\n                stepFinished: true,\r\n                stackframeBegin: -(parameterTypes.length + 1 + stackframeDelta) // this-object followed by parameters\r\n            });\r\n        }\r\n\r\n\r\n\r\n        this.pushTypePosition(node.rightBracketPosition, method.getReturnType());\r\n\r\n        return { type: method.getReturnType(), isAssignable: false };\r\n\r\n    }\r\n\r\n    pushConstant(node: ConstantNode): StackType {\r\n\r\n        let type: Type;\r\n\r\n        switch (node.constantType) {\r\n            case TokenType.integerConstant:\r\n                type = intPrimitiveType;\r\n                break;\r\n            case TokenType.booleanConstant:\r\n                type = booleanPrimitiveType;\r\n                break;\r\n            case TokenType.floatingPointConstant:\r\n                type = floatPrimitiveType;\r\n                break;\r\n            case TokenType.stringConstant:\r\n                type = stringPrimitiveType;\r\n                this.pushTypePosition(node.position, type);\r\n                break;\r\n            case TokenType.charConstant:\r\n                type = charPrimitiveType;\r\n                break;\r\n            case TokenType.keywordNull:\r\n                type = nullType\r\n                break;\r\n        }\r\n\r\n        this.pushStatements({\r\n            type: TokenType.pushConstant,\r\n            dataType: type,\r\n            position: node.position,\r\n            value: node.constant\r\n        })\r\n\r\n        return { type: type, isAssignable: false };\r\n\r\n    }\r\n\r\n    processBinaryOp(node: BinaryOpNode): StackType {\r\n\r\n        let isAssignment = CodeGenerator.assignmentOperators.indexOf(node.operator) >= 0;\r\n\r\n        if (node.operator == TokenType.ternaryOperator) {\r\n            return this.processTernaryOperator(node);\r\n        }\r\n\r\n        let leftType = this.processNode(node.firstOperand, isAssignment);\r\n\r\n        let programPosAfterLeftOpoerand = this.currentProgram.statements.length;\r\n\r\n        let lazyEvaluationDest = null;\r\n        if (node.operator == TokenType.and) {\r\n            lazyEvaluationDest = this.currentProgram.labelManager.insertJumpNode(TokenType.jumpIfFalseAndLeaveOnStack, node.firstOperand.position, this);\r\n        } else if (node.operator == TokenType.or) {\r\n            lazyEvaluationDest = this.currentProgram.labelManager.insertJumpNode(TokenType.jumpIfTrueAndLeaveOnStack, node.firstOperand.position, this);\r\n        }\r\n\r\n        let rightType = this.processNode(node.secondOperand);\r\n\r\n        if (leftType == null || leftType.type == null || rightType == null || rightType.type == null) return null;\r\n\r\n        let convertedLeftType = leftType.type;\r\n\r\n        if (isAssignment) {\r\n            if (!this.ensureAutomaticCasting(rightType.type, leftType.type, node.position, node.firstOperand)) {\r\n                this.pushError(\"Der Wert vom Datentyp \" + rightType.type.identifier + \" auf der rechten Seite kann der Variablen auf der linken Seite (Datentyp \" + leftType.type.identifier + \") nicht zugewiesen werden.\", node.position);\r\n                return leftType;\r\n            }\r\n\r\n            if (!leftType.isAssignable) {\r\n                this.pushError(\"Dem Term/der Variablen auf der linken Seite des Zuweisungsoperators (=) kann kein Wert zugewiesen werden.\", node.position);\r\n            }\r\n\r\n            let statement: AssignmentStatement = {\r\n                //@ts-ignore\r\n                type: node.operator,\r\n                position: node.position,\r\n                stepFinished: true,\r\n                leaveValueOnStack: true\r\n            };\r\n\r\n            this.pushStatements(statement);\r\n\r\n\r\n            return leftType;\r\n\r\n        } else {\r\n\r\n            if (node.firstOperand.type == TokenType.identifier && node.firstOperand.variable != null) {\r\n                let v = node.firstOperand.variable;\r\n                if (v.initialized != null && !v.initialized) {\r\n                    v.usedBeforeInitialization = true;\r\n                    this.pushError(\"Die Variable \" + v.identifier + \" wird hier benutzt bevor sie initialisiert wurde.\", node.position, \"info\");\r\n                }\r\n            }\r\n\r\n            let resultType = leftType.type.getResultType(node.operator, rightType.type);\r\n\r\n            let unboxableLeft = leftType.type[\"unboxableAs\"];\r\n            let unboxableRight = rightType.type[\"unboxableAs\"];\r\n\r\n\r\n            if (resultType == null && node.operator == TokenType.plus) {\r\n                if (rightType.type == stringPrimitiveType) {\r\n                    if (this.ensureAutomaticToString(leftType.type, programPosAfterLeftOpoerand, node.firstOperand.position)) {\r\n                        resultType = stringPrimitiveType;\r\n                        convertedLeftType = stringPrimitiveType;\r\n                    }\r\n                } else if (leftType.type == stringPrimitiveType) {\r\n                    if (this.ensureAutomaticToString(rightType.type, undefined, node.firstOperand.position)) {\r\n                        resultType = stringPrimitiveType;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (resultType == null && (unboxableLeft != null || unboxableRight != null)) {\r\n                let leftTypes: Type[] = unboxableLeft == null ? [leftType.type] : unboxableLeft;\r\n                let rightTypes: Type[] = unboxableRight == null ? [rightType.type] : unboxableRight;\r\n\r\n                for (let lt of leftTypes) {\r\n                    for (let rt of rightTypes) {\r\n                        resultType = lt.getResultType(node.operator, rt);\r\n                        if (resultType != null) {\r\n                            this.insertStatements(programPosAfterLeftOpoerand, {\r\n                                type: TokenType.castValue,\r\n                                position: node.firstOperand.position,\r\n                                newType: lt\r\n                            });\r\n                            this.pushStatements({\r\n                                type: TokenType.castValue,\r\n                                position: node.secondOperand.position,\r\n                                newType: rt\r\n                            });\r\n                            convertedLeftType = lt;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (resultType != null) break;\r\n                }\r\n            }\r\n\r\n\r\n            if (node.operator in [TokenType.and, TokenType.or]) {\r\n                this.checkIfAssignmentInstedOfEqual(node.firstOperand);\r\n                this.checkIfAssignmentInstedOfEqual(node.secondOperand);\r\n            }\r\n\r\n            if (resultType == null) {\r\n                let bitOperators = [TokenType.ampersand, TokenType.OR];\r\n                let booleanOperators = [\"&& (boolescher UND-Operator)\", \"|| (boolescher ODER-Operator)\"];\r\n                let betterOperators = [\"& &\", \"||\"];\r\n                let opIndex = bitOperators.indexOf(node.operator);\r\n                if (opIndex >= 0 && leftType.type == booleanPrimitiveType && rightType.type == booleanPrimitiveType) {\r\n                    this.pushError(\"Die Operation \" + TokenTypeReadable[node.operator] + \" ist für die Operanden der Typen \" + leftType.type.identifier + \" und \" + rightType.type.identifier + \" nicht definiert. Du meintest wahrscheinlich den Operator \" + booleanOperators[opIndex] + \".\", node.position, \"error\",\r\n                        {\r\n                            title: \"Operator \" + betterOperators[opIndex] + \" verwenden statt \" + TokenTypeReadable[node.operator],\r\n                            editsProvider: (uri) => {\r\n                                return [\r\n                                    {\r\n                                        resource: uri,\r\n                                        edit: {\r\n                                            range: { startLineNumber: node.position.line, startColumn: node.position.column, endLineNumber: node.position.line, endColumn: node.position.column },\r\n                                            text: TokenTypeReadable[node.operator]\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            }\r\n\r\n                        });\r\n                } else {\r\n                    this.pushError(\"Die Operation \" + TokenTypeReadable[node.operator] + \" ist für die Operanden der Typen \" + leftType.type.identifier + \" und \" + rightType.type.identifier + \" nicht definiert.\", node.position);\r\n                }\r\n                return leftType;\r\n            }\r\n\r\n\r\n            this.pushStatements({\r\n                type: TokenType.binaryOp,\r\n                leftType: convertedLeftType,\r\n                operator: node.operator,\r\n                position: node.position\r\n            });\r\n\r\n            if (lazyEvaluationDest != null) {\r\n                this.currentProgram.labelManager.markJumpDestination(1, lazyEvaluationDest);\r\n            }\r\n\r\n            return { type: resultType, isAssignable: false };\r\n        }\r\n\r\n\r\n    }\r\n\r\n    processTernaryOperator(node: BinaryOpNode): StackType {\r\n\r\n        let leftType = this.processNode(node.firstOperand);\r\n\r\n        if (leftType == null) return;\r\n\r\n        if (this.ensureAutomaticCasting(leftType.type, booleanPrimitiveType, null, node.firstOperand)) {\r\n\r\n            let secondOperand = node.secondOperand;\r\n            if (secondOperand != null) {\r\n                if (secondOperand.type != TokenType.binaryOp || secondOperand.operator != TokenType.colon) {\r\n                    this.pushError(\"Auf den Fragezeichenoperator müssen - mit Doppelpunkt getrennt - zwei Alternativterme folgen.\", node.position);\r\n                } else {\r\n                    let lm = this.currentProgram.labelManager;\r\n                    let variantFalseLabel = lm.insertJumpNode(TokenType.jumpIfFalse, node.position, this);\r\n                    let firstType = this.processNode(secondOperand.firstOperand);\r\n\r\n                    let endLabel = lm.insertJumpNode(TokenType.jumpAlways, secondOperand.firstOperand.position, this);\r\n                    lm.markJumpDestination(1, variantFalseLabel);\r\n                    let secondType = this.processNode(secondOperand.secondOperand);\r\n                    lm.markJumpDestination(1, endLabel);\r\n\r\n                    let type = firstType.type;\r\n                    if (secondType != null && type != secondType.type && type.canCastTo(secondType.type)) {\r\n                        type = secondType.type;\r\n                    }\r\n\r\n                    return {\r\n                        type: type,\r\n                        isAssignable: false\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    processUnaryOp(node: UnaryOpNode): StackType {\r\n        let leftType = this.processNode(node.operand);\r\n\r\n        if (leftType == null || leftType.type == null) return;\r\n\r\n        if (node.operator == TokenType.minus) {\r\n            if (!leftType.type.canCastTo(floatPrimitiveType)) {\r\n                this.pushError(\"Der Operator - ist für den Typ \" + leftType.type.identifier + \" nicht definiert.\", node.position);\r\n                return leftType;\r\n            }\r\n\r\n        }\r\n\r\n        if (node.operator == TokenType.not) {\r\n            if (!(leftType.type == booleanPrimitiveType)) {\r\n                this.checkIfAssignmentInstedOfEqual(node.operand);\r\n                this.pushError(\"Der Operator ! ist für den Typ \" + leftType.type.identifier + \" nicht definiert.\", node.position);\r\n                return leftType;\r\n            }\r\n\r\n        }\r\n\r\n        this.pushStatements({\r\n            type: TokenType.unaryOp,\r\n            operator: node.operator,\r\n            position: node.position\r\n        });\r\n\r\n        return leftType;\r\n    }\r\n\r\n}","import { Error, QuickFix, ErrorLevel } from \"../lexer/Lexer.js\";\r\nimport { TextPosition, Token, TokenList, TokenType, TokenTypeReadable } from \"../lexer/Token.js\";\r\nimport { Visibility, Klass } from \"../types/Class.js\";\r\nimport { ArrayInitializationNode, ASTNode, AttributeDeclarationNode, MethodDeclarationNode, NewArrayNode, ParameterNode, TermNode, TypeNode, EnumValueNode, SwitchNode, SwitchCaseNode, ConstantNode, BracketsNode, ScopeNode, TypeParameterNode, LocalVariableDeclarationNode } from \"./AST.js\";\r\nimport { Module } from \"./Module.js\";\r\nimport { stringPrimitiveType, intPrimitiveType, charPrimitiveType, TokenTypeToDataTypeMap, voidPrimitiveType } from \"../types/PrimitiveTypes.js\";\r\nimport { Enum } from \"../types/Enum.js\";\r\nimport { PrimitiveType, Type } from \"../types/Types.js\";\r\n\r\ntype ASTNodes = ASTNode[];\r\n\r\nexport class Parser {\r\n\r\n    static assignmentOperators = [TokenType.assignment, TokenType.plusAssignment, TokenType.minusAssignment, \r\n        TokenType.multiplicationAssignment, TokenType.divisionAssignment, TokenType.moduloAssignment, \r\n        TokenType.ANDAssigment, TokenType.XORAssigment, TokenType.ORAssigment, \r\n        TokenType.shiftLeftAssigment, TokenType.shiftRightAssigment, TokenType.shiftRightUnsignedAssigment];\r\n\r\n    static operatorPrecedence: TokenType[][] = [Parser.assignmentOperators,\r\n    [TokenType.ternaryOperator], [TokenType.colon],\r\n\r\n    [TokenType.or], [TokenType.and], [TokenType.OR], [TokenType.XOR], [TokenType.ampersand],\r\n    [TokenType.equal, TokenType.notEqual],\r\n    [TokenType.keywordInstanceof, TokenType.lower, TokenType.lowerOrEqual, TokenType.greater, TokenType.greaterOrEqual],\r\n    [TokenType.shiftLeft, TokenType.shiftRight, TokenType.shiftRightUnsigned],\r\n\r\n    // [TokenType.or], [TokenType.and],\r\n    // [TokenType.keywordInstanceof, TokenType.lower, TokenType.lowerOrEqual, TokenType.greater, TokenType.greaterOrEqual, TokenType.equal, TokenType.notEqual],\r\n    \r\n    [TokenType.plus, TokenType.minus], [TokenType.multiplication, TokenType.division, TokenType.modulo]\r\n    ];\r\n\r\n    static TokenTypeToVisibilityMap = {\r\n        [TokenType.keywordPublic]: Visibility.public,\r\n        [TokenType.keywordPrivate]: Visibility.private,\r\n        [TokenType.keywordProtected]: Visibility.protected\r\n    };\r\n\r\n    static forwardToInsideClass = [TokenType.keywordPublic, TokenType.keywordPrivate, TokenType.keywordProtected, TokenType.keywordVoid,\r\n    TokenType.identifier, TokenType.rightCurlyBracket, TokenType.keywordStatic, TokenType.keywordAbstract,\r\n    TokenType.keywordClass, TokenType.keywordEnum, TokenType.keywordInterface];\r\n\r\n    module: Module;\r\n\r\n    pos: number;\r\n    tokenList: TokenList;\r\n\r\n    errorList: Error[];\r\n    typeNodes: TypeNode[];\r\n\r\n    lookahead = 4;\r\n    ct: Token[];\r\n    lastToken: Token;\r\n    cct: Token;\r\n    tt: TokenType;\r\n    position: TextPosition;\r\n    lastComment: Token;\r\n\r\n    endToken: Token = {\r\n        position: { line: 0, column: 0, length: 1 },\r\n        tt: TokenType.endofSourcecode,\r\n        value: \"das Ende des Programms\"\r\n    };\r\n\r\n\r\n    constructor(private isInConsoleMode: boolean){\r\n\r\n    }\r\n\r\n    parse(m: Module) {\r\n\r\n        this.module = m;\r\n\r\n        this.tokenList = m.tokenList;\r\n        this.errorList = [];\r\n\r\n        if (this.tokenList.length == 0) {\r\n            this.module.mainProgramAst = [];\r\n            this.module.classDefinitionsAST = [];\r\n            this.module.typeNodes = [];\r\n            this.module.errors[1] = this.errorList;\r\n            return;\r\n        }\r\n\r\n        this.pos = 0;\r\n        this.initializeLookahead();\r\n\r\n        this.typeNodes = [];\r\n\r\n        let lastToken = this.tokenList[this.tokenList.length - 1];\r\n        this.endToken.position = { line: lastToken.position.line, column: lastToken.position.column + lastToken.position.length, length: 1 };\r\n\r\n        let astNodes = this.parseMain();\r\n        this.module.mainProgramAst = astNodes.mainProgramAST;\r\n        this.module.classDefinitionsAST = astNodes.classDefinitionAST;\r\n        this.module.mainProgramEnd = astNodes.mainProgramEnd;\r\n        this.module.typeNodes = this.typeNodes;\r\n\r\n        this.module.errors[1] = this.errorList;\r\n\r\n    }\r\n\r\n    initializeLookahead() {\r\n\r\n        this.ct = [];\r\n\r\n        for (let i = 0; i < this.lookahead; i++) {\r\n\r\n            let token: Token = this.endToken;\r\n\r\n            while (true) {\r\n\r\n                if (this.pos >= this.tokenList.length) break;\r\n\r\n                let token1 = this.tokenList[this.pos]\r\n                if(token1.tt == TokenType.comment){\r\n                    this.lastComment = token1;\r\n                } \r\n\r\n                if (token1.tt != TokenType.newline && token1.tt != TokenType.space && token1.tt != TokenType.comment) {\r\n                    token = token1;\r\n                    if(this.lastComment != null){\r\n                        token.commentBefore = this.lastComment;\r\n                        this.lastComment = null;\r\n                    }\r\n                    break;\r\n                }\r\n\r\n                this.pos++;\r\n\r\n            }\r\n\r\n            this.ct.push(token);\r\n\r\n            if (i < this.lookahead - 1) {\r\n                this.pos++;\r\n            }\r\n\r\n        }\r\n\r\n        this.cct = this.ct[0];\r\n        this.tt = this.cct.tt;\r\n        this.position = this.cct.position;\r\n\r\n    }\r\n\r\n    nextToken() {\r\n\r\n        let token: Token;\r\n        this.lastToken = this.cct;\r\n\r\n        while (true) {\r\n\r\n            this.pos++;\r\n\r\n            if (this.pos >= this.tokenList.length) {\r\n                token = this.endToken;\r\n                break;\r\n            }\r\n\r\n            token = this.tokenList[this.pos]\r\n            if(token.tt == TokenType.comment){\r\n                this.lastComment = token;\r\n            } \r\n\r\n            if (token.tt != TokenType.newline && token.tt != TokenType.space && token.tt != TokenType.comment) {\r\n                token.commentBefore = this.lastComment;\r\n                this.lastComment = null;\r\n                break;\r\n            }\r\n\r\n        }\r\n\r\n        for (let i = 0; i < this.lookahead - 1; i++) {\r\n            this.ct[i] = this.ct[i + 1];\r\n        }\r\n\r\n        this.ct[this.lookahead - 1] = token;\r\n\r\n        this.cct = this.ct[0];\r\n        this.tt = this.cct.tt;\r\n        this.position = this.cct.position;\r\n\r\n    }\r\n\r\n    pushError(text: string, errorLevel: ErrorLevel = \"error\", position?: TextPosition, quickFix?: QuickFix) {\r\n        if (position == null) position = Object.assign({}, this.position);\r\n        this.errorList.push({\r\n            text: text,\r\n            position: position,\r\n            quickFix: quickFix,\r\n            level: errorLevel\r\n        });\r\n    }\r\n\r\n    expect(tt: TokenType, skip: boolean = true, invokeSemicolonAngel: boolean = false): boolean {\r\n        if (this.tt != tt) {\r\n            if (tt == TokenType.semicolon && this.tt == TokenType.endofSourcecode) {\r\n                return true;\r\n            }\r\n\r\n            let position: TextPosition = this.cct.position;\r\n            if (tt == TokenType.semicolon && this.lastToken != null) {\r\n\r\n                if (this.lastToken.position.line < position.line) {\r\n                    position = {\r\n                        line: this.lastToken.position.line,\r\n                        column: this.lastToken.position.column + this.lastToken.position.length,\r\n                        length: 1\r\n                    }\r\n                }\r\n            }\r\n\r\n            let quickFix: QuickFix = null;\r\n            if (tt == TokenType.semicolon && this.lastToken.position.line < this.cct.position.line &&\r\n                !this.isOperatorOrDot(this.lastToken.tt) \r\n            ) {\r\n                quickFix = {\r\n                    title: 'Strichpunkt hier einfügen',\r\n                    editsProvider: (uri) => {\r\n                        return [{\r\n                            resource: uri,\r\n                            edit: {\r\n                                range: {\r\n                                    startLineNumber: position.line, startColumn: position.column, endLineNumber: position.line, endColumn: position.column,\r\n                                    message: \"\",\r\n                                    severity: monaco.MarkerSeverity.Error\r\n                                },\r\n                                text: \";\"\r\n                            }\r\n                        }\r\n                        ];\r\n                    }\r\n                }\r\n\r\n                if (invokeSemicolonAngel && this.errorList.length < 3) {\r\n                    this.module.main.getSemicolonAngel().register(position, this.module);\r\n                }\r\n            }\r\n\r\n\r\n            this.pushError(\"Erwartet wird: \" + TokenTypeReadable[tt] + \" - Gefunden wurde: \" + TokenTypeReadable[this.tt], \"error\", position, quickFix);\r\n            return false;\r\n        }\r\n\r\n        if (skip) {\r\n            this.nextToken();\r\n        }\r\n\r\n        return true;\r\n    }\r\n    isOperatorOrDot(tt: TokenType): boolean {\r\n        if (tt == TokenType.dot) return true;\r\n        for (let op of Parser.operatorPrecedence) {\r\n            for (let operator of op) {\r\n                if (tt == operator) return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    isEnd(): boolean {\r\n        return this.cct == this.endToken;\r\n    }\r\n\r\n    comesToken(token: TokenType | TokenType[]): boolean {\r\n\r\n        if (!Array.isArray(token)) {\r\n            return this.tt == token;\r\n        }\r\n\r\n        return token.indexOf(this.tt) >= 0;\r\n\r\n    }\r\n\r\n    getCurrentPosition(): TextPosition {\r\n        return Object.assign({}, this.position);\r\n    }\r\n\r\n    getEndOfCurrentToken(): TextPosition {\r\n\r\n        let position = this.getCurrentPosition();\r\n        position.column = position.column + this.position.length;\r\n        position.length = 0;\r\n\r\n        return position;\r\n    }\r\n\r\n    static ClassTokens: TokenType[] = [TokenType.keywordClass, TokenType.keywordEnum, TokenType.keywordInterface];\r\n    static VisibilityTokens: TokenType[] = [TokenType.keywordPrivate, TokenType.keywordProtected, TokenType.keywordPublic];\r\n    static BeforeClassDefinitionTokens: TokenType[] = Parser.ClassTokens.concat(Parser.VisibilityTokens).concat(TokenType.keywordAbstract).concat(Parser.ClassTokens);\r\n\r\n    parseMain(): { mainProgramAST: ASTNodes, mainProgramEnd: TextPosition, classDefinitionAST: ASTNodes } {\r\n\r\n        let mainProgram: ASTNodes = [];\r\n        let classDefinitions: ASTNodes = [];\r\n\r\n        let mainProgramEnd: TextPosition = {\r\n            column: 0,\r\n            line: 10000,\r\n            length: 1\r\n        }\r\n\r\n        while (!this.isEnd()) {\r\n\r\n            let oldPos = this.pos;\r\n\r\n            if (this.comesToken(Parser.BeforeClassDefinitionTokens)) {\r\n                let cd = this.parseClassDefinition();\r\n                if (cd != null) classDefinitions = classDefinitions.concat(cd);\r\n            } else {\r\n                let st = this.parseStatement();\r\n\r\n                if (st != null) {\r\n                    mainProgram = mainProgram.concat(st);\r\n                }\r\n                mainProgramEnd = this.getCurrentPosition();\r\n            }\r\n\r\n            // emergency-forward:\r\n            if (this.pos == oldPos) {\r\n                this.pos++;\r\n                this.initializeLookahead();\r\n            }\r\n\r\n        }\r\n\r\n        return {\r\n            mainProgramAST: mainProgram,\r\n            classDefinitionAST: classDefinitions,\r\n            mainProgramEnd: mainProgramEnd\r\n        }\r\n\r\n    }\r\n\r\n\r\n    checkIfStatementHasNoEffekt(st: ASTNode) {\r\n        \r\n        if(this.isInConsoleMode) return;\r\n\r\n        if ((st.type == TokenType.binaryOp && Parser.assignmentOperators.indexOf(st.operator) < 0)) {\r\n            let s = \"dieses Terms\";\r\n            switch (st.operator) {\r\n                case TokenType.plus: s = \"dieser Summe\"; break;\r\n                case TokenType.minus: s = \"dieser Differenz\"; break;\r\n                case TokenType.multiplication: s = \"dieses Produkts\"; break;\r\n                case TokenType.division: s = \"dieses Quotienten\"; break;\r\n            }\r\n            s += \" (Operator \" + TokenTypeReadable[st.operator] + \")\"\r\n            this.pushError(`Der Wert ${s} wird zwar berechnet, aber danach verworfen. Möchtest Du ihn vielleicht einer Variablen zuweisen?`,\r\n                \"info\", st.position);\r\n        } else if (\r\n            [TokenType.unaryOp, TokenType.pushConstant,\r\n            TokenType.identifier, TokenType.selectArrayElement].indexOf(st.type) >= 0) {\r\n            this.pushError(\"Der Wert dieses Terms wird zwar berechnet, aber danach verworfen. Möchtest Du ihn vielleicht einer Variablen zuweisen?\",\r\n                \"info\", st.position);\r\n        }\r\n    }\r\n\r\n    parseStatement(expectSemicolon: boolean = true): ASTNode[] {\r\n\r\n        let retStatements: ASTNode[] = null;\r\n\r\n        switch (this.tt) {\r\n            case TokenType.leftBracket:\r\n            case TokenType.identifier:\r\n            case TokenType.keywordThis:\r\n            case TokenType.keywordSuper:\r\n            case TokenType.keywordFinal:\r\n            case TokenType.charConstant:\r\n            case TokenType.integerConstant:\r\n            case TokenType.stringConstant:\r\n            case TokenType.booleanConstant:\r\n            case TokenType.floatingPointConstant:\r\n            case TokenType.keywordNew:\r\n                let ret = this.parseVariableDeclarationOrTerm();\r\n                if (expectSemicolon) this.expect(TokenType.semicolon, true, true);\r\n                retStatements = ret;\r\n                break;\r\n            case TokenType.leftCurlyBracket:\r\n                let statements: ASTNode[] = [];\r\n                let positionFrom = this.getCurrentPosition();\r\n                this.nextToken();\r\n                //@ts-ignore\r\n                while (this.tt != TokenType.rightCurlyBracket && this.tt != TokenType.endofSourcecode\r\n                    && Parser.BeforeClassDefinitionTokens.indexOf(this.tt) < 0) {\r\n                    statements = statements.concat(this.parseStatement());\r\n                }\r\n                let positionTo = this.getCurrentPosition();\r\n                positionTo.column = positionTo.column + positionTo.length;\r\n                positionTo.length = 0;\r\n                this.expect(TokenType.rightCurlyBracket);\r\n\r\n                retStatements = [{\r\n                    type: TokenType.scopeNode,\r\n                    position: positionFrom,\r\n                    positionTo: positionTo,\r\n                    statements: statements\r\n                }];\r\n                break;\r\n\r\n            case TokenType.keywordWhile:\r\n                retStatements = this.parseWhile();\r\n                break;\r\n            case TokenType.keywordFor:\r\n                retStatements = this.parseFor();\r\n                break;\r\n            case TokenType.keywordDo:\r\n                retStatements = this.parseDo();\r\n                break;\r\n            case TokenType.keywordIf:\r\n                retStatements = this.parseIf();\r\n                break;\r\n            case TokenType.keywordReturn:\r\n                retStatements = this.parseReturn();\r\n                break;\r\n            case TokenType.keywordPrint:\r\n            case TokenType.keywordPrintln:\r\n                retStatements = this.parsePrint();\r\n                break;\r\n            case TokenType.keywordSwitch:\r\n                retStatements = this.parseSwitch();\r\n                break;\r\n            case TokenType.keywordBreak:\r\n                let position = this.getCurrentPosition();\r\n                this.nextToken();\r\n                retStatements = [{\r\n                    type: TokenType.keywordBreak,\r\n                    position: position\r\n                }];\r\n                break;\r\n            case TokenType.keywordContinue:\r\n                let position1 = this.getCurrentPosition();\r\n                this.nextToken();\r\n                retStatements = [{\r\n                    type: TokenType.keywordContinue,\r\n                    position: position1\r\n                }];\r\n                break;\r\n            case TokenType.semicolon:\r\n                break;\r\n            default:\r\n                let s = TokenTypeReadable[this.tt];\r\n                if (s != this.cct.value) s += \"(\" + this.cct.value + \")\";\r\n                s += \" wird hier nicht erwartet.\";\r\n                this.pushError(s);\r\n\r\n                let dontSkip = Parser.BeforeClassDefinitionTokens.indexOf(this.tt) >= 0;\r\n                if (!dontSkip) {\r\n                    this.nextToken();\r\n                }\r\n                break;\r\n        }\r\n\r\n        if(retStatements == null){\r\n            // skip additional semicolons if present...\r\n            while (this.tt == TokenType.semicolon && expectSemicolon) {\r\n                this.nextToken();\r\n            }\r\n        }\r\n\r\n        if(retStatements != null && retStatements.length > 0){\r\n            let retStmt = retStatements[retStatements.length - 1];\r\n            if(retStmt != null){\r\n                this.checkIfStatementHasNoEffekt(retStatements[retStatements.length - 1]);\r\n            } else {\r\n                retStatements = null;\r\n            }\r\n        }\r\n\r\n        return retStatements;\r\n\r\n    }\r\n\r\n    parseReturn(): ASTNode[] {\r\n\r\n        let position = this.getCurrentPosition();\r\n\r\n        this.nextToken();\r\n\r\n        let term: TermNode;\r\n\r\n        if (!(this.tt == TokenType.semicolon)) {\r\n            term = this.parseTerm();\r\n            this.expect(TokenType.semicolon, true, true);\r\n        }\r\n\r\n        return [{\r\n            type: TokenType.keywordReturn,\r\n            position: position,\r\n            term: term\r\n        }];\r\n\r\n    }\r\n\r\n    parseWhile(): ASTNode[] {\r\n\r\n        let position = this.getCurrentPosition();\r\n\r\n        this.nextToken(); // consume while\r\n        let scopeFrom = this.getCurrentPosition();\r\n\r\n        if (this.expect(TokenType.leftBracket, true)) {\r\n            let condition = this.parseTerm();\r\n            let rightBracketPosition  = this.getCurrentPosition();\r\n\r\n            this.module.pushMethodCallPosition(position, [], \"while\", rightBracketPosition);\r\n\r\n            this.expect(TokenType.rightBracket, true);\r\n            if (this.tt == TokenType.semicolon) {\r\n                this.pushError(\"Diese while-loop wiederholt nur den Strichpunkt (leere Anweisung).\", \"warning\");\r\n            }\r\n            let statements = this.parseStatement();\r\n            let scopeTo = this.getCurrentPosition();\r\n            scopeTo.length = 0;\r\n\r\n            if (statements != null && statements.length > 0 && statements[0].type == TokenType.scopeNode) {\r\n                scopeTo = (<ScopeNode>statements[0]).positionTo;\r\n            }\r\n\r\n            return [\r\n                {\r\n                    type: TokenType.keywordWhile,\r\n                    position: position,\r\n                    scopeFrom: scopeFrom,\r\n                    scopeTo: scopeTo,\r\n                    condition: condition,\r\n                    statements: statements\r\n                }\r\n            ];\r\n\r\n        }\r\n\r\n        return [];\r\n\r\n    }\r\n\r\n    parseFor(): ASTNode[] {\r\n\r\n        let position = this.getCurrentPosition();\r\n\r\n        let semicolonPositions: TextPosition[] = [];\r\n\r\n        this.nextToken(); // consume for\r\n\r\n        let scopeFrom = this.getCurrentPosition();\r\n\r\n        if (this.expect(TokenType.leftBracket, true)) {\r\n\r\n            if (this.ct[2].tt == TokenType.colon) {\r\n                return this.parseForLoopOverCollection(position, scopeFrom);\r\n            }\r\n\r\n            let statementsBefore = this.parseStatement(false);\r\n            semicolonPositions.push(this.getCurrentPosition());\r\n            this.expect(TokenType.semicolon);\r\n            let condition = this.parseTerm();\r\n            semicolonPositions.push(this.getCurrentPosition());\r\n            this.expect(TokenType.semicolon, true);\r\n            let statementsAfter = this.parseStatement(false);\r\n\r\n            let rightBracketPosition = this.getCurrentPosition();\r\n            this.expect(TokenType.rightBracket, true);\r\n\r\n            this.module.pushMethodCallPosition(position, semicolonPositions, \"for\", rightBracketPosition);\r\n\r\n            if (this.tt == TokenType.semicolon) {\r\n                this.pushError(\"Diese for-loop wiederholt nur den Strichpunkt (leere Anweisung).\", \"warning\");\r\n            }\r\n\r\n\r\n            let statements = this.parseStatement();\r\n            let scopeTo = this.getCurrentPosition();\r\n            scopeTo.length = 0;\r\n\r\n            if (statements != null && statements.length > 0 && statements[0].type == TokenType.scopeNode) {\r\n                scopeTo = (<ScopeNode>statements[0]).positionTo;\r\n            }\r\n\r\n            if (condition == null) {\r\n                condition = {\r\n                    type: TokenType.pushConstant,\r\n                    position: this.getCurrentPosition(),\r\n                    constantType: TokenType.booleanConstant,\r\n                    constant: true\r\n                }\r\n            }\r\n\r\n            return [\r\n                {\r\n                    type: TokenType.keywordFor,\r\n                    position: position,\r\n                    scopeFrom: scopeFrom,\r\n                    scopeTo: scopeTo,\r\n                    condition: condition,\r\n                    statementsBefore: statementsBefore,\r\n                    statementsAfter: statementsAfter,\r\n                    statements: statements\r\n                }\r\n            ];\r\n\r\n        }\r\n\r\n        return [];\r\n\r\n    }\r\n\r\n    parseForLoopOverCollection(position: TextPosition, scopeFrom: TextPosition): ASTNode[] {\r\n\r\n        let variableType = this.parseType();\r\n\r\n        let variableIdentifier = <string>this.cct.value;\r\n        let variableIdentifierPosition = this.getCurrentPosition();\r\n        this.nextToken();\r\n\r\n        this.expect(TokenType.colon, true);\r\n\r\n        let collection = this.parseTerm();\r\n\r\n        this.expect(TokenType.rightBracket, true);\r\n\r\n        if (this.tt == TokenType.semicolon) {\r\n            this.pushError(\"Diese for-loop wiederholt nur den Strichpunkt (leere Anweisung).\", \"warning\");\r\n        }\r\n\r\n        let statements = this.parseStatement();\r\n        let scopeTo = this.getCurrentPosition();\r\n        scopeTo.length = 0;\r\n\r\n        if (statements != null && statements.length > 0 && statements[0].type == TokenType.scopeNode) {\r\n            scopeTo = (<ScopeNode>statements[0]).positionTo;\r\n        }\r\n\r\n        if (collection == null || variableType == null || statements == null) return [];\r\n\r\n        return [\r\n            {\r\n                type: TokenType.forLoopOverCollection,\r\n                position: position,\r\n                scopeFrom: scopeFrom,\r\n                scopeTo: scopeTo,\r\n                variableIdentifier: variableIdentifier,\r\n                variableType: variableType,\r\n                variablePosition: variableIdentifierPosition,\r\n                collection: collection,\r\n                statements: statements\r\n            }\r\n        ];\r\n\r\n    }\r\n\r\n    parsePrint(): ASTNode[] {\r\n\r\n        let tt = this.tt;\r\n        let position = this.getCurrentPosition();\r\n\r\n        this.nextToken();\r\n\r\n        if (this.expect(TokenType.leftBracket, false)) {\r\n            let mcp = this.parseMethodCallParameters();\r\n            let paramenters = mcp.nodes;\r\n            if (paramenters.length > 2) {\r\n                this.pushError(\"Die Methoden print und println haben maximal zwei Parameter.\", \"error\", position);\r\n            }\r\n\r\n            this.expect(TokenType.semicolon, true, true);\r\n\r\n            return [{\r\n                //@ts-ignore\r\n                type: tt,\r\n                position: position,\r\n                text: paramenters.length == 0 ? null : paramenters[0],\r\n                color: paramenters.length <= 1 ? null : paramenters[1],\r\n                commaPositions: mcp.commaPositions,\r\n                rightBracketPosition: mcp.rightBracketPosition\r\n            }];\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    parseSwitch(): ASTNode[] {\r\n\r\n        let position = this.getCurrentPosition();\r\n        this.nextToken();\r\n        if (this.expect(TokenType.leftBracket, true)) {\r\n\r\n            let switchTerm = this.parseTerm();\r\n\r\n            this.module.pushMethodCallPosition(position, [], \"switch\", this.getCurrentPosition());\r\n\r\n            this.expect(TokenType.rightBracket);\r\n            let scopeFrom = this.getCurrentPosition();\r\n\r\n            this.expect(TokenType.leftCurlyBracket, true);\r\n\r\n            let switchNode: SwitchNode = {\r\n                type: TokenType.keywordSwitch,\r\n                position: position,\r\n                scopeFrom: scopeFrom,\r\n                scopeTo: null,\r\n                condition: switchTerm,\r\n                caseNodes: []\r\n            }\r\n\r\n            let defaultAlreadyThere = false;\r\n\r\n            while (this.tt == TokenType.keywordCase || this.tt == TokenType.keywordDefault) {\r\n                let casePosition = this.getCurrentPosition();\r\n\r\n                let isDefault = this.tt == TokenType.keywordDefault;\r\n                if (isDefault) {\r\n                    if (defaultAlreadyThere) {\r\n                        this.pushError(\"Eine switch-Anweisung darf nur maximal einen default-Zweig haben.\", \"error\", casePosition);\r\n                    } else {\r\n                        defaultAlreadyThere = true;\r\n                    }\r\n                }\r\n\r\n                this.nextToken();\r\n\r\n                let caseTerm = null;\r\n                if (!isDefault) {\r\n                    caseTerm = this.parseUnary();\r\n                }\r\n\r\n                this.expect(TokenType.colon, true);\r\n\r\n                let statements: ASTNode[] = [];\r\n                //@ts-ignore\r\n                while (this.tt != TokenType.rightCurlyBracket && this.tt != TokenType.endofSourcecode\r\n                    && this.tt != TokenType.keywordCase && this.tt != TokenType.keywordDefault\r\n                ) {\r\n                    let oldPos = this.pos;\r\n                    let statement = this.parseStatement();\r\n                    if (statement != null) {\r\n                        statements = statements.concat(statement);\r\n                    }\r\n                    if(oldPos == this.pos){\r\n                        this.pushError(this.cct.value + \" wird hier nicht erwartet.\");\r\n                        this.nextToken();\r\n                    }\r\n                }\r\n\r\n                let switchCaseNode: SwitchCaseNode = {\r\n                    type: TokenType.keywordCase,\r\n                    position: casePosition,\r\n                    caseTerm: caseTerm,\r\n                    statements: statements\r\n                }\r\n\r\n                switchNode.caseNodes.push(switchCaseNode);\r\n\r\n            }\r\n\r\n            switchNode.scopeTo = this.getEndOfCurrentToken();\r\n            this.expect(TokenType.rightCurlyBracket, true);\r\n\r\n            return [switchNode];\r\n\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    parseIf(): ASTNode[] {\r\n\r\n        let position = this.getCurrentPosition();\r\n\r\n        this.nextToken(); // consume if\r\n        if (this.expect(TokenType.leftBracket, true)) {\r\n            let condition = this.parseTerm();\r\n            let rightBracketPosition = this.getCurrentPosition();\r\n            this.module.pushMethodCallPosition(position, [], \"if\", rightBracketPosition);\r\n            this.expect(TokenType.rightBracket, true);\r\n\r\n            if (this.tt == TokenType.semicolon) {\r\n                this.pushError(\"Falls die Bedingung zutrifft, wird nur der Strichpunkt ausgeführt (leere Anweisung).\", \"warning\");\r\n            }\r\n\r\n            let statements = this.parseStatement();\r\n\r\n            if (this.tt == TokenType.semicolon) {\r\n                this.nextToken();\r\n            }\r\n\r\n            let elseStatements: ASTNode[] = null;\r\n\r\n            if (this.comesToken(TokenType.keywordElse)) {\r\n                this.nextToken();\r\n                elseStatements = this.parseStatement();\r\n            }\r\n\r\n            if (condition == null && this.errorList.length == 0) {\r\n                condition = {\r\n                    type: TokenType.pushConstant,\r\n                    position: this.getCurrentPosition(),\r\n                    constantType: TokenType.booleanConstant,\r\n                    constant: true\r\n                }\r\n            }\r\n\r\n            return [\r\n                {\r\n                    type: TokenType.keywordIf,\r\n                    position: position,\r\n                    condition: condition,\r\n                    statementsIfTrue: statements,\r\n                    statementsIfFalse: elseStatements\r\n                }\r\n            ];\r\n\r\n        }\r\n\r\n        return [];\r\n\r\n    }\r\n\r\n    parseDo(): ASTNode[] {\r\n\r\n        // let i = 10;\r\n        // do {\r\n        //     i = i +7;\r\n        // } while (i < 100);\r\n\r\n        let position = this.getCurrentPosition();\r\n\r\n        let scopeFrom = this.getCurrentPosition();\r\n        this.nextToken(); // consume do\r\n        let statements = this.parseStatement();\r\n\r\n        if (this.expect(TokenType.keywordWhile, true)) {\r\n            if (this.expect(TokenType.leftBracket, true)) {\r\n                let condition = this.parseTerm();\r\n                let scopeTo = this.getEndOfCurrentToken();\r\n\r\n                this.expect(TokenType.rightBracket, true);\r\n\r\n                return [\r\n                    {\r\n                        type: TokenType.keywordDo,\r\n                        position: position,\r\n                        scopeFrom: scopeFrom,\r\n                        scopeTo: scopeTo,\r\n                        condition: condition,\r\n                        statements: statements\r\n                    }\r\n                ];\r\n\r\n            }\r\n        }\r\n        return [];\r\n\r\n    }\r\n\r\n    comesGenericType(): boolean {\r\n        if (this.ct[1].tt != TokenType.lower) return false;\r\n        if (this.ct[2].tt != TokenType.identifier) return false;\r\n        return this.ct[3].tt == TokenType.greater || this.ct[3].tt == TokenType.comma;\r\n\r\n    }\r\n\r\n    parseVariableDeclarationOrTerm(): ASTNode[] {\r\n\r\n        // Two identifiers in a row or identifier[]\r\n        if (\r\n            (this.tt == TokenType.identifier || this.tt == TokenType.keywordFinal) &&\r\n            (this.ct[1].tt == TokenType.identifier\r\n                || this.ct[1].tt == TokenType.leftRightSquareBracket ||\r\n                this.comesGenericType() \r\n            )\r\n        ) {\r\n            let ret: ASTNode[] = [];\r\n            let type: TypeNode = null;\r\n            do {\r\n                if (type != null) this.expect(TokenType.comma, true);\r\n                let vd = this.parseVariableDeclaration(type);\r\n                ret.push(vd);\r\n                type = vd?.variableType;\r\n                //@ts-ignore\r\n            } while (this.tt == TokenType.comma);\r\n\r\n            return ret;\r\n        } else {\r\n            return [this.parseTerm()];\r\n        }\r\n\r\n    }\r\n\r\n    parseTerm(): TermNode {\r\n        return this.parseTermBinary(0);\r\n    }\r\n\r\n    parseTermBinary(precedence: number): TermNode {\r\n\r\n        let left: TermNode;\r\n        if (precedence < Parser.operatorPrecedence.length - 1) {\r\n            left = this.parseTermBinary(precedence + 1);\r\n        } else {\r\n            left = this.parsePlusPlusMinusMinus();\r\n        }\r\n\r\n        let operators = Parser.operatorPrecedence[precedence];\r\n\r\n        if (left == null || operators.indexOf(this.tt) < 0) {\r\n            return left;\r\n        }\r\n\r\n        let first = true;\r\n\r\n        // 28.05.2021: This broke evalation of ternery operator, so i commented it out.\r\n        // Don't know why it was there in the first place, so i expect some havoc to come...\r\n        // 15 Minutes later:\r\n        // This if-clause was here to make terms aber case possible, e.g. switch(a){ case 7 + 2: println(\"Here!\")}\r\n        // -> Bad idea. I changed this to only parse unary Terms left of the colon so i can comment out this if-clause here\r\n        // and fix the ternary operator.\r\n        //\r\n        // if (this.tt == TokenType.colon) {\r\n        //     return left;\r\n        // }\r\n\r\n        while (first || operators.indexOf(this.tt) >= 0) {\r\n\r\n            let operator: TokenType = this.tt;\r\n\r\n            first = false;\r\n            let position = this.getCurrentPosition();\r\n\r\n            this.nextToken();\r\n\r\n            for (let opData of [{ op: TokenType.lower, wrong: \"=<\", right: \"<=\", correctOp: TokenType.lowerOrEqual }, \r\n                                { op: TokenType.greater, wrong: \"=>\", right: \">=\", correctOp: TokenType.greaterOrEqual }]) {\r\n                if (operator == TokenType.assignment && this.tt == opData.op) {\r\n                    let position2 = this.getCurrentPosition();\r\n                    this.pushError(`Den Operator ${opData.wrong} gibt es nicht. Du meintest sicher: ${opData.right}`, \"error\",\r\n                        Object.assign({}, position, { length: 2 }), {\r\n                        title: `${opData.wrong} durch ${opData.right} ersetzen`,\r\n                        editsProvider: (uri) => {\r\n                            return [\r\n                                {\r\n                                    resource: uri,\r\n                                    edit: {\r\n                                        range: { startLineNumber: position.line, startColumn: position.column, endLineNumber: position.line, endColumn: position2.column + position2.length },\r\n                                        text: opData.right\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    });\r\n                    this.nextToken();\r\n                    operator = opData.correctOp;\r\n                }\r\n            }\r\n\r\n            let right: TermNode;\r\n            if (precedence < Parser.operatorPrecedence.length - 1) {\r\n                right = this.parseTermBinary(precedence + 1);\r\n            } else {\r\n                right = this.parsePlusPlusMinusMinus();\r\n            }\r\n\r\n            if (right != null) {\r\n\r\n                let constantFolding = false;\r\n                if (this.isConstant(left) && this.isConstant(right)) {\r\n                    let pcLeft = <ConstantNode>left;\r\n                    let pcRight = <ConstantNode>right;\r\n                    let typeLeft = TokenTypeToDataTypeMap[pcLeft.constantType];\r\n                    let typeRight = TokenTypeToDataTypeMap[pcRight.constantType];\r\n                    let resultType = typeLeft.getResultType(operator, typeRight);\r\n                    if (resultType != null) {\r\n                        constantFolding = true;\r\n                        let result = typeLeft.compute(operator, { type: typeLeft, value: pcLeft.constant },\r\n                            { type: typeRight, value: pcRight.constant });\r\n\r\n                        this.considerIntDivisionWarning(operator, typeLeft, pcLeft.constant, typeRight, pcRight.constant, position);\r\n\r\n                        pcLeft.constantType = (<PrimitiveType>resultType).toTokenType();\r\n                        pcLeft.constant = result;\r\n                        pcLeft.position.length = pcRight.position.column + pcRight.position.length - pcLeft.position.column;\r\n                    }\r\n                }\r\n\r\n                if (!constantFolding)\r\n                    left = {\r\n                        type: TokenType.binaryOp,\r\n                        position: position,\r\n                        operator: operator,\r\n                        firstOperand: left,\r\n                        secondOperand: right\r\n                    };\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        return left;\r\n\r\n    }\r\n\r\n    considerIntDivisionWarning(operator: TokenType, typeLeft: Type, leftConstant: any, typeRight: Type, rightConstant: any, position: TextPosition) {\r\n    \r\n        if(operator == TokenType.division){\r\n            if(this.isIntegerType(typeLeft) && this.isIntegerType(typeRight)){\r\n                if(rightConstant != 0 && leftConstant/rightConstant != Math.floor(leftConstant/rightConstant)){\r\n                    this.pushError(\"Da \" + leftConstant + \" und \" + rightConstant + \" ganzzahlige Werte sind, wird diese Division als Ganzzahldivision ausgeführt und ergibt den Wert \" + Math.floor(leftConstant/rightConstant) + \". Falls das nicht gewünscht ist, hänge '.0' an einen der Operanden.\", \"info\", position);\r\n                }\r\n            }\r\n        }\r\n    \r\n    }\r\n\r\n    isIntegerType(type: Type): boolean {\r\n        return type == intPrimitiveType;\r\n    }\r\n\r\n    isConstant(node: TermNode) {\r\n\r\n        return (node != null && node.type == TokenType.pushConstant);\r\n\r\n    }\r\n\r\n    parsePlusPlusMinusMinus(): TermNode {\r\n\r\n        let incrementDecrementBefore: TokenType = null;\r\n        let position = null;\r\n\r\n        if (this.comesToken([TokenType.doublePlus, TokenType.doubleMinus])) {\r\n            incrementDecrementBefore = this.tt;\r\n            position = this.getCurrentPosition();\r\n            this.nextToken();\r\n        }\r\n\r\n        let t: TermNode = this.parseUnary();\r\n\r\n        if (incrementDecrementBefore != null) {\r\n            t = {\r\n                type: TokenType.incrementDecrementBefore,\r\n                position: position,\r\n                operator: incrementDecrementBefore,\r\n                operand: t\r\n            }\r\n        }\r\n\r\n        if (this.comesToken([TokenType.doublePlus, TokenType.doubleMinus])) {\r\n            t = {\r\n                type: TokenType.incrementDecrementAfter,\r\n                position: this.getCurrentPosition(),\r\n                operator: this.tt,\r\n                operand: t\r\n            }\r\n            this.nextToken();\r\n        }\r\n\r\n        return t;\r\n\r\n    }\r\n\r\n    // -, not, this, super, a.b.c[][].d, a.b(), b() (== this.b()), super.b(), super()\r\n    parseUnary(): TermNode {\r\n\r\n        let term: TermNode;\r\n        let position: TextPosition = this.getCurrentPosition();\r\n\r\n        switch (this.tt) {\r\n            case TokenType.leftBracket:\r\n                return this.parseDotOrArrayChains(this.bracketOrCasting());\r\n            case TokenType.minus:\r\n            case TokenType.not:\r\n            case TokenType.tilde:\r\n                position = position;\r\n                let tt1 = this.tt;\r\n                this.nextToken();\r\n                term = this.parseUnary();\r\n\r\n                if (this.isConstant(term)) {\r\n                    let pcTerm = <ConstantNode>term;\r\n                    let typeTerm = TokenTypeToDataTypeMap[pcTerm.constantType];\r\n                    let resultType = typeTerm.getResultType(tt1);\r\n                    if (resultType != null) {\r\n                        let result = typeTerm.compute(tt1, { type: typeTerm, value: pcTerm.constant });\r\n                        pcTerm.constantType = (<PrimitiveType>resultType).toTokenType();\r\n                        pcTerm.constant = result;\r\n                        position.length = pcTerm.position.column - position.column + 1;\r\n                        return pcTerm;\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    type: TokenType.unaryOp,\r\n                    position: position,\r\n                    operand: term,\r\n                    operator: tt1\r\n                };\r\n            case TokenType.keywordSuper:\r\n                if (this.ct[1].tt == TokenType.leftBracket) {\r\n                    this.nextToken(); // skip \"super\"\r\n                    let parameters = this.parseMethodCallParameters();\r\n                    term = {\r\n                        type: TokenType.superConstructorCall,\r\n                        position: position,\r\n                        operands: parameters.nodes,\r\n                        commaPositions: parameters.commaPositions,\r\n                        rightBracketPosition: parameters.rightBracketPosition\r\n                    };\r\n                    return term;\r\n                } else {\r\n                    term = {\r\n                        type: TokenType.keywordSuper,\r\n                        position: position\r\n                    };\r\n                }\r\n                this.nextToken();\r\n                return this.parseDotOrArrayChains(term);\r\n            case TokenType.keywordThis:\r\n                if (this.ct[1].tt == TokenType.leftBracket) {\r\n                    this.nextToken(); // skip \"super\"\r\n                    let parameters = this.parseMethodCallParameters();\r\n                    term = {\r\n                        type: TokenType.constructorCall,\r\n                        position: position,\r\n                        operands: parameters.nodes,\r\n                        commaPositions: parameters.commaPositions,\r\n                        rightBracketPosition: parameters.rightBracketPosition\r\n                    };\r\n                    return term;\r\n                } else {\r\n                    term = {\r\n                        type: TokenType.keywordThis,\r\n                        position: position\r\n                    };\r\n                }\r\n                this.nextToken();\r\n                return this.parseDotOrArrayChains(term);\r\n            case TokenType.keywordNew:\r\n                return this.parseDotOrArrayChains(this.parseNew());\r\n            case TokenType.integerConstant:\r\n            case TokenType.charConstant:\r\n            case TokenType.floatingPointConstant:\r\n            case TokenType.stringConstant:\r\n            case TokenType.booleanConstant:\r\n                term = {\r\n                    type: TokenType.pushConstant,\r\n                    position: this.getCurrentPosition(),\r\n                    constantType: this.tt,\r\n                    constant: this.cct.value\r\n                };\r\n                let isStringConstant = this.tt == TokenType.stringConstant;\r\n                this.nextToken();\r\n\r\n                if (isStringConstant) return this.parseDotOrArrayChains(term);\r\n\r\n                return term;\r\n            case TokenType.keywordNull:\r\n                term = {\r\n                    type: TokenType.pushConstant,\r\n                    position: this.getCurrentPosition(),\r\n                    constantType: TokenType.keywordNull,\r\n                    constant: null\r\n                };\r\n                this.nextToken();\r\n                return term;\r\n            case TokenType.identifier: // attribute of current class or local variable\r\n\r\n                let identifier1 = <string>this.cct.value;\r\n                let position1 = this.getCurrentPosition();\r\n\r\n                this.nextToken();\r\n                //@ts-ignore\r\n                if (this.tt == TokenType.leftBracket) {\r\n                    let parameters = this.parseMethodCallParameters();\r\n                    let rightBracketPosition = parameters.rightBracketPosition;\r\n\r\n                    term = {\r\n                        type: TokenType.callMethod,\r\n                        position: position1,\r\n                        rightBracketPosition: rightBracketPosition,\r\n                        operands: parameters.nodes,\r\n                        object: term,\r\n                        identifier: identifier1,\r\n                        commaPositions: parameters.commaPositions\r\n                    }\r\n                } else {\r\n                    term = {\r\n                        type: TokenType.identifier,\r\n                        identifier: identifier1,\r\n                        position: position\r\n                    }\r\n                }\r\n\r\n                return this.parseDotOrArrayChains(term);\r\n            default:\r\n                this.pushError(\"Erwartet wird eine Variable, ein Methodenaufruf oder this oder super. Gefunden wurde: \" + this.cct.value);\r\n                return null;\r\n        }\r\n\r\n    }\r\n\r\n    tokensNotAfterCasting: TokenType[] = [TokenType.multiplication, TokenType.division, TokenType.plus,\r\n    TokenType.minus, TokenType.dot, TokenType.modulo, TokenType.semicolon, TokenType.rightBracket];\r\n\r\n    bracketOrCasting(): TermNode {\r\n\r\n        let position = this.getCurrentPosition();\r\n\r\n        this.nextToken(); // consume (\r\n\r\n        if (this.tt == TokenType.identifier && this.ct[1].tt == TokenType.rightBracket &&\r\n            this.tokensNotAfterCasting.indexOf(this.ct[2].tt) < 0) {\r\n\r\n            let castToType = this.parseType();\r\n            let position1 = this.getCurrentPosition(); // Position of )\r\n            position.length = position1.column - position.column + 1;\r\n\r\n            this.expect(TokenType.rightBracket, true);\r\n\r\n            let whatToCast = this.parsePlusPlusMinusMinus();\r\n\r\n            return {\r\n                type: TokenType.castValue,\r\n                position: position,\r\n                castToType: castToType,\r\n                whatToCast: whatToCast\r\n            }\r\n\r\n\r\n        } else {\r\n\r\n            let term = this.parseTerm();\r\n            let rightBracketPosition = this.getCurrentPosition();\r\n            this.expect(TokenType.rightBracket, true);\r\n\r\n            if (this.isConstant(term)) {\r\n                return term;\r\n            }\r\n\r\n            let bracketsNode: BracketsNode = {\r\n                position: rightBracketPosition,\r\n                type: TokenType.rightBracket,\r\n                termInsideBrackets: term\r\n            }\r\n\r\n\r\n            return bracketsNode;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    parseNew(): TermNode {\r\n\r\n        this.nextToken();\r\n        let position = this.getCurrentPosition();\r\n\r\n        if (this.expect(TokenType.identifier, false)) {\r\n            let identifier = <string>this.cct.value;\r\n            let identifierPosition = this.getCurrentPosition();\r\n            this.nextToken();\r\n\r\n\r\n            let genericParameterTypes: TypeNode[] = null;\r\n\r\n            if (this.tt == TokenType.lower) {\r\n\r\n                genericParameterTypes = [];\r\n                let first: boolean = true;\r\n                this.nextToken();\r\n\r\n                //@ts-ignore\r\n                while ((first && this.tt == TokenType.identifier) || (!first && this.tt == TokenType.comma)) {\r\n\r\n                    if (!first) this.nextToken(); // consume comma\r\n\r\n                    first = false;\r\n\r\n                    genericParameterTypes.push(this.parseType());\r\n\r\n                }\r\n\r\n                this.expect(TokenType.greater);\r\n                if (genericParameterTypes.length == 0) genericParameterTypes = null;\r\n            }\r\n\r\n            if (this.tt == TokenType.leftSquareBracket || this.tt == TokenType.leftRightSquareBracket) {\r\n\r\n                let typenode: TypeNode = {\r\n                    type: TokenType.type,\r\n                    position: position,\r\n                    arrayDimension: 0,\r\n                    identifier: identifier,\r\n                    genericParameterTypes: genericParameterTypes\r\n                }\r\n                this.typeNodes.push(typenode);\r\n\r\n                let elementCount: TermNode[] = [];\r\n\r\n                while (this.tt == TokenType.leftSquareBracket || this.tt == TokenType.leftRightSquareBracket) {\r\n                    typenode.arrayDimension++;\r\n\r\n                    //@ts-ignore\r\n                    if (this.tt == TokenType.leftRightSquareBracket) {\r\n                        elementCount.push(null);\r\n                        this.nextToken();\r\n                    } else {\r\n                        this.nextToken();\r\n                        elementCount.push(this.parseTerm());\r\n                        this.expect(TokenType.rightSquareBracket, true);\r\n                    }\r\n\r\n                }\r\n\r\n                let initialization = null;\r\n\r\n                if (this.tt == TokenType.leftCurlyBracket) {\r\n                    initialization = this.parseArrayLiteral(typenode);\r\n                }\r\n\r\n                let newArrayNode: NewArrayNode = {\r\n                    type: TokenType.newArray,\r\n                    position: position,\r\n                    arrayType: typenode,\r\n                    elementCount: elementCount,\r\n                    initialization: initialization\r\n                }\r\n\r\n                return newArrayNode;\r\n\r\n\r\n            } else if (this.tt == TokenType.leftBracket) {\r\n                let parameters = this.parseMethodCallParameters();\r\n\r\n                let classType: TypeNode = {\r\n                    type: TokenType.type,\r\n                    position: identifierPosition,\r\n                    arrayDimension: 0,\r\n                    identifier: identifier,\r\n                    genericParameterTypes: genericParameterTypes\r\n                }\r\n\r\n                this.typeNodes.push(classType);\r\n\r\n                return {\r\n                    type: TokenType.newObject,\r\n                    position: position,\r\n                    classType: classType,\r\n                    constructorOperands: parameters.nodes,\r\n                    rightBracketPosition: parameters.rightBracketPosition,\r\n                    commaPositions: parameters.commaPositions\r\n                }\r\n            } else {\r\n                this.pushError(\"Konstruktoraufruf (also runde Klammer auf) oder Array-Intanzierung (eckige Klammer auf) erwartet.\", \"error\", this.getCurrentPosition());\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parseArrayLiteral(arrayType: TypeNode): ArrayInitializationNode {\r\n        // expects { as next token\r\n\r\n        let nodes: (ArrayInitializationNode | TermNode)[] = [];\r\n        let position = this.getCurrentPosition();\r\n        let dimension = null;\r\n\r\n        this.expect(TokenType.leftCurlyBracket, true);\r\n        if (this.tt != TokenType.rightCurlyBracket) {\r\n\r\n            let first = true;\r\n            while (first || this.tt == TokenType.comma) {\r\n                let position1 = this.getCurrentPosition();\r\n\r\n                if (!first) {\r\n                    this.nextToken(); // consume comma\r\n                }\r\n                first = false;\r\n\r\n                let newDimension: number;\r\n                if (this.tt == TokenType.leftCurlyBracket) {\r\n                    let newType: TypeNode = {\r\n                        type: TokenType.type,\r\n                        position: this.getCurrentPosition(),\r\n                        arrayDimension: arrayType.arrayDimension - 1,\r\n                        identifier: arrayType.identifier\r\n                    }\r\n                    this.typeNodes.push(newType);\r\n                    let al = this.parseArrayLiteral(newType);\r\n                    newDimension = al.dimension + 1;\r\n                    nodes.push(al);\r\n                } else {\r\n                    nodes.push(this.parseTerm());\r\n                    newDimension = 1;\r\n                }\r\n\r\n                if (dimension != null) {\r\n                    if (dimension != newDimension) {\r\n                        this.pushError(\"Die Dimension dieses Array-Literals (\" + (newDimension - 1) + \" ist ungleich derjenigen der vorangegangenen Array-Literale (\" + (dimension - 1) + \").\", \"error\", position1);\r\n                    }\r\n                }\r\n                dimension = newDimension;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        this.expect(TokenType.rightCurlyBracket, true);\r\n\r\n        let ain: ArrayInitializationNode = {\r\n            type: TokenType.arrayInitialization,\r\n            position: position,\r\n            arrayType: arrayType,\r\n            dimension: dimension,\r\n            nodes: nodes\r\n        }\r\n\r\n        return ain;\r\n\r\n    }\r\n\r\n    parseMethodCallParameters(): { rightBracketPosition: TextPosition, nodes: TermNode[], commaPositions: TextPosition[] } {\r\n        // Assumption: current token is (        \r\n        this.nextToken();\r\n        if (this.tt == TokenType.rightBracket) {\r\n            let rightBracketPosition = this.getCurrentPosition();\r\n            this.nextToken();\r\n            return { rightBracketPosition: rightBracketPosition, nodes: [], commaPositions: [] };\r\n        }\r\n\r\n        let parameters: TermNode[] = [];\r\n        let commaPositions: TextPosition[] = [];\r\n\r\n        while (true) {\r\n            let pos = this.pos;\r\n\r\n            let parameter = this.parseTerm();\r\n            if (parameter != null) {\r\n                parameters.push(parameter);\r\n            }\r\n\r\n            if (this.tt != TokenType.comma) {\r\n                break;\r\n            } else {\r\n                commaPositions.push(this.getCurrentPosition());\r\n                this.nextToken(); // consume comma\r\n            }\r\n\r\n            // emergency-step:\r\n            if (this.pos == pos) {\r\n                this.nextToken();\r\n            }\r\n\r\n        }\r\n\r\n        let position = this.getCurrentPosition();\r\n        let rightBracketFound = this.expect(TokenType.rightBracket, true);\r\n\r\n        return { rightBracketPosition: rightBracketFound ? position : null, nodes: parameters, commaPositions: commaPositions };\r\n\r\n    }\r\n\r\n    parseDotOrArrayChains(term: TermNode): TermNode {\r\n\r\n        if (term == null) return null;\r\n\r\n        while (this.comesToken([TokenType.dot, TokenType.leftSquareBracket])) {\r\n            if (this.tt == TokenType.dot) {\r\n\r\n                this.nextToken();\r\n                //@ts-ignore\r\n                if (this.tt != TokenType.identifier) {\r\n                    this.pushError(\"Erwartet wird der Bezeichner eines Attributs oder einer Methode, gefunden wurde: \" + this.cct.value);\r\n                    return term;\r\n                }\r\n\r\n                let identifier = <string>this.cct.value;\r\n                let position = this.getCurrentPosition();\r\n                this.nextToken();\r\n                //@ts-ignore\r\n                if (this.tt == TokenType.leftBracket) {\r\n                    let parameters = this.parseMethodCallParameters();\r\n                    term = {\r\n                        type: TokenType.callMethod,\r\n                        position: position,\r\n                        rightBracketPosition: parameters.rightBracketPosition,\r\n                        operands: parameters.nodes,\r\n                        object: term,\r\n                        identifier: identifier,\r\n                        commaPositions: parameters.commaPositions\r\n                    }\r\n                } else {\r\n                    term = {\r\n                        type: TokenType.pushAttribute,\r\n                        position: position,\r\n                        identifier: identifier,\r\n                        object: term\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                // let position = this.getCurrentPosition();\r\n                let position = term.position;\r\n                this.nextToken();\r\n                let index = this.parseTerm();\r\n                let positionEnd = this.getCurrentPosition();\r\n                let position1: TextPosition = Object.assign({}, position);\r\n                this.expect(TokenType.rightSquareBracket, true);\r\n                if (positionEnd.line == position.line) {\r\n                    position1.length = positionEnd.column + positionEnd.length - position1.column;\r\n                } else {\r\n                    position1 = positionEnd;\r\n                }\r\n                term = {\r\n                    type: TokenType.selectArrayElement,\r\n                    position: position1,\r\n                    index: index,\r\n                    object: term\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return term;\r\n    }\r\n\r\n    parseVariableDeclaration(type: TypeNode): LocalVariableDeclarationNode {\r\n\r\n        let isFinal = false;\r\n        if (this.tt == TokenType.keywordFinal) {\r\n            isFinal = true;\r\n            this.nextToken();\r\n        }\r\n\r\n        if (type == null) {\r\n            type = this.parseType();\r\n        }\r\n\r\n        if(this.tt != TokenType.identifier){\r\n            this.pushError(\"Hier wird ein Bezeichner (Name) einer Variable erwartet.\", \"error\", this.getCurrentPosition());\r\n            return null;\r\n        }\r\n\r\n        let identifier = <string>this.cct.value;\r\n        let position = this.getCurrentPosition();\r\n        this.nextToken();\r\n\r\n        let initialization: TermNode = null;\r\n\r\n        //@ts-ignore\r\n        if (this.tt == TokenType.assignment) {\r\n            this.nextToken();\r\n            //@ts-ignore\r\n            if (type.arrayDimension > 0 && this.tt == TokenType.leftCurlyBracket) {\r\n                initialization = this.parseArrayLiteral(type);\r\n            } else {\r\n                initialization = this.parseTerm();\r\n            }\r\n        }\r\n\r\n        //@ts-ignore\r\n        if (this.tt == TokenType.endofSourcecode && type == null && identifier == null) return null;\r\n\r\n        return {\r\n            type: TokenType.localVariableDeclaration,\r\n            position: position,\r\n            identifier: identifier,\r\n            variableType: type,\r\n            initialization: initialization,\r\n            isFinal: isFinal\r\n        }\r\n\r\n    }\r\n\r\n    parseType(): TypeNode {\r\n\r\n        /**\r\n         * e.g. int, int[][], Integer, ArrayList<Integer> ,HashMap<Integer, ArrayList<String>>[][]\r\n         */\r\n\r\n\r\n        if(this.tt != TokenType.identifier && this.tt != TokenType.keywordVoid){\r\n            this.pushError(\"Erwartet wird ein Datentyp. Dieser muss mit einem Bezeichner beginnen. Gefunden wurde: \" + this.cct.value, \"error\", this.getCurrentPosition());\r\n                this.nextToken();\r\n            return {\r\n                type: TokenType.type,\r\n                position: this.getCurrentPosition(),\r\n                arrayDimension: 0,\r\n                identifier: \"int\",\r\n                genericParameterTypes: []\r\n            };\r\n        }\r\n\r\n        let identifier = <string>this.cct.value;\r\n        let position = this.getCurrentPosition();\r\n        this.nextToken();\r\n\r\n        let genericParameterTypes: TypeNode[] = null;\r\n\r\n        //@ts-ignore\r\n        if (this.tt == TokenType.lower) {\r\n\r\n            genericParameterTypes = [];\r\n            let first: boolean = true;\r\n            this.nextToken();\r\n\r\n            //@ts-ignore\r\n            while ((first && this.tt == TokenType.identifier) || (!first && this.tt == TokenType.comma)) {\r\n\r\n                if (!first) this.nextToken(); // consume comma\r\n\r\n                first = false;\r\n\r\n                genericParameterTypes.push(this.parseType());\r\n\r\n            }\r\n\r\n            this.expect(TokenType.greater);\r\n\r\n        }\r\n\r\n        let arrayDimension = 0;\r\n        //@ts-ignore\r\n        while (this.tt == TokenType.leftRightSquareBracket) {\r\n            arrayDimension++;\r\n            position.length += 2;\r\n            this.nextToken();\r\n        }\r\n\r\n        let typenode: TypeNode = {\r\n            type: TokenType.type,\r\n            position: position,\r\n            arrayDimension: arrayDimension,\r\n            identifier: identifier,\r\n            genericParameterTypes: genericParameterTypes\r\n        }\r\n\r\n        this.typeNodes.push(typenode);\r\n\r\n        return typenode;\r\n\r\n    }\r\n\r\n\r\n    parseClassDefinition(): ASTNode {\r\n\r\n        let commentBefore = this.cct.commentBefore;\r\n        let modifiers = this.collectModifiers();\r\n\r\n        if (!this.comesToken(Parser.ClassTokens)) {\r\n            this.pushError(\"Erwartet wird class, interface oder enum. Gefunden wurde: \" + this.cct.value);\r\n            return null;\r\n        }\r\n\r\n        let classType = this.tt;\r\n        this.nextToken();\r\n\r\n        if (this.expect(TokenType.identifier, false)) {\r\n\r\n            let identifier = <string>this.cct.value;\r\n            let position = this.getCurrentPosition();\r\n            this.nextToken();\r\n\r\n            let typeParameters: TypeParameterNode[] = [];\r\n            // For Generics: parse expression like <E, F extends Test implements Comparable<Test>>\r\n            if (this.tt == TokenType.lower) {\r\n                typeParameters = this.parseTypeParameterDefinition();\r\n            }\r\n\r\n            let extendsImplements = this.parseExtendsImplements(classType == TokenType.keywordInterface);\r\n\r\n            if (classType == TokenType.keywordEnum) {\r\n                return this.parseEnum(identifier, extendsImplements, position, modifiers.visibility, commentBefore);\r\n            }\r\n\r\n            let scopeFrom = this.getCurrentPosition();\r\n            if (this.expect(TokenType.leftCurlyBracket, true)) {\r\n\r\n                let methodsAndAttributes = this.parseClassBody(classType, identifier);\r\n                let scopeTo = this.getEndOfCurrentToken();\r\n                this.expect(TokenType.rightCurlyBracket, true);\r\n                switch (classType) {\r\n\r\n                    case TokenType.keywordClass: return {\r\n                        type: TokenType.keywordClass,\r\n                        position: position,\r\n                        scopeFrom: scopeFrom,\r\n                        scopeTo: scopeTo,\r\n                        identifier: identifier,\r\n                        attributes: methodsAndAttributes.attributes,\r\n                        methods: methodsAndAttributes.methods,\r\n                        isAbstract: modifiers.isAbstract,\r\n                        visibility: modifiers.visibility,\r\n                        extends: extendsImplements.extends,\r\n                        implements: extendsImplements.implements,\r\n                        typeParameters: typeParameters,\r\n                        commentBefore: commentBefore\r\n                    }\r\n\r\n                    case TokenType.keywordInterface: return {\r\n                        type: TokenType.keywordInterface,\r\n                        position: position,\r\n                        identifier: identifier,\r\n                        scopeFrom: scopeFrom,\r\n                        scopeTo: scopeTo,\r\n                        methods: methodsAndAttributes.methods,\r\n                        typeParameters: typeParameters,\r\n                        extends: extendsImplements.implements,\r\n                        commentBefore: commentBefore\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    parseTypeParameterDefinition(): TypeParameterNode[] {\r\n\r\n        let typeParameters: TypeParameterNode[] = [];\r\n\r\n        let identifierMap = {};\r\n\r\n        this.expect(TokenType.lower, true);\r\n        let first: boolean = true;\r\n\r\n        while ((first && this.tt == TokenType.identifier) || (!first && this.tt == TokenType.comma)) {\r\n\r\n            if (!first) this.expect(TokenType.comma, true);\r\n\r\n            let tp: TypeParameterNode = {\r\n                type: TokenType.typeParameter,\r\n                position: this.getCurrentPosition(),\r\n                identifier: <string>this.cct.value,\r\n                extends: null,\r\n                implements: null\r\n            };\r\n\r\n            if (identifierMap[tp.identifier] != null) {\r\n                this.pushError(\"Zwei Typparameter dürfe nicht denselben Bezeichner tragen.\");\r\n            }\r\n\r\n            identifierMap[tp.identifier] = true;\r\n\r\n            this.nextToken();\r\n\r\n            let extendsImplements = this.parseTypeParameterBounds();\r\n\r\n            tp.extends = extendsImplements.extends;\r\n\r\n            if (tp.extends != null && tp.extends.arrayDimension > 0) {\r\n                this.pushError(\"Der Datentyp des Typparameters \" + tp.identifier + \" darf kein Array sein.\");\r\n            }\r\n\r\n            tp.implements = extendsImplements.implements;\r\n\r\n            tp.implements.forEach((im) => {\r\n                if (im.arrayDimension > 0) {\r\n                    this.pushError(\"Der Datentyp des Typparameters \" + tp.identifier + \" darf kein Array sein.\");\r\n                }\r\n            });\r\n\r\n            first = false;\r\n\r\n            typeParameters.push(tp);\r\n\r\n        }\r\n\r\n        this.expect(TokenType.greater, true);\r\n\r\n        return typeParameters;\r\n    }\r\n\r\n    parseEnum(identifier: string, extendsImplements: {\r\n        extends: TypeNode;\r\n        implements: TypeNode[];\r\n    }, position: TextPosition, visibility: Visibility, commentBefore: Token): ASTNode {\r\n\r\n        if (extendsImplements.extends != null) {\r\n            this.pushError(\"Ein enum kann nicht mit extends erweitert werden.\");\r\n        }\r\n        if (extendsImplements.implements.length > 0) {\r\n            this.pushError(\"Ein enum kann kein Interface implementieren.\");\r\n        }\r\n\r\n        let scopeFrom = this.getCurrentPosition();\r\n        if (this.expect(TokenType.leftCurlyBracket, true)) {\r\n\r\n            let values: EnumValueNode[] = this.parseEnumValues();\r\n\r\n            let methodsAndAttributes = this.parseClassBody(TokenType.keywordEnum, identifier);\r\n\r\n            let scopeTo = this.getEndOfCurrentToken();\r\n\r\n            this.expect(TokenType.rightCurlyBracket, true);\r\n\r\n\r\n            return {\r\n                type: TokenType.keywordEnum,\r\n                position: position,\r\n                scopeFrom: scopeFrom,\r\n                scopeTo: scopeTo,\r\n                attributes: methodsAndAttributes.attributes,\r\n                methods: methodsAndAttributes.methods,\r\n                identifier: identifier,\r\n                values: values,\r\n                visibility: visibility,\r\n                commentBefore: commentBefore\r\n            }\r\n\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    parseEnumValues(): EnumValueNode[] {\r\n\r\n        let values: EnumValueNode[] = [];\r\n\r\n        let pos: number = 0;\r\n        let first: boolean = true;\r\n\r\n        while ((first && this.tt == TokenType.identifier) || this.tt == TokenType.comma) {\r\n            pos = this.pos;\r\n            if (!first) this.nextToken(); // skip comma\r\n            first = false;\r\n\r\n            if (this.expect(TokenType.identifier, false)) {\r\n\r\n                let identifier = <string>this.cct.value;\r\n                let position = this.getCurrentPosition();\r\n                this.nextToken();\r\n                let constructorParameters: TermNode[] = null;\r\n\r\n                let commaPositions: TextPosition[] = [];\r\n                let rightBracketPosition: TextPosition = null;\r\n                //@ts-ignore\r\n                if (this.tt == TokenType.leftBracket) {\r\n                    let mcp = this.parseMethodCallParameters();\r\n                    constructorParameters = mcp.nodes;\r\n                    commaPositions = mcp.commaPositions;\r\n                    rightBracketPosition = mcp.rightBracketPosition;\r\n                }\r\n\r\n                values.push({\r\n                    type: TokenType.pushEnumValue,\r\n                    constructorParameters: constructorParameters,\r\n                    identifier: identifier,\r\n                    position: position,\r\n                    commaPositions: commaPositions,\r\n                    rightBracketPosition: rightBracketPosition\r\n                });\r\n\r\n            };\r\n\r\n            if (this.pos == pos) {\r\n                this.nextToken(); // in case of parsing-emergency\r\n            }\r\n        }\r\n\r\n        if (this.tt == TokenType.semicolon) {\r\n            this.nextToken();\r\n        }\r\n\r\n        return values;\r\n\r\n    }\r\n\r\n    parseClassBody(classType: TokenType, className: string): { methods: MethodDeclarationNode[], attributes: AttributeDeclarationNode[] } {\r\n\r\n        // Assumption: { is already consumed\r\n\r\n        let methods: MethodDeclarationNode[] = [];\r\n        let attributes: AttributeDeclarationNode[] = [];\r\n\r\n        while (true) {\r\n\r\n            if (this.tt == TokenType.rightCurlyBracket || this.tt == TokenType.endofSourcecode) {\r\n                break;\r\n            }\r\n\r\n            let commentBefore: Token = this.cct.commentBefore;\r\n\r\n            let annotation = null;\r\n            if(this.tt == TokenType.at){\r\n                annotation = this.cct.value;\r\n                this.nextToken();\r\n            }\r\n            let modifiers = this.collectModifiers();\r\n\r\n            let isConstructor = false;\r\n            let position = this.getCurrentPosition();\r\n\r\n            if (this.tt == TokenType.identifier && <string>this.cct.value == className && this.ct[1].tt == TokenType.leftBracket) {\r\n                isConstructor = true;\r\n            }\r\n\r\n            let type = this.parseType();\r\n\r\n            if(isConstructor) {\r\n                type = {\r\n                    identifier: \"void\",\r\n                    arrayDimension: 0,\r\n                    position: type.position,\r\n                    type: TokenType.type\r\n                }\r\n            }\r\n\r\n            if (isConstructor || this.expect(TokenType.identifier, false)) {\r\n\r\n                let identifier = className;\r\n\r\n                if (!isConstructor) {\r\n                    position = this.getCurrentPosition();\r\n\r\n                    identifier = <string>this.cct.value;\r\n                    this.nextToken();\r\n                }\r\n\r\n                if (this.tt == TokenType.leftBracket) {\r\n\r\n                    if (isConstructor && classType == TokenType.keywordEnum && modifiers.visibility != Visibility.private) {\r\n                        this.pushError(\"Konstruktoren in enums müssen private sein.\", \"error\", position);\r\n                    }\r\n\r\n                    let parameters: ParameterNode[] = this.parseMethodDeclarationParameters();\r\n\r\n                    let statements: ASTNode[];\r\n                    let scopeFrom: TextPosition = this.getCurrentPosition();\r\n                    let scopeTo: TextPosition = scopeFrom;\r\n\r\n                    if (modifiers.isAbstract) {\r\n                        this.expect(TokenType.semicolon, true);\r\n                        if (isConstructor) {\r\n                            this.pushError(\"Ein Konstruktor kann nicht abstrakt sein.\", \"error\", position);\r\n                        }\r\n                        statements = [];\r\n                    } else {\r\n                        scopeFrom = this.getCurrentPosition();\r\n                        statements = this.parseStatement();\r\n                        scopeTo = this.getEndOfCurrentToken();\r\n                        if (statements != null && statements.length > 0 && statements[0].type == TokenType.scopeNode) {\r\n                            let scopeNode = <ScopeNode>statements[0];\r\n                            scopeFrom = scopeNode.position;\r\n                            scopeTo = scopeNode.positionTo;\r\n                        }\r\n\r\n                    }\r\n\r\n                    methods.push({\r\n                        type: TokenType.methodDeclaration,\r\n                        identifier: identifier,\r\n                        position: position,\r\n                        scopeFrom: scopeFrom,\r\n                        scopeTo: scopeTo,\r\n                        parameters: parameters,\r\n                        statements: statements,\r\n                        visibility: modifiers.visibility,\r\n                        isAbstract: modifiers.isAbstract || classType == TokenType.keywordInterface,\r\n                        isStatic: modifiers.isStatic,\r\n                        isConstructor: isConstructor,\r\n                        returnType: type,\r\n                        annotation: annotation,\r\n                        isTransient: modifiers.isTransient,\r\n                        commentBefore: commentBefore\r\n                    });\r\n\r\n                } else {\r\n\r\n                    if (identifier == className) {\r\n                        this.pushError(\"Das Attribut \" + className + \" darf nicht denselben Bezeichner haben wie die Klasse.\", \"error\", position);\r\n                    }\r\n\r\n                    let initialization: TermNode = null;\r\n\r\n                    if (this.tt == TokenType.assignment) {\r\n                        this.nextToken();\r\n                        //@ts-ignore\r\n                        if (type.arrayDimension > 0 && this.tt == TokenType.leftCurlyBracket) {\r\n                            initialization = this.parseArrayLiteral(type);\r\n                        } else {\r\n                            initialization = this.parseTerm();\r\n                        }\r\n                    }\r\n\r\n                    this.expect(TokenType.semicolon);\r\n\r\n                    attributes.push({\r\n                        type: TokenType.attributeDeclaration,\r\n                        identifier: identifier,\r\n                        position: position,\r\n                        attributeType: type,\r\n                        isStatic: modifiers.isStatic,\r\n                        isFinal: modifiers.isFinal,\r\n                        visibility: modifiers.visibility,\r\n                        initialization: initialization,\r\n                        annotation: annotation,\r\n                        isTransient: modifiers.isTransient,\r\n                        commentBefore: commentBefore\r\n                    });\r\n\r\n                    if (classType == TokenType.keywordInterface) {\r\n                        this.pushError(\"Interfaces dürfen keine Attribute enthalten.\", \"error\", position);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n        return { methods: methods, attributes: attributes }\r\n\r\n    }\r\n\r\n    parseMethodDeclarationParameters(): ParameterNode[] {\r\n\r\n        // Assumption: next token is (\r\n        let parameters: ParameterNode[] = [];\r\n        this.nextToken();\r\n\r\n        if (this.tt == TokenType.rightBracket) {\r\n            this.nextToken();\r\n            return [];\r\n        }\r\n\r\n        let ellipsis = false;\r\n\r\n        while (true) {\r\n            if (ellipsis) {\r\n                this.pushError(\"Nur der letzte Parameter darf als Ellipsis (...) definiert werden.\");\r\n            }\r\n            let isFinal = this.tt == TokenType.keywordFinal;\r\n\r\n            if (isFinal) this.nextToken();\r\n\r\n            let type: TypeNode = this.parseType();\r\n\r\n            ellipsis = this.tt == TokenType.ellipsis;\r\n            if (ellipsis) {\r\n                this.nextToken();\r\n                type.arrayDimension++;\r\n            }\r\n\r\n            if (this.expect(TokenType.identifier, false)) {\r\n                let identifier = <string>this.cct.value;\r\n                parameters.push({\r\n                    type: TokenType.parameterDeclaration,\r\n                    position: this.getCurrentPosition(),\r\n                    identifier: identifier,\r\n                    parameterType: type,\r\n                    isFinal: isFinal,\r\n                    isEllipsis: ellipsis\r\n                });\r\n                this.nextToken();\r\n            }\r\n            if (this.tt != TokenType.comma) {\r\n                break;\r\n            }\r\n            this.nextToken(); // consume comma\r\n        }\r\n\r\n        this.expect(TokenType.rightBracket, true);\r\n\r\n        return parameters;\r\n\r\n    }\r\n\r\n    parseExtendsImplements(isInterface: boolean): { extends: TypeNode, implements: TypeNode[] } {\r\n\r\n        let sextends: TypeNode = null;\r\n        let simplements: TypeNode[] = [];\r\n\r\n        while(this.comesToken([TokenType.keywordExtends, TokenType.keywordImplements])){\r\n            if (this.comesToken(TokenType.keywordExtends) && !isInterface) {\r\n                if(sextends != null){\r\n                    this.pushError(\"Eine Klasse kann nicht Unterklasse von zwei anderen Klassen sein, es darf also hier nur ein Mal 'extends...' stehen.\", \"error\", sextends.position);\r\n                }\r\n                this.nextToken(); // skip extends\r\n                sextends = this.parseType();\r\n                if (sextends != null && sextends.arrayDimension > 0) {\r\n                    this.pushError(\"Der Datentyp der Basisklasse darf kein Array sein.\", \"error\", sextends.position);\r\n                }\r\n            }\r\n    \r\n            if ((!isInterface && this.comesToken(TokenType.keywordImplements)) || (isInterface && this.comesToken(TokenType.keywordExtends))) {\r\n                if(simplements.length > 0){\r\n                    this.pushError(\"Es darf hier nur ein Mal 'implements' stehen, hinter 'implements' ist aber eine kommaseparierte Liste von Interfaces erlaubt.\", \"warning\");\r\n                }\r\n                this.nextToken(); // Skip implements/extends\r\n                let first = true;\r\n                while ((first && this.tt == TokenType.identifier) || (!first && this.tt == TokenType.comma)) {\r\n                    if (!first) this.nextToken(); // skip comma\r\n                    first = false;\r\n                    simplements.push(this.parseType());\r\n                }\r\n            }\r\n        }\r\n\r\n        simplements.forEach((im) => {\r\n            if (im.arrayDimension > 0) {\r\n                this.pushError(im.identifier + \"[] ist kein Interface, sondern ein Array. Array-Datentypen sind hier nicht erlaubt.\");\r\n            }\r\n        });\r\n\r\n        return {\r\n            extends: sextends, implements: simplements\r\n        }\r\n    }\r\n\r\n    parseTypeParameterBounds(): { extends: TypeNode, implements: TypeNode[] } {\r\n\r\n        let sextends: TypeNode = null;\r\n        let simplements: TypeNode[] = [];\r\n\r\n        if (this.comesToken(TokenType.keywordExtends)) {\r\n            this.nextToken(); // skip extends\r\n            sextends = this.parseType();\r\n        }\r\n\r\n        while (this.comesToken(TokenType.ampersand)) {\r\n            this.nextToken(); // Skip ampersand\r\n            simplements.push(this.parseType());\r\n        }\r\n\r\n        return {\r\n            extends: sextends, implements: simplements\r\n        }\r\n\r\n    }\r\n\r\n    collectModifiers(): { isAbstract: boolean, isStatic: boolean, visibility: Visibility, isFinal: boolean, isTransient: boolean } {\r\n\r\n        let visibility = Visibility.public;\r\n        let isAbstract = false;\r\n        let isStatic = false;\r\n        let isFinal = false;\r\n        let isTransient = false;\r\n\r\n        let done = false;\r\n        let asError: boolean = false;\r\n\r\n        while (!done) {\r\n\r\n            switch (this.tt) {\r\n                case TokenType.keywordPublic:\r\n                    visibility = Visibility.public;\r\n                    this.nextToken();\r\n                    break;\r\n                case TokenType.keywordPrivate:\r\n                    visibility = Visibility.private;\r\n                    this.nextToken();\r\n                    break;\r\n                case TokenType.keywordProtected:\r\n                    visibility = Visibility.protected;\r\n                    this.nextToken();\r\n                    break;\r\n                case TokenType.keywordStatic:\r\n                    isStatic = true;\r\n                    if(isAbstract && !asError){\r\n                        this.pushError(\"Die Modifier 'abstract' und 'static' können nicht kombiniert werden.\");\r\n                        asError = true;\r\n                    }\r\n                    this.nextToken();\r\n                    break;\r\n                case TokenType.keywordAbstract:\r\n                    isAbstract = true;\r\n                    if(isStatic && !asError){\r\n                        this.pushError(\"Die Modifier 'abstract' und 'static' können nicht kombiniert werden.\");\r\n                        asError = true;\r\n                    }\r\n                    this.nextToken();\r\n                    break;\r\n                case TokenType.keywordFinal:\r\n                    isFinal = true;\r\n                    this.nextToken();\r\n                    break;\r\n                case TokenType.keywordTransient:\r\n                    isTransient = true;\r\n                    this.nextToken();\r\n                    break;\r\n                default: done = true;\r\n            }\r\n\r\n        }\r\n\r\n\r\n        return { isAbstract: isAbstract, isStatic: isStatic, visibility: visibility, isFinal: isFinal, isTransient: isTransient };\r\n\r\n    }\r\n\r\n\r\n}","import { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { ModuleStore } from \"../parser/Module.js\";\r\nimport { ArrayType } from \"./Array.js\";\r\nimport { Interface, Klass } from \"./Class.js\";\r\nimport { Enum, EnumRuntimeObject } from \"./Enum.js\";\r\nimport { PrimitiveType, Type, Value } from \"./Types.js\";\r\n\r\ntype SerializedObject = {\r\n    \"!k\"?: string, // Class identifier or object index\r\n    \"!i\": number  // index\r\n}\r\n\r\nexport class JsonTool {\r\n    // to deserialize:\r\n    indexToObjectMap: { [index: number]: Value };\r\n    valuesToResolve: { v: Value, i: number }[];\r\n\r\n    // to serialize:\r\n    objectToIndexMap: Map<RuntimeObject, number>;\r\n    nextIndex: number;\r\n\r\n    primitiveTypes: String[] = [\"String\", \"Integer\", \"Double\", \"Boolean\", \"Float\", \"Character\"];\r\n\r\n    toJson(value: Value): string {\r\n        this.objectToIndexMap = new Map();\r\n        this.nextIndex = 0;\r\n        let json = JSON.stringify(this.toJsonObj(value));\r\n        this.objectToIndexMap = null; // free memory\r\n        return json;\r\n    }\r\n\r\n    toJsonObj(value: Value): any {\r\n        let type = value.type;\r\n        let v = value.value;\r\n        if (v == null) return null;\r\n\r\n        if ((type instanceof Klass || type instanceof Interface) && this.primitiveTypes.indexOf(type.identifier) < 0) {\r\n\r\n            if (type instanceof Enum) {\r\n                let enumObj = <EnumRuntimeObject>v;\r\n                return enumObj.enumValue.ordinal;\r\n            }\r\n\r\n            let rto = <RuntimeObject>v;\r\n            return this.objectToJsonObj(rto);\r\n        } else if (type instanceof ArrayType) {\r\n            let arrayValues: Value[] = v;\r\n            return arrayValues.map(value => this.toJsonObj(value));\r\n        } else {\r\n            // primitive Type\r\n            return value.value;\r\n        }\r\n    }\r\n\r\n    objectToJsonObj(rto: RuntimeObject): SerializedObject {\r\n        // We solve circular object references by serializing an index when the same object occurs more than once.\r\n        let index = this.objectToIndexMap.get(rto);\r\n        if (index != null) {\r\n            return { \"!i\": index };\r\n        }\r\n\r\n        index = this.nextIndex++;\r\n        this.objectToIndexMap.set(rto, index);\r\n        let klass: Klass = <Klass>rto.class;\r\n\r\n        let serializedObject: SerializedObject = { \"!k\": klass.identifier, \"!i\": index };\r\n        // Don't serialize system classes unless they are explicitely serializable\r\n        if (klass.module.isSystemModule) {\r\n            return null;\r\n        }\r\n\r\n        while (klass != null) {\r\n            let first: boolean = true;\r\n            let serializedAttributes: any;\r\n            for (let attribute of klass.attributes) {\r\n                if (!attribute.isStatic && !attribute.isTransient) {\r\n                    if (first) {\r\n                        first = false;\r\n                        serializedAttributes = {};\r\n                        serializedObject[klass.identifier] = serializedAttributes;\r\n                    }\r\n                    serializedAttributes[attribute.identifier] = this.toJsonObj(rto.attributes[attribute.index]);\r\n                }\r\n            }\r\n\r\n            klass = klass.baseClass;\r\n        }\r\n\r\n        return serializedObject;\r\n    }\r\n\r\n    fromJson(jsonString: string, type: Type, moduleStore: ModuleStore, interpreter: Interpreter): any {\r\n        this.indexToObjectMap = {};\r\n        this.valuesToResolve = [];\r\n\r\n        let obj: any = JSON.parse(jsonString);\r\n        let ret = this.fromJsonObj(obj, type, moduleStore, interpreter);\r\n\r\n        for (let vtr of this.valuesToResolve) {\r\n            let value = this.indexToObjectMap[vtr.i];\r\n            if (value != null) {\r\n                vtr.v.type = value.type;\r\n                vtr.v.value = value.value;\r\n            }\r\n        }\r\n\r\n        this.indexToObjectMap = null; // free memory\r\n        this.valuesToResolve = null;\r\n        return ret.value;\r\n    }\r\n\r\n    fromJsonObj(obj: any, type: Type, moduleStore: ModuleStore, interpreter: Interpreter): Value {\r\n        if (obj == null) return { type: type, value: null };\r\n\r\n        if ((type instanceof Klass || type instanceof Interface) && this.primitiveTypes.indexOf(type.identifier) < 0) {\r\n\r\n            if (type instanceof Enum) {\r\n                return {\r\n                    type: type,\r\n                    value: type.indexToInfoMap[obj].object\r\n                }\r\n            }\r\n\r\n            let serializedObject = <SerializedObject>obj;\r\n            return this.objectFromJsonObj(serializedObject, type, moduleStore, interpreter);\r\n\r\n        } else if (type instanceof ArrayType) {\r\n            let jsonArray: any[] = obj;\r\n            return {\r\n                type: type,\r\n                value: jsonArray.map(v => this.fromJsonObj(v, type.arrayOfType, moduleStore, interpreter))\r\n            }\r\n        } else {\r\n            // primitive Type\r\n            return { type: type, value: obj }\r\n        }\r\n\r\n    }\r\n\r\n    objectFromJsonObj(serializedObject: SerializedObject, type: Klass | Interface, moduleStore: ModuleStore,\r\n        interpreter: Interpreter): Value {\r\n\r\n        let identifier: string = serializedObject[\"!k\"];\r\n        let index = serializedObject[\"!i\"];\r\n        if (identifier != null) {\r\n\r\n            let klass1: Klass = <Klass>moduleStore.getType(identifier).type;\r\n            let klass = klass1;\r\n\r\n            let rto: RuntimeObject = interpreter.instantiateObjectImmediately(klass);\r\n\r\n            while (klass != null) {\r\n                let attributes = rto.attributes;\r\n                let serializedAttributes = serializedObject[klass.identifier];\r\n                if (attributes != null && serializedObject != null) {\r\n                    for (let attribute of klass.attributes) {\r\n                        if (!attribute.isStatic && !attribute.isTransient) {\r\n                            attributes[attribute.index] = this.fromJsonObj(serializedAttributes[attribute.identifier], attribute.type, moduleStore, interpreter);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                klass = klass.baseClass;\r\n            }\r\n\r\n            let value: Value = { type: klass1, value: rto };\r\n            this.indexToObjectMap[index] = value;\r\n            return value;\r\n\r\n        } else {\r\n            let index = serializedObject[\"!i\"];\r\n            let value = this.indexToObjectMap[index];\r\n            if (value == null) {\r\n                value = { type: type, value: null };\r\n                this.valuesToResolve.push({ v: value, i: index });\r\n                return value;\r\n            } else {\r\n                return { type: value.type, value: value.value }; // return copy\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n","import { TokenType, TextPosition } from \"../lexer/Token.js\";\r\nimport { ArrayType } from \"../types/Array.js\";\r\nimport { Klass, Interface, TypeVariable } from \"../types/Class.js\";\r\nimport { Attribute, Method, Parameterlist, Type, Variable, PrimitiveType } from \"../types/Types.js\";\r\nimport { ClassDeclarationNode, InterfaceDeclarationNode, MethodDeclarationNode, TypeNode, EnumDeclarationNode, TypeParameterNode } from \"./AST.js\";\r\nimport { Module, ModuleStore } from \"./Module.js\";\r\nimport { nullType, intPrimitiveType, booleanPrimitiveType, floatPrimitiveType, doublePrimitiveType, stringPrimitiveType, charPrimitiveType, objectType } from \"../types/PrimitiveTypes.js\";\r\nimport { Enum } from \"../types/Enum.js\";\r\nimport { JsonTool } from \"../types/TypeTools.js\";\r\nimport { MainBase } from \"../../main/MainBase.js\";\r\n\r\ntype GenericTypeList = { typeNode: TypeNode, module: Module }[];\r\n\r\ntype TypeParameterInfo = {\r\n    tpn: TypeParameterNode;\r\n    tp: TypeVariable;\r\n    ci: Klass | Interface;\r\n    cdn: ClassDeclarationNode | InterfaceDeclarationNode;\r\n    index: number\r\n};\r\n\r\n// TODO: find cyclic references in extends ...\r\nexport class TypeResolver {\r\n\r\n    static WATCHDOG: number = 5;\r\n    moduleStore: ModuleStore;\r\n\r\n    classes: ClassDeclarationNode[];\r\n    interfaces: InterfaceDeclarationNode[];\r\n    enums: EnumDeclarationNode[];\r\n\r\n    moduleToTypeParameterListMap: Map<Module, TypeVariable[]> = new Map();\r\n\r\n    unresolvedTypes: Map<Module, TypeNode[]>;\r\n\r\n    genericTypes: GenericTypeList = [];\r\n    genericTypesInClassDefinitions: GenericTypeList = [];\r\n\r\n    typeParameterList: TypeParameterInfo[] = [];\r\n\r\n    constructor(private main: MainBase) {\r\n\r\n    }\r\n\r\n    start(moduleStore: ModuleStore) {\r\n\r\n        this.classes = [];\r\n        this.interfaces = [];\r\n        this.enums = [];\r\n        this.unresolvedTypes = new Map();\r\n\r\n        this.moduleStore = moduleStore;\r\n\r\n        this.resolveTypesInModules();\r\n\r\n        this.setupClassesAndInterfaces();\r\n\r\n        let unresolvedGenericTypesInClasses = this.resolveTypeVariables();\r\n\r\n        this.resolveUnresolvedTypes(false);\r\n\r\n        this.resolveGenericTypes(unresolvedGenericTypesInClasses);\r\n\r\n        this.resolveExtendsImplements();\r\n\r\n        let unresolvedGenericTypes = this.resolveGenericTypes(this.genericTypes);\r\n\r\n        this.resolveUnresolvedTypes(true);\r\n\r\n        this.resolveGenericTypes(unresolvedGenericTypes);\r\n\r\n        this.setupMethodsAndAttributes();\r\n\r\n        this.checkDoubleIdentifierDefinition();\r\n\r\n        this.checkGenericTypesAgainsTypeGuards();\r\n\r\n        this.setupAttributeIndices();\r\n\r\n    }\r\n    \r\n    setupAttributeIndices() {\r\n        for(let cl of this.classes){\r\n            cl.resolvedType.setupAttributeIndicesRecursive();\r\n            if(cl.resolvedType.staticClass != null){\r\n                cl.resolvedType.staticClass.setupAttributeIndicesRecursive();\r\n            }\r\n        }\r\n        for(let cl of this.enums){\r\n            cl.resolvedType.setupAttributeIndicesRecursive();\r\n            if(cl.resolvedType.staticClass != null){\r\n                cl.resolvedType.staticClass.setupAttributeIndicesRecursive();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    checkGenericTypesAgainsTypeGuards() {\r\n\r\n        for (let tn of this.genericTypes) {\r\n            if (tn.typeNode.genericParameterTypes == null) continue; // Error in resolveGenericType => nothing to do.\r\n\r\n            let ci: Klass | Interface = <any>tn.typeNode.resolvedType;\r\n\r\n            if (ci.isGenericVariantFrom == null) continue;\r\n\r\n            if (ci.typeVariables.length != ci.isGenericVariantFrom.typeVariables.length) {\r\n                tn.module.errors[2].push({\r\n                    position: tn.typeNode.position,\r\n                    text: \"Der Generische Typ \" + ci.isGenericVariantFrom.identifier + \" hat \" + ci.isGenericVariantFrom.typeVariables.length + \" Typparameter. Hier wurden aber \" + ci.typeVariables.length + \" angegeben.\",\r\n                    level: \"error\"\r\n                });\r\n                continue;\r\n            }\r\n\r\n            for (let i = 0; i < ci.typeVariables.length; i++) {\r\n\r\n                let error: string = null;\r\n\r\n                let actualType = ci.typeVariables[i];\r\n                let typeGuard = ci.isGenericVariantFrom.typeVariables[i];\r\n                let genericParameterType = tn.typeNode.genericParameterTypes[i];\r\n                actualType.scopeFrom = typeGuard.scopeFrom;\r\n                actualType.scopeTo = typeGuard.scopeTo;\r\n                actualType.identifier = typeGuard.identifier;\r\n\r\n                error = \"\";\r\n                if (!actualType.type.hasAncestorOrIs(typeGuard.type)) {\r\n                    error += \"Die Klasse \" + actualType.type.identifier + \" ist keine Unterklasse von \" + typeGuard.type.identifier + \" und pass damit nicht zum Typparamter \" + typeGuard.identifier + \" der Klasse \" + ci.isGenericVariantFrom.identifier + \". \";\r\n                }\r\n\r\n                let ifList: string[] = [];\r\n                for (let tgInterface of typeGuard.type.implements) {\r\n                    if (!actualType.type.implementsInterface(tgInterface)) {\r\n                        ifList.push(tgInterface.identifier);\r\n                    }\r\n                }\r\n\r\n                if (ifList.length > 0) {\r\n                    error += \"Die Klasse \" + actualType.identifier + \" implementiert nicht die Interfaces \" + ifList.join(\", \");\r\n                }\r\n\r\n                if (error != \"\") {\r\n                    tn.module.errors[2].push({\r\n                        position: genericParameterType.position,\r\n                        text: \"Der angegebene Wert des Typparameters passt nicht zur Definition: \" + error,\r\n                        level: \"error\"\r\n                    });\r\n                }\r\n\r\n            }\r\n\r\n            this.adjustMethodsAndAttributesToTypeParameters(ci, TypeResolver.WATCHDOG);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    adjustMethodsAndAttributesToTypeParameters(classOrInterface: Klass | Interface, watchdog: number) {\r\n\r\n        if(watchdog <= 0) return;\r\n\r\n        if (classOrInterface != null && classOrInterface.isGenericVariantFrom != null && classOrInterface.typeVariables.length != 0) {\r\n\r\n            let methodListAltered: boolean = false;\r\n            let newMethodList: Method[] = [];\r\n            for (let m of classOrInterface.methods) {\r\n                let newMethod = this.getAdjustedMethod(m, classOrInterface.typeVariables, watchdog - 1);\r\n                methodListAltered = methodListAltered || newMethod.altered;\r\n                newMethodList.push(newMethod.newMethod);\r\n            }\r\n\r\n            if (methodListAltered) classOrInterface.methods = newMethodList;\r\n\r\n            if (classOrInterface instanceof Klass) {\r\n\r\n                let newAttributes: Attribute[] = [];\r\n                let newAttributeMap: Map<string, Attribute> = new Map();\r\n                let attributesAltered: boolean = false;\r\n\r\n                for (let attribute of classOrInterface.attributes) {\r\n                    let newAttribute = this.getAdjustedAttribute(attribute, classOrInterface.typeVariables, watchdog - 1);\r\n                    attributesAltered = attributesAltered || newAttribute.altered;\r\n                    newAttributes.push(newAttribute.newAttribute);\r\n                    newAttributeMap.set(attribute.identifier, newAttribute.newAttribute);\r\n                }\r\n\r\n                if (attributesAltered) {\r\n                    classOrInterface.attributes = newAttributes;\r\n                    classOrInterface.attributeMap = newAttributeMap;\r\n                }\r\n\r\n                this.adjustMethodsAndAttributesToTypeParameters(classOrInterface.baseClass, watchdog - 1);\r\n\r\n                // for (let impl of classOrInterface.implements) {\r\n                //     this.adjustMethodsAndAttributesToTypeParameters(impl);\r\n                // }\r\n            } else {\r\n                for (let ext of classOrInterface.extends) {\r\n                    this.adjustMethodsAndAttributesToTypeParameters(ext, watchdog - 1);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    getAdjustedAttribute(attribute: Attribute, typeVariables: TypeVariable[], watchdog: number): { altered: boolean, newAttribute: Attribute } {\r\n\r\n        let nt = this.getAdjustedType(attribute.type, typeVariables, true, watchdog - 1);\r\n        if (nt.altered) {\r\n            let a: Attribute = Object.create(attribute);\r\n            a.type = nt.newType;\r\n            return { altered: true, newAttribute: a }\r\n        } else {\r\n            return { altered: false, newAttribute: attribute }\r\n        }\r\n\r\n    }\r\n\r\n    getAdjustedMethod(method: Method, typeVariables: TypeVariable[], watchdog: number): { altered: boolean, newMethod: Method } {\r\n\r\n        let nrt = this.getAdjustedType(method.returnType, typeVariables, true, watchdog - 1);\r\n\r\n        let parameterAltered: boolean = false;\r\n        let newParameters: Variable[] = [];\r\n        for (let p of method.parameterlist.parameters) {\r\n            let nt = this.getAdjustedType(p.type, typeVariables, false, watchdog - 1);\r\n            if (nt.altered) {\r\n                parameterAltered = true;\r\n                let pNew: Variable = Object.create(p);\r\n                pNew.type = nt.newType;\r\n                newParameters.push(pNew);\r\n            } else {\r\n                newParameters.push(p);\r\n            }\r\n        }\r\n\r\n        if (nrt.altered || parameterAltered) {\r\n            let newMethod: Method = Object.create(method);\r\n            if (nrt.altered) newMethod.returnType = nrt.newType;\r\n            if (parameterAltered) {\r\n                newMethod.parameterlist = new Parameterlist(newParameters);\r\n            }\r\n            return { altered: true, newMethod: newMethod }\r\n        } else {\r\n            return { altered: false, newMethod: method };\r\n        }\r\n\r\n    }\r\n\r\n    getAdjustedType(type: Type, typeVariables: TypeVariable[], adjustMethodsAndAttributesRecursive: boolean, watchdog: number): { altered: boolean, newType: Type } {\r\n\r\n        if (type == null) return { altered: false, newType: type };\r\n\r\n        if (type[\"isTypeVariable\"] == true) {\r\n            for (let tv of typeVariables) {\r\n                if (tv.identifier == type.identifier) {\r\n                    return { altered: true, newType: tv.type };\r\n                }\r\n            }\r\n            return { altered: false, newType: type };\r\n        }\r\n\r\n        if ((type instanceof Klass || type instanceof Interface) && type.typeVariables.length > 0) {\r\n            let newTypeVariables: TypeVariable[] = [];\r\n            let altered: boolean = false;\r\n            for (let tv of type.typeVariables) {\r\n                let nt = this.getAdjustedType(tv.type, typeVariables, false, watchdog - 1);\r\n                if (nt.altered) {\r\n                    newTypeVariables.push({\r\n                        identifier: tv.identifier,\r\n                        scopeFrom: tv.scopeFrom,\r\n                        scopeTo: tv.scopeTo,\r\n                        type: <Klass>nt.newType\r\n                    })\r\n                    altered = true;\r\n                } else {\r\n                    newTypeVariables.push(tv);\r\n                }\r\n            }\r\n            if (altered) {\r\n                let newClassInterface = type.clone();\r\n                newClassInterface.typeVariables = newTypeVariables;\r\n                if (adjustMethodsAndAttributesRecursive) this.adjustMethodsAndAttributesToTypeParameters(newClassInterface, watchdog - 1);\r\n                return { altered: true, newType: newClassInterface }\r\n            } else {\r\n                return { altered: false, newType: type }\r\n            }\r\n        }\r\n\r\n        if(type instanceof ArrayType){\r\n            let nt = this.getAdjustedType(type.arrayOfType, typeVariables, adjustMethodsAndAttributesRecursive, watchdog - 1);\r\n            return {\r\n                altered: nt.altered,\r\n                newType: nt.altered ? new ArrayType(nt.newType) : type\r\n            }\r\n        }\r\n\r\n        return { altered: false, newType: type };\r\n    }\r\n\r\n    resolveGenericTypes(genericTypes: GenericTypeList): GenericTypeList {\r\n        let done: boolean = false;\r\n        let todoList: GenericTypeList = genericTypes.slice(0);\r\n        while (!done) {\r\n            done = true;\r\n            for (let i = 0; i < todoList.length; i++) {\r\n                let tn = todoList[i];\r\n\r\n                if (this.resolveGenericType(tn)) {\r\n                    done = false;\r\n                }\r\n                if (tn.typeNode.genericParameterTypes == null || tn.typeNode.genericParameterTypesResolved != null) {\r\n                    todoList.splice(todoList.indexOf(tn), 1);\r\n                    i--;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return todoList;\r\n    }\r\n\r\n    // returns true if something new could be resolved\r\n    resolveGenericType(tn: { typeNode: TypeNode, module: Module }): boolean {\r\n\r\n        if (tn.typeNode.genericParameterTypesResolved != null) return false;\r\n        if (tn.typeNode.genericParameterTypes == null) return true;\r\n\r\n        /**\r\n         * e.g. Map<Integer, String> test = new Map<>();\r\n         * Subsequent Code processes the type Map<Integer, String>\r\n         */\r\n\r\n        let ci: Klass | Interface = <any>tn.typeNode.resolvedType; // in example: Map\r\n        if (ci == null || !(ci instanceof Interface || ci instanceof Klass)) { // There had been an error... (in example: Map has not been resolved)\r\n            tn.typeNode.genericParameterTypes = null;\r\n            return false; // => exit gracefully\r\n        }\r\n\r\n        if (!ci.typeVariablesReady) return false;\r\n\r\n        let parameterTypes: (Klass | Interface)[] = [];\r\n        for (let i = 0; i < tn.typeNode.genericParameterTypes.length; i++) {\r\n            let genericParameterType = tn.typeNode.genericParameterTypes[i];\r\n            let resolvedType = genericParameterType.resolvedType;\r\n\r\n            if (resolvedType == null) {\r\n                return false;\r\n            }\r\n\r\n            if (genericParameterType.genericParameterTypes != null && genericParameterType.genericParameterTypesResolved == null) {\r\n                return false; // first resolve this type!\r\n            }\r\n\r\n            if (!(resolvedType instanceof Interface || resolvedType instanceof Klass)) {\r\n                tn.module.errors[2].push({\r\n                    position: genericParameterType.position,\r\n                    text: \"Hier wird ein Interface- oder Klassentyp erwartet. Der Typ \" + genericParameterType.identifier + \" ist aber keiner.\",\r\n                    level: \"error\"\r\n                });\r\n                tn.typeNode.genericParameterTypes = null;\r\n                return true; // => exit gracefully\r\n            }\r\n\r\n            parameterTypes.push(<any>genericParameterType.resolvedType);\r\n\r\n        }\r\n\r\n        let typeVariablesOldToNewMap: Map<Klass, Klass> = new Map();\r\n\r\n        if (ci.typeVariables.length != parameterTypes.length) {\r\n            tn.module.errors[2].push({\r\n                position: tn.typeNode.position,\r\n                text: (ci instanceof Klass ? \"Die Klasse \" : \"Das Interface \") + ci.identifier + \" hat \" + ci.typeVariables.length + \" Typparameter, hier sind aber \" + parameterTypes.length + \" angegeben.\",\r\n                level: \"error\"\r\n            });\r\n            tn.typeNode.genericParameterTypes = null;\r\n            return true; // => exit gracefully\r\n        }\r\n\r\n        let i = 0;\r\n        for (let type of parameterTypes) {\r\n\r\n            let oldTypeVariable = ci.typeVariables[i];\r\n\r\n            if (type instanceof Interface) {\r\n                let type1 = objectType.clone();\r\n                type1.implements.push(type);\r\n                type = type1;\r\n            }\r\n\r\n            let newTypeVariable = {\r\n                identifier: oldTypeVariable.identifier,\r\n                scopeFrom: oldTypeVariable.scopeFrom,\r\n                scopeTo: oldTypeVariable.scopeTo,\r\n                type: type\r\n            };\r\n\r\n            typeVariablesOldToNewMap.set(ci.typeVariables[i].type, newTypeVariable.type)\r\n            i++;\r\n        }\r\n\r\n        let newCi =\r\n            this.propagateTypeParameterToBaseClassesAndImplementedInterfaces(ci, typeVariablesOldToNewMap);\r\n\r\n        tn.typeNode.resolvedType = newCi;\r\n        tn.typeNode.genericParameterTypesResolved = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    propagateTypeParameterToBaseClassesAndImplementedInterfaces(classOrInterface: Klass | Interface,\r\n        typeVariablesOldToNewMap: Map<Klass, Klass>): Klass | Interface {\r\n\r\n        if (classOrInterface instanceof Klass) {\r\n            let newClass: Klass = classOrInterface.clone();\r\n\r\n            newClass.typeVariables = [];\r\n            for (let tv of classOrInterface.typeVariables) {\r\n                let newType = typeVariablesOldToNewMap.get(tv.type);\r\n                let tv1 = tv;\r\n                if (newType != null) {\r\n                    tv1 = {\r\n                        identifier: tv.identifier,\r\n                        scopeFrom: tv.scopeFrom,\r\n                        scopeTo: tv.scopeTo,\r\n                        type: newType\r\n                    }\r\n                }\r\n                newClass.typeVariables.push(tv1);\r\n            }\r\n\r\n            let baseKlass = classOrInterface.baseClass;\r\n            if (baseKlass != null && baseKlass.isGenericVariantFrom != null) {\r\n\r\n                newClass.setBaseClass(<Klass>this.propagateTypeParameterToBaseClassesAndImplementedInterfaces(baseKlass, typeVariablesOldToNewMap));\r\n\r\n            }\r\n\r\n            newClass.implements = [];\r\n            for (let impl of classOrInterface.implements) {\r\n                if (impl.isGenericVariantFrom == null) {\r\n                    newClass.implements.push(impl);\r\n                } else {\r\n                    newClass.implements.push(<Interface>this.propagateTypeParameterToBaseClassesAndImplementedInterfaces(impl, typeVariablesOldToNewMap));\r\n                }\r\n            }\r\n\r\n            return newClass;\r\n\r\n        } else {\r\n            let newInterface: Interface = classOrInterface.clone();\r\n\r\n            newInterface.typeVariables = [];\r\n            for (let tv of classOrInterface.typeVariables) {\r\n                let newType = typeVariablesOldToNewMap.get(tv.type);\r\n                let tv1 = tv;\r\n                if (newType != null) {\r\n                    tv1 = {\r\n                        identifier: tv.identifier,\r\n                        scopeFrom: tv.scopeFrom,\r\n                        scopeTo: tv.scopeTo,\r\n                        type: newType\r\n                    }\r\n                }\r\n                newInterface.typeVariables.push(tv1);\r\n            }\r\n\r\n            newInterface.extends = [];\r\n            for (let impl of classOrInterface.extends) {\r\n                if (impl.isGenericVariantFrom == null) {\r\n                    newInterface.extends.push(impl);\r\n                } else {\r\n                    newInterface.extends.push(<Interface>this.propagateTypeParameterToBaseClassesAndImplementedInterfaces(impl, typeVariablesOldToNewMap));\r\n                }\r\n            }\r\n\r\n            return newInterface;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    checkDoubleIdentifierDefinition() {\r\n        let identifierModuleMap: Map<string, Module> = new Map();\r\n\r\n        for (let module of this.moduleStore.getModules(false)) {\r\n            for (let type of module.typeStore.typeList) {\r\n                let otherModule = identifierModuleMap.get(type.identifier);\r\n                if (otherModule != null) {\r\n                    module.errors[1].push({\r\n                        text: \"Der Typbezeichner \" + type.identifier + \" wurde mehrfach definiert, nämlich in den Modulen \" +\r\n                            module.file.name + \" und \" + otherModule.file.name + \".\",\r\n                        position: type.declaration.position,\r\n                        level: \"error\"\r\n                    });\r\n                    let otherType = otherModule.typeStore.getType(type.identifier);\r\n                    if (otherType != null) {\r\n                        otherModule.errors[1].push({\r\n                            text: \"Der Typbezeichner \" + type.identifier + \" wurde mehrfach definiert, nämlich in den Modulen \" +\r\n                                otherModule.file.name + \" und \" + module.file.name + \".\",\r\n                            position: otherType.declaration.position,\r\n                            level: \"error\"\r\n                        });\r\n                    }\r\n                } else {\r\n                    identifierModuleMap.set(type.identifier, module);\r\n                }\r\n            }\r\n        }\r\n\r\n        let baseModule = this.moduleStore.getBaseModule();\r\n\r\n        for (let tp of this.typeParameterList) {\r\n            let module = tp.ci.module;\r\n            let otherModule = identifierModuleMap.get(tp.tpn.identifier);\r\n            if (otherModule == null) {\r\n                let systemType = baseModule.typeStore.getType(tp.tpn.identifier);\r\n                if (systemType != null) otherModule = baseModule;\r\n            }\r\n            if (otherModule != null) {\r\n                module.errors[1].push({\r\n                    text: \"Der Typbezeichner \" + tp.tpn.identifier + \" wurde mehrfach definiert, nämlich in den Modulen \" +\r\n                        module.file.name + \" und \" + otherModule.file.name + \".\",\r\n                    position: tp.tpn.position,\r\n                    level: \"error\"\r\n                });\r\n                let otherType = otherModule.typeStore.getType(tp.tpn.identifier);\r\n                if (otherType != null && otherModule != baseModule) {\r\n                    otherModule.errors[1].push({\r\n                        text: \"Der Typbezeichner \" + tp.tpn.identifier + \" wurde mehrfach definiert, nämlich in den Modulen \" +\r\n                            otherModule.file.name + \" und \" + module.file.name + \".\",\r\n                        position: otherType.declaration.position,\r\n                        level: \"error\"\r\n                    });\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    resolveUnresolvedTypes(lastPass: boolean) {\r\n        for (let module of this.moduleStore.getModules(false)) {\r\n            module.dependsOnModules = new Map();\r\n        }\r\n\r\n        for (let module of this.moduleStore.getModules(false)) {\r\n            let ut = this.unresolvedTypes.get(module);\r\n            let utNew: TypeNode[] = [];\r\n            for (let type of ut) {\r\n                if (!this.resolveType(type, module, lastPass)) {\r\n                    utNew.push(type);\r\n                }\r\n            }\r\n            this.unresolvedTypes.set(module, utNew);\r\n        }\r\n    }\r\n\r\n    addFromJsonMethod(klass: Klass) {\r\n        let interpreter = this.main.getInterpreter();\r\n        klass.addMethod(new Method(\"fromJson\", new Parameterlist([\r\n            { identifier: \"jsonString\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), klass,\r\n            (parameters) => {\r\n                let json: string = parameters[1].value;\r\n                return new JsonTool().fromJson(json, klass, this.moduleStore, interpreter);\r\n            }, false, true, `Konvertiert eine Json-Zeichenkette in ein ${klass.identifier}-Objekt (\"deserialisieren\"). Vor dem Deserialisieren eines Objekts werden die Attributinitialisierer angewandt und - falls vorhanden - ein parameterloser Konstruktor ausgeführt. Der Algorithmus kommt auch mit zyklischen Objektreferenzen zurecht.`, false));\r\n\r\n    }\r\n\r\n    addToJsonMethod(klass: Klass) {\r\n        klass.addMethod(new Method(\"toJson\", new Parameterlist([]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return new JsonTool().toJson(parameters[0]);\r\n            }, false, false, `Konvertiert ein Objekt (rekursiv mitsamt referenzierter Objekte) in eine Json-Zeichenkette. Nicht konvertiert werden Systemklassen (außer: ArrayList) sowie mit dem Schlüsselwort transient ausgezeichnete Attribute.`));\r\n\r\n    }\r\n\r\n\r\n    setupMethodsAndAttributes() {\r\n\r\n        let classesOrEnums: (ClassDeclarationNode | EnumDeclarationNode)[] = [];\r\n        classesOrEnums = classesOrEnums.concat(this.classes);\r\n        classesOrEnums = classesOrEnums.concat(this.enums);\r\n\r\n        for (let cn of classesOrEnums) {\r\n            for (let mn of cn.methods) {\r\n                let m: Method = this.setupMethod(mn, cn.resolvedType.module, cn.resolvedType);\r\n                if (m != null) {\r\n                    if(mn.commentBefore != null) m.documentation = \"\" + mn.commentBefore.value;\r\n                    cn.resolvedType.addMethod(m);\r\n                }\r\n            }\r\n\r\n            this.addFromJsonMethod(cn.resolvedType);\r\n            this.addToJsonMethod(cn.resolvedType);\r\n\r\n            for (let att of cn.attributes) {\r\n\r\n                this.resolveType(att.attributeType, cn.resolvedType.module, true);\r\n                let type = att.attributeType.resolvedType;\r\n                if (type == null) {\r\n                    continue;\r\n                }\r\n\r\n                let attribute: Attribute = new Attribute(att.identifier, type, null, att.isStatic, att.visibility, att.isFinal);\r\n                att.resolvedType = attribute;\r\n                if(att.commentBefore != null) attribute.documentation = \"\" + att.commentBefore.value;\r\n                attribute.annotation = att.annotation;\r\n                attribute.isTransient = att.isTransient;\r\n                if (cn.resolvedType.attributeMap.get(attribute.identifier) != null) {\r\n                    cn.resolvedType.module.errors[2].push({\r\n                        text: \"Es darf nicht mehrere Attribute mit demselben Bezeichner '\" + attribute.identifier + \"' in derselben Klassse geben.\",\r\n                        position: att.position, level: \"error\"\r\n                    });\r\n                }\r\n                cn.resolvedType.addAttribute(attribute);\r\n\r\n                this.pushUsagePosition(cn.resolvedType.module, att.position, attribute);\r\n                attribute.declaration = { module: cn.resolvedType.module, position: att.position };\r\n\r\n            }\r\n        }\r\n\r\n        for (let ic of this.interfaces) {\r\n            for (let mn of ic.methods) {\r\n                let m1: Method = this.setupMethod(mn, ic.resolvedType.module, ic.resolvedType);\r\n                if (m1 != null) {\r\n                    ic.resolvedType.addMethod(m1);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    setupMethod(mn: MethodDeclarationNode, m: Module, c: Klass | Interface): Method {\r\n\r\n        let typesOK = true;\r\n\r\n        typesOK = typesOK && this.resolveType(mn.returnType, m, true);\r\n\r\n        let parameters: Variable[] = [];\r\n        for (let par of mn.parameters) {\r\n            typesOK = typesOK && this.resolveType(par.parameterType, m, true);\r\n            if (typesOK) {\r\n                let parameter = {\r\n                    definition: par.position,\r\n                    identifier: par.identifier,\r\n                    usagePositions: new Map(),\r\n                    type: par.parameterType.resolvedType,\r\n                    declaration: { module: m, position: par.position },\r\n                    isFinal: par.isFinal,\r\n                    isEllipsis: par.isEllipsis\r\n                };\r\n                parameters.push(parameter);\r\n                this.pushUsagePosition(m, par.position, parameter);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        let pl: Parameterlist = new Parameterlist(parameters);\r\n\r\n        if (typesOK) {\r\n            let method = new Method(mn.identifier, pl, mn.returnType.resolvedType, null, mn.isAbstract, mn.isStatic);\r\n            method.isConstructor = mn.identifier == c.identifier;\r\n            method.visibility = mn.visibility;\r\n            method.isConstructor = mn.isConstructor;\r\n            mn.resolvedType = method;\r\n            method.annotation = mn.annotation;\r\n\r\n            this.pushUsagePosition(m, mn.position, method);\r\n            method.declaration = {\r\n                module: m,\r\n                position: mn.position\r\n            }\r\n\r\n            return method;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    pushUsagePosition(m: Module, position: TextPosition, element: Type | Method | Attribute | Variable) {\r\n\r\n        m.addIdentifierPosition(position, element);\r\n\r\n        if (element instanceof PrimitiveType) {\r\n            return;\r\n        }\r\n\r\n        let positionList: TextPosition[] = element.usagePositions.get(m);\r\n        if (positionList == null) {\r\n            positionList = [];\r\n            element.usagePositions.set(m, positionList);\r\n        }\r\n\r\n        positionList.push(position);\r\n\r\n    }\r\n\r\n    resolveType(tn: TypeNode, m: Module, lastPass: boolean): boolean {\r\n        if (tn.resolvedType == null) {\r\n            let typeModule = this.moduleStore.getType(tn.identifier);\r\n            if (typeModule != null) {\r\n                let type = typeModule.type;\r\n                m.dependsOnModules.set(typeModule.module, true);\r\n                this.pushUsagePosition(m, tn.position, type);\r\n                type = getArrayType(type, tn.arrayDimension);\r\n                this.registerGenericType(tn, m, false);\r\n                tn.resolvedType = type;\r\n                return true;\r\n            }\r\n\r\n            let typeParameterList = this.moduleToTypeParameterListMap.get(m);\r\n            if (typeParameterList != null) {\r\n                for (let tg of typeParameterList) {\r\n                    if (tg.identifier == tn.identifier) {\r\n                        let position = tn.position;\r\n                        if (position.line > tg.scopeFrom.line || position.line == tg.scopeFrom.line && position.column >= tg.scopeFrom.column) {\r\n                            if (position.line < tg.scopeTo.line || position.line == tg.scopeTo.line && position.column <= tg.scopeTo.column) {\r\n                                this.pushUsagePosition(m, tn.position, tg.type);\r\n                                tn.resolvedType = tg.type;\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (lastPass) {\r\n\r\n                let typKlasse = (tn.identifier.length > 0 && tn.identifier[0].toUpperCase() == tn.identifier[0]) ? \"Die Klasse\" : \"Der Typ\";\r\n\r\n                m.errors[2].push({\r\n                    position: tn.position,\r\n                    text: typKlasse + \" \" + tn.identifier + \" konnte nicht gefunden werden.\" +\r\n                        (tn.identifier == \"string\" ? \" Meinten Sie String (großgeschrieben)?\" : \"\"),\r\n                    level: \"error\",\r\n                    quickFix: (tn.identifier == \"string\") ? {\r\n                        title: \"String groß schreiben\",\r\n                        editsProvider: (uri) => {\r\n                            return [\r\n                                {\r\n                                    resource: uri,\r\n                                    edit: {\r\n                                        range: { startLineNumber: tn.position.line, startColumn: tn.position.column - 1, endLineNumber: tn.position.line, endColumn: tn.position.column + 6 },\r\n                                        text: \"String\"\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n\r\n                    } : null\r\n                });\r\n            }\r\n            tn.resolvedType = null;\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    resolveExtendsImplements() {\r\n        for (let cn of this.classes) {\r\n\r\n            let c = cn.resolvedType;\r\n            for (let iNode of cn.implements) {\r\n                this.resolveType(iNode, c.module, true);\r\n                let iType = iNode.resolvedType;\r\n                if (iType == null) {\r\n                    continue;\r\n                }\r\n                if (!(iType instanceof Interface)) {\r\n                    c.module.errors[2].push({\r\n                        position: iNode.position,\r\n                        text: \"Der Typ \" + iNode.identifier + \" ist kein interface, darf also nicht bei implements... stehen.\",\r\n                        level: \"error\"\r\n                    });\r\n                    continue;\r\n                }\r\n                c.implements.push(<Interface>iType);\r\n                iNode.resolvedType = iType;\r\n            }\r\n\r\n            if (cn.extends != null) {\r\n                this.resolveType(cn.extends, c.module, true);\r\n                let eType = cn.extends.resolvedType;\r\n                if (eType == null || !(eType instanceof Klass)) {\r\n                    c.module.errors[2].push({\r\n                        position: cn.extends.position,\r\n                        text: \"Der Typ \" + cn.extends.identifier + \" ist keine Klasse, darf also nicht hinter extends stehen.\",\r\n                        level: \"error\"\r\n                    });\r\n                    continue;\r\n                }\r\n\r\n                c.setBaseClass(<Klass>eType);\r\n                cn.extends.resolvedType = eType;\r\n            } else {\r\n                c.setBaseClass(<Klass>this.moduleStore.getType(\"Object\").type)\r\n            }\r\n\r\n        }\r\n        for (let interf of this.interfaces) {\r\n\r\n            let c = interf.resolvedType;\r\n            for (let iNode of interf.extends) {\r\n                this.resolveType(iNode, c.module, true);\r\n                let iType = iNode.resolvedType;\r\n                if (iType == null) {\r\n                    continue;\r\n                }\r\n                if (!(iType instanceof Interface)) {\r\n                    c.module.errors[2].push({\r\n                        position: iNode.position,\r\n                        text: \"Der Typ \" + iNode.identifier + \" ist kein interface, darf also nicht bei extends... stehen.\",\r\n                        level: \"error\"\r\n                    });\r\n                    continue;\r\n                }\r\n                c.extends.push(<Interface>iType);\r\n                iNode.resolvedType = iType;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    setupClassesAndInterfaces() {\r\n        for (let m of this.moduleStore.getModules(false)) {\r\n            if (m.classDefinitionsAST != null) {\r\n                for (let cdn of m.classDefinitionsAST) {\r\n                    switch (cdn.type) {\r\n                        case TokenType.keywordClass:\r\n                            this.classes.push(cdn);\r\n                            let c = new Klass(cdn.identifier, m);\r\n                            if(cdn.commentBefore != null) c.documentation = \"\" + cdn.commentBefore.value;\r\n                            cdn.resolvedType = c;\r\n                            c.visibility = cdn.visibility;\r\n                            c.isAbstract = cdn.isAbstract;\r\n                            m.typeStore.addType(c);\r\n                            this.pushUsagePosition(m, cdn.position, c);\r\n                            c.declaration = { module: m, position: cdn.position };\r\n                            this.registerTypeVariables(cdn, c);\r\n                            if (cdn.extends != null) this.registerGenericType(cdn.extends, m, true);\r\n                            if (cdn.implements != null) {\r\n                                for (let im of cdn.implements) this.registerGenericType(im, m, true);\r\n                            }\r\n                            break;\r\n                        case TokenType.keywordEnum:\r\n                            this.enums.push(cdn);\r\n                            let e = new Enum(cdn.identifier, m, cdn.values);\r\n                            if(cdn.commentBefore != null) e.documentation = \"\" + cdn.commentBefore.value;\r\n                            cdn.resolvedType = e;\r\n                            e.visibility = cdn.visibility;\r\n                            m.typeStore.addType(e);\r\n                            this.pushUsagePosition(m, cdn.position, e);\r\n                            e.declaration = { module: m, position: cdn.position };\r\n                            break;\r\n                        case TokenType.keywordInterface:\r\n                            this.interfaces.push(cdn);\r\n                            let i = new Interface(cdn.identifier, m);\r\n                            if(cdn.commentBefore != null) i.documentation = \"\" + cdn.commentBefore.value;\r\n                            cdn.resolvedType = i;\r\n                            m.typeStore.addType(i);\r\n                            this.pushUsagePosition(m, cdn.position, i);\r\n                            i.declaration = { module: m, position: cdn.position };\r\n                            this.registerTypeVariables(cdn, i);\r\n                            if (cdn.extends != null) {\r\n                                for (let im of cdn.extends) this.registerGenericType(im, m, true);\r\n                            }\r\n                            break;\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    resolveTypeVariables(): GenericTypeList {\r\n\r\n        let todoList = this.typeParameterList.slice(0);\r\n        let done = false;\r\n\r\n        let unresolvedGenericTypes: GenericTypeList = this.genericTypesInClassDefinitions.slice(0);\r\n\r\n        while (!done) {\r\n            this.resolveUnresolvedTypes(false);\r\n            unresolvedGenericTypes = this.resolveGenericTypes(unresolvedGenericTypes);\r\n\r\n            done = true;\r\n            for (let i = 0; i < todoList.length; i++) {\r\n                let tv = todoList[i];\r\n                let ready: boolean = true;\r\n                let ext: TypeNode[] = tv.tpn.extends == null ? [] : [tv.tpn.extends];\r\n                if (tv.tpn.implements != null) ext = ext.concat(tv.tpn.implements);\r\n                for (let extType of ext) {\r\n                    if (extType.genericParameterTypes != null && !(extType.genericParameterTypesResolved == true)) {\r\n                        ready = false;\r\n                    }\r\n                }\r\n\r\n                if (ready) {\r\n                    this.resolveTypeVariable(tv);\r\n                    todoList.splice(todoList.indexOf(tv), 1);\r\n                    i--;\r\n                    done = false;\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        return unresolvedGenericTypes;\r\n    }\r\n\r\n\r\n    resolveTypeVariable(tp: TypeParameterInfo) {\r\n\r\n\r\n        let typeParameterKlass: Klass;\r\n        if (tp.tpn.extends != null && tp.tpn.extends.resolvedType != null) {\r\n            typeParameterKlass = (<Klass>tp.tpn.extends.resolvedType).clone();\r\n        } else {\r\n            typeParameterKlass = objectType.clone();\r\n        }\r\n\r\n        typeParameterKlass.identifier = tp.tpn.identifier;\r\n        typeParameterKlass.isTypeVariable = true;\r\n\r\n        typeParameterKlass.declaration = {\r\n            module: tp.ci.module,\r\n            position: tp.tpn.position\r\n        };\r\n\r\n\r\n        if (tp.tpn.implements != null) {\r\n            for (let impl of tp.tpn.implements) {\r\n                if (typeParameterKlass.implements.indexOf(<Interface>impl.resolvedType) < 0) {\r\n                    typeParameterKlass.implements.push(<Interface>impl.resolvedType);\r\n                }\r\n            }\r\n        }\r\n\r\n        let tp1: TypeVariable = {\r\n            identifier: tp.tpn.identifier,\r\n            type: typeParameterKlass,\r\n            scopeFrom: tp.cdn.position,\r\n            scopeTo: tp.cdn.scopeTo\r\n        };\r\n\r\n        tp.ci.typeVariables[tp.index] = tp1;\r\n        tp.ci.typeVariablesReady = true;\r\n        for (let tv of tp.ci.typeVariables) if (tv == null) tp.ci.typeVariablesReady = false;\r\n\r\n        let typeParameterList = this.moduleToTypeParameterListMap.get(tp.ci.module);\r\n        if (typeParameterList == null) {\r\n            typeParameterList = [];\r\n            this.moduleToTypeParameterListMap.set(tp.ci.module, typeParameterList);\r\n        }\r\n\r\n        typeParameterList.push(tp1);\r\n\r\n        this.pushUsagePosition(tp.ci.module, tp.tpn.position, typeParameterKlass);\r\n\r\n    }\r\n\r\n    registerTypeVariables(cdn: ClassDeclarationNode | InterfaceDeclarationNode, classOrInterface: Klass | Interface) {\r\n        let index = 0;\r\n        for (let typeParameter of cdn.typeParameters) {\r\n            if (typeParameter.extends != null) this.registerGenericType(typeParameter.extends, classOrInterface.module, true);\r\n            if (typeParameter.implements != null) {\r\n                for (let im of typeParameter.implements) {\r\n                    this.registerGenericType(im, classOrInterface.module, true);\r\n                }\r\n            }\r\n\r\n            classOrInterface.typeVariablesReady = false;\r\n            classOrInterface.typeVariables.push(null); // leave room\r\n\r\n            this.typeParameterList.push({\r\n                tpn: typeParameter, tp: {\r\n                    identifier: typeParameter.identifier,\r\n                    type: null,\r\n                    scopeFrom: cdn.position,\r\n                    scopeTo: cdn.scopeTo\r\n                }, ci: classOrInterface, cdn: cdn,\r\n                index: index++\r\n            });\r\n        }\r\n    }\r\n\r\n    resolveTypesInModules() {\r\n        for (let m of this.moduleStore.getModules(false)) {\r\n            let ut: TypeNode[] = [];\r\n            this.unresolvedTypes.set(m, ut);\r\n            for (let tn of m.typeNodes) {\r\n                if (tn.resolvedType == null) {\r\n                    let typeModule = this.moduleStore.getType(tn.identifier);\r\n                    if (typeModule != null) {\r\n                        let type = typeModule.type;\r\n                        this.pushUsagePosition(m, tn.position, type);\r\n                        tn.resolvedType = getArrayType(type, tn.arrayDimension);\r\n                        this.registerGenericType(tn, m, false);\r\n                    } else {\r\n                        ut.push(tn);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    registerGenericType(typeNode: TypeNode, module: Module, isInClassDefinition: boolean) {\r\n        if (typeNode.genericParameterTypes != null) {\r\n            if (isInClassDefinition) {\r\n                this.genericTypesInClassDefinitions.push({ typeNode: typeNode, module: module });\r\n            } else {\r\n                this.genericTypes.push({ typeNode: typeNode, module: module });\r\n            }\r\n        } else {\r\n            // new ArrayList<>() (without type Parameters!) should be castable to ANY other type with same name regarldess of it's type variable types (Java 7-style!)\r\n            let type = typeNode.resolvedType;\r\n            if (type != null && type instanceof Klass && type.typeVariables.length > 0) {\r\n                let type1 = <Klass>type.clone();\r\n                type1.typeVariables = []; // now this type can cast to ANY other type with same name regardless of it's type variable types!\r\n                typeNode.resolvedType = type1;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getArrayType(type: Type, arrayDimension: number) {\r\n    while (arrayDimension > 0) {\r\n        type = new ArrayType(type);\r\n        arrayDimension--;\r\n    }\r\n    return type;\r\n}","export type SoundType = {\r\n    url: string,\r\n    name: string,\r\n    //@ts-ignore\r\n    player?: Howl,\r\n    description: string\r\n}\r\n\r\nexport class SoundTools {\r\n\r\n    static sounds: SoundType[] = [\r\n        {\r\n            url: \"assets/mp3/nearby_explosion_with_debris.mp3\",\r\n            name: \"nearby_explosion_with_debris\",\r\n            description: \"nahe Explosion mit herabfallenden Trümmern\"\r\n        },\r\n        {\r\n            url: \"assets/mp3/nearby_explosion.mp3\",\r\n            name: \"nearby_explosion\",\r\n            description: \"nahe Explosion\"\r\n        },\r\n        {\r\n            url: \"assets/mp3/far_bomb.mp3\",\r\n            name: \"far_bomb\",\r\n            description: \"fernes Geräusch einer Bombe\"\r\n        },\r\n        {\r\n            url: \"assets/mp3/cannon_boom.mp3\",\r\n            name: \"cannon_boom\",\r\n            description: \"einzelner Kanonendonner\"\r\n        },\r\n        {\r\n            url: \"assets/mp3/far_explosion.mp3\",\r\n            name: \"far_explosion\",\r\n            description: \"ferne Explosion\"\r\n        },\r\n        {\r\n            url: \"assets/mp3/laser_shoot.mp3\",\r\n            name: \"laser_shoot\",\r\n            description: \"Laserschuss (oder was man dafür hält...)\"\r\n        },\r\n        {\r\n            url: \"assets/mp3/short_bell.mp3\",\r\n            name: \"short_bell\",\r\n            description: \"kurzes Klingeln (wie bei alter Landenkasse)\"\r\n        },\r\n        {\r\n            url: \"assets/mp3/flamethrower.mp3\",\r\n            name: \"flamethrower\",\r\n            description: \"Flammenwerfer\"\r\n        },\r\n        {\r\n            url: \"assets/mp3/digging.mp3\",\r\n            name: \"digging\",\r\n            description: \"Geräusch beim Sandschaufeln\"\r\n        },\r\n        {\r\n            url: \"assets/mp3/short_digging.mp3\",\r\n            name: \"short_digging\",\r\n            description: \"kurzes Geräusch beim Sandschaufeln\"\r\n        },\r\n        {\r\n            url: \"assets/mp3/shoot.mp3\",\r\n            name: \"shoot\",\r\n            description: \"Schussgeräusch\"\r\n        },\r\n        {\r\n            url: \"assets/mp3/short_shoot.mp3\",\r\n            name: \"short_shoot\",\r\n            description: \"ein kurzer Schuss\"\r\n        },\r\n        {\r\n            url: \"assets/mp3/step.mp3\",\r\n            name: \"step\",\r\n            description: \"ein Schritt\"\r\n        },\r\n        {\r\n            url: \"assets/mp3/boulder.mp3\",\r\n            name: \"boulder\",\r\n            description: \"Geräusch eines Steins, der auf einen zweiten fällt\"\r\n        },\r\n        {\r\n            url: \"assets/mp3/pong_d5.wav\",\r\n            name: \"pong_d\",\r\n            description: \"Tiefer Pong-Ton\"\r\n        },\r\n        {\r\n            url: \"assets/mp3/pong_f5.wav\",\r\n            name: \"pong_f\",\r\n            description: \"Hoher Pong-Ton\"\r\n        },\r\n    ]\r\n\r\n    static soundMap: Map<string, SoundType> = new Map();\r\n\r\n    static getVolume: () => number = () => {return -1};\r\n\r\n    private static isInitialized: boolean = false;\r\n\r\n    public static init() {\r\n        let praefix: string = \"\";\r\n        //@ts-ignore\r\n        if (window.javaOnlineDir != null) {\r\n            //@ts-ignore\r\n            praefix = window.javaOnlineDir;\r\n        }\r\n        if (!SoundTools.isInitialized) {\r\n            SoundTools.isInitialized = true;\r\n            for (let sound of SoundTools.sounds) {\r\n                //@ts-ignore\r\n                sound.player = new Howl({ src: [praefix + sound.url], preload: true })\r\n                SoundTools.soundMap.set(sound.name, sound);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public static play(name: string) {\r\n        let st: SoundType = SoundTools.soundMap.get(name);\r\n        if (st != null) {\r\n            st.player.play();\r\n        }\r\n    }\r\n\r\n    static volumeDetectionRunning: boolean = false;\r\n    public static startDetectingVolume() {\r\n        if(SoundTools.volumeDetectionRunning) return;\r\n        SoundTools.volumeDetectionRunning = true;\r\n        console.log(\"starting...\");\r\n        //@ts-ignore\r\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n        //@ts-ignore\r\n        if (navigator.getUserMedia) {\r\n            //@ts-ignore\r\n            navigator.getUserMedia({\r\n                audio: true\r\n            },\r\n                function (stream) {\r\n                    let audioContext = new AudioContext();\r\n                    let analyser = audioContext.createAnalyser();\r\n                    let microphone = audioContext.createMediaStreamSource(stream);\r\n\r\n                    analyser.smoothingTimeConstant = 0.8;\r\n                    analyser.fftSize = 1024;\r\n\r\n                    microphone.connect(analyser);\r\n\r\n                    SoundTools.getVolume = () => {\r\n                        if(!SoundTools.volumeDetectionRunning) return 0;\r\n                        var times = new Float32Array(analyser.frequencyBinCount);\r\n                        analyser.getFloatTimeDomainData(times);\r\n                        let volume = 0;\r\n                        for (let i = 0; i < times.length; i++) {\r\n                            volume += Math.abs(times[i]);\r\n                        }\r\n                        volume = volume / times.length;\r\n                        return volume;\r\n                    };\r\n                },\r\n                function (err) {\r\n                    console.log(\"The following error occured: \" + err.name)\r\n                });\r\n        } else {\r\n            console.log(\"getUserMedia not supported\");\r\n        }\r\n    }\r\n}\r\n\r\n","import { Klass, Interface, Visibility } from \"./Class.js\";\r\nimport { Method, Attribute, Type, PrimitiveType, Variable } from \"./Types.js\";\r\nimport { objectType } from \"./PrimitiveTypes.js\";\r\nimport { ArrayType } from \"./Array.js\";\r\nimport { formatAsJavadocComment } from \"../../tools/StringTools.js\";\r\n\r\nexport function getDeclarationAsString(element: Klass | Interface | Method | Attribute | Variable,\r\n    indent: string = \"\", short: boolean = false): string {\r\n\r\n    if (element instanceof Klass) {\r\n\r\n        if (element.isTypeVariable) {\r\n            return getTypeVariableDeclaration(element);\r\n        }\r\n\r\n        let s = \"\";\r\n\r\n        if (element.documentation != null && element.documentation != \"\") {\r\n            if(element.documentation.startsWith(\"/*\")){\r\n                s += (indent + element.documentation).replace(/\\n/g, \"\\n\" + indent) + \"\\n\";\r\n            } else {\r\n                // s += indent + \"/**  \\n\" + element.documentation + \"  \\n**/  \\n\" + indent;\r\n                s += formatAsJavadocComment(element.documentation, indent) + \"\\n\";\r\n            }\r\n        }\r\n\r\n        if (element.visibility != null) s += Visibility[element.visibility] + \" \";\r\n        if (element.isAbstract) s += \"abstract \";\r\n        s += \"class \" + element.identifier + \" \";\r\n\r\n        if (element.typeVariables.length > 0) {\r\n            s += getGenericParameterDefinition(element);\r\n        }\r\n\r\n\r\n        if (element.baseClass != null && element.baseClass.identifier != \"Object\") {\r\n            s += \"extends \" + element.baseClass.identifier + \" \";\r\n            if (element.baseClass.typeVariables.length > 0) {\r\n                s += getGenericParameterDefinition(element.baseClass);\r\n            }\r\n        }\r\n\r\n        if (element.implements != null && element.implements.length > 0) {\r\n            s += \"implements \";\r\n            for (let i = 0; i < element.implements.length; i++) {\r\n                s += element.implements[i].identifier;\r\n                if (element.implements[i].typeVariables.length > 0) {\r\n                    s += getGenericParameterDefinition(element.implements[i]);\r\n                }\r\n                if (i < element.implements.length - 1) {\r\n                    s += \", \";\r\n                }\r\n            }\r\n        }\r\n\r\n        if (short) return s;\r\n\r\n        s += indent + \"{\\n  \";\r\n\r\n        for (let a of element.getAttributes(Visibility.protected)) {\r\n            s += indent + \"\\n\" + getDeclarationAsString(a, \"  \") + \";\\n\";\r\n        }\r\n\r\n        if (element.staticClass != null) {\r\n            for (let a of element.staticClass.getAttributes(Visibility.protected)) {\r\n                s += indent + \"\\n\" + getDeclarationAsString(a, \"  \") + \";\\n\";\r\n            }\r\n        }\r\n\r\n        for (let m of element.getMethods(Visibility.protected)) {\r\n            s += indent + \"\\n\" + getDeclarationAsString(m, \"  \") + \";\\n\";\r\n        }\r\n\r\n        if (element.staticClass != null) {\r\n            for (let m of element.staticClass.getMethods(Visibility.protected)) {\r\n                s += indent + \"\\n\" + getDeclarationAsString(m, \"  \") + \";\\n\";\r\n            }\r\n        }\r\n\r\n\r\n        s += \"\\n}\";\r\n\r\n        return s;\r\n\r\n    }\r\n\r\n    if (element instanceof Interface) {\r\n\r\n        let decl = \"\";\r\n\r\n        if (element.documentation != null && element.documentation != \"\" && !short) {\r\n            if(element.documentation.startsWith(\"/*\")){\r\n                decl += (indent + element.documentation).replace(/\\n/g, \"\\n\" + indent) + \"\\n\";\r\n            } else {\r\n                decl += formatAsJavadocComment(element.documentation, indent) + \"\\n\";\r\n            }\r\n        }\r\n\r\n        decl += indent + \"interface \" + element.identifier;\r\n\r\n        if (element.typeVariables.length > 0) {\r\n            decl += getGenericParameterDefinition(element);\r\n        }\r\n\r\n        if (element.extends != null && element.extends.length > 0) {\r\n            decl += \"extends \";\r\n            for (let i = 0; i < element.extends.length; i++) {\r\n                decl += element.extends[i].identifier;\r\n                if (element.extends[i].typeVariables.length > 0) {\r\n                    decl += getGenericParameterDefinition(element.extends[i]);\r\n                }\r\n                if (i < element.extends.length - 1) {\r\n                    decl += \", \";\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!short) {\r\n\r\n            decl += \"{\\n\";\r\n\r\n            for (let m of element.methods) {\r\n                decl += indent + \"\\n\" + getDeclarationAsString(m, \"  \") + \";\\n\";\r\n            }\r\n\r\n            decl += \"\\n}\";\r\n        }\r\n\r\n        return decl;\r\n\r\n    }\r\n\r\n    if (element instanceof Attribute) {\r\n        let s = \"\";\r\n\r\n        if (element.documentation != null && element.documentation != \"\" && !short) {\r\n            if(element.documentation.startsWith(\"/*\")){\r\n                s += indent + element.documentation.replace(/\\n/g, \"\\n\" + indent) + \"\\n\";\r\n            } else {\r\n                s += formatAsJavadocComment(element.documentation, indent) + \"\\n\";\r\n            }\r\n        }\r\n\r\n        s += indent;\r\n\r\n        if (element.visibility != null) s += Visibility[element.visibility] + \" \";\r\n\r\n        if (element.isStatic) s += \"static \";\r\n\r\n        s += getTypeIdentifier(element.type) + \" \" + element.identifier;\r\n\r\n        return s;\r\n    }\r\n\r\n    if (element instanceof Method) {\r\n\r\n        let s = \"\";\r\n\r\n        if (element.documentation != null && element.documentation != \"\" && !short) {\r\n            if(element.documentation.startsWith(\"/*\")){\r\n                s += indent + element.documentation.replace(/\\n/g, \"\\n\" + indent) + \"\\n\";\r\n            } else {\r\n                s += formatAsJavadocComment(element.documentation, indent) + \"\\n\";\r\n            }\r\n        }\r\n\r\n        s += indent;\r\n\r\n        if (element.visibility != null) s += Visibility[element.visibility] + \" \";\r\n\r\n        if (element.isStatic) s += \"static \";\r\n\r\n        if (element.getReturnType() != null) {\r\n            s += getTypeIdentifier(element.getReturnType()) + \" \";\r\n        } else {\r\n            s += element.isConstructor ? \"\" : \"void \";\r\n        }\r\n\r\n        s += element.identifier + \"(\";\r\n\r\n        let parameters = element.getParameterList().parameters;\r\n        for (let i = 0; i < parameters.length; i++) {\r\n\r\n            let p = parameters[i];\r\n            let type: Type = element.getParameterType(i);\r\n\r\n            if (p.isEllipsis) {\r\n                type = (<ArrayType>type).arrayOfType;\r\n            }\r\n\r\n            s += getTypeIdentifier(type) + (p.isEllipsis ? \"...\" : \"\") + \" \" + p.identifier;\r\n\r\n            if (i < parameters.length - 1) {\r\n                s += \", \";\r\n            }\r\n\r\n        }\r\n\r\n        s += \")\";\r\n\r\n        return s;\r\n\r\n\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\nfunction getTypeVariableDeclaration(element: Klass) {\r\n    let s: string = element.identifier;\r\n\r\n    if (element.isGenericVariantFrom != objectType) s += \" extends \" + getTypeIdentifier(element.isGenericVariantFrom);\r\n    if (element.implements.length > 0) {\r\n        let implList = element.implements.filter(impl => element.isGenericVariantFrom.implements.indexOf(impl) < 0)\r\n            .map(impl => getTypeIdentifier(impl)).join(\", \");\r\n        if (implList != \"\") {\r\n            s += \" implements \" + implList;\r\n        }\r\n    }\r\n\r\n    return s;\r\n}\r\n\r\nexport function getTypeIdentifier(type: Type): string {\r\n    if (type instanceof Klass || type instanceof Interface) {\r\n        if (type.typeVariables.length > 0) {\r\n            let s: string = (type[\"isTypeVariable\"] ? (type.identifier + \" extends \" + type.isGenericVariantFrom?.identifier) : type.identifier)\r\n                + \"<\";\r\n            s += type.typeVariables.map(tv => getTypeIdentifier(tv.type)).join(\", \");\r\n            return s + \">\";\r\n        }\r\n    }\r\n\r\n    return type[\"isTypeVariable\"] ? (type.identifier + \" extends \" + type[\"isGenericVariantFrom\"]?.identifier) : type.identifier;\r\n}\r\n\r\nexport function getGenericParameterDefinition(element: Klass | Interface): string {\r\n\r\n    let s: string = \"\";\r\n\r\n    if (element.typeVariables.length > 0) {\r\n        s = \"<\";\r\n\r\n        let typeList: string[] = [];\r\n        for (let tv of element.typeVariables) {\r\n            let t: string = tv.type.identifier;\r\n            let k: Klass = tv.type;\r\n            if (k.isGenericVariantFrom != null && k.isGenericVariantFrom.identifier != \"Object\") {\r\n                t += \" extends \" + k.isGenericVariantFrom.identifier;\r\n            }\r\n            if (k.implements != null) {\r\n\r\n                let implList = k.implements;\r\n                if (k.isGenericVariantFrom != null) {\r\n                    implList = implList.filter(impl => k.isGenericVariantFrom.implements.indexOf(impl) < 0);\r\n                }\r\n\r\n                for (let im of implList) {\r\n                    t += \" & \" + im.identifier;\r\n                }\r\n            }\r\n            typeList.push(t);\r\n        }\r\n\r\n        s += typeList.join(\", \");\r\n        s += \"> \";\r\n    }\r\n\r\n    return s;\r\n}","import { Editor } from \"./Editor.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass, Interface } from \"../../compiler/types/Class.js\";\r\nimport { Method, Attribute, PrimitiveType } from \"../../compiler/types/Types.js\";\r\nimport { getDeclarationAsString, getGenericParameterDefinition } from \"../../compiler/types/DeclarationHelper.js\";\r\nimport { InterpreterState } from \"../../interpreter/Interpreter.js\";\r\n\r\n\r\n\r\nexport class MyHoverProvider {\r\n\r\n    private static keywordDescriptions: { [keyword: string]: string } = {\r\n        \"print\": \"Die Anweisung ```print``` gibt eine Zeichenkette aus.\",\r\n        \"new\": \"Das Schlüsselwort ```new``` bewirkt die Instanzierung (\\\"Erschaffung\\\") eines neuen Objektes einer Klasse.\",\r\n        \"println\": \"Die Anweisung ```println``` gibt eine Zeichenkette gefolgt von einem Zeilenumbruch aus.\",\r\n        \"while\": \"```\\nwhile (Bedingung) {Anweisungen}\\n```  \\nbewirkt die Wiederholung der Anweisungen solange ```Bedingung == true``` ist.\",\r\n        \"for\": \"```\\nfor(Startanweisung;Solange-Bedingung;Nach_jeder_Wiederholung){Anweisungen}\\n```  \\n\"\r\n            + \"führt zunächst die Startanweisung aus und wiederholt dann die Anweisungen solange ```Bedingung == true``` ist. Am Ende jeder wiederholung wird Nach_jeder_Wiederholung ausgeführt.\",\r\n        \"if\": \"```\\nif(Bedingung){Anweisungen_1} else {Anweisungen_2}\\n```  \\nwertet die Bedingung aus und führt Anweisungen_1 nur dann aus, wenn die Bedingung ```true``` ergibt, Anweisungen_2 nur dann, wenn die Bedingung ```false``` ergibt.  \\nDer ```else```-Teil kann auch weggelassen werden.\",\r\n        \"else\": \"```\\nif(Bedingung){Anweisungen_1} else {Anweisungen_2}\\n```  \\nwertet die Bedingung aus und führt Anweisungen_1 nur dann aus, wenn die Bedingung ```true``` ergibt, Anweisungen_2 nur dann, wenn die Bedingung ```false``` ergibt.\",\r\n        \"switch\": \"```\\nswitch(Selektor){ case Wert_1: Anweisungen_1; break; case Wert_2: Anweisungen_2; break; default: Default-Anweisungen } \\n```  \\nwertet den Selektor-Term aus und führt abhängig vom Termwert Anweisungen_1, Anweisungen_2, ... aus. Entspricht der Termwert keinem der Werte Wert_1, Wert_2, ..., so werden die Default-Anweisungen ausgeführt.\",\r\n        \"%\": \"```\\na % b\\n```  \\n (sprich: 'a modulo b') berechnet den **Rest** der ganzzahligen Division a/b.\",\r\n        \"|\": \"```\\na | b\\n```  \\n (sprich: 'a or b') berechnet die **bitweise oder-Verknüpfung** der Werte a und b.\",\r\n        \"&\": \"```\\na & b\\n```  \\n (sprich: 'a und b') berechnet die **bitweise und-Verknüpfung** der Werte a und b.\",\r\n        \"^\": \"```\\na ^ b\\n```  \\n (sprich: 'a xor b') berechnet die **bitweise exklusiv-oder-Verknüpfung** der Werte a und b.\",\r\n        \">>\": \"```\\na >> b\\n```  \\n (sprich: 'a right shift b') berechnet den Wert, der entsteht, wenn man den Wert von a **bitweise um b Stellen nach rechts verschiebt**. Dieser Wert ist identisch mit dem nach unten abgerundeten Wert von a/(2 hoch b).\",\r\n        \"<<\": \"```\\na >> b\\n```  \\n (sprich: 'a left shift b') berechnet den Wert, der entsteht, wenn man den Wert von a **bitweise um b Stellen nach links verschiebt**. Dieser Wert ist identisch mit dem nach unten abgerundeten Wert von a*(2 hoch b).\",\r\n        \"~\": \"```\\n~a\\n```  \\n (sprich: 'nicht a') berechnet den Wert, der entsteht, wenn man **alle Bits von a umkehrt**.\",\r\n        \"==\": \"```\\na == b\\n```  \\nergibt genau dann ```true```, wenn ```a``` und ```b``` gleich sind.  \\nSind a und b **Objekte**, so ergibt ```a == b``` nur dann ```true```, wenn ```a``` und ```b``` auf das **identische** Objekt zeigen.  \\n```==``` nennt man **Vergleichsoperator**.\",\r\n        \"<=\": \"```\\na <= b\\n```  \\nergibt genau dann ```true```, wenn der Wert von ```a``` kleiner oder gleich dem Wert von ```b``` ist.\",\r\n        \">=\": \"```\\na <= b\\n```  \\nergibt genau dann ```true```, wenn der Wert von ```a``` größer oder gleich dem Wert von ```b``` ist.\",\r\n        \"!=\": \"```\\na != b\\n```  \\nergibt genau dann ```true```, wenn ```a``` und ```b``` **un**gleich sind.  \\nSind ```a``` und ```b``` **Objekte**, so ergibt ```a != b``` dann ```true```, wenn ```a``` und ```b``` **nicht** auf das **identische** Objekt zeigen.  \\n```!=``` nennt man **Ungleich-Operator**.\",\r\n        \"+=\": \"```\\na += b\\n(Kurzschreibweise für a = a + b)\\n```  \\nbewirkt, dass der Wert von ```a``` um den Wert von ```b``` **erhöht** wird. Das Ergebnis wird in die Variable ```a``` geschrieben.\",\r\n        \"-=\": \"```\\na -= b\\n(Kurzschreibweise für a = a - b)\\n```  \\nbewirkt, dass der Wert von ```a``` um den Wert von ```b``` **erniedrigt** wird. Das Ergebnis wird in die Variable ```a``` geschrieben.\",\r\n        \"*=\": \"```\\na *= b\\n(Kurzschreibweise für a = a * b)\\n```  \\nbewirkt, dass der Wert von ```a``` mit dem Wert von ```b``` **multipliziert** wird. Das Ergebnis wird in die Variable ```a``` geschrieben.\",\r\n        \"/=\": \"```\\na /= b\\n(Kurzschreibweise für a = a / b)\\n```  \\nbewirkt, dass der Wert von ```a``` durch den Wert von ```b``` **dividiert** wird. Das Ergebnis wird in die Variable ```a``` geschrieben.\",\r\n        \"++\": \"```\\na++\\n(Kurzschreibweise für a = a + 1)\\n```  \\nbewirkt, dass der Wert von ```a``` um eins erhöht wird.\",\r\n        \"--\": \"```\\na--\\n(Kurzschreibweise für a = a - 1)\\n```  \\nbewirkt, dass der Wert von ```a``` um eins eniedrigt wird.\",\r\n        \"=\": \"```\\na = Term\\n```  \\nberechnet den Wert des Terms und weist ihn der Variablen ```a``` zu.  \\n**Vorsicht:**  \\nVerwechsle ```=```(**Zuweisungsoperator**) nicht mit ```==```(**Vergleichsoperator**)!\",\r\n        \"!\": \"```\\n!a\\n```  \\nergibt genau dann ```true```, wenn ```a``` ```false``` ergibt.  \\n```!``` spricht man '**nicht**'.\",\r\n        \"public\": \"```\\npublic\\n```  \\nAttribute und Methoden, die als ```public``` deklariert werden, sind überall (auch außerhalb der Klasse) sichtbar.\",\r\n        \"private\": \"```\\nprivate\\n```  \\nAttribute und Methoden, die als ```private``` deklariert werden, sind nur innerhalb von Methoden derselben Klasse sichtbar.\",\r\n        \"protected\": \"```\\nprotected\\n```  \\nAttribute und Methoden, die als ```protected``` deklariert werden, sind nur innerhalb von Methoden derselben Klasse oder innerhalb von Methoden von Kindklassen sichtbar.\",\r\n        \"return\": \"```\\nreturn Term\\n```  \\nbewirkt, dass die Methode verlassen wird und der Wert des Terms an die aufrufende Stelle zurückgegeben wird.\",\r\n        \"break\": \"```\\nbreak;\\n```  \\ninnerhalb einer Schleife bewirkt, dass die Schleife sofort verlassen und mit den Anweisungen nach der Schleife fortgefahren wird.  \\n\"+\r\n        \"```break``` innerhalb einer ```switch```-Anweisung bewirkt, dass der Block der ```switch```-Anweisung verlassen wird.\",\r\n        \"class\": \"```\\nclass\\n```  \\nMit dem Schlüsselwort ```class``` werden Klassen definiert.\",\r\n        \"extends\": \"```\\nextends\\n```  \\n```class A extends B { ... }``` bedeutet, dass die Klasse A Unterklasse der Klasse B ist.\",\r\n        \"implements\": \"```\\nimplements\\n```  \\n```class A implements B { ... }``` bedeutet, dass die Klasse A das Interface B implementiert, d.h., dass sie alle Methoden besitzen muss, die in B definiert sind.\",\r\n        \"this\": \"```\\nthis\\n```  \\nInnerhalb einer Methodendefinition bezeichnet das Schlüsselwort ```this``` immer dasjenige Objekt, für das die Methode gerade ausgeführt wird.\",\r\n        \"var\": \"```\\nvar\\n```  \\nWird einer Variable beim Deklarieren sofort ein Startwert zugewiesen (z.B. Circle c = new Circle(100, 100, 10)), so kann statt des Datentyps das Schlüsselwort ```var``` verwendet werden (also var c = new Circle(100, 100, 10)).\",\r\n    }\r\n\r\n    constructor(private editor: Editor) {\r\n\r\n    }\r\n\r\n    provideHover(model: monaco.editor.ITextModel, position: monaco.Position, token: monaco.CancellationToken):\r\n        monaco.languages.ProviderResult<monaco.languages.Hover> {\r\n\r\n        let selection: monaco.Selection = this.editor.editor.getSelection();\r\n        \r\n        // if cursor is inside current selection then don't show hover, because editor.onDidChangeCursorPosition evaluates selected Text \r\n        // (see class Editor).\r\n        if(selection != null){\r\n            if(selection.startLineNumber != selection.endLineNumber || selection.startColumn != selection.endColumn){\r\n                if(\r\n                    (selection.startLineNumber < position.lineNumber || selection.startLineNumber == position.lineNumber && selection.startColumn <= position.column) && \r\n                    (selection.endLineNumber > position.lineNumber || selection.endLineNumber == position.lineNumber && selection.endColumn >= position.column) \r\n                ){\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        let module: Module = this.editor.main.getCurrentWorkspace()?.getModuleByMonacoModel(model);\r\n\r\n        if (module == null) {\r\n            return null;\r\n        }\r\n\r\n        for(let errorList of module.errors){\r\n            for(let error of errorList){\r\n                if(error.position.line == position.lineNumber && \r\n                    error.position.column <= position.column && \r\n                    error.position.column + error.position.length >= position.column){\r\n                        return null; // Show error-tooltip and don't show hover-tooltip\r\n                    }\r\n            }\r\n        }\r\n\r\n        let element = module.getElementAtPosition(position.lineNumber, position.column);\r\n\r\n        let declarationAsString = \"\";\r\n\r\n        if (element != null && element.identifier != \"var\") {\r\n            if (element instanceof Klass || element instanceof Method || element instanceof Interface\r\n                || element instanceof Attribute) {\r\n                declarationAsString = getDeclarationAsString(element);\r\n            } else if (element instanceof PrimitiveType) {\r\n                declarationAsString = \"```\\n\" + element.identifier + \"\\n```  \\nprimitiver Datentyp: \" + element.description + \"\";\r\n                return {\r\n                    range: null,\r\n                    contents: [{ value: declarationAsString }],\r\n                }\r\n            } else {\r\n                // Variable\r\n                let typeIdentifier: string = element?.type?.identifier;\r\n                if(element?.type instanceof Klass || element?.type instanceof Interface){\r\n                    typeIdentifier += \" \" + getGenericParameterDefinition(element.type);\r\n                }\r\n\r\n                if (typeIdentifier == null) {\r\n                    typeIdentifier = \"\";\r\n                } else {\r\n                    typeIdentifier += \" \";\r\n                }\r\n\r\n                declarationAsString = typeIdentifier + element?.identifier;\r\n            }\r\n        } else {\r\n            let word = this.getWordUnderCursor(model, position);\r\n            let desc = MyHoverProvider.keywordDescriptions[word];\r\n            if (desc != null) {\r\n                return {\r\n                    range: null,\r\n                    contents: [{ value: desc }],\r\n                }\r\n            }\r\n        }\r\n\r\n        let state = this.editor.main.getInterpreter().state;\r\n\r\n        let value: string = null;\r\n\r\n        if (state == InterpreterState.paused) {\r\n            let evaluator = this.editor.main.getCurrentWorkspace().evaluator;\r\n\r\n            let identifier: string = this.widenDeclaration(model, position, element?.identifier);\r\n\r\n            if(identifier == null){\r\n                return null;\r\n            }\r\n\r\n            let result = evaluator.evaluate(identifier);\r\n            if (result.error == null && result.value != null) {\r\n                value = result.value.type.debugOutput(result.value);\r\n                declarationAsString = identifier;\r\n            }\r\n\r\n        }\r\n\r\n        let contents = [];\r\n\r\n        if (value == null && declarationAsString.length == 0) {\r\n            return null;\r\n        }\r\n\r\n        if (value != null) {\r\n            if (value.length + declarationAsString.length > 40) {\r\n                contents.push({ value: '```\\n' + declarationAsString + ' ==\\n```' });\r\n                contents.push({ value: '```\\n' + value.replace(/&nbsp;/g, \" \") + '\\n```' });\r\n            } else {\r\n                contents.push({ value: '```\\n' + declarationAsString + \" == \" + value.replace(/&nbsp;/g, \" \") + '\\n```' });\r\n            }\r\n        } else {\r\n            contents.push({ value: '```\\n' + declarationAsString + '\\n```' });\r\n        }\r\n\r\n        let range = null;\r\n\r\n        return {\r\n            range: range,\r\n            contents: contents,\r\n        }\r\n\r\n    }\r\n\r\n    getWordUnderCursor(model: monaco.editor.ITextModel, position: monaco.Position)\r\n         : string {\r\n        \r\n        let pos = model.getValueLengthInRange({\r\n            startColumn: 0,\r\n            startLineNumber: 0,\r\n            endLineNumber: position.lineNumber,\r\n            endColumn: position.column\r\n        });\r\n\r\n        let text = model.getValue();\r\n\r\n        let word = \"\";\r\n\r\n        let end = pos;\r\n        while (end < text.length && this.isInsideIdentifierOrArrayDescriptor(text.charAt(end))) {\r\n            end++;\r\n        }\r\n\r\n        let begin = pos;\r\n        while (begin > 0 && this.isInsideIdentifierOrArrayDescriptor(text.charAt(begin - 1))) {\r\n            begin--;\r\n        }\r\n\r\n        if (end - begin > 1) {\r\n            word = text.substring(begin, end);\r\n        } else {\r\n            end = pos;\r\n            while (end < text.length && this.isInsideOperator(text.charAt(end))) {\r\n                end++;\r\n            }\r\n    \r\n            begin = pos;\r\n            while (begin > 0 && this.isInsideOperator(text.charAt(begin - 1))) {\r\n                begin--;\r\n            }\r\n    \r\n            if (end - begin > 0) {\r\n                word = text.substring(begin, end);\r\n            }\r\n        }\r\n\r\n        return word;\r\n\r\n    }\r\n\r\n    widenDeclaration(model: monaco.editor.ITextModel, position: monaco.Position,\r\n        identifier: string): string {\r\n\r\n        let pos = model.getValueLengthInRange({\r\n            startColumn: 0,\r\n            startLineNumber: 0,\r\n            endLineNumber: position.lineNumber,\r\n            endColumn: position.column\r\n        });\r\n\r\n        let text = model.getValue();\r\n\r\n        let end = pos;\r\n        while (end < text.length && this.isInsideIdentifierOrArrayDescriptor(text.charAt(end))) {\r\n            end++;\r\n        }\r\n\r\n        let begin = pos;\r\n        while (begin > 0 && this.isInsideIdentifierChain(text.charAt(begin - 1))) {\r\n            begin--;\r\n        }\r\n\r\n        let lenght: number = identifier?.length == null ? 1 : identifier.length;\r\n\r\n        if (end - begin > length) {\r\n            return text.substring(begin, end);\r\n        }\r\n\r\n        return identifier;\r\n    }\r\n\r\n    isInsideIdentifierChain(t: string) {\r\n\r\n        return t.toLocaleLowerCase().match(/[a-z0-9äöüß_\\[\\]\\.]/i);\r\n\r\n    }\r\n\r\n    isInsideOperator(t: string) {\r\n\r\n        return t.toLocaleLowerCase().match(/[!%<>=\\+\\-\\*\\/]/i);\r\n\r\n    }\r\n\r\n    isInsideIdentifierOrArrayDescriptor(t: string) {\r\n\r\n        return t.toLocaleLowerCase().match(/[a-z0-9äöüß\\[\\]]/i);\r\n\r\n    }\r\n\r\n\r\n}","import { escapeHtml } from \"./StringTools.js\";\r\n\r\nexport function makeEditable(elementWithText: JQuery<HTMLElement>,\r\n    elementToReplace: JQuery<HTMLElement>,\r\n    renameDoneCallback: (newContent: string) => void, selectionRange: { start: number, end: number } = null) {\r\n\r\n    let mousePointer = window.PointerEvent ? \"pointer\" : \"mouse\";\r\n\r\n    if (elementToReplace == null) {\r\n        elementToReplace = elementWithText;\r\n    }\r\n\r\n    let $input = jQuery('<input type=\"text\" class=\"jo_inplaceeditor\" spellcheck=\"false\">');\r\n    $input.css({\r\n        width: elementToReplace.css('width'),\r\n        height: elementToReplace.css('height'),\r\n        color: elementToReplace.css('color'),\r\n        position: elementToReplace.css('position'),\r\n        \"background-color\": elementToReplace.css('background-color'),\r\n        \"font-size\": elementToReplace.css('font-size'),\r\n        \"font-weight\": elementToReplace.css('font-weight'),\r\n        \"box-sizing\": \"border-box\"\r\n    });\r\n    $input.val(elementWithText.text());\r\n    $input.on(mousePointer + \"down\", (e) => { e.stopPropagation(); })\r\n\r\n    if (selectionRange != null) {\r\n        (<HTMLInputElement>$input[0]).setSelectionRange(selectionRange.start, selectionRange.end);\r\n    }\r\n\r\n    elementToReplace.after($input);\r\n    elementToReplace.hide();\r\n    setTimeout(() => {\r\n        $input.focus();\r\n    }, 300);\r\n\r\n    $input.on(\"keydown.me\", (ev) => {\r\n        if (ev.key == \"Enter\" || ev.key == \"Escape\") {\r\n            $input.off(\"keydown.me\");\r\n            $input.off(\"focusout.me\");\r\n            $input.remove();\r\n            elementToReplace.show();\r\n            let newValue = escapeHtml(<string>$input.val());\r\n            renameDoneCallback(newValue);\r\n            return;\r\n        }\r\n    });\r\n\r\n    $input.on(\"focusout.me\", (ev) => {\r\n        $input.off(\"keydown.me\");\r\n        $input.off(\"focusout.me\");\r\n        $input.remove();\r\n        elementToReplace.show();\r\n        let newValue = escapeHtml(<string>$input.val());\r\n        renameDoneCallback(newValue);\r\n        return;\r\n    });\r\n\r\n}\r\n\r\nexport type ContextMenuItem = {\r\n    caption: string;\r\n    color?: string;\r\n    callback: () => void;\r\n    link?: string;\r\n    subMenu?: ContextMenuItem[]\r\n};\r\n\r\nexport function openContextMenu(items: ContextMenuItem[], x: number, y: number): JQuery<HTMLElement> {\r\n\r\n    let mousePointer = window.PointerEvent ? \"pointer\" : \"mouse\";\r\n\r\n    let $contextMenu = jQuery('<div class=\"jo_contextmenu\"></div>');\r\n\r\n    let $openSubMenu: JQuery<HTMLElement> = null;\r\n    let parentMenuItem: ContextMenuItem = null;\r\n\r\n    for (let mi of items) {\r\n        let caption: string = mi.caption;\r\n        if (mi.link != null) {\r\n            caption = `<a href=\"${mi.link}\" target=\"_blank\" class=\"jo_menulink\">${mi.caption}</a>`;\r\n        }\r\n        let $item = jQuery('<div>' + caption + (mi.subMenu != null ? '<span style=\"float: right\"> &nbsp; &nbsp; &gt;</span>' : \"\") + '</div>');\r\n        if (mi.color != null) {\r\n            $item.css('color', mi.color);\r\n        }\r\n        if (mi.link == null) {\r\n            $item.on(mousePointer + 'up.contextmenu', (ev) => {\r\n                ev.stopPropagation();\r\n                jQuery('.jo_contextmenu').remove();\r\n                jQuery(document).off(mousePointer + \"up.contextmenu\");\r\n                jQuery(document).off(mousePointer + \"down.contextmenu\");\r\n                jQuery(document).off(\"keydown.contextmenu\");\r\n                mi.callback();\r\n            });\r\n            $item.on(mousePointer + 'down.contextmenu', (ev) => {\r\n                ev.stopPropagation();\r\n            });\r\n        } else {\r\n            let $link = $item.find('a');\r\n            $link.on(mousePointer + \"up\", (event) => {\r\n                event.stopPropagation();\r\n                setTimeout(() => {\r\n                    $item.hide();\r\n                }, 500);\r\n            })\r\n            $link.on(mousePointer + \"down\", (event) => {\r\n                event.stopPropagation();\r\n            })\r\n\r\n        }\r\n\r\n        $item.on(mousePointer + 'move.contextmenu', () => {\r\n            if (mi != parentMenuItem && $openSubMenu != null) {\r\n                $openSubMenu.remove();\r\n                parentMenuItem = null;\r\n                $openSubMenu = null;\r\n            }\r\n            if (mi.subMenu != null) {\r\n                $openSubMenu = openContextMenu(mi.subMenu, $item.offset().left + $item.width(), $item.offset().top);\r\n            }\r\n        });\r\n\r\n        $contextMenu.append($item);\r\n    }\r\n\r\n    jQuery(document).on(mousePointer + \"down.contextmenu\", (e) => {\r\n        jQuery(document).off(mousePointer + \"down.contextmenu\");\r\n        jQuery(document).off(\"keydown.contextmenu\");\r\n        jQuery('.jo_contextmenu').remove();\r\n    })\r\n\r\n    jQuery(document).on(\"keydown.contextmenu\", (ev) => {\r\n        if (ev.key == \"Escape\") {\r\n            jQuery(document).off(mousePointer + \"up.contextmenu\");\r\n            jQuery(document).off(\"keydown.contextmenu\");\r\n            jQuery('.jo_contextmenu').remove();\r\n        }\r\n    });\r\n\r\n    let leftRight = x > window.innerWidth * 0.8 ? \"right\" : \"left\";\r\n    let xp = x > window.innerWidth * 0.8 ? window.innerWidth - x : x;\r\n    let topBottom = y > window.innerHeight * 0.8 ? \"bottom\" : \"top\";\r\n    let yp = y > window.innerHeight * 0.8 ? window.innerHeight - y : y;\r\n\r\n    let css = {};\r\n    css[leftRight] = xp + \"px\";\r\n    css[topBottom] = yp + \"px\";\r\n\r\n    $contextMenu.css(css);\r\n\r\n\r\n    jQuery(\"body\").append($contextMenu);\r\n    $contextMenu.show();\r\n\r\n    return $contextMenu;\r\n}\r\n\r\nexport function makeTabs(tabDiv: JQuery<HTMLElement>) {\r\n    let headings = tabDiv.find('.jo_tabheadings>div').not('.jo_noHeading');\r\n    let tabs = tabDiv.find('.jo_tabs>div');\r\n\r\n    let mousePointer = window.PointerEvent ? \"pointer\" : \"mouse\";\r\n\r\n    headings.on(mousePointer + \"down\", (ev) => {\r\n        let target = jQuery(ev.target);\r\n        headings.removeClass('jo_active');\r\n        target.addClass('jo_active');\r\n        let tab = tabDiv.find('.' + target.data('target'));\r\n        tabs.removeClass('jo_active');\r\n        tabs.trigger('myhide');\r\n        tab.addClass('jo_active');\r\n        tab.trigger('myshow');\r\n    });\r\n\r\n}\r\n\r\nexport function convertPxToNumber(pxString: string): number {\r\n    pxString = pxString.replace('px', '').trim();\r\n    return Number.parseInt(pxString);\r\n}\r\n\r\nexport function makeDiv(id: string, klass: string = \"\", text: string = \"\", css?: { [id: string]: any }): JQuery<HTMLDivElement> {\r\n\r\n    let s = \"\";\r\n    if (id != null && id != \"\") s += ` id=\"${id}\"`;\r\n\r\n    if (klass != null && klass != \"\") s += ` class=\"${klass}\"`;\r\n\r\n    let div = jQuery(`<div${s}></div>`);\r\n\r\n    if (css != null) {\r\n        div.css(css);\r\n    }\r\n\r\n    if (text != null && text != \"\") {\r\n        div.text(text);\r\n    }\r\n\r\n    return <any>div;\r\n\r\n}\r\n\r\nexport type SelectItem = {\r\n    value: string | number,\r\n    object: any,\r\n    caption: string\r\n}\r\n\r\nexport function setSelectItems($selectElement: JQuery<HTMLSelectElement>, items: SelectItem[], activeItemValue?: string | number) {\r\n    $selectElement.empty();\r\n    items.forEach(item => {\r\n        let selected: string = (item.value == activeItemValue) ? ' selected=\"selected\"' : \"\";\r\n        let element = jQuery(`<option value=${item.value}${selected}>${item.caption}</option>`);\r\n        $selectElement.append(element);\r\n        element.data('object', item.object);\r\n    }\r\n    );\r\n\r\n    $selectElement.data('items', items);\r\n\r\n\r\n}\r\n\r\nexport function getSelectedObject($selectDiv: JQuery<HTMLSelectElement>) {\r\n\r\n    let items: SelectItem[] = $selectDiv.data('items');\r\n\r\n    let selectedValue = $selectDiv.val();\r\n\r\n    return items.find(item => item.value == selectedValue)?.object;\r\n\r\n}\r\n\r\nexport var jo_mouseDetected: boolean = false;\r\nexport function checkIfMousePresent() {\r\n    if (matchMedia('(pointer:fine)').matches) {\r\n        jo_mouseDetected = true;\r\n    }\r\n}\r\n\r\nexport function animateToTransparent($element: JQuery<HTMLElement>, cssProperty: string, startColorRgb: number[], duration: number) {\r\n    let colorPraefix = 'rgba(' + startColorRgb[0] + \", \" + startColorRgb[1] + \", \" + startColorRgb[2] + \", \";\r\n    let value = 1.0;\r\n    let delta = value / (duration / 20);\r\n\r\n    let animate = () => {\r\n        $element.css(cssProperty, colorPraefix + value + \")\");\r\n        value -= delta;\r\n        if (value < 0) {\r\n            $element.css(cssProperty, \"\");\r\n        } else {\r\n            setTimeout(animate, 20);\r\n        }\r\n    }\r\n\r\n    animate();\r\n}\r\n\r\nexport function downloadFile(obj: any, filename: string, isBlob: boolean = false) {\r\n    var blob = isBlob? obj : new Blob([JSON.stringify(obj)], { type: 'text/plain' });\r\n    //@ts-ignore\r\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n        //@ts-ignore\r\n        window.navigator.msSaveOrOpenBlob(blob, filename);\r\n    } else {\r\n        var e = document.createEvent('MouseEvents'),\r\n            a = document.createElement('a');\r\n        a.download = filename;\r\n        a.href = window.URL.createObjectURL(blob);\r\n        a.dataset.downloadurl = ['text/plain', a.download, a.href].join(':');\r\n        //@ts-ignore\r\n        e.initEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\r\n        a.dispatchEvent(e);\r\n        a.remove();\r\n    }\r\n}\r\n\r\n\r\nfunction fallbackCopyTextToClipboard(text) {\r\n    var textArea = document.createElement(\"textarea\");\r\n    textArea.value = text;\r\n\r\n    // Avoid scrolling to bottom\r\n    textArea.style.top = \"0\";\r\n    textArea.style.left = \"0\";\r\n    textArea.style.position = \"fixed\";\r\n\r\n    document.body.appendChild(textArea);\r\n    textArea.focus();\r\n    textArea.select();\r\n\r\n    try {\r\n        var successful = document.execCommand('copy');\r\n    } catch (err) {\r\n        console.error('Fallback: Oops, unable to copy', err);\r\n    }\r\n\r\n    document.body.removeChild(textArea);\r\n}\r\n\r\nexport function copyTextToClipboard(text) {\r\n    if (!navigator.clipboard) {\r\n        fallbackCopyTextToClipboard(text);\r\n        return;\r\n    }\r\n    navigator.clipboard.writeText(text).then(function () {\r\n    }, function (err) {\r\n        console.error('Async: Could not copy text: ', err);\r\n    });\r\n}\r\n","import { convertPxToNumber } from \"../../../tools/HtmlTools.js\";\r\n\r\nexport class ZoomControl {\r\n    \r\n    public static preventFading:boolean = false;\r\n\r\n    position: number = 0;\r\n    yMax: number;\r\n    $grip: JQuery<HTMLElement>;\r\n    $zoomcontrolDisplay: JQuery<HTMLElement>;\r\n\r\n    gripHeight: number = 10;\r\n    overallHeight: number = 150;\r\n\r\n    zoomMin: number = 0.2;\r\n    zoomMax: number = 2;\r\n\r\n\r\n    constructor($parentElement: JQuery<HTMLElement>, private callback?: (zoomfactor: number) => void){\r\n        let $zoomcontrolOuter = jQuery('<div class=\"jo_zoomcontrol-outer\" title=\"Zoom\" draggable=\"false\"></div>');\r\n        $parentElement.append($zoomcontrolOuter);\r\n        let $zoomcontrolBar = jQuery('<div class=\"jo_zoomcontrol-bar\" draggable=\"false\"></div>');\r\n        $zoomcontrolOuter.append($zoomcontrolBar);\r\n        this.$grip = jQuery('<div class=\"jo_zoomcontrol-grip\" draggable=\"false\"></div>');\r\n        $zoomcontrolOuter.append(this.$grip);\r\n        this.$zoomcontrolDisplay = jQuery('<div class=\"jo_zoomcontrol-display\"></div>');\r\n        this.$grip.append(this.$zoomcontrolDisplay);\r\n\r\n        let mousedownY: number;\r\n        let oldPosition: number;\r\n        let that = this;\r\n        that.overallHeight = convertPxToNumber($zoomcontrolOuter.css('height'));\r\n        that.gripHeight = convertPxToNumber(that.$grip.css('height'));\r\n        that.yMax = that.overallHeight - that.gripHeight;\r\n\r\n        let mousePointer = window.PointerEvent ? \"pointer\" : \"mouse\";\r\n\r\n        $zoomcontrolBar.on(mousePointer + 'down', (e) => {\r\n\r\n            let y = e.pageY - $zoomcontrolOuter.offset().top - 4;\r\n            that.setZoom(y);\r\n            that.$grip.css('top', y + 'px');\r\n            //@ts-ignore\r\n            that.$grip.trigger(mousePointer + 'down', [e.clientY]);\r\n\r\n        });\r\n        \r\n        \r\n        this.$grip.on(mousePointer + 'down', (e, y) => {\r\n            if(y == null) y = e.clientY;\r\n            mousedownY = y;\r\n            oldPosition = that.position;\r\n            this.$zoomcontrolDisplay.show();\r\n\r\n            jQuery(document).on(mousePointer + 'move.zoomcontrol', (e)=>{\r\n                let deltaY = e.clientY - mousedownY;\r\n                that.setZoom(oldPosition + deltaY);\r\n            });\r\n\r\n            jQuery(document).on(mousePointer + 'up.zoomcontrol', () => {\r\n                jQuery(document).off(mousePointer + 'up.zoomcontrol');\r\n                jQuery(document).off(mousePointer + 'move.zoomcontrol');\r\n                this.$zoomcontrolDisplay.hide();\r\n            });\r\n\r\n            e.stopPropagation();\r\n\r\n        });\r\n\r\n        $parentElement.on(mousePointer + \"enter\", (e) => {\r\n            if(!ZoomControl.preventFading)\r\n            $zoomcontrolOuter.fadeIn();\r\n        });\r\n        \r\n        $parentElement.on(mousePointer + \"leave\", (e) => {\r\n            if(!ZoomControl.preventFading)\r\n            $zoomcontrolOuter.fadeOut();\r\n        });\r\n\r\n        let factor = (1.0 - this.zoomMin)/(this.zoomMax - this.zoomMin);\r\n        this.position = factor*(this.overallHeight - this.gripHeight);\r\n        this.$grip.css('top', this.position + \"px\");\r\n    }\r\n\r\n    setZoom(newPosition: number){\r\n\r\n        if(newPosition < 0){\r\n            newPosition = 0;\r\n        }\r\n\r\n        if(newPosition > this.yMax){\r\n            newPosition = this.yMax;\r\n        }\r\n\r\n        this.position = newPosition;\r\n\r\n        this.$grip.css('top', newPosition + \"px\");\r\n\r\n        let zoomfactor = newPosition/(this.overallHeight - this.gripHeight);\r\n        zoomfactor = this.zoomMin + zoomfactor*(this.zoomMax - this.zoomMin);\r\n\r\n        let zfs = Math.round(zoomfactor * 100) + \" %\";\r\n        this.$zoomcontrolDisplay.html(zfs);\r\n\r\n        if(this.callback != null){\r\n            this.callback(zoomfactor);\r\n        }\r\n\r\n    }\r\n\r\n}","import { ZoomControl } from \"./ZoomControl.js\";\r\nimport { ClassBox } from \"./classdiagram/ClassBox.js\";\r\nimport { Rectangle, Point } from \"./classdiagram/Router.js\";\r\nimport { DiagramElement } from \"./DiagramElement.js\";\r\nimport { Main } from \"../../Main.js\";\r\nimport { MainBase } from \"../../MainBase.js\";\r\n\r\nexport var DiagramUnitCm = 0.2; // in cm\r\n\r\nexport class Diagram {\r\n\r\n    zoomControl: ZoomControl;\r\n    zoomfactor: number = 1.0;\r\n\r\n    $canvas: JQuery<HTMLElement>;\r\n    svgElement: Element;\r\n\r\n    $menuButton: JQuery<HTMLElement>;\r\n\r\n    defs: Element;\r\n    style: Element;\r\n\r\n    inlineStyles: { [selector: string]: { [key: string]: string } } = {};\r\n    marginCm = 1.6;\r\n    minDistance = 2.0;\r\n    minWidthHeightCm = 10;\r\n    widthCm = this.minWidthHeightCm;\r\n    heightCm = this.minWidthHeightCm;\r\n\r\n    $centerRectangle: JQuery<SVGElement>;\r\n\r\n    constructor($htmlElement: JQuery<HTMLElement>, public main: MainBase){\r\n\r\n        this.$menuButton = jQuery('<div class=\"jo_classDiagram_Menubutton jo_button jo_active img_menu-three-bars\"></div>');\r\n        $htmlElement.append(this.$menuButton);\r\n\r\n        let $scrollpane = jQuery('<div></div>');\r\n        $htmlElement.append($scrollpane);\r\n        $scrollpane.addClass('jo_scrollable');\r\n        $scrollpane.css({overflow: \"auto\", position: \"relative\", width: \"100%\", height: \"100%\"});\r\n\r\n        this.$canvas = jQuery('<div class=\"jo_diagram-canvas\"></div>');\r\n        $scrollpane.append(this.$canvas);\r\n        this.zoomControl = new ZoomControl($htmlElement, (factor: number) => {\r\n            this.$canvas.css({\r\n                transform: \"scale(\" + factor + \")\"\r\n            });\r\n            this.zoomfactor = factor;\r\n        });\r\n\r\n        let ns = 'http://www.w3.org/2000/svg';\r\n        this.svgElement = document.createElementNS(ns, 'svg');\r\n        // jQuery(this.svgElement).css('pointer-events', 'none');\r\n        jQuery(this.svgElement).addClass(\"jo_diagram-svg svg_all_pointer_events\");\r\n\r\n        // this.insertStyleElement({\".svp_draggable\": {cursor: \"pointer\"}});\r\n\r\n        this.$canvas[0].appendChild(this.svgElement);\r\n\r\n        this.$centerRectangle = <any>jQuery(this.createElement(\"rect\", this.svgElement));\r\n\r\n        this.$centerRectangle.css({fill: \"#ffffff\", \"stroke\": \"none\"});\r\n\r\n        this.adjustCenterRectangle();\r\n\r\n        let $svgElement =  jQuery(this.svgElement);\r\n\r\n        let x: number;\r\n        let y: number;\r\n\r\n        $svgElement.on('mousedown', (ev1) => {\r\n            x = ev1.screenX;\r\n            y = ev1.screenY;\r\n            \r\n            jQuery(document).on('mousemove.diagram', (ev) => {\r\n                let dx = ev.screenX - x;\r\n                let dy = ev.screenY - y;\r\n                x = ev.screenX;\r\n                y = ev.screenY;\r\n                $scrollpane.scrollLeft($scrollpane.scrollLeft() - dx);\r\n                $scrollpane.scrollTop($scrollpane.scrollTop() - dy);\r\n            })\r\n\r\n            jQuery(document).on('mouseup.diagram', () => {\r\n                jQuery(document).off('mousemove.diagram');\r\n                jQuery(document).off('mouseup.diagram');\r\n            });\r\n\r\n\r\n        });\r\n\r\n\r\n    }    \r\n\r\n    adjustCenterRectangle(){\r\n        this.$centerRectangle.attr({\r\n            x: this.marginCm + \"cm\",\r\n            y: this.marginCm + \"cm\",\r\n            width: (this.widthCm - 2*this.marginCm) + \"cm\",    \r\n            height: (this.heightCm - 2*this.marginCm) + \"cm\"\r\n        });\r\n    }\r\n\r\n    setSize(widthCm: number, heightCm: number){\r\n        if(widthCm < this.minWidthHeightCm) widthCm = this.minWidthHeightCm;\r\n        if(heightCm < this.minWidthHeightCm) heightCm = this.minWidthHeightCm;\r\n\r\n        this.$canvas.css({\r\n            width: widthCm + \"cm\",\r\n            height: heightCm + \"cm\"\r\n        })\r\n\r\n        this.widthCm = widthCm;\r\n        this.heightCm = heightCm;\r\n\r\n        this.adjustCenterRectangle();\r\n    }\r\n\r\n    adjustSizeAndElements(diagramElements: DiagramElement[]): {isAdjusted: boolean}{\r\n\r\n        let xMin = 100000;\r\n        let yMin = 100000;\r\n        let xMax = -100000;\r\n        let yMax = -100000;\r\n\r\n        for(let rr of diagramElements){\r\n            if(xMin > rr.leftCm) xMin = rr.leftCm;\r\n            if(xMax < rr.leftCm + rr.widthCm) xMax = rr.leftCm + rr.widthCm;\r\n            if(yMin > rr.topCm) yMin = rr.topCm;\r\n            if(yMax < rr.topCm + rr.heightCm) yMax = rr.topCm + rr.heightCm;\r\n        }\r\n\r\n        xMin -= this.marginCm;\r\n        xMax += this.marginCm;\r\n        yMin -= this.marginCm;\r\n        yMax += this.marginCm;\r\n\r\n        let isAdjusted: boolean = false;\r\n        let newWidthCm = this.widthCm;\r\n        let newHeightCm = this.heightCm;\r\n\r\n        if(xMin < 0 || xMax > this.widthCm || (xMax - xMin <= this.widthCm && this.widthCm > this.minWidthHeightCm)){\r\n            let delta = 0;\r\n            newWidthCm = Math.max(this.minWidthHeightCm, xMax - xMin);\r\n\r\n            if(xMin < 0){\r\n                delta = -xMin;\r\n            }\r\n\r\n            if(xMin > 0 && xMax > newWidthCm){\r\n                delta = newWidthCm - xMax;\r\n            }\r\n            isAdjusted = delta != 0;\r\n\r\n            if(isAdjusted)\r\n            for(let rr of diagramElements){\r\n                rr.move(delta, 0, true, true);\r\n            }\r\n\r\n        }\r\n\r\n        if(yMin < 0 || yMax > this.heightCm || (yMax - yMin <= this.heightCm && this.heightCm > this.minWidthHeightCm)){\r\n            let delta = 0;\r\n            newHeightCm = Math.max(this.minWidthHeightCm, yMax - yMin);\r\n\r\n            if(yMin < 0){\r\n                delta = -yMin;\r\n            }\r\n\r\n            if(yMin > 0 && yMax > newHeightCm){\r\n                delta = newHeightCm - yMax;\r\n            }\r\n            isAdjusted = delta != 0;\r\n\r\n            if(isAdjusted)\r\n            for(let rr of diagramElements){\r\n                rr.move(0, delta, true, true);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        this.setSize(newWidthCm, newHeightCm);\r\n        \r\n\r\n        return {isAdjusted: isAdjusted};\r\n\r\n    }\r\n\r\n    public insertStyleElement(styles: { [selector: string]: { [key: string]: string } } = null) {\r\n\r\n        let ns = 'http://www.w3.org/2000/svg';\r\n\r\n        if (this.style == null) {\r\n            this.defs = document.createElementNS(ns, 'defs');\r\n            this.style = document.createElementNS(ns, 'style');\r\n            this.defs.appendChild(this.style);\r\n            this.svgElement.appendChild(this.defs);\r\n        }\r\n\r\n        if (styles != null) {\r\n            this.inlineStyles = styles;\r\n            this.refreshInlineStyles();\r\n        }\r\n\r\n    }\r\n\r\n    public createElement(name: string, parent: Element = null, attributes?:\r\n        { [key: string]: string }): JQuery<Element> {\r\n\r\n        let ns = 'http://www.w3.org/2000/svg';\r\n        let $element = jQuery(document.createElementNS(ns, name));\r\n\r\n        if(attributes != null) $element.attr(attributes);\r\n\r\n        if(parent != null) parent.appendChild($element[0]);\r\n\r\n        return $element;\r\n\r\n    }\r\n\r\n    private refreshInlineStyles() {\r\n\r\n        let s: string = \"\";\r\n\r\n        for (let selector in this.inlineStyles) {\r\n            let stylesForSelector = this.inlineStyles[selector];\r\n            if (stylesForSelector != null) {\r\n                s += selector + \"{\\n\";\r\n                for (let key in stylesForSelector) {\r\n                    s += \"   \" + key + \":\" + stylesForSelector[key] + \";\\n\";\r\n                }\r\n                s += \"}\\n\";\r\n            } else {\r\n                s += selector + \"\\n\";\r\n            }\r\n        }\r\n\r\n        this.style.textContent = s;\r\n\r\n    }\r\n\r\n    findFreeSpace(elements: DiagramElement[], width: number, height: number, minDistance: number): Point {\r\n\r\n        let radius = 0;\r\n        let fertig: boolean = false;\r\n        let xCm = 0;\r\n        let yCm = 0;\r\n        while(!fertig){\r\n\r\n            let y = radius;\r\n            let x = 0;\r\n            for(x = 0; x <= radius; x++){\r\n                xCm = this.marginCm + x * DiagramUnitCm;\r\n                yCm = this.marginCm + y * DiagramUnitCm;\r\n                if(this.isFree(elements, width, height, xCm, yCm, minDistance)){\r\n                    fertig = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(fertig) break;\r\n            x--;\r\n            for(y = 0; y <= radius - 1; y++){\r\n                xCm = this.marginCm + x * DiagramUnitCm;\r\n                yCm = this.marginCm + y * DiagramUnitCm;\r\n                if(this.isFree(elements, width, height, xCm, yCm, minDistance)){\r\n                    fertig = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            radius += 2;\r\n\r\n        }\r\n\r\n        return {x: xCm, y: yCm};\r\n\r\n    }\r\n\r\n    isFree(elements: DiagramElement[], widthCm: number, heightCm: number, leftCm: number, topCm: number, minDistance: number):boolean {\r\n\r\n        for(let element of elements){\r\n\r\n            let insideX = Math.abs(element.leftCm + element.widthCm/2 - leftCm - widthCm/2) \r\n                       <= (element.widthCm + widthCm)/2 + minDistance;\r\n\r\n            let insideY = Math.abs(element.topCm + element.heightCm/2 - topCm - heightCm/2) <= (element.heightCm + heightCm)/2 + minDistance;\r\n\r\n            if(insideX && insideY) return false;\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n}","import { DiagramUnitCm, Diagram } from \"./Diagram.js\"; \r\nimport { Rectangle } from \"./classdiagram/Router.js\";\r\n\r\nexport enum Alignment {\r\n    left, center, right\r\n}\r\n\r\nexport type TextLine = {\r\n    type: \"text\",\r\n    text: string,\r\n    tooltip?: string,\r\n    alignment?: Alignment,\r\n    bold?: boolean,\r\n    italics?: boolean,\r\n    textHeightCm?: number,\r\n    textWidthCm?: number,\r\n    yCm?: number\r\n    $element?: JQuery<SVGTextElement>,\r\n    onClick?: () => void\r\n}\r\n\r\nexport type HorizontalLine = {\r\n    type: \"line\",\r\n    $element?: JQuery<SVGLineElement>,\r\n    thicknessCm: number,\r\n    yCm?: number\r\n}\r\n\r\nexport abstract class DiagramElement {\r\n\r\n    public static cmPerPx: number = 2.54/96;\r\n\r\n    public $element: JQuery<Element>;\r\n\r\n    public leftCm: number = 0; // x-Koordinate in cm\r\n    public topCm: number = 0; // y-Koordinate in cm\r\n \r\n    public widthCm: number;\r\n    public heightCm: number; \r\n\r\n    protected lines: (TextLine | HorizontalLine)[] = [];\r\n\r\n    public backgroundColor: string = \"#ffffff\";\r\n\r\n    constructor(protected parent: Element) {\r\n\r\n    }\r\n\r\n    getRoutingRectangle(): Rectangle{\r\n        return {\r\n            left: Math.round(this.leftCm/DiagramUnitCm),\r\n            top: Math.round(this.topCm/DiagramUnitCm),\r\n            width: Math.round(this.widthCm/DiagramUnitCm),\r\n            height: Math.round(this.heightCm/DiagramUnitCm) \r\n        };\r\n    }\r\n\r\n    public show(){\r\n        if(this.$element == null) return;\r\n        this.$element.show();\r\n    }\r\n\r\n    public hide(){\r\n        if(this.$element == null) return;\r\n        this.$element.hide();\r\n    }\r\n\r\n    detach() {\r\n        if(this.$element == null) return;\r\n        this.$element.detach();        \r\n    }\r\n\r\n    remove() {\r\n        if(this.$element == null) return;\r\n        this.$element.remove();\r\n        this.$element = null;        \r\n    }\r\n\r\n    appendTo($element: JQuery<Element>){\r\n        $element.append(this.$element);\r\n    }\r\n\r\n    public clear(){\r\n        if(this.$element == null) return;\r\n        this.$element.empty();\r\n        this.lines = [];\r\n    }\r\n\r\n    public move(xCm: number, yCm: number, withRaster: boolean, adjustToRaster: boolean = false) {\r\n        this.leftCm += xCm;\r\n        this.topCm += yCm;\r\n\r\n        let x = this.leftCm;\r\n        let y = this.topCm;\r\n\r\n        if(withRaster){\r\n            x = Math.round(x/DiagramUnitCm)*DiagramUnitCm;\r\n            y = Math.round(y/DiagramUnitCm)*DiagramUnitCm;\r\n        }\r\n\r\n        if(adjustToRaster){\r\n            this.leftCm = x;\r\n            this.topCm = y;\r\n        }\r\n\r\n        jQuery(this.$element).css(\"transform\", \"translate(\" + x + \"cm,\" + y + \"cm)\");\r\n    }\r\n\r\n    public moveTo(xCm: number, yCm: number, withRaster: boolean) {\r\n        this.move(xCm - this.leftCm, yCm - this.topCm, withRaster);\r\n    }\r\n\r\n    public createElement(name: string, parent: Element = null, attributes?:\r\n        { [key: string]: string }): JQuery<Element> {\r\n\r\n        let ns = 'http://www.w3.org/2000/svg';\r\n        let $element = jQuery(document.createElementNS(ns, name));\r\n\r\n        if(attributes != null) $element.attr(attributes);\r\n\r\n        if(parent != null) parent.appendChild($element[0]);\r\n\r\n        return $element;\r\n\r\n    }\r\n\r\n    public createTextElement(text: string, parent: Element = null, attributes?:\r\n        { [key: string]: string }): JQuery<Element> {\r\n\r\n            let $element: JQuery<Element> = this.createElement(\"text\", parent, {\r\n                font: \"16px Roboto\",\r\n                \"font-family\": \"sans-serif\",\r\n                fill: \"#000\",\r\n                \"alignment-baseline\":\"hanging\",\r\n                \"dominant-baseline\":\"hanging\"\r\n            });\r\n\r\n            if(attributes != null) $element.attr(attributes);\r\n\r\n            $element.text(text);\r\n\r\n            return $element;\r\n    }\r\n\r\n    public getTextMetrics(textElement: JQuery<SVGTextElement>):{height: number, width: number}{\r\n        let bbox:DOMRect = textElement[0].getBBox();\r\n        \r\n        return {\r\n            height: bbox.height * DiagramElement.cmPerPx,\r\n            width: bbox.width * DiagramElement.cmPerPx\r\n        }\r\n\r\n    }\r\n\r\n    public addTextLine(line: TextLine | HorizontalLine){\r\n\r\n        this.lines.push(line);\r\n\r\n        if(line.type == \"text\"){\r\n            if(line.alignment == null) line.alignment = Alignment.left;\r\n            if(line.bold == null) line.bold = false;\r\n            if(line.italics == null) line.italics = false;\r\n        }\r\n\r\n    }\r\n\r\n    public render(){\r\n\r\n        let $group = this.$element;\r\n        if($group == null){\r\n            $group = this.createElement(\"g\", this.parent);\r\n            $group.addClass(\"svg_draggable\");\r\n            $group.addClass(\"svg_all_pointer_events\");\r\n            this.$element = $group;\r\n            jQuery(this.$element).css(\"transform\", \"translate(\" + this.leftCm + \"cm,\" + this.topCm + \"cm)\");\r\n        }\r\n\r\n        let $rect = this.createElement(\"rect\", $group[0]);\r\n\r\n        let textPosYCm: number = 0.1;\r\n        let maxWidthCm: number = 0;\r\n\r\n        let first: boolean = true;\r\n        for(let line of this.lines){\r\n            if(line.type == \"text\"){\r\n                if(first) textPosYCm += 0.1;\r\n                first = false;\r\n                line.yCm = textPosYCm;\r\n                line.$element = <JQuery<SVGTextElement>>this.createTextElement(line.text, $group[0], {\r\n                    \"font-weight\" : line.bold?\"bold\":\"normal\",\r\n                    \"font-size\": \"12pt\",\r\n                    \"font-style\": line.italics?\"italic\":\"normal\",\r\n                    \"text-anchor\": line.alignment == Alignment.left ? \"start\" : line.alignment == Alignment.center ? \"middle\" : \"end\",\r\n                    \"cursor\": line.onClick == null ? \"\" : \"pointer\"\r\n                } );\r\n\r\n                line.$element.css(\"transform\", \"translate(0cm,0cm)\");\r\n                // line.$element.css(\"transform\", \"translate(0cm,\" + textPosYCm + \"cm)\");\r\n                // if(line.onClick != null){\r\n                //     line.$element.addClass(\"clickable\");\r\n                //     line.$element.on(\"mousedown\", (event) => {\r\n                //         //@ts-ignore\r\n                //         line.onClick();\r\n                //         event.stopPropagation();\r\n                //     })\r\n                // }\r\n                let metrics = this.getTextMetrics(line.$element);\r\n                line.textHeightCm = metrics.height;\r\n                line.textWidthCm = metrics.width;\r\n                maxWidthCm = Math.max(maxWidthCm, line.textWidthCm);\r\n                textPosYCm += line.textHeightCm;\r\n                if(line.tooltip != null){\r\n                    let $tooltip = this.createElement(\"title\", line.$element[0]);\r\n                    $tooltip.text(line.tooltip);\r\n                }\r\n            } else {\r\n                line.yCm = textPosYCm + line.thicknessCm/2;\r\n                textPosYCm += line.thicknessCm + 0.1;\r\n                first = true;\r\n            }\r\n        }\r\n\r\n        let width = 2 * 0.05 + 2*0.2 + maxWidthCm;\r\n        this.widthCm = (Math.trunc(width/DiagramUnitCm) + 1)*DiagramUnitCm;\r\n        this.heightCm = (Math.trunc(textPosYCm/DiagramUnitCm) + 1)*DiagramUnitCm;\r\n\r\n        let textLeft = 0.05 + 0.2;\r\n        let textCenter = width/2;\r\n        let textRight = width - textLeft;\r\n\r\n        $rect.css({\r\n            width: this.widthCm + \"cm\",\r\n            height: this.heightCm + \"cm\",\r\n            fill: this.backgroundColor,\r\n            stroke: \"#000\",\r\n            \"stroke-width\": \"0.05cm\"\r\n        });\r\n\r\n\r\n        for(let line of this.lines){\r\n            if(line.type == \"text\"){\r\n\r\n                let x: number;\r\n                switch(line.alignment){\r\n                    case Alignment.center: x = textCenter; break;\r\n                    case Alignment.left: x = textLeft; break;\r\n                    case Alignment.right: x = textRight; break;\r\n                }\r\n\r\n                // Unfortunately we have to wrap Text-Elements in <g> due to a bug in safari,\r\n                // see \r\n                //@ts-ignore\r\n                let $g = this.createElement(\"g\", $group[0]);\r\n                $g.append(line.$element);\r\n                //@ts-ignore\r\n                line.$element = $g;\r\n\r\n                line.$element.css(\"transform\", \"translate(\" + x + \"cm,\"+line.yCm + \"cm)\");\r\n\r\n                if(line.onClick != null){\r\n                    line.$element.addClass(\"clickable\");\r\n                    line.$element.on(\"mousedown\", (event) => {\r\n                        //@ts-ignore\r\n                        line.onClick();\r\n                        event.stopPropagation();\r\n                    })\r\n                }\r\n\r\n\r\n            } else {\r\n                line.$element = <JQuery<SVGLineElement>>this.createElement(\"line\", $group[0], {\r\n                    x1: \"0\",\r\n                    y1: line.yCm + \"cm\",\r\n                    x2: this.widthCm + \"cm\",\r\n                    y2: line.yCm + \"cm\"\r\n                });\r\n\r\n                line.$element.css({\r\n                    stroke: \"#000\",\r\n                    \"stroke-width\": line.thicknessCm + \"cm\"        \r\n                });\r\n\r\n            }\r\n        }\r\n\r\n\r\n        \r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n","import { Error, Lexer } from \"./lexer/Lexer.js\";\r\nimport { CodeGenerator } from \"./parser/CodeGenerator.js\";\r\nimport { File, Module, ModuleStore } from \"./parser/Module.js\";\r\nimport { Parser } from \"./parser/Parser.js\";\r\nimport { TypeResolver } from \"./parser/TypeResolver.js\";\r\nimport { Main } from \"../main/Main.js\";\r\nimport { MainBase } from \"../main/MainBase.js\";\r\nimport { MainEmbedded } from \"../embedded/MainEmbedded.js\";\r\nimport { Klass, Interface } from \"./types/Class.js\";\r\nimport { SemicolonAngel } from \"./parser/SemicolonAngel.js\";\r\n\r\nexport enum CompilerStatus {\r\n    compiling, error, compiledButNothingToRun, readyToRun\r\n}\r\n\r\nexport class Compiler {\r\n\r\n    compilerStatus: CompilerStatus = CompilerStatus.compiledButNothingToRun;\r\n\r\n    atLeastOneModuleIsStartable: boolean;\r\n\r\n    constructor(private main: MainBase) {\r\n    }\r\n\r\n    compile(moduleStore: ModuleStore): Error[] {\r\n\r\n        this.compilerStatus = CompilerStatus.compiling;\r\n\r\n        let t0 = performance.now();\r\n\r\n        moduleStore.clearUsagePositions();\r\n\r\n        let lexer = new Lexer();\r\n\r\n        // 1st pass: lexing\r\n        for (let m of moduleStore.getModules(false)) {\r\n            m.file.dirty = false;\r\n            m.clear();\r\n\r\n            let lexed = lexer.lex(m.getProgramTextFromMonacoModel());\r\n\r\n            m.errors[0] = lexed.errors;\r\n            m.tokenList = lexed.tokens;\r\n            m.bracketError = lexed.bracketError;\r\n            m.colorInformation = lexed.colorInformation;\r\n            \r\n            if(m.file.name == this.main.getCurrentlyEditedModule()?.file?.name){\r\n                if(this.main.getBottomDiv() != null) this.main.getBottomDiv().errorManager.showParenthesisWarning(lexed.bracketError);\r\n            }\r\n        }\r\n\r\n        // 2nd pass: parse tokenlist and generate AST\r\n\r\n        this.main.getSemicolonAngel().startRegistering();\r\n\r\n        let parser: Parser = new Parser(false);\r\n\r\n        for (let m of moduleStore.getModules(false)) {\r\n            parser.parse(m);\r\n        }\r\n\r\n        // 3rd pass: resolve types and populate typeStores; checks intermodular dependencies\r\n\r\n        let typeResolver: TypeResolver = new TypeResolver(this.main);\r\n\r\n        // Klass.count = 0;\r\n        // Interface.count = 0;\r\n        typeResolver.start(moduleStore);\r\n        // console.log(\"Klass-Klone: \" + Klass.count + \", Interface-Klone: \" + Interface.count);\r\n\r\n        // 4th pass: code generation\r\n\r\n        let codeGenerator = new CodeGenerator();\r\n\r\n        for (let m of moduleStore.getModules(false)) {\r\n            codeGenerator.start(m, moduleStore);\r\n        }\r\n\r\n        let errorfree = true;\r\n        for (let m of moduleStore.getModules(false)) {\r\n            m.dependsOnModulesWithErrors = m.hasErrors();\r\n            if(m.dependsOnModulesWithErrors) errorfree = false;\r\n        }\r\n\r\n        let done = false;\r\n        while(!done){\r\n            done = true;\r\n            for (let m of moduleStore.getModules(false)) {\r\n                if(!m.dependsOnModulesWithErrors)\r\n                for (let m1 of moduleStore.getModules(false)) {\r\n                    if(m.dependsOnModules.get(m1) && m1.dependsOnModulesWithErrors){\r\n                        m.dependsOnModulesWithErrors = true;\r\n                        done = false;\r\n                        break;\r\n                    }\r\n                }                            \r\n            }            \r\n        }\r\n        \r\n        this.atLeastOneModuleIsStartable = false;        \r\n        for (let m of moduleStore.getModules(false)) {\r\n            m.isStartable = m.hasMainProgram() && !m.dependsOnModulesWithErrors;\r\n            if(m.isStartable){\r\n                this.atLeastOneModuleIsStartable = true;\r\n            }\r\n            if(!(this.main instanceof MainEmbedded) || this.main.config.withFileList){\r\n                m.renderStartButton();\r\n            } \r\n        }\r\n\r\n        if (this.atLeastOneModuleIsStartable) {\r\n\r\n            this.compilerStatus = CompilerStatus.readyToRun;\r\n\r\n        } else {\r\n\r\n            this.compilerStatus = errorfree ? CompilerStatus.error : CompilerStatus.compiledButNothingToRun;\r\n\r\n        }\r\n\r\n        let dt = performance.now() - t0;\r\n        dt = Math.round(dt * 100) / 100;\r\n\r\n        let message = \"Compiled in \" + dt + \" ms.\";\r\n\r\n        this.main.getCurrentWorkspace().compilerMessage = message;\r\n\r\n        this.main.getSemicolonAngel().healSemicolons();\r\n\r\n        return null;\r\n    }\r\n\r\n}","import { TextPosition, TokenType, TokenTypeReadable } from \"../compiler/lexer/Token.js\";\r\nimport { Module, ModuleStore } from \"../compiler/parser/Module.js\";\r\nimport { Program, Statement, ReturnStatement } from \"../compiler/parser/Program.js\";\r\nimport { ArrayType } from \"../compiler/types/Array.js\";\r\nimport { Klass, Interface } from \"../compiler/types/Class.js\";\r\nimport { Enum, EnumRuntimeObject } from \"../compiler/types/Enum.js\";\r\nimport { PrimitiveType, Type, Value, Heap, Method } from \"../compiler/types/Types.js\";\r\nimport { PrintManager } from \"../main/gui/PrintManager.js\";\r\nimport { Main } from \"../main/Main.js\";\r\nimport { Debugger } from \"./Debugger.js\";\r\nimport { RuntimeObject } from \"./RuntimeObject.js\";\r\nimport { intPrimitiveType, stringPrimitiveType } from \"../compiler/types/PrimitiveTypes.js\";\r\nimport { InputManager } from \"./InputManager.js\";\r\nimport { WorldHelper } from \"../runtimelibrary/graphics/World.js\";\r\nimport { Helper } from \"../main/gui/Helper.js\";\r\nimport { TimerClass } from \"../runtimelibrary/Timer.js\";\r\nimport { KeyboardTool } from \"../tools/KeyboardTool.js\";\r\nimport { ProgramControlButtons } from \"../main/gui/ProgramControlButtons.js\";\r\nimport { MainBase } from \"../main/MainBase.js\";\r\nimport { ListHelper } from \"../runtimelibrary/collections/ArrayList.js\";\r\nimport { GroupHelper } from \"../runtimelibrary/graphics/Group.js\";\r\nimport { WebSocketRequestKeepAlive } from \"../communication/Data.js\";\r\nimport { MainEmbedded } from \"../embedded/MainEmbedded.js\";\r\nimport { ProcessingHelper } from \"../runtimelibrary/graphics/Processing.js\";\r\nimport { GNGEreignisbehandlungHelper } from \"../runtimelibrary/gng/GNGEreignisbehandlung.js\";\r\nimport { GamepadTool } from \"../tools/GamepadTool.js\";\r\nimport { ConnectionHelper } from \"../runtimelibrary/database/Connection.js\";\r\n\r\nexport enum InterpreterState {\r\n    not_initialized, running, paused, error, done, waitingForInput, waitingForTimersToEnd\r\n}\r\n\r\nexport type ProgramStackElement = {\r\n    program: Program,\r\n    programPosition: number,  // next position to execute after return\r\n    textPosition: TextPosition, // textposition of method call\r\n    method: Method | string,\r\n    callbackAfterReturn: (interpreter: Interpreter) => void,\r\n    isCalledFromOutside: string,\r\n    stackElementsToPushBeforeFirstExecuting?: Value[]\r\n};\r\n\r\nexport class Interpreter {\r\n\r\n    debugger: Debugger;\r\n\r\n    mainModule: Module;\r\n    moduleStore: ModuleStore;\r\n    moduleStoreVersion: number = -100;\r\n\r\n    printManager: PrintManager;\r\n    inputManager: InputManager;\r\n\r\n    stepsPerSecond = 2;\r\n    maxStepsPerSecond = 1000000;\r\n    timerDelayMs = 10;\r\n\r\n    timerId: any;\r\n    state: InterpreterState;\r\n\r\n    currentProgram: Program;\r\n    currentProgramPosition: number;\r\n    currentMethod: Method | string;\r\n    currentCallbackAfterReturn: (interpreter: Interpreter) => void;\r\n    currentIsCalledFromOutside: string\r\n\r\n    programStack: ProgramStackElement[] = [];\r\n\r\n    stack: Value[] = [];\r\n    stackframes: number[] = [];\r\n    currentStackframe: number;\r\n\r\n    heap: Heap = {};\r\n\r\n    timerStopped: boolean = true;\r\n    timerExtern: boolean = false;\r\n\r\n    steps: number = 0;\r\n    timeNetto: number = 0;\r\n    timeWhenProgramStarted: number = 0;\r\n\r\n    stepOverNestingLevel: number = 0;\r\n    leaveLine: number = -1;\r\n    additionalStepFinishedFlag: boolean = false;\r\n\r\n    isFirstStatement: boolean = true;\r\n\r\n    showProgrampointerUptoStepsPerSecond = 15;\r\n\r\n    worldHelper: WorldHelper;\r\n    gngEreignisbehandlungHelper: GNGEreignisbehandlungHelper;\r\n    processingHelper: ProcessingHelper;\r\n    databaseConnectionHelpers: ConnectionHelper[] = [];\r\n\r\n    keyboardTool: KeyboardTool;\r\n    gamepadTool: GamepadTool;\r\n\r\n    webSocketsToCloseAfterProgramHalt: WebSocket[] = [];\r\n\r\n    pauseUntil?: number;\r\n\r\n    actions: string[] = [\"start\", \"pause\", \"stop\", \"stepOver\",\r\n        \"stepInto\", \"stepOut\", \"restart\"];\r\n\r\n    // buttonActiveMatrix[button][i] tells if button is active at \r\n    // InterpreterState i\r\n    buttonActiveMatrix: { [buttonName: string]: boolean[] } = {\r\n        \"start\": [false, false, true, true, true, false],\r\n        \"pause\": [false, true, false, false, false, false],\r\n        \"stop\": [false, true, true, false, false, true],\r\n        \"stepOver\": [false, false, true, true, true, false],\r\n        \"stepInto\": [false, false, true, true, true, false],\r\n        \"stepOut\": [false, false, true, false, false, false],\r\n        \"restart\": [false, true, true, true, true, true]\r\n    }\r\n\r\n    callbackAfterExecution: () => void;\r\n\r\n    constructor(public main: MainBase, public debugger_: Debugger, public controlButtons: ProgramControlButtons,\r\n        $runDiv: JQuery<HTMLElement>) {\r\n        this.printManager = new PrintManager($runDiv, this.main);\r\n        this.inputManager = new InputManager($runDiv, this.main);\r\n        if (main.isEmbedded()) {\r\n            this.keyboardTool = new KeyboardTool(jQuery('html'), main);\r\n        } else {\r\n            this.keyboardTool = new KeyboardTool(jQuery(window), main);\r\n        }\r\n\r\n        this.gamepadTool = new GamepadTool();\r\n\r\n        this.debugger = debugger_;\r\n\r\n        controlButtons.setInterpreter(this);\r\n\r\n        this.timeWhenProgramStarted = performance.now();\r\n        this.steps = 0;\r\n        this.timeNetto = 0;\r\n        this.timerEvents = 0;\r\n\r\n        this.timerDelayMs = 7;\r\n\r\n        let that = this;\r\n\r\n        let periodicFunction = () => {\r\n\r\n            if (!that.timerExtern) {\r\n                that.timerFunction(that.timerDelayMs, false, 0.7);\r\n            }\r\n\r\n        }\r\n\r\n        this.timerId = setInterval(periodicFunction, this.timerDelayMs);\r\n\r\n        let keepAliveRequest: WebSocketRequestKeepAlive = { command: 5 };\r\n        let req = JSON.stringify(keepAliveRequest);\r\n        setInterval(() => {\r\n            that.webSocketsToCloseAfterProgramHalt.forEach(ws => ws.send(req));\r\n        }, 30000);\r\n\r\n    }\r\n\r\n    initGUI() {\r\n\r\n        let that = this;\r\n\r\n        let am = this.main.getActionManager();\r\n\r\n        let startFunction = () => {\r\n            that.stepOverNestingLevel = 1000000;\r\n            that.start();\r\n        };\r\n\r\n        let pauseFunction = () => {\r\n            that.pause();\r\n        };\r\n\r\n        am.registerAction(\"interpreter.start\", ['F4'],\r\n            () => {\r\n                if (am.isActive(\"interpreter.start\")) {\r\n                    startFunction();\r\n                } else {\r\n                    pauseFunction();\r\n                }\r\n\r\n            }, \"Programm starten\", this.controlButtons.$buttonStart);\r\n\r\n        am.registerAction(\"interpreter.pause\", ['F4'],\r\n            () => {\r\n                if (am.isActive(\"interpreter.start\")) {\r\n                    startFunction();\r\n                } else {\r\n                    pauseFunction();\r\n                }\r\n\r\n            }, \"Pause\", this.controlButtons.$buttonPause);\r\n\r\n        am.registerAction(\"interpreter.stop\", [],\r\n            () => {\r\n                that.stop(false);\r\n                that.steps = 0;\r\n            }, \"Programm anhalten\", this.controlButtons.$buttonStop);\r\n\r\n        // this.controlButtons.$buttonEdit.on('click', (e) => {\r\n        //     e.stopPropagation();\r\n        //     am.trigger('interpreter.stop');\r\n        // });\r\n\r\n        am.registerAction(\"interpreter.stepOver\", ['F6'],\r\n            () => {\r\n                this.oneStep(false);\r\n            }, \"Einzelschritt (Step over)\", this.controlButtons.$buttonStepOver);\r\n\r\n        am.registerAction(\"interpreter.stepInto\", ['F7'],\r\n            () => {\r\n                this.oneStep(true);\r\n            }, \"Einzelschritt (Step into)\", this.controlButtons.$buttonStepInto);\r\n\r\n        am.registerAction(\"interpreter.stepOut\", [],\r\n            () => {\r\n                this.stepOut();\r\n            }, \"Step out\", this.controlButtons.$buttonStepOut);\r\n\r\n        am.registerAction(\"interpreter.restart\", [],\r\n            () => {\r\n                that.stop(true);\r\n            }, \"Neu starten\", this.controlButtons.$buttonRestart);\r\n\r\n        this.setState(InterpreterState.not_initialized);\r\n\r\n    }\r\n\r\n    getStartableModule(moduleStore: ModuleStore): Module {\r\n\r\n        let cem: Module;\r\n        cem = this.main.getCurrentlyEditedModule();\r\n\r\n        let currentlyEditedModuleIsClassOnly = false;\r\n\r\n        // decide which module to start\r\n\r\n        // first attempt: is currently edited Module startable?\r\n        if (cem != null) {\r\n            let currentlyEditedModule = moduleStore.findModuleByFile(cem.file);\r\n            if (currentlyEditedModule != null) {\r\n                currentlyEditedModuleIsClassOnly = !cem.hasErrors()\r\n                    && !currentlyEditedModule.isStartable;\r\n                if (currentlyEditedModule.isStartable) {\r\n                    return currentlyEditedModule;\r\n                }\r\n            }\r\n        }\r\n\r\n        // second attempt: which module has been started last time?\r\n        if (this.mainModule != null && currentlyEditedModuleIsClassOnly) {\r\n            let lastMainModule = moduleStore.findModuleByFile(this.mainModule.file);\r\n            if (lastMainModule != null && lastMainModule.isStartable) {\r\n                return lastMainModule;\r\n            }\r\n        }\r\n\r\n        // third attempt: pick first startable module of current workspace\r\n        if (currentlyEditedModuleIsClassOnly) {\r\n            for (let m of moduleStore.getModules(false)) {\r\n                if (m.isStartable) {\r\n                    return m;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /*\r\n        After user clicks start button (or stepover/stepInto-Button when no program is running) this\r\n        method ist called.\r\n    */\r\n    init() {\r\n\r\n        this.timerStopped = true;\r\n\r\n        let cem = this.main.getCurrentlyEditedModule();\r\n\r\n        cem.getBreakpointPositionsFromEditor();\r\n\r\n        this.main.getBottomDiv()?.console?.clearExceptions();\r\n\r\n        /*\r\n            As long as there is no startable new Version of current workspace we keep current compiled modules so\r\n            that variables and objects defined/instantiated via console can be kept, too. \r\n        */\r\n        if (this.moduleStoreVersion != this.main.version && this.main.getCompiler().atLeastOneModuleIsStartable) {\r\n            this.main.copyExecutableModuleStoreToInterpreter();\r\n            this.heap = {}; // clear variables/objects defined via console\r\n            this.main.getBottomDiv()?.console?.detachValues();  // detach values from console entries\r\n        }\r\n\r\n        let newMainModule = this.getStartableModule(this.moduleStore);\r\n\r\n        if (newMainModule == null) {\r\n            this.setState(InterpreterState.not_initialized);\r\n            return;\r\n        }\r\n\r\n        this.mainModule = newMainModule;\r\n\r\n        this.currentProgramPosition = 0;\r\n\r\n        this.programStack = [];\r\n        this.stack = [];\r\n        this.stackframes = [];\r\n        this.currentStackframe = 0;\r\n\r\n        this.setState(InterpreterState.done);\r\n\r\n        this.isFirstStatement = true;\r\n\r\n        this.stepOverNestingLevel = 1000000;\r\n\r\n\r\n        // Instantiate enum value-objects; initialize static attributes; call static constructors\r\n\r\n        this.programStack.push({\r\n            program: this.mainModule.mainProgram,\r\n            programPosition: 0,\r\n            textPosition: { line: 1, column: 1, length: 0 },\r\n            method: \"Hauptprogramm\",\r\n            callbackAfterReturn: null,\r\n            isCalledFromOutside: \"Hauptprogramm\"\r\n\r\n        })\r\n\r\n        for (let m of this.moduleStore.getModules(false)) {\r\n            this.initializeEnums(m);\r\n            this.initializeClasses(m);\r\n        }\r\n\r\n        this.popProgram();\r\n\r\n    }\r\n\r\n    popProgram() {\r\n        let p = this.programStack.pop();\r\n        this.currentProgram = p.program;\r\n        this.currentProgramPosition = p.programPosition;\r\n        this.currentMethod = p.method;\r\n        this.currentCallbackAfterReturn = p.callbackAfterReturn;\r\n        this.currentIsCalledFromOutside = p.isCalledFromOutside;\r\n        if (p.stackElementsToPushBeforeFirstExecuting != null) {\r\n\r\n            this.stackframes.push(this.currentStackframe == null ? 0 : this.currentStackframe);\r\n            this.currentStackframe = this.stack.length;\r\n\r\n            for (let se of p.stackElementsToPushBeforeFirstExecuting) this.stack.push(se);\r\n            p.stackElementsToPushBeforeFirstExecuting = null;\r\n        }\r\n    }\r\n\r\n    initializeClasses(m: Module) {\r\n\r\n        for (let klass of m.typeStore.typeList) {\r\n            if (klass instanceof Klass) {\r\n                klass.staticClass.classObject = new RuntimeObject(klass.staticClass);\r\n                klass.pushStaticInitializationPrograms(this.programStack);\r\n            }\r\n\r\n            if (klass instanceof Enum) {\r\n                // let staticValueMap = klass.staticClass.classObject.attributeValues.get(klass.identifier);\r\n                let staticValueList = klass.staticClass.classObject.attributes;\r\n                for (let enumInfo of klass.enumInfoList) {\r\n                    // staticValueMap.get(enumInfo.identifier).value = enumInfo.object;\r\n                    staticValueList[enumInfo.ordinal].value = enumInfo.object;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    initializeEnums(m: Module) {\r\n\r\n        for (let enumClass of m.typeStore.typeList) {\r\n            if (enumClass instanceof Enum) {\r\n\r\n                enumClass.pushStaticInitializationPrograms(this.programStack);\r\n\r\n                let valueList: Value[] = [];\r\n\r\n                let valueInitializationProgram: Program = {\r\n                    module: enumClass.module,\r\n                    labelManager: null,\r\n                    statements: []\r\n                };\r\n\r\n                let hasAttributeInitializationProgram = enumClass.attributeInitializationProgram.statements.length > 0;\r\n\r\n                if (hasAttributeInitializationProgram) {\r\n                    this.programStack.push({\r\n                        program: valueInitializationProgram,\r\n                        programPosition: 0,\r\n                        textPosition: { line: 1, column: 1, length: 0 },\r\n                        method: \"Attribut-Initialisierung der Klasse \" + enumClass.identifier,\r\n                        callbackAfterReturn: null,\r\n                        isCalledFromOutside: \"Initialisierung eines Enums\"\r\n                    });\r\n\r\n                }\r\n\r\n\r\n                for (let enumInfo of enumClass.enumInfoList) {\r\n                    enumInfo.object = new EnumRuntimeObject(enumClass, enumInfo);\r\n\r\n                    valueList.push({\r\n                        type: enumClass,\r\n                        value: enumInfo.object\r\n                    });\r\n\r\n                    if (enumInfo.constructorCallProgram != null) {\r\n                        this.programStack.push({\r\n                            program: enumInfo.constructorCallProgram,\r\n                            programPosition: 0,\r\n                            textPosition: { line: 1, column: 1, length: 0 },\r\n                            method: \"Konstruktor von \" + enumClass.identifier,\r\n                            callbackAfterReturn: null,\r\n                            isCalledFromOutside: \"Initialisierung eines Enums\"\r\n                        });\r\n\r\n                    }\r\n\r\n                    if (hasAttributeInitializationProgram) {\r\n                        valueInitializationProgram.statements.push({\r\n                            type: TokenType.initializeEnumValue,\r\n                            position: enumInfo.position,\r\n                            enumClass: enumClass,\r\n                            valueIdentifier: enumInfo.identifier\r\n                        })\r\n                    }\r\n\r\n                }\r\n\r\n                if (hasAttributeInitializationProgram) {\r\n                    valueInitializationProgram.statements.push({\r\n                        type: TokenType.programEnd,\r\n                        position: { line: 0, column: 0, length: 1 }\r\n                    })\r\n                }\r\n\r\n                enumClass.valueList = {\r\n                    type: new ArrayType(enumClass),\r\n                    value: valueList\r\n                };\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    timerEvents: number = 0;\r\n    start(callback?: () => void) {\r\n\r\n        this.main.getBottomDiv()?.console?.clearErrors();\r\n\r\n        this.callbackAfterExecution = callback;\r\n\r\n        this.isFirstStatement = true;\r\n\r\n        this.pauseUntil = null;\r\n\r\n        if (this.state == InterpreterState.error || this.state == InterpreterState.done) {\r\n            this.init();\r\n            this.resetRuntime();\r\n        }\r\n\r\n        this.setState(InterpreterState.running);\r\n\r\n        this.hideProgrampointerPosition();\r\n\r\n        this.timeWhenProgramStarted = performance.now();\r\n        this.timerStopped = false;\r\n\r\n        this.getTimerClass().startTimer();\r\n\r\n    }\r\n\r\n    getTimerClass(): TimerClass {\r\n        let baseModule = this.main.getCurrentWorkspace().moduleStore.getModule(\"Base Module\");\r\n        return <TimerClass>baseModule.typeStore.getType(\"Timer\");\r\n    }\r\n\r\n    lastStepTime: number = 0;\r\n    lastTimeBetweenEvents: number = 0;\r\n\r\n    timerFunction(timerDelayMs: number, forceRun: boolean, maxWorkloadFactor: number) {\r\n\r\n        let t0 = performance.now();\r\n\r\n        if (!forceRun) {\r\n            let timeBetweenSteps = 1000 / this.stepsPerSecond;\r\n            if (this.timerStopped || t0 - this.lastStepTime < timeBetweenSteps) return;\r\n            this.lastStepTime = t0;\r\n        }\r\n\r\n        this.lastTimeBetweenEvents = t0 - this.lastStepTime;\r\n\r\n        let n_stepsPerTimerGoal = forceRun ? Number.MAX_SAFE_INTEGER : this.stepsPerSecond * this.timerDelayMs / 1000;\r\n\r\n        this.timerEvents++;\r\n\r\n        let exception: string;\r\n        let i = 0;\r\n\r\n        while (i < n_stepsPerTimerGoal && !this.timerStopped && exception == null &&\r\n            (performance.now() - t0) / timerDelayMs < maxWorkloadFactor\r\n        ) {\r\n            exception = this.nextStep();\r\n            if (exception != null) {\r\n                break;\r\n            }\r\n\r\n            if (this.stepsPerSecond <= this.showProgrampointerUptoStepsPerSecond && !forceRun) {\r\n                this.showProgramPointerAndVariables();\r\n            }\r\n\r\n            if (this.state == InterpreterState.error ||\r\n                this.state == InterpreterState.done) {\r\n                this.timerStopped = true;\r\n            }\r\n\r\n\r\n            if (this.stepOverNestingLevel < 0 && !this.timerStopped) {\r\n                let node = this.currentProgram.statements[this.currentProgramPosition];\r\n                let position = node.position;\r\n                if (position == null || position.line != this.leaveLine) {\r\n                    this.timerStopped = true;\r\n                    this.setState(InterpreterState.paused);\r\n\r\n                    if (this.comesStatement(TokenType.closeStackframe)) {\r\n                        exception = this.nextStep();\r\n                        if (exception == null && this.comesStatement(TokenType.programEnd)) {\r\n                            exception = this.nextStep();\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        if (exception != null) {\r\n            this.throwException(exception);\r\n        }\r\n\r\n        if (this.timerStopped) {\r\n            if (this.state == InterpreterState.paused || this.state == InterpreterState.waitingForInput) {\r\n                this.showProgramPointerAndVariables();\r\n            }\r\n            if (this.callbackAfterExecution != null) {\r\n                this.callbackAfterExecution();\r\n                this.callbackAfterExecution = null;\r\n            }\r\n        }\r\n\r\n        let dt = performance.now() - t0;\r\n        this.timeNetto += dt;\r\n\r\n        // if (\r\n        //     this.timerEvents % 300 == 0) {\r\n        //     console.log(\"Last time between Events: \" + this.lastTimeBetweenEvents);\r\n        // }\r\n\r\n\r\n    }\r\n\r\n    throwException(exception: string) {\r\n        this.timerStopped = true;\r\n        this.setState(InterpreterState.error);\r\n\r\n        let $errorDiv = jQuery('<div class=\"jo_exception\"></div>');\r\n\r\n        let consolePresent: boolean = true;\r\n        if (this.main.isEmbedded()) {\r\n            let mainEmbedded: MainEmbedded = <MainEmbedded>this.main;\r\n            let config = mainEmbedded.config;\r\n            if (config.withBottomPanel != true && config.withConsole != true) {\r\n                consolePresent = false;\r\n                let positionString = \"\";\r\n                let currentStatement = this.currentProgram.statements[this.currentProgramPosition];\r\n                if (currentStatement != null) {\r\n                    let textPosition = currentStatement?.position;\r\n                    positionString = \" in Zeile \" + textPosition.line + \", Spalte \" + textPosition.column;\r\n\r\n                    this.main.getBottomDiv()?.console?.showError(this.currentProgram.module, textPosition);\r\n                }\r\n\r\n                alert(\"Fehler\" + positionString + \": \" + exception);\r\n\r\n            }\r\n        }\r\n\r\n        if (consolePresent) {\r\n            $errorDiv.append(jQuery(\"<span class='jo_error-caption'>Fehler:</span>&nbsp;\" + exception + \"<br>\"));\r\n            this.pushCurrentProgram();\r\n\r\n            let first = true;\r\n            for (let i = this.programStack.length - 1; i >= 0; i--) {\r\n\r\n                let p = this.programStack[i];\r\n                let m = (p.method instanceof Method) ? p.method.identifier : p.method;\r\n                let s: string = \"<span class='jo_error-caption'>\" + (first ? \"Ort\" : \"aufgerufen von\") + \": </span>\" + m;\r\n                if (p.textPosition != null) s += \" <span class='jo_runtimeErrorPosition'>(Z \" + p.textPosition.line + \", S \" + p.textPosition.column + \")</span>\";\r\n                s += \"<br>\";\r\n                let errorLine = jQuery(s);\r\n                if (p.textPosition != null) {\r\n                    let that = this;\r\n                    jQuery(errorLine[2]).on('mousedown', () => {\r\n                        that.main.getBottomDiv()?.console?.showError(p.program.module, p.textPosition);\r\n                    });\r\n                }\r\n                $errorDiv.append(errorLine);\r\n\r\n                first = false;\r\n                if (p.isCalledFromOutside != null) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            let console = this.main.getBottomDiv()?.console;\r\n\r\n            if (console != null) {\r\n                console.writeConsoleEntry($errorDiv, null, 'rgba(255, 0, 0, 0.4');\r\n                console.showTab();\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    hideProgrampointerPosition() {\r\n\r\n        if (this.state == InterpreterState.running) {\r\n\r\n            if (this.stepsPerSecond > this.showProgrampointerUptoStepsPerSecond) {\r\n                this.main.hideProgramPointerPosition();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    comesStatement(statement: TokenType) {\r\n        if (this.currentProgram == null) return false;\r\n        if (this.currentProgramPosition > this.currentProgram.statements.length - 1) return false;\r\n        return this.currentProgram.statements[this.currentProgramPosition].type == statement;\r\n    }\r\n\r\n    resetRuntime() {\r\n        this.printManager.clear();\r\n        this.worldHelper?.destroyWorld();\r\n        this.processingHelper?.destroyWorld();\r\n        this.gngEreignisbehandlungHelper?.detachEvents();\r\n        this.gngEreignisbehandlungHelper = null;\r\n\r\n    }\r\n\r\n    stop(restart: boolean = false) {\r\n        this.inputManager.hide();\r\n        this.setState(InterpreterState.paused);\r\n        this.timerStopped = true;\r\n\r\n        if (this.worldHelper != null) {\r\n            this.worldHelper.spriteAnimations = [];\r\n        }\r\n        this.gngEreignisbehandlungHelper?.detachEvents();\r\n        this.gngEreignisbehandlungHelper = null;\r\n\r\n        this.main.hideProgramPointerPosition();\r\n\r\n        this.getTimerClass().stopTimer();\r\n        if (this.worldHelper != null) {\r\n            this.worldHelper.cacheAsBitmap();\r\n        }\r\n\r\n        this.databaseConnectionHelpers.forEach((ch) => ch.close());\r\n        this.databaseConnectionHelpers = [];\r\n\r\n        this.heap = {};\r\n        this.programStack = [];\r\n        this.stack = [];\r\n        this.stackframes = [];\r\n\r\n\r\n        setTimeout(() => {\r\n            this.setState(InterpreterState.done);\r\n            this.main.hideProgramPointerPosition();\r\n            if (restart) {\r\n                this.start();\r\n            }\r\n        }, 500);\r\n    }\r\n\r\n    pause() {\r\n        this.setState(InterpreterState.paused);\r\n        this.showProgramPointerAndVariables();\r\n        this.timerStopped = true;\r\n    }\r\n\r\n    lastPrintedModule: Module = null;\r\n    showProgramPointerAndVariables() {\r\n        if (this.currentProgram == null) return;\r\n        let node = this.currentProgram.statements[this.currentProgramPosition];\r\n        if (node == null) return;\r\n        let position = node.position;\r\n        if (position != null) {\r\n            this.main.showProgramPointerPosition(this.currentProgram.module.file, position);\r\n            this.debugger.showData(this.currentProgram, position, this.stack, this.currentStackframe, this.heap);\r\n            let bottomDiv = this.main.getBottomDiv();\r\n            if (bottomDiv.programPrinter != null) {\r\n                if (this.currentProgram.module != this.lastPrintedModule) {\r\n                    this.main.getBottomDiv().printModuleToBottomDiv(null, this.currentProgram.module);\r\n                    this.lastPrintedModule = this.currentProgram.module;\r\n                }\r\n                this.main.getBottomDiv().programPrinter.showNode(node);\r\n            }\r\n        }\r\n    }\r\n\r\n    stepOut() {\r\n        this.stepOverNestingLevel = 0;\r\n        this.start();\r\n    }\r\n\r\n    oneStep(stepInto: boolean) {\r\n        this.main.getBottomDiv()?.console?.clearErrors();\r\n        this.isFirstStatement = true;\r\n        if (this.state != InterpreterState.paused) {\r\n            this.init();\r\n            if (this.state == InterpreterState.not_initialized) {\r\n                return;\r\n            }\r\n            this.resetRuntime();\r\n            this.showProgramPointerAndVariables();\r\n            this.setState(InterpreterState.paused);\r\n            // Are there static Variables to initialize?\r\n            if (this.currentMethod == \"Hauptprogramm\") {\r\n                // No static variable initializers\r\n                this.return;\r\n            }\r\n        }\r\n        this.stepOverNestingLevel = 10000;\r\n        let oldStepOverNestingLevel = this.stepOverNestingLevel;\r\n        let node = this.currentProgram.statements[this.currentProgramPosition];\r\n        let position = node.position;\r\n        let exception = this.nextStep();\r\n        if (exception != null) {\r\n            this.throwException(exception);\r\n            return;\r\n        }\r\n\r\n        if (!stepInto && this.stepOverNestingLevel > oldStepOverNestingLevel) {\r\n            this.stepOverNestingLevel = 0;\r\n            if (position != null) {\r\n                this.leaveLine = position.line;\r\n            } else {\r\n                this.leaveLine = -1;\r\n            }\r\n            this.start();\r\n        } else\r\n            //@ts-ignore\r\n            if (this.state == InterpreterState.done) {\r\n                this.main.hideProgramPointerPosition();\r\n            } else {\r\n                this.showProgramPointerAndVariables();\r\n                //@ts-ignore\r\n                if (this.state != InterpreterState.waitingForInput) {\r\n                    this.setState(InterpreterState.paused);\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n    stepFinished: boolean = false;\r\n\r\n    nextStep(): string {\r\n\r\n        this.stepFinished = false;\r\n\r\n        let node: Statement;\r\n\r\n        let exception: string;\r\n\r\n        while (!this.stepFinished && !this.additionalStepFinishedFlag && exception == null) {\r\n\r\n\r\n            if (typeof this.currentProgram == \"undefined\") {\r\n                debugger;\r\n            }\r\n\r\n            if (this.currentProgramPosition > this.currentProgram.statements.length - 1) {\r\n                this.setState(InterpreterState.done);\r\n                break;\r\n            }\r\n\r\n            node = this.currentProgram.statements[this.currentProgramPosition];\r\n\r\n            if (node.stepFinished != null) {\r\n                this.stepFinished = node.stepFinished;\r\n            }\r\n\r\n            exception = this.executeNode(node);\r\n\r\n        }\r\n\r\n        this.additionalStepFinishedFlag = false;\r\n\r\n        this.steps++;\r\n\r\n        return exception;\r\n    }\r\n\r\n    executeNode(node: Statement): string {\r\n\r\n        if (node.breakpoint != null && !this.isFirstStatement) {\r\n            this.additionalStepFinishedFlag = true;\r\n            this.pause();\r\n            return;\r\n        }\r\n\r\n        this.isFirstStatement = false;\r\n        let stackTop = this.stack.length - 1;\r\n        let stackframeBegin = this.currentStackframe;\r\n        let stack = this.stack;\r\n        let value: Value;\r\n\r\n        switch (node.type) {\r\n            case TokenType.castValue:\r\n                let relPos = node.stackPosRelative == null ? 0 : node.stackPosRelative;\r\n                value = stack[stackTop + relPos];\r\n                try {\r\n                    let casted = value.type.castTo(value, node.newType);\r\n                    if (casted == undefined) casted = {\r\n                        value: value.value,\r\n                        type: node.newType\r\n                    }\r\n                    stack[stackTop + relPos] = casted;\r\n                } catch (err) {\r\n                    if (err.message) return err.message;\r\n                    else return \"Bei dem Casten von \" + value.type.identifier + \" zu \" + node.newType.identifier + \" trat ein Fehler auf: \" + err.name + \".\";\r\n                }\r\n                break;\r\n            case TokenType.checkCast:\r\n                value = stack[stackTop];\r\n                if (value.value == null) break;\r\n                let rto = <RuntimeObject>value.value;\r\n                if (node.newType instanceof Klass) {\r\n                    if (typeof rto == \"object\") {\r\n                        if (!rto.class.hasAncestorOrIs(node.newType)) {\r\n                            return (\"Das Objekt der Klasse \" + rto.class.identifier + \" kann nicht nach \" + node.newType.identifier + \" gecastet werden.\");\r\n                        }\r\n                    } else {\r\n                        if (typeof rto == \"number\" && [\"Integer\", \"Double\", \"Float\"].indexOf(node.newType.identifier) < 0) {\r\n                            return (\"Eine Zahl kann nicht nach \" + node.newType.identifier + \" gecastet werden.\");\r\n                        } else if (typeof rto == \"string\" && [\"String\", \"Character\"].indexOf(node.newType.identifier) < 0) {\r\n                            return (\"Eine Zeichenkette kann nicht nach \" + node.newType.identifier + \" gecastet werden.\");\r\n                        } else if (typeof rto == \"boolean\" && node.newType.identifier != \"Boolean\") {\r\n                            return (\"Ein boolescher Wert kann nicht nach \" + node.newType.identifier + \" gecastet werden.\");\r\n                        }\r\n                    }\r\n                } else if (node.newType instanceof Interface) {\r\n                    if (!(<Klass>rto.class).implementsInterface(node.newType)) {\r\n                        return (\"Das Objekt der Klasse \" + rto.class.identifier + \" implementiert nicht das Interface \" + node.newType.identifier + \".\");\r\n                    }\r\n                }\r\n                break;\r\n            case TokenType.localVariableDeclaration:\r\n                let variable = node.variable;\r\n                let type = variable.type;\r\n                value = {\r\n                    type: type,\r\n                    value: null\r\n                };\r\n                if (type instanceof PrimitiveType) {\r\n                    value.value = type.initialValue;\r\n                }\r\n                stack[variable.stackPos + stackframeBegin] = value;\r\n                if (node.pushOnTopOfStackForInitialization) {\r\n                    stack.push(value);\r\n                }\r\n                break;\r\n            case TokenType.pushLocalVariableToStack:\r\n                stack.push(stack[node.stackposOfVariable + stackframeBegin]);\r\n                break;\r\n            case TokenType.popAndStoreIntoVariable:\r\n                stack[node.stackposOfVariable + stackframeBegin] = stack.pop();\r\n                break;\r\n            case TokenType.pushAttribute:\r\n                let object1 = node.useThisObject ? stack[stackframeBegin].value : stack.pop().value;\r\n                if (object1 == null) return \"Zugriff auf ein Attribut (\" + node.attributeIdentifier + \") des null-Objekts\";\r\n                let value1 = (<RuntimeObject>object1).getValue(node.attributeIndex);\r\n                if (value1?.updateValue != null) {\r\n                    value1.updateValue(value1);\r\n                }\r\n                stack.push(value1);\r\n                break;\r\n            case TokenType.pushArrayLength:\r\n                let a = stack.pop().value;\r\n                if (a == null) return \"Zugriff auf das length-Attribut des null-Objekts\";\r\n                stack.push({ type: intPrimitiveType, value: (<any[]>a).length });\r\n                break;\r\n            case TokenType.assignment:\r\n                value = stack.pop();\r\n                stack[stackTop - 1].value = value.value;\r\n                if (!(stack[stackTop - 1].type instanceof PrimitiveType)) {\r\n                    stack[stackTop - 1].type = value.type;\r\n                }\r\n                if (!node.leaveValueOnStack) {\r\n                    stack.pop();\r\n                }\r\n                break;\r\n            case TokenType.plusAssignment:\r\n                value = stack.pop();\r\n                stack[stackTop - 1].value += value.value;\r\n                break;\r\n            case TokenType.minusAssignment:\r\n                value = stack.pop();\r\n                stack[stackTop - 1].value -= value.value;\r\n                break;\r\n            case TokenType.multiplicationAssignment:\r\n                value = stack.pop();\r\n                stack[stackTop - 1].value *= value.value;\r\n                break;\r\n            case TokenType.divisionAssignment:\r\n                value = stack.pop();\r\n                stack[stackTop - 1].value /= value.value;\r\n                break;\r\n            case TokenType.moduloAssignment:\r\n                value = stack.pop();\r\n                stack[stackTop - 1].value %= value.value;\r\n                break;\r\n            case TokenType.ANDAssigment:\r\n                value = stack.pop();\r\n                stack[stackTop - 1].value &= value.value;\r\n                break;\r\n            case TokenType.ORAssigment:\r\n                value = stack.pop();\r\n                stack[stackTop - 1].value |= value.value;\r\n                break;\r\n            case TokenType.XORAssigment:\r\n                value = stack.pop();\r\n                stack[stackTop - 1].value ^= value.value;\r\n                break;\r\n            case TokenType.shiftLeftAssigment:\r\n                value = stack.pop();\r\n                stack[stackTop - 1].value <<= value.value;\r\n                break;\r\n            case TokenType.shiftRightAssigment:\r\n                value = stack.pop();\r\n                stack[stackTop - 1].value >>= value.value;\r\n                break;\r\n            case TokenType.shiftRightUnsignedAssigment:\r\n                value = stack.pop();\r\n                stack[stackTop - 1].value >>>= value.value;\r\n                break;\r\n            case TokenType.binaryOp:\r\n                let secondOperand = stack.pop();\r\n                let resultValue =\r\n                    node.leftType.compute(node.operator, stack[stackTop - 1], secondOperand);\r\n                if (resultValue instanceof Error) {\r\n                    if (resultValue.message) return resultValue.message;\r\n                    else \"Bei der Berechnung von \" + stack[stackTop - 1].type.identifier + \" \" +\r\n                        TokenTypeReadable[node.operator] + \" \" + secondOperand.type.identifier +\r\n                        \" trat ein Fehler (\" + resultValue.name + \") auf.\"\r\n\r\n                }\r\n                let resultType = node.leftType.getResultType(node.operator, secondOperand.type);\r\n                stack[stackTop - 1] = {\r\n                    type: resultType,\r\n                    value: resultValue\r\n                };\r\n                break;\r\n            case TokenType.unaryOp:\r\n                let oldValue = stack.pop();\r\n                if (node.operator == TokenType.minus) {\r\n                    stack.push({\r\n                        type: oldValue.type,\r\n                        value: -oldValue.value\r\n                    })\r\n                } else {\r\n                    stack.push({\r\n                        type: oldValue.type,\r\n                        value: !oldValue.value\r\n                    })\r\n                }\r\n                break;\r\n            case TokenType.pushConstant:\r\n                stack.push({\r\n                    value: node.value,\r\n                    type: node.dataType\r\n                });\r\n                break;\r\n            case TokenType.pushStaticClassObject:\r\n                if (node.klass instanceof Klass) {\r\n                    stack.push({\r\n                        type: node.klass.staticClass,\r\n                        value: node.klass.staticClass.classObject\r\n                    });\r\n                } else {\r\n                    // This is to enable instanceof operator with interfaces\r\n                    stack.push({\r\n                        type: node.klass,\r\n                        value: node.klass\r\n                    });\r\n                }\r\n                break;\r\n            case TokenType.pushStaticAttribute:\r\n                value = node.klass.classObject.getValue(node.attributeIndex);\r\n                if (value.updateValue != null) {\r\n                    value.updateValue(value);\r\n                }\r\n                stack.push(value);\r\n                break;\r\n            // case TokenType.pushStaticAttributeIntrinsic:\r\n            //     value = node.\r\n            //     stack.push({ type: node.attribute.type, value: node.attribute.updateValue(null) });\r\n            //     break;\r\n            case TokenType.selectArrayElement:\r\n                let index = stack.pop();\r\n                let array = stack.pop();\r\n\r\n                if (array.value == null) return \"Zugriff auf ein Element eines null-Feldes\";\r\n\r\n                if (index.value >= array.value.length || index.value < 0) {\r\n                    return \"Zugriff auf das Element mit Index \" + index.value + \" eines Feldes der Länge \" + array.value.length;\r\n                }\r\n                stack.push(array.value[index.value]);\r\n                break;\r\n\r\n            case TokenType.callMainMethod:\r\n                this.stack.push({ value: node.staticClass.classObject, type: node.staticClass });\r\n\r\n                let parameter: Value = {\r\n                    value: [{ value: \"Test\", type: stringPrimitiveType }],\r\n                    type: new ArrayType(stringPrimitiveType)\r\n                };\r\n                let parameterBegin2 = stackTop + 2; // 1 parameter\r\n\r\n                this.stack.push(parameter);\r\n\r\n                this.stackframes.push(this.currentStackframe);\r\n                this.programStack.push({\r\n                    program: this.currentProgram,\r\n                    programPosition: this.currentProgramPosition + 1,\r\n                    textPosition: node.position,\r\n                    method: this.currentMethod,\r\n                    callbackAfterReturn: this.currentCallbackAfterReturn,\r\n                    isCalledFromOutside: null\r\n                });\r\n\r\n                this.currentCallbackAfterReturn = null;\r\n                this.currentStackframe = parameterBegin2;\r\n\r\n                this.currentProgram = node.method.program;\r\n                this.currentMethod = node.method;\r\n                this.currentProgramPosition = -1; // gets increased after switch statement...\r\n\r\n                for (let i = 0; i < node.method.reserveStackForLocalVariables; i++) {\r\n                    stack.push(null);\r\n                }\r\n\r\n                // this.stepOverNestingLevel++;\r\n\r\n                break;\r\n            case TokenType.makeEllipsisArray:\r\n                let ellipsisArray: Value[] = stack.splice(stack.length - node.parameterCount, node.parameterCount);\r\n\r\n                stack.push({\r\n                    value: ellipsisArray,\r\n                    type: node.arrayType\r\n                })\r\n\r\n                break;\r\n            case TokenType.callMethod:\r\n\r\n                // node.stackframebegin = -(parameters.parameterTypes.length + 1)\r\n                let method = node.method;\r\n\r\n                let parameterBegin = stackTop + 1 + node.stackframeBegin;\r\n                let parameters1 = method.parameterlist.parameters;\r\n                for (let i = parameterBegin + 1; i <= stackTop; i++) {\r\n                    if (this.stack[i] != null && this.stack[i].type instanceof PrimitiveType) {\r\n                        stack[i] = {\r\n                            type: parameters1[i - parameterBegin - 1].type,  // cast to parameter type...\r\n                            value: stack[i].value\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (stack[parameterBegin].value == null && !method.isStatic) {\r\n                    return \"Aufruf der Methode \" + method.identifier + \" des null-Objekts\";\r\n                }\r\n\r\n                if (method.isAbstract || method.isVirtual && !node.isSuperCall) {\r\n                    let object = stack[parameterBegin];\r\n                    if (object.value instanceof RuntimeObject) {\r\n                        method = (<Klass>(<RuntimeObject>object.value).class).getMethodBySignature(method.signature);\r\n                    } else {\r\n                        method = (<Klass>object.type).getMethodBySignature(method.signature);\r\n                    }\r\n                }\r\n\r\n                if (method == null) {\r\n                    // TODO: raise runtime error\r\n                    break;\r\n                }\r\n\r\n                if (method.invoke != null) {\r\n                    let rt = method.getReturnType();\r\n                    let parameters = stack.splice(parameterBegin);\r\n                    let returnValue = method.invoke(parameters);\r\n                    if (rt != null && rt.identifier != 'void') {\r\n                        stack.push({\r\n                            value: returnValue,\r\n                            type: rt\r\n                        });\r\n                    }\r\n                } else {\r\n                    this.stackframes.push(this.currentStackframe);\r\n                    this.programStack.push({\r\n                        program: this.currentProgram,\r\n                        programPosition: this.currentProgramPosition + 1,\r\n                        textPosition: node.position,\r\n                        method: this.currentMethod,\r\n                        callbackAfterReturn: this.currentCallbackAfterReturn,\r\n                        isCalledFromOutside: null\r\n                    });\r\n\r\n                    this.currentCallbackAfterReturn = null;\r\n                    this.currentStackframe = parameterBegin;\r\n\r\n                    this.currentProgram = method.program;\r\n                    this.currentMethod = method;\r\n                    this.currentProgramPosition = -1; // gets increased after switch statement...\r\n\r\n                    for (let i = 0; i < method.reserveStackForLocalVariables; i++) {\r\n                        stack.push(null);\r\n                    }\r\n\r\n                    this.stepOverNestingLevel++;\r\n                    this.additionalStepFinishedFlag = true;\r\n                }\r\n                break;\r\n            case TokenType.callInputMethod:\r\n\r\n                // node.stackframebegin = -(parameters.parameterTypes.length + 1)\r\n                let method1 = node.method;\r\n                let parameterBegin1 = stackTop + 1 + node.stackframeBegin;\r\n                let parameters = stack.splice(parameterBegin1);\r\n\r\n                this.pauseForInput();\r\n\r\n                let that = this;\r\n                this.inputManager.readInput(method1, parameters, (value: Value) => {\r\n                    that.resumeAfterInput(value);\r\n                });\r\n                break;\r\n\r\n            case TokenType.return:\r\n                this.return(node, stack);\r\n                break;\r\n            case TokenType.decreaseStackpointer:\r\n                stack.splice(stackTop + 1 - node.popCount);\r\n                break;\r\n            case TokenType.initStackframe:\r\n                this.stackframes.push(this.currentStackframe);\r\n                this.currentStackframe = stackTop + 1;\r\n                for (let i = 0; i < node.reserveForLocalVariables; i++) {\r\n                    stack.push(null);\r\n                }\r\n                break;\r\n            case TokenType.closeStackframe:\r\n                stack.splice(stackframeBegin);\r\n                this.currentStackframe = this.stackframes.pop();\r\n                break;\r\n            case TokenType.newObject:\r\n                let object = new RuntimeObject(node.class);\r\n\r\n                value = {\r\n                    value: object,\r\n                    type: node.class\r\n                };\r\n\r\n                stack.push(value);\r\n                if (node.subsequentConstructorCall) {\r\n                    stack.push(value);\r\n                    stackTop++;\r\n                }\r\n\r\n                let klass: Klass = node.class;\r\n\r\n                while (klass != null) {\r\n                    let aip = klass.attributeInitializationProgram;\r\n                    if (aip.statements.length > 0) {\r\n\r\n                        this.stackframes.push(this.currentStackframe);\r\n                        this.programStack.push({\r\n                            program: this.currentProgram,\r\n                            programPosition: this.currentProgramPosition + 1,\r\n                            textPosition: node.position,\r\n                            method: this.currentMethod,\r\n                            callbackAfterReturn: this.currentCallbackAfterReturn,\r\n                            isCalledFromOutside: null\r\n                        });\r\n\r\n                        this.currentCallbackAfterReturn = null;\r\n                        this.currentStackframe = stackTop + 1;\r\n\r\n                        this.currentProgram = aip;\r\n                        this.currentProgramPosition = -1;\r\n                        this.currentMethod = \"Konstruktor von \" + klass.identifier;\r\n                        this.stepOverNestingLevel++;\r\n\r\n                        this.additionalStepFinishedFlag = true;\r\n\r\n                    }\r\n                    klass = klass.baseClass;\r\n                }\r\n\r\n                // N.B.: constructor call is next statement\r\n\r\n                break;\r\n            case TokenType.processPostConstructorCallbacks:\r\n                value = stack[stackTop];\r\n                let classType = <Klass>value.type;\r\n                for (let pcc of classType.getPostConstructorCallbacks()) {\r\n                    pcc(value.value);\r\n                }\r\n                break;\r\n            case TokenType.extendedForLoopInit:\r\n                stack[node.stackPosOfCounter + stackframeBegin] = {\r\n                    type: intPrimitiveType,\r\n                    value: 0\r\n                }\r\n                break;\r\n            case TokenType.extendedForLoopCheckCounterAndGetElement:\r\n                let counter: number = stack[node.stackPosOfCounter + stackframeBegin].value++;\r\n                let collection = stack[node.stackPosOfCollection + stackframeBegin].value;\r\n\r\n                switch (node.kind) {\r\n                    case \"array\":\r\n                        if (counter < (<any[]>collection).length) {\r\n                            stack[node.stackPosOfElement + stackframeBegin].value = (<any[]>collection)[counter].value;\r\n                            stack[node.stackPosOfElement + stackframeBegin].type = (<any[]>collection)[counter].type;\r\n                        } else {\r\n                            this.currentProgramPosition = node.destination - 1;\r\n                        }\r\n                        break;\r\n                    case \"internalList\":\r\n                        let list: any[] = (<ListHelper>(<RuntimeObject>collection).intrinsicData[\"ListHelper\"]).valueArray;\r\n                        if (counter < list.length) {\r\n                            stack[node.stackPosOfElement + stackframeBegin].value = list[counter].value;\r\n                            stack[node.stackPosOfElement + stackframeBegin].type = list[counter].type;\r\n                        } else {\r\n                            this.currentProgramPosition = node.destination - 1;\r\n                        }\r\n                        break;\r\n                    case \"group\":\r\n                        let list1: any[] = (<GroupHelper>(<RuntimeObject>collection).intrinsicData[\"Actor\"]).shapes;\r\n                        if (counter < list1.length) {\r\n                            stack[node.stackPosOfElement + stackframeBegin].value = list1[counter];\r\n                            stack[node.stackPosOfElement + stackframeBegin].type = list1[counter].klass;\r\n                        } else {\r\n                            this.currentProgramPosition = node.destination - 1;\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            case TokenType.incrementDecrementBefore:\r\n                value = stack[stackTop];\r\n                value.value += node.incrementDecrementBy;\r\n                break;\r\n            case TokenType.incrementDecrementAfter:\r\n                value = stack[stackTop];\r\n                // replace value by copy:\r\n                stack[stackTop] = {\r\n                    value: value.value,\r\n                    type: value.type\r\n                };\r\n                // increment value which is not involved in subsequent \r\n                value.value += node.incrementDecrementBy;\r\n                break;\r\n            case TokenType.jumpAlways:\r\n                this.currentProgramPosition = node.destination - 1;\r\n                break;\r\n            case TokenType.jumpIfTrue:\r\n                value = stack.pop();\r\n                if (<boolean>value.value) {\r\n                    this.currentProgramPosition = node.destination - 1;\r\n                }\r\n                break;\r\n            case TokenType.jumpIfFalse:\r\n                value = stack.pop();\r\n                if (!(<boolean>value.value)) {\r\n                    this.currentProgramPosition = node.destination - 1;\r\n                }\r\n                break;\r\n            case TokenType.jumpIfTrueAndLeaveOnStack:\r\n                value = stack[stackTop];\r\n                if (<boolean>value.value) {\r\n                    this.currentProgramPosition = node.destination - 1;\r\n                }\r\n                break;\r\n            case TokenType.jumpIfFalseAndLeaveOnStack:\r\n                value = stack[stackTop];\r\n                if (!(<boolean>value.value)) {\r\n                    this.currentProgramPosition = node.destination - 1;\r\n                }\r\n                break;\r\n            case TokenType.noOp:\r\n                break;\r\n            case TokenType.programEnd:\r\n\r\n                if (this.programStack.length > 0) {\r\n                    this.popProgram();\r\n                    this.currentProgramPosition--; // gets increased later on after switch ends\r\n                    this.additionalStepFinishedFlag = true;\r\n                    this.leaveLine = -1;\r\n\r\n                    if (node.pauseAfterProgramEnd) {\r\n                        this.stepOverNestingLevel = -1;\r\n                    }\r\n\r\n                    break;\r\n                }\r\n\r\n                if ((this.worldHelper != null && this.worldHelper.hasActors()) || this.processingHelper != null\r\n                    || (this.gngEreignisbehandlungHelper != null && this.gngEreignisbehandlungHelper.hasAktionsEmpfaenger())) {\r\n                    this.currentProgramPosition--;\r\n                    break\r\n                }\r\n\r\n                let baseModule = this.main.getCurrentWorkspace().moduleStore.getModule(\"Base Module\");\r\n                let timerClass: TimerClass = <TimerClass>baseModule.typeStore.getType(\"Timer\");\r\n                if (timerClass.timerEntries.length > 0) {\r\n                    this.currentProgramPosition--;\r\n                    break\r\n                }\r\n\r\n                // this.setState(InterpreterState.done);\r\n                this.currentProgram = null;\r\n                this.currentProgramPosition = -1;\r\n                this.additionalStepFinishedFlag = true;\r\n\r\n                Helper.showHelper(\"speedControlHelper\", this.main);\r\n\r\n                this.printManager.showProgramEnd();\r\n\r\n                if (this.steps > 0) {\r\n                    let dt = performance.now() - this.timeWhenProgramStarted;\r\n                    let message = 'Executed ' + this.steps + ' steps in ' + this.round(dt)\r\n                        + ' ms (' + this.round(this.steps / dt * 1000) + ' steps/s)';\r\n                    this.main.getBottomDiv()?.console?.writeConsoleEntry(message, null);\r\n                    // console.log(this.timerEvents + \" TimeEvents in \" + dt + \" ms ergibt ein Event alle \" + dt/this.timerEvents + \" ms.\");\r\n                    // console.log(\"Vorgegebene Timerfrequenz: Alle \" + this.timerDelayMs + \" ms\");\r\n                    this.steps = -1;\r\n                }\r\n\r\n                // if (this.worldHelper != null) {\r\n                //     this.worldHelper.spriteAnimations = [];\r\n                // }\r\n                // this.gngEreignisbehandlungHelper?.detachEvents();\r\n                // this.gngEreignisbehandlungHelper = null;\r\n\r\n                // this.main.hideProgramPointerPosition();\r\n\r\n                // if(this.worldHelper != null){\r\n                //     this.worldHelper.cacheAsBitmap();\r\n                // }\r\n\r\n                this.currentProgramPosition--;\r\n                this.stop();\r\n                break;\r\n            case TokenType.print:\r\n            case TokenType.println:\r\n                let text = null;\r\n                let color = null;\r\n                if (node.withColor) color = <string | number>stack.pop().value;\r\n                if (!node.empty) {\r\n                    text = <string>stack.pop().value;\r\n                    if (text == null) text = \"null\";\r\n                }\r\n                if (node.type == TokenType.println) {\r\n                    this.printManager.println(text, color);\r\n                } else {\r\n                    this.printManager.print(text, color);\r\n                }\r\n                break;\r\n            case TokenType.pushEmptyArray:\r\n                let counts: number[] = [];\r\n                for (let i = 0; i < node.dimension; i++) {\r\n                    counts.push(<number>stack.pop().value);\r\n                }\r\n                stack.push(this.makeEmptyArray(counts, node.arrayType));\r\n                break;\r\n            case TokenType.beginArray:\r\n                stack.push({\r\n                    type: node.arrayType,\r\n                    value: []\r\n                });\r\n                break;\r\n            case TokenType.addToArray:\r\n                stackTop -= node.numberOfElementsToAdd;\r\n                // let values: Value[] = stack.splice(stackTop + 1, node.numberOfElementsToAdd);\r\n                let values: Value[] = stack.splice(stackTop + 1, node.numberOfElementsToAdd).map(tvo => ({ type: tvo.type, value: tvo.value }));\r\n                stack[stackTop].value = (<any[]>stack[stackTop].value).concat(values);\r\n                break;\r\n            case TokenType.pushEnumValue:\r\n                let enumInfo = node.enumClass.identifierToInfoMap[node.valueIdentifier];\r\n                stack.push(node.enumClass.valueList.value[enumInfo.ordinal]);\r\n                break;\r\n            case TokenType.keywordSwitch:\r\n                let switchValue = stack.pop().value;\r\n                let destination = node.destinationMap[switchValue];\r\n                if (destination != null) {\r\n                    this.currentProgramPosition = destination - 1; // it will be increased after this switch-statement!\r\n                } else {\r\n                    if (node.defaultDestination != null) {\r\n                        this.currentProgramPosition = node.defaultDestination - 1;\r\n                    }\r\n                    // there's a jumpnode after this node which jumps right after last switch case,\r\n                    // so there's nothing more to do here.\r\n                }\r\n                break;\r\n            case TokenType.heapVariableDeclaration:\r\n\r\n                let v = node.variable;\r\n                this.heap[v.identifier] = v;\r\n                v.value = {\r\n                    type: v.type,\r\n                    value: (v.type instanceof PrimitiveType) ? v.type.initialValue : null\r\n                }\r\n                if (node.pushOnTopOfStackForInitialization) {\r\n                    this.stack.push(v.value);\r\n                }\r\n\r\n                break;\r\n            case TokenType.pushFromHeapToStack:\r\n                let v1 = this.heap[node.identifier];\r\n                if (v1 != null) {\r\n                    this.stack.push(v1.value);\r\n                } else {\r\n                    return \"Die Variable \" + node.identifier + \" ist nicht bekannt.\";\r\n                }\r\n                break;\r\n            case TokenType.returnIfDestroyed:\r\n                let shapeRuntimeObject: RuntimeObject = this.stack[stackframeBegin].value;\r\n                if (shapeRuntimeObject != null) {\r\n                    let shape = shapeRuntimeObject.intrinsicData[\"Actor\"];\r\n                    if (shape[\"isDestroyed\"] == true) {\r\n                        this.return(null, stack);\r\n                    }\r\n                }\r\n                break;\r\n            case TokenType.setPauseDuration:\r\n                let duration = this.stack.pop().value;\r\n                if (this.pauseUntil == null) {\r\n                    this.pauseUntil = performance.now() + duration;\r\n                }\r\n                break;\r\n            case TokenType.pause:\r\n                node.stepFinished = true;\r\n                if (this.pauseUntil != null && performance.now() < this.pauseUntil) {\r\n                    this.currentProgramPosition--;\r\n                } else {\r\n                    this.pauseUntil = null;\r\n                }\r\n                break;\r\n\r\n        }\r\n\r\n\r\n        this.currentProgramPosition++;\r\n\r\n    }\r\n\r\n    oldState: InterpreterState;\r\n    pauseForInput() {\r\n        this.timerStopped = true;\r\n        this.additionalStepFinishedFlag = true;\r\n        this.oldState = this.state;\r\n        this.setState(InterpreterState.waitingForInput);\r\n        this.showProgramPointerAndVariables();\r\n    }\r\n\r\n    resumeAfterInput(value: Value, popPriorValue: boolean = false) {\r\n        if (popPriorValue) this.stack.pop();\r\n        if (value != null) this.stack.push(value);\r\n        this.main.hideProgramPointerPosition();\r\n        this.setState(InterpreterState.paused);\r\n        if (this.oldState == InterpreterState.running) {\r\n            this.start();\r\n        } else {\r\n            this.showProgramPointerAndVariables();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return(node: ReturnStatement | null, stack: Value[]) {\r\n\r\n        let currentCallbackAfterReturn = this.currentCallbackAfterReturn;\r\n\r\n        if (node != null && node.copyReturnValueToStackframePos0) {\r\n            let returnValue: Value = stack.pop();\r\n            stack[this.currentStackframe] = returnValue;\r\n            stack.splice(this.currentStackframe + 1);\r\n        } else {\r\n            stack.splice(this.currentStackframe + ((node != null && node.leaveThisObjectOnStack) ? 1 : 0));\r\n        }\r\n\r\n        this.currentStackframe = this.stackframes.pop();\r\n\r\n        this.popProgram();\r\n        if (node != null && node.methodWasInjected == true) this.currentProgramPosition++;\r\n        this.currentProgramPosition--;  // position gets increased by one at the end of this switch-statement, so ... - 1\r\n        this.stepOverNestingLevel--;\r\n\r\n        if (currentCallbackAfterReturn != null) {\r\n            currentCallbackAfterReturn(this);\r\n        }\r\n\r\n        if (this.stepOverNestingLevel < 0 && this.currentProgram.statements[this.currentProgramPosition + 1].type == TokenType.jumpAlways) {\r\n            this.stepFinished = false;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    makeEmptyArray(counts: number[], type: Type): Value {\r\n        let type1 = (<ArrayType>type).arrayOfType;\r\n        if (counts.length == 1) {\r\n            let array: Value[] = [];\r\n            for (let i = 0; i < counts[0]; i++) {\r\n                let v = {\r\n                    type: type1,\r\n                    value: null\r\n                };\r\n\r\n                if (type1 instanceof PrimitiveType) {\r\n                    v.value = type1.initialValue;\r\n                }\r\n\r\n                array.push(v);\r\n\r\n            }\r\n            return {\r\n                type: type,\r\n                value: array\r\n            };\r\n        } else {\r\n            let array: Value[] = [];\r\n            let n = counts.pop();\r\n            for (let i = 0; i < n; i++) {\r\n                array.push(this.makeEmptyArray(counts, type1));\r\n            }\r\n            return {\r\n                type: type,\r\n                value: array\r\n            };\r\n        }\r\n    }\r\n\r\n\r\n    round(n: number): string {\r\n        return \"\" + Math.round(n * 10000) / 10000;\r\n    }\r\n\r\n    runningStates: InterpreterState[] = [InterpreterState.paused, InterpreterState.running, InterpreterState.waitingForInput];\r\n\r\n    setState(state: InterpreterState) {\r\n\r\n        // console.log(\"Set state \" + InterpreterState[state]);\r\n\r\n        let oldState = this.state;\r\n        this.state = state;\r\n\r\n        if (state == InterpreterState.error || state == InterpreterState.done) {\r\n            this.closeAllWebsockets();\r\n        }\r\n\r\n        let am = this.main.getActionManager();\r\n\r\n        for (let actionId of this.actions) {\r\n            am.setActive(\"interpreter.\" + actionId, this.buttonActiveMatrix[actionId][state]);\r\n        }\r\n\r\n        let buttonStartActive = this.buttonActiveMatrix['start'][state];\r\n\r\n        if (buttonStartActive) {\r\n            this.controlButtons.$buttonStart.show();\r\n            this.controlButtons.$buttonPause.hide();\r\n        } else {\r\n            this.controlButtons.$buttonStart.hide();\r\n            this.controlButtons.$buttonPause.show();\r\n        }\r\n\r\n        let buttonStopActive = this.buttonActiveMatrix['stop'][state];\r\n        if (buttonStopActive) {\r\n            // this.controlButtons.$buttonEdit.show();\r\n        } else {\r\n            // this.controlButtons.$buttonEdit.hide();\r\n            if (this.worldHelper != null) {\r\n                this.worldHelper.clearActorLists();\r\n            }\r\n            this.gngEreignisbehandlungHelper?.detachEvents();\r\n            this.gngEreignisbehandlungHelper = null;\r\n        }\r\n\r\n        if (this.runningStates.indexOf(oldState) >= 0 && this.runningStates.indexOf(state) < 0) {\r\n            this.debugger.disable();\r\n            // this.main.getMonacoEditor().updateOptions({ readOnly: false });\r\n            this.keyboardTool.unsubscribeAllListeners();\r\n        }\r\n\r\n        if (this.runningStates.indexOf(oldState) < 0 && this.runningStates.indexOf(state) >= 0) {\r\n            this.debugger.enable();\r\n            // this.main.getMonacoEditor().updateOptions({ readOnly: true });\r\n        }\r\n\r\n    }\r\n\r\n    closeAllWebsockets() {\r\n        this.webSocketsToCloseAfterProgramHalt.forEach(socket => socket.close());\r\n        this.webSocketsToCloseAfterProgramHalt = [];\r\n    }\r\n\r\n\r\n    pushCurrentProgram() {\r\n\r\n        if (this.currentProgram == null) return;\r\n\r\n        let textPosition: TextPosition;\r\n        let currentStatement = this.currentProgram.statements[this.currentProgramPosition];\r\n        if (currentStatement != null) {\r\n            textPosition = currentStatement.position;\r\n        }\r\n\r\n        this.programStack.push({\r\n            program: this.currentProgram,\r\n            programPosition: this.currentProgramPosition,\r\n            textPosition: textPosition,\r\n            method: this.currentMethod,\r\n            callbackAfterReturn: this.currentCallbackAfterReturn,\r\n            isCalledFromOutside: this.currentIsCalledFromOutside\r\n        })\r\n\r\n        this.currentCallbackAfterReturn = null;\r\n        this.currentIsCalledFromOutside = null;\r\n\r\n    }\r\n\r\n    // runTimer(method: Method, stackElements: Value[],\r\n    //     callbackAfterReturn: (interpreter: Interpreter) => void) {\r\n\r\n    //     if(this.state != InterpreterState.running){\r\n    //         return;\r\n    //     }\r\n\r\n    //     this.pushCurrentProgram();\r\n\r\n    //     this.currentProgram = method.program;\r\n    //     this.currentMethod = method;\r\n    //     this.currentProgramPosition = 0;\r\n    //     this.currentCallbackAfterReturn = callbackAfterReturn;\r\n    //     this.currentIsCalledFromOutside = \"Timer\";\r\n\r\n    //     this.stackframes.push(this.currentStackframe);\r\n    //     this.currentStackframe = this.stack.length;\r\n    //     for (let se of stackElements) this.stack.push(se);\r\n    //     let statements = method.program.statements;\r\n\r\n    //     // if program ends with return then this return-statement decreases stepOverNestingLevel. So we increase it\r\n    //     // beforehand to compensate this effect.\r\n    //     if(statements[statements.length - 1].type == TokenType.return) this.stepOverNestingLevel++;\r\n\r\n    // }\r\n\r\n    runTimer(method: Method, stackElements: Value[],\r\n        callbackAfterReturn: (interpreter: Interpreter) => void, isActor: boolean) {\r\n\r\n        if (this.state != InterpreterState.running) {\r\n            return;\r\n        }\r\n\r\n        let statements = method.program.statements;\r\n\r\n        if (isActor || this.programStack.length == 0) {\r\n            // Main Program is running => Timer has higher precedence\r\n            this.pushCurrentProgram();\r\n\r\n            this.currentProgram = method.program;\r\n            this.currentMethod = method;\r\n            this.currentProgramPosition = 0;\r\n            this.currentCallbackAfterReturn = callbackAfterReturn;\r\n            this.currentIsCalledFromOutside = \"Timer\";\r\n\r\n            this.stackframes.push(this.currentStackframe);\r\n            this.currentStackframe = this.stack.length;\r\n            this.stack = this.stack.concat(stackElements);\r\n            // for (let se of stackElements) this.stack.push(se);\r\n\r\n            // if program ends with return then this return-statement decreases stepOverNestingLevel. So we increase it\r\n            // beforehand to compensate this effect.\r\n            if (statements[statements.length - 1].type == TokenType.return) this.stepOverNestingLevel++;\r\n        } else {\r\n            // another Timer is running => queue up\r\n            // position 0 in program stack is main program\r\n            // => insert timer in position 1\r\n\r\n            this.programStack.splice(1, 0, {\r\n                program: method.program,\r\n                programPosition: 0,\r\n                textPosition: { line: 0, column: 0, length: 0 },\r\n                method: method,\r\n                callbackAfterReturn: callbackAfterReturn,\r\n                isCalledFromOutside: \"Timer\",\r\n                stackElementsToPushBeforeFirstExecuting: stackElements\r\n            });\r\n\r\n            if (statements[statements.length - 1].type == TokenType.return) this.stepOverNestingLevel++;\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    evaluate(program: Program): { error: string, value: Value } {\r\n\r\n        this.pushCurrentProgram();\r\n\r\n        this.currentProgram = program;\r\n        this.currentProgramPosition = 0;\r\n\r\n        let stacksizeBefore = this.stack.length;\r\n\r\n        let oldInterpreterState = this.state;\r\n        let stepOverNestingLevel = this.stepOverNestingLevel;\r\n        let additionalStepFinishedFlag = this.additionalStepFinishedFlag;\r\n\r\n        let oldStackframe = this.currentStackframe;\r\n\r\n        let error: string;\r\n        let stepCount = 0;\r\n\r\n        try {\r\n            while (error == null &&\r\n                (this.currentProgram != program || this.currentProgramPosition <\r\n                    this.currentProgram.statements.length)\r\n                && stepCount < 100000\r\n                // && this.currentProgram == program\r\n            ) {\r\n                error = this.nextStep();\r\n                stepCount++;\r\n            }\r\n        } catch (e) {\r\n            error = \"Fehler bei der Auswertung\";\r\n        }\r\n\r\n        if (this.currentProgram == program && this.programStack.length > 0) {\r\n            this.popProgram();\r\n        }\r\n\r\n        let stackTop: Value;\r\n        if (this.stack.length > stacksizeBefore) {\r\n            stackTop = this.stack.pop();\r\n\r\n            while (this.stack.length > stacksizeBefore) {\r\n                this.stack.pop();\r\n            }\r\n\r\n        }\r\n\r\n        this.stepOverNestingLevel = stepOverNestingLevel;\r\n        this.additionalStepFinishedFlag = additionalStepFinishedFlag;\r\n        this.setState(oldInterpreterState);\r\n\r\n        return {\r\n            error: error,\r\n            value: stackTop\r\n        }\r\n\r\n    }\r\n\r\n    executeImmediatelyInNewStackframe(program: Program, valuesToPushBeforeExecuting: Value[]): { error: string, value: Value } {\r\n\r\n        this.pushCurrentProgram();\r\n\r\n        this.currentProgram = program;\r\n        let oldProgramPosition = this.currentProgramPosition;\r\n        this.currentProgramPosition = 0;\r\n\r\n        let numberOfStackframesBefore = this.stackframes.length;\r\n        this.stackframes.push(this.currentStackframe);\r\n        let stacksizeBefore = this.stack.length;\r\n        this.currentStackframe = stacksizeBefore;\r\n\r\n        for (let v of valuesToPushBeforeExecuting) this.stack.push(v);\r\n\r\n        let oldInterpreterState = this.state;\r\n        let stepOverNestingLevel = this.stepOverNestingLevel;\r\n        let additionalStepFinishedFlag = this.additionalStepFinishedFlag;\r\n\r\n\r\n        let stepCount = 0;\r\n        let error = null;\r\n\r\n        try {\r\n            while (this.stackframes.length > numberOfStackframesBefore\r\n                && stepCount < 100000 && error == null\r\n            ) {\r\n                let node = this.currentProgram.statements[this.currentProgramPosition];\r\n\r\n                error = this.executeNode(node);\r\n                stepCount++;\r\n            }\r\n        } catch (e) {\r\n            error = \"Fehler bei der Auswertung\";\r\n        }\r\n\r\n        if (stepCount == 100000) this.throwException(\"Die Ausführung des Konstruktors dauerte zu lange.\");\r\n\r\n        let stackTop: Value;\r\n        if (this.stack.length > stacksizeBefore) {\r\n            stackTop = this.stack.pop();\r\n\r\n            while (this.stack.length > stacksizeBefore) {\r\n                this.stack.pop();\r\n            }\r\n\r\n        }\r\n\r\n        this.stepOverNestingLevel = stepOverNestingLevel;\r\n        this.additionalStepFinishedFlag = additionalStepFinishedFlag;\r\n        // this.currentProgramPosition++;\r\n\r\n        this.currentProgramPosition = oldProgramPosition;\r\n        this.setState(oldInterpreterState);\r\n\r\n        return {\r\n            error: error,\r\n            value: stackTop\r\n        }\r\n\r\n    }\r\n\r\n    instantiateObjectImmediately(klass: Klass): RuntimeObject {\r\n        let object = new RuntimeObject(klass);\r\n\r\n        let value = {\r\n            value: object,\r\n            type: klass\r\n        };\r\n\r\n        let klass1 = klass;\r\n\r\n        while (klass1 != null) {\r\n            let aip = klass1.attributeInitializationProgram;\r\n            if (aip.statements.length > 0) {\r\n\r\n                this.executeImmediatelyInNewStackframe(aip, [value]);\r\n\r\n            }\r\n            klass1 = klass1.baseClass;\r\n        }\r\n\r\n        let constructor = klass.getMethodBySignature(klass.identifier + \"()\");\r\n        if (constructor != null && constructor.program != null) {\r\n            // let programWithoutReturnStatement: Program = {\r\n            //     labelManager: null,\r\n            //     module: constructor.program.module,\r\n            //     statements: constructor.program.statements.slice(0, constructor.program.statements.length - 1)\r\n            // };\r\n            this.executeImmediatelyInNewStackframe(constructor.program, [value]);\r\n        }\r\n\r\n        return object;\r\n\r\n    }\r\n\r\n    registerDatabaseConnection(ch: ConnectionHelper) {\r\n        this.databaseConnectionHelpers.push(ch);\r\n    }\r\n\r\n\r\n}","/* \r\n * Convex hull algorithm - Library (TypeScript)\r\n * \r\n * Copyright (c) 2020 Project Nayuki\r\n * https://www.nayuki.io/page/convex-hull-algorithm\r\n * \r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n * \r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with this program (see COPYING.txt and COPYING.LESSER.txt).\r\n * If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n\r\n\r\n\r\nexport namespace convexhull {\r\n    \r\n    export interface Point {\r\n        x: number;\r\n        y: number;\r\n    }\r\n\t// Returns a new array of points representing the convex hull of\r\n\t// the given set of points. The convex hull excludes collinear points.\r\n\t// This algorithm runs in O(n log n) time.\r\n\texport function makeHull<P extends Point>(points: Array<P>): Array<P> {\r\n\t\tlet newPoints: Array<P> = points.slice();\r\n\t\tnewPoints.sort(convexhull.POINT_COMPARATOR);\r\n\t\treturn convexhull.makeHullPresorted(newPoints);\r\n\t}\r\n\t\r\n\t\r\n\t// Returns the convex hull, assuming that each points[i] <= points[i + 1]. Runs in O(n) time.\r\n\texport function makeHullPresorted<P extends Point>(points: Array<P>): Array<P> {\r\n\t\tif (points.length <= 1)\r\n\t\t\treturn points.slice();\r\n\t\t\r\n\t\t// Andrew's monotone chain algorithm. Positive y coordinates correspond to \"up\"\r\n\t\t// as per the mathematical convention, instead of \"down\" as per the computer\r\n\t\t// graphics convention. This doesn't affect the correctness of the result.\r\n\t\t\r\n\t\tlet upperHull: Array<P> = [];\r\n\t\tfor (let i = 0; i < points.length; i++) {\r\n\t\t\tconst p: P = points[i];\r\n\t\t\twhile (upperHull.length >= 2) {\r\n\t\t\t\tconst q: P = upperHull[upperHull.length - 1];\r\n\t\t\t\tconst r: P = upperHull[upperHull.length - 2];\r\n\t\t\t\tif ((q.x - r.x) * (p.y - r.y) >= (q.y - r.y) * (p.x - r.x))\r\n\t\t\t\t\tupperHull.pop();\r\n\t\t\t\telse\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tupperHull.push(p);\r\n\t\t}\r\n\t\tupperHull.pop();\r\n\t\t\r\n\t\tlet lowerHull: Array<P> = [];\r\n\t\tfor (let i = points.length - 1; i >= 0; i--) {\r\n\t\t\tconst p: P = points[i];\r\n\t\t\twhile (lowerHull.length >= 2) {\r\n\t\t\t\tconst q: P = lowerHull[lowerHull.length - 1];\r\n\t\t\t\tconst r: P = lowerHull[lowerHull.length - 2];\r\n\t\t\t\tif ((q.x - r.x) * (p.y - r.y) >= (q.y - r.y) * (p.x - r.x))\r\n\t\t\t\t\tlowerHull.pop();\r\n\t\t\t\telse\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tlowerHull.push(p);\r\n\t\t}\r\n\t\tlowerHull.pop();\r\n\t\t\r\n\t\tif (upperHull.length == 1 && lowerHull.length == 1 && upperHull[0].x == lowerHull[0].x && upperHull[0].y == lowerHull[0].y)\r\n\t\t\treturn upperHull;\r\n\t\telse\r\n\t\t\treturn upperHull.concat(lowerHull);\r\n\t}\r\n\t\r\n\t\r\n\texport function POINT_COMPARATOR(a: Point, b: Point): number {\r\n\t\tif (a.x < b.x)\r\n\t\t\treturn -1;\r\n\t\telse if (a.x > b.x)\r\n\t\t\treturn +1;\r\n\t\telse if (a.y < b.y)\r\n\t\t\treturn -1;\r\n\t\telse if (a.y > b.y)\r\n\t\t\treturn +1;\r\n\t\telse\r\n\t\t\treturn 0;\r\n\t}\r\n\t\r\n}","import { Point } from \"./Router.js\";\r\nimport { DiagramArrow } from \"./DiagramArrow.js\";\r\nimport { DiagramUnitCm } from \"../Diagram.js\";\r\n\r\ntype Step = {r: number, f: number};\r\ntype Arrow = {\r\n    steps: Step[],\r\n    stroke: string,\r\n    fill: string,\r\n    \"stroke-dasharray\": string\r\n}\r\n\r\nexport class ArrowHead {\r\n\r\n    static rauteAlpha = 60;\r\n    static arrows: {[type: string]: Arrow} = {\r\n        \"inheritance\": {\r\n            steps: [{r: 150, f: 0.4}, {r: 120, f: 0.4}, {r: 120, f: 0.4}],\r\n            stroke: \"#000000\",\r\n            fill: \"#ffffff\",\r\n            \"stroke-dasharray\": undefined //\"4\"\r\n        },\r\n        \"realization\": {\r\n            steps: [{r: 150, f: 0.4}, {r: 120, f: 0.4}, {r: 120, f: 0.4}],\r\n            stroke: \"#000000\",\r\n            fill: \"#8080ff\",\r\n            \"stroke-dasharray\": \"4\"\r\n        },\r\n        \"composition\": {\r\n            steps: [{r: 90 + ArrowHead.rauteAlpha, f: 0.3}, {r: 180 - 2*ArrowHead.rauteAlpha, f: 0.3},\r\n                 {r: 2*ArrowHead.rauteAlpha, f: 0.3}, {r: 180 - 2*ArrowHead.rauteAlpha, f: 0.3}],\r\n            stroke: \"#000000\",\r\n            fill: \"#ffffff\",\r\n            \"stroke-dasharray\": undefined\r\n        },\r\n    }\r\n\r\n    static makeHead(position1Cm: Point, position2Cm: Point, type: string): {\r\n        path: string,\r\n        stroke: string,\r\n        fill: string,\r\n    } {\r\n\r\n        let dx = position2Cm.x - position1Cm.x;\r\n        let dy = position2Cm.y - position1Cm.y;\r\n\r\n        let d = Math.sqrt(dx*dx+dy*dy);\r\n        \r\n        if(d < 0.00001) return {path: \"\", stroke: \"none\", fill: \"none\"};\r\n\r\n        let ex = dx/d;\r\n        let ey = dy/d;\r\n\r\n        let path: string = \"M \" + position2Cm.x * DiagramUnitCm / DiagramArrow.cmPerPx \r\n            + \" \" + position2Cm.y * DiagramUnitCm / DiagramArrow.cmPerPx;\r\n\r\n        let arrow = this.arrows[type];\r\n\r\n        for(let step of arrow.steps){\r\n            let angle = step.r / 180 * Math.PI;\r\n            let ex1 = ex * Math.cos(angle) - ey * Math.sin(angle);\r\n            let ey1 = ex * Math.sin(angle) + ey * Math.cos(angle);\r\n            path += \" l \" + ex1 * step.f / DiagramArrow.cmPerPx + \" \" + ey1 * step.f / DiagramArrow.cmPerPx;\r\n            ex = ex1;\r\n            ey = ey1;\r\n        }\r\n\r\n        return {\r\n            path: path,\r\n            fill: arrow.fill,\r\n            stroke: arrow.stroke\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n}","import { DiagramUnitCm, Diagram } from \"../Diagram.js\";\r\nimport { RoutingArrow, Point } from \"./Router.js\";\r\nimport { ArrowHead } from \"./ArrowHead.js\";\r\n\r\nexport class DiagramArrow {\r\n\r\n    public static cmPerPx: number = 2.54 / 96;\r\n\r\n    public $element: JQuery<Element>;\r\n\r\n    constructor(protected parent: Element, private routingArrow: RoutingArrow, private color: string) {\r\n\r\n    }\r\n\r\n    public show() {\r\n        if (this.$element == null) return;\r\n        this.$element.show();\r\n    }\r\n\r\n    public hide() {\r\n        if (this.$element == null) return;\r\n        this.$element.hide();\r\n    }\r\n\r\n    detach() {\r\n        if (this.$element == null) return;\r\n        this.$element.detach();\r\n    }\r\n\r\n    remove() {\r\n        if (this.$element == null) return;\r\n        this.$element.remove();\r\n    }\r\n\r\n    appendTo($element: JQuery<Element>) {\r\n        $element.append(this.$element);\r\n    }\r\n\r\n    public clear() {\r\n        if (this.$element == null) return;\r\n        this.$element.empty();\r\n    }\r\n\r\n    public createElement(name: string, parent: Element = null, attributes?:\r\n        { [key: string]: string }): JQuery<Element> {\r\n\r\n        let ns = 'http://www.w3.org/2000/svg';\r\n        let $element = jQuery(document.createElementNS(ns, name));\r\n\r\n        if (attributes != null) $element.attr(attributes);\r\n\r\n        if (parent != null) parent.appendChild($element[0]);\r\n\r\n        return $element;\r\n\r\n    }\r\n\r\n\r\n    public createTextElement(text: string, parent: Element = null, attributes?:\r\n        { [key: string]: string }): JQuery<Element> {\r\n\r\n        let $element: JQuery<Element> = this.createElement(\"text\", parent, {\r\n            font: \"16px Roboto\",\r\n            \"font-family\": \"sans-serif\",\r\n            fill: \"#000\",\r\n            \"alignment-baseline\": \"hanging\"\r\n        });\r\n\r\n        if (attributes != null) $element.attr(attributes);\r\n\r\n        $element.text(text);\r\n\r\n        return $element;\r\n    }\r\n\r\n    public getTextMetrics(textElement: JQuery<SVGTextElement>): { height: number, width: number } {\r\n        let bbox: DOMRect = textElement[0].getBBox();\r\n\r\n        return {\r\n            height: bbox.height * DiagramArrow.cmPerPx,\r\n            width: bbox.width * DiagramArrow.cmPerPx\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public render() {\r\n\r\n        let $group = this.$element;\r\n        if ($group == null) {\r\n            $group = this.createElement(\"g\", this.parent);\r\n            this.$element = $group;\r\n            $group.css(\"stroke\", this.color);\r\n        } else {\r\n            $group.empty();\r\n        }\r\n\r\n        let points = this.routingArrow.minimalPoints;\r\n        if (points == null || points.length < 2) {\r\n            return;\r\n        }\r\n\r\n        let path = \"M \" + this.getPathCoordinates(points[0]);\r\n\r\n        for (let i = 1; i < points.length; i++) {\r\n            path += \" L \" + this.getPathCoordinates(points[i]);\r\n        }\r\n\r\n        let arrowData = ArrowHead.arrows[this.routingArrow.arrowType];\r\n        let $path = this.createElement(\"path\", $group[0], { d: path });\r\n        $path.css({\r\n            // stroke: \"#000000\",\r\n            \"stroke-width\": \"0.2 cm\",\r\n            \"fill\": \"none\",\r\n            \"stroke-dasharray\": arrowData[\"stroke-dasharray\"]\r\n        });\r\n\r\n        while (points.length > 1 && points[points.length - 1].x == points[points.length - 2].x &&\r\n            points[points.length - 1].y == points[points.length - 2].y) {\r\n            points.pop();\r\n        }\r\n\r\n        if (points.length > 1 && this.routingArrow.endsOnArrowWithIdentifier == null) {\r\n            let head = ArrowHead.makeHead(points[points.length - 2], points[points.length - 1],\r\n                this.routingArrow.arrowType);\r\n\r\n            let $head = this.createElement(\"path\", $group[0], { d: head.path });\r\n            $head.css({\r\n                stroke: this.color,\r\n                \"stroke-width\": \"0.2 cm\",\r\n                \"fill\": head.fill\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    getPathCoordinates(point: Point): string {\r\n        let x = point.x * DiagramUnitCm / DiagramArrow.cmPerPx;\r\n        let y = point.y * DiagramUnitCm / DiagramArrow.cmPerPx;\r\n        return \"\" + x + \" \" + y;\r\n    }\r\n\r\n\r\n}\r\n\r\n","import { Lexer } from \"../../compiler/lexer/Lexer.js\";\r\nimport { Token, TokenList, TokenType, tokenListToString } from \"../../compiler/lexer/Token.js\";\r\n\r\nexport class Formatter implements monaco.languages.DocumentFormattingEditProvider,\r\n    monaco.languages.OnTypeFormattingEditProvider {\r\n\r\n    autoFormatTriggerCharacters: string[] = ['\\n'];\r\n\r\n    displayName?: string = \"Java-Autoformat\";\r\n\r\n\r\n    constructor(\r\n        // private main: Main\r\n    ) {\r\n\r\n    }\r\n\r\n    init() {\r\n        monaco.languages.registerDocumentFormattingEditProvider('myJava', this);\r\n        monaco.languages.registerOnTypeFormattingEditProvider('myJava', this);\r\n    }\r\n\r\n    provideOnTypeFormattingEdits(model: monaco.editor.ITextModel, position: monaco.Position, ch: string, options: monaco.languages.FormattingOptions, token: monaco.CancellationToken): monaco.languages.ProviderResult<monaco.languages.TextEdit[]> {\r\n\r\n        let edits: monaco.languages.TextEdit[] = this.format(model);\r\n\r\n        return Promise.resolve(\r\n            edits\r\n        );\r\n\r\n    }\r\n    deleteOverlappingRanges(edits: monaco.languages.TextEdit[]) {\r\n        for (let i = 0; i < edits.length - 1; i++) {\r\n            let e = edits[i];\r\n            let e1 = edits[i + 1];\r\n            if (e.range.endLineNumber < e1.range.startLineNumber) continue;\r\n            if (e.range.endLineNumber == e1.range.startLineNumber) {\r\n                if (e.range.endColumn >= e1.range.startColumn) {\r\n                    edits.splice(i + 1, 1);\r\n                } else {\r\n                    if (e.range.endColumn == 0 && e.text.length > 0 && e1.range.startColumn == 1 && e1.range.endColumn > e1.range.startColumn && e1.text == \"\") {\r\n                        let delta = e.text.length - (e1.range.endColumn - e1.range.startColumn);\r\n                        if (delta > 0) { \r\n                            e.text = e.text.substr(0, delta);\r\n                            edits.splice(i+1, 1);\r\n                        }\r\n                        else if (delta < 0)\r\n                        { \r\n                            //@ts-ignore\r\n                            e1.range.endColumn = e1.range.startColumn - delta;\r\n                            edits.splice(i, 1);\r\n                            i--;\r\n\r\n                         }\r\n                        else {\r\n                            edits.splice(i, 2);\r\n                            i--;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    provideDocumentFormattingEdits(model: monaco.editor.ITextModel,\r\n        options: monaco.languages.FormattingOptions,\r\n        token: monaco.CancellationToken): monaco.languages.ProviderResult<monaco.languages.TextEdit[]> {\r\n\r\n        let edits: monaco.languages.TextEdit[] = this.format(model);\r\n\r\n        return Promise.resolve(\r\n            edits\r\n        );\r\n\r\n    }\r\n\r\n    format(model: monaco.editor.ITextModel): monaco.languages.TextEdit[] {\r\n\r\n        let edits: monaco.languages.TextEdit[] = [];\r\n\r\n        // if (this.main.currentWorkspace == null || this.main.currentWorkspace.currentlyOpenModule == null) {\r\n        //     return [];\r\n        // }\r\n\r\n        // let text = this.main.monaco_editor.getValue({ preserveBOM: false, lineEnding: \"\\n\" });\r\n\r\n        let text = model.getValue(monaco.editor.EndOfLinePreference.LF);\r\n\r\n        let tokenlist = new Lexer().lex(text).tokens;\r\n\r\n        // let tokenlist = this.main.currentWorkspace.currentlyOpenModule.tokenList;\r\n\r\n        if (tokenlist == null) return [];\r\n\r\n        // TODO:\r\n        // { at the end of line, with one space before; followed only by spaces and \\n\r\n        // indent lines according to { and }\r\n        // Beware: int i[] = { ... }\r\n        // exactly one space before/after binary operators\r\n        // no space after ( and no space before )\r\n        // (   ) -> ()\r\n        // (  ()) -> (())\r\n        // (()  ) -> (())\r\n\r\n        let lastNonSpaceToken: Token = null;\r\n        let indentLevel = 0;\r\n        let tabSize = 3;\r\n        let curlyBracesOpenAtLines: number[] = [];\r\n        let indentLevelAtSwitchStatements: number[] = [];\r\n        let switchHappend: boolean = false;\r\n        let lastTokenWasNewLine: number = 0;\r\n        let roundBracketsOpen: number = 0;\r\n\r\n        for (let i = 0; i < tokenlist.length; i++) {\r\n\r\n            let t = tokenlist[i];\r\n            lastTokenWasNewLine--;\r\n\r\n            switch (t.tt) {\r\n\r\n                case TokenType.keywordSwitch:\r\n                    switchHappend = true;\r\n                    break;\r\n                case TokenType.keywordCase:\r\n                case TokenType.keywordDefault:\r\n                    // outdent: line with case:\r\n                    if (t.position.column > 3) {\r\n                        this.deleteSpaces(edits, t.position.line, 1, 3);\r\n                    }\r\n                    break;\r\n                case TokenType.leftCurlyBracket:\r\n                    if (switchHappend) {\r\n                        switchHappend = false;\r\n                        indentLevelAtSwitchStatements.push(indentLevel + 2);\r\n                        indentLevel++;\r\n                    }\r\n                    indentLevel++;\r\n                    curlyBracesOpenAtLines.push(t.position.line);\r\n                    if (lastNonSpaceToken != null) {\r\n                        let tt = lastNonSpaceToken.tt;\r\n                        if (tt == TokenType.rightBracket || tt == TokenType.identifier || tt == TokenType.leftRightSquareBracket) {\r\n                            if(lastNonSpaceToken.position.line == t.position.line){\r\n                                this.replaceBetween(lastNonSpaceToken, t, edits, \" \");\r\n                            }\r\n                        }\r\n                    }\r\n                    if (i < tokenlist.length - 1) {\r\n                        let token1 = tokenlist[i + 1];\r\n                        if (token1.tt != TokenType.newline && token1.tt != TokenType.space) {\r\n                            this.insertSpaces(edits, token1.position.line, token1.position.column, 1);\r\n                        }\r\n                    }\r\n                    break;\r\n                case TokenType.rightCurlyBracket:\r\n                    if (indentLevelAtSwitchStatements[indentLevelAtSwitchStatements.length - 1] == indentLevel) {\r\n                        indentLevelAtSwitchStatements.pop();\r\n                        indentLevel--;\r\n                        // if(t.position.column >= 3){\r\n                        this.deleteSpaces(edits, t.position.line, 1, 3);\r\n                        // }    \r\n                    }\r\n                    indentLevel--;\r\n                    let openedAtLine = curlyBracesOpenAtLines.pop();\r\n                    if (openedAtLine != null && openedAtLine != t.position.line) {\r\n                        if (lastNonSpaceToken != null && lastNonSpaceToken.position.line == t.position.line) {\r\n                            this.replace(edits, t.position, t.position, \"\\n\" + \" \".repeat(indentLevel * tabSize));\r\n                        }\r\n                    } else {\r\n                        if (i > 0) {\r\n                            let token1 = tokenlist[i - 1];\r\n                            if (token1.tt != TokenType.space && token1.tt != TokenType.newline) {\r\n                                this.insertSpaces(edits, t.position.line, t.position.column, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case TokenType.leftBracket:\r\n                    roundBracketsOpen++;\r\n                    if (i < tokenlist.length - 2) {\r\n                        let nextToken1 = tokenlist[i + 1];\r\n                        let nextToken2 = tokenlist[i + 2];\r\n                        if (nextToken1.tt == TokenType.space && nextToken2.tt != TokenType.newline) {\r\n                            this.deleteSpaces(edits, nextToken1.position.line, nextToken1.position.column, nextToken1.position.length);\r\n                            i++;\r\n                            if (nextToken2.tt == TokenType.rightBracket) {\r\n                                i++;\r\n                                roundBracketsOpen--;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (i > 1) {\r\n                        let lastToken1 = tokenlist[i - 1];\r\n                        let lastToken2 = tokenlist[i - 2];\r\n                        if (lastToken1.tt == TokenType.space && [TokenType.newline, TokenType.keywordFor, TokenType.keywordWhile].indexOf(lastToken2.tt) < 0 && !this.isBinaryOperator(lastToken2.tt)) {\r\n                            if (lastToken1.position.length == 1) {\r\n                                this.deleteSpaces(edits, lastToken1.position.line, lastToken1.position.column, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case TokenType.rightBracket:\r\n                    roundBracketsOpen--;\r\n                    if (i > 1) {\r\n                        let nextToken1 = tokenlist[i - 1];\r\n                        let nextToken2 = tokenlist[i - 2];\r\n                        if (nextToken1.tt == TokenType.space && nextToken2.tt != TokenType.newline) {\r\n                            this.deleteSpaces(edits, nextToken1.position.line, nextToken1.position.column, nextToken1.position.length);\r\n                        }\r\n                    }\r\n                    break;\r\n                case TokenType.newline:\r\n                    lastTokenWasNewLine = 2;\r\n                    if (i < tokenlist.length - 2) {\r\n\r\n                        let nextNonSpaceToken = this.getNextNonSpaceToken(i, tokenlist);\r\n\r\n                        // no additional indent after \"case 12 :\"\r\n                        let lastTokenIsOperator = this.isBinaryOperator(lastNonSpaceToken?.tt) && lastNonSpaceToken?.tt != TokenType.colon;\r\n                        let nextTokenIsOperator = this.isBinaryOperator(nextNonSpaceToken.tt);\r\n\r\n                        let beginNextLine = tokenlist[i + 1];\r\n                        let token2 = tokenlist[i + 2];\r\n                        let currentIndentation = 0;\r\n\r\n                        if (beginNextLine.tt == TokenType.newline || nextNonSpaceToken.tt == TokenType.comment) {\r\n                            break;\r\n                        }\r\n\r\n                        let delta: number = 0;\r\n                        if (beginNextLine.tt == TokenType.space) {\r\n                            if (token2.tt == TokenType.newline) {\r\n                                break;\r\n                            }\r\n                            currentIndentation = beginNextLine.position.length;\r\n                            i++;\r\n                            if (token2.tt == TokenType.rightCurlyBracket) {\r\n                                delta = -1;\r\n                            }\r\n                        }\r\n\r\n                        if (beginNextLine.tt == TokenType.rightCurlyBracket) {\r\n                            delta = -1;\r\n                            // indentLevel--;\r\n                            // curlyBracesOpenAtLines.pop();\r\n                            // lastNonSpaceToken = beginNextLine;\r\n                            // i++;\r\n                        }\r\n\r\n                        if(nextTokenIsOperator || lastTokenIsOperator) delta = 1;\r\n\r\n                        let il = indentLevel + delta;\r\n                        if(roundBracketsOpen > 0){\r\n                            il++;\r\n                        }\r\n                        if (il < 0) il = 0;\r\n\r\n                        let correctIndentation = il * tabSize;\r\n\r\n                        if (correctIndentation > currentIndentation) {\r\n                            this.insertSpaces(edits, t.position.line + 1, 0, correctIndentation - currentIndentation);\r\n                        } else if (correctIndentation < currentIndentation) {\r\n                            this.deleteSpaces(edits, t.position.line + 1, 0, currentIndentation - correctIndentation);\r\n                        }\r\n                    }\r\n                    break;\r\n                case TokenType.space:\r\n                    if (i < tokenlist.length - 1) {\r\n                        let nextToken = tokenlist[i + 1];\r\n                        if (nextToken.tt != TokenType.comment) {\r\n                            if (i > 0) {\r\n                                let lastToken = tokenlist[i - 1];\r\n                                if (lastToken.tt != TokenType.newline) {\r\n                                    if (t.position.length > 1) {\r\n                                        this.deleteSpaces(edits, t.position.line, t.position.column, t.position.length - 1);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case TokenType.keywordFor:\r\n                case TokenType.keywordWhile:\r\n                    if (i < tokenlist.length - 1) {\r\n                        let nextToken = tokenlist[i + 1];\r\n                        if (nextToken.tt == TokenType.leftBracket) {\r\n                            this.insertSpaces(edits, nextToken.position.line, nextToken.position.column, 1);\r\n                        }\r\n                    }\r\n                    break;\r\n                case TokenType.comma:\r\n                case TokenType.semicolon:\r\n                    if (i > 1) {\r\n                        let lastToken1 = tokenlist[i - 1];\r\n                        let lastToken2 = tokenlist[i - 2];\r\n                        if (lastToken1.tt != TokenType.newline && lastToken2.tt != TokenType.newline && !this.isBinaryOperator(lastToken2.tt)) {\r\n                            if (lastToken1.tt == TokenType.space && lastToken1.position.length == 1) {\r\n                                this.deleteSpaces(edits, lastToken1.position.line,\r\n                                    lastToken1.position.column, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                    if (i < tokenlist.length - 1) {\r\n                        let nextToken = tokenlist[i + 1];\r\n                        if (nextToken.tt != TokenType.comment && nextToken.tt != TokenType.space && nextToken.tt != TokenType.newline) {\r\n                            this.insertSpaces(edits, nextToken.position.line, nextToken.position.column, 1);\r\n                        }\r\n                    }\r\n                    break;\r\n                case TokenType.rightSquareBracket:\r\n                    if (lastNonSpaceToken != null && lastNonSpaceToken.tt == TokenType.leftSquareBracket) {\r\n                        this.replaceBetween(lastNonSpaceToken, t, edits, \"\");\r\n\r\n                    }\r\n                    break;\r\n\r\n            }\r\n\r\n            // binary operator?\r\n            if (this.isBinaryOperator(t.tt)) {\r\n\r\n                let lowerGeneric = t.tt == TokenType.lower && this.lowerBelongsToGenericExpression(i, tokenlist);\r\n                let greaterGeneric = t.tt == TokenType.greater && this.greaterBelongsToGenericExpression(i, tokenlist);\r\n\r\n                if (lastTokenWasNewLine <= 0 && lastNonSpaceToken != null && [TokenType.leftBracket, TokenType.assignment, TokenType.comma].indexOf(lastNonSpaceToken.tt) < 0) {\r\n\r\n                    if (i > 0) {\r\n                        let tokenBefore = tokenlist[i - 1];\r\n                        let spaces = (lowerGeneric || greaterGeneric) ? 0 : 1;\r\n                        if (tokenBefore.tt == TokenType.space) {\r\n                            if (tokenBefore.position.length != spaces) {\r\n                                this.insertSpaces(edits, tokenBefore.position.line,\r\n                                    tokenBefore.position.column, spaces - tokenBefore.position.length);\r\n                            }\r\n                        } else {\r\n                            if (spaces == 1)\r\n                                this.insertSpaces(edits, t.position.line, t.position.column, 1);\r\n                        }\r\n                    }\r\n\r\n                    if (i < tokenlist.length - 1) {\r\n                        let nextToken = tokenlist[i + 1];\r\n                        let spaces = (lowerGeneric) ? 0 : 1;\r\n                        if (nextToken.tt == TokenType.space) {\r\n                            if (greaterGeneric && i < tokenlist.length - 2 && tokenlist[i + 2].tt == TokenType.leftBracket) {\r\n                                spaces = 0;\r\n                            }\r\n                            if (nextToken.position.length != spaces) {\r\n                                this.insertSpaces(edits, nextToken.position.line,\r\n                                    nextToken.position.column, spaces - nextToken.position.length);\r\n                            }\r\n                        } else {\r\n                            if (greaterGeneric && nextToken.tt == TokenType.leftBracket) {\r\n                                spaces = 0;\r\n                            }\r\n                            if (spaces == 1) this.insertSpaces(edits, nextToken.position.line, nextToken.position.column, 1);\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            if (t.tt != TokenType.space && t.tt != TokenType.newline) {\r\n                lastNonSpaceToken = t;\r\n            }\r\n\r\n        }\r\n\r\n        this.deleteOverlappingRanges(edits);\r\n\r\n        return edits;\r\n\r\n    }\r\n    getNextNonSpaceToken(currentIndex: number, tokenlist: TokenList):  Token {\r\n\r\n        if(currentIndex == tokenlist.length - 1) return tokenlist[currentIndex];\r\n\r\n        let j = currentIndex + 1;\r\n        while(j < tokenlist.length - 1 && (tokenlist[j].tt == TokenType.space || tokenlist[j].tt == TokenType.return)){\r\n            j++;\r\n        }\r\n        return tokenlist[j];\r\n\r\n    }\r\n\r\n    lowerBelongsToGenericExpression(position: number, tokenlist: TokenList) {\r\n        let i = position + 1;\r\n        while (i < tokenlist.length) {\r\n            let tt = tokenlist[i].tt;\r\n            if (tt == TokenType.greater) {\r\n                return true;\r\n            }\r\n            if ([TokenType.space, TokenType.comma, TokenType.identifier].indexOf(tt) < 0) {\r\n                return false;\r\n            }\r\n            i++;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    greaterBelongsToGenericExpression(position: number, tokenlist: TokenList) {\r\n        let i = position - 1;\r\n        while (i >= 0) {\r\n            let tt = tokenlist[i].tt;\r\n            if (tt == TokenType.lower) {\r\n                return true;\r\n            }\r\n            if ([TokenType.space, TokenType.comma, TokenType.identifier].indexOf(tt) < 0) {\r\n                return false;\r\n            }\r\n            i--;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isBinaryOperator(token: TokenType) {\r\n        return token != null && token >= TokenType.modulo && token <= TokenType.colon;\r\n    }\r\n\r\n    private replaceBetween(lastNonSpaceToken: Token, t: Token, edits: monaco.languages.TextEdit[], text: string) {\r\n        let positionFrom = {\r\n            line: lastNonSpaceToken.position.line,\r\n            column: lastNonSpaceToken.position.column + lastNonSpaceToken.position.length\r\n        };\r\n        let positionTo = {\r\n            line: t.position.line,\r\n            column: t.position.column\r\n        };\r\n        if (positionFrom.line != positionTo.line ||\r\n            positionTo.column - positionFrom.column != text.length) {\r\n            this.replace(edits, positionFrom, positionTo, text);\r\n        }\r\n    }\r\n\r\n    deleteSpaces(edits: monaco.languages.TextEdit[], line: number, column: number, numberOfSpaces: number) {\r\n        edits.push({\r\n            range: {\r\n                startColumn: column,\r\n                startLineNumber: line,\r\n                endColumn: column + numberOfSpaces + (column == 0 ? 1 : 0),\r\n                endLineNumber: line\r\n            },\r\n            text: \"\"\r\n        });\r\n    }\r\n\r\n    insertSpaces(edits: monaco.languages.TextEdit[], line: number, column: number, numberOfSpaces: number) {\r\n\r\n        if (numberOfSpaces < 0) {\r\n            this.deleteSpaces(edits, line, column, -numberOfSpaces);\r\n            return;\r\n        }\r\n\r\n        edits.push({\r\n            range: {\r\n                startColumn: column,\r\n                startLineNumber: line,\r\n                endColumn: column,\r\n                endLineNumber: line\r\n            },\r\n            text: \" \".repeat(numberOfSpaces)\r\n        });\r\n    }\r\n\r\n    replace(edits: monaco.languages.TextEdit[], positionFrom: { line: number; column: number; }, positionTo: { line: number; column: number; }, text: string) {\r\n\r\n        edits.push({\r\n            range: {\r\n                startColumn: positionFrom.column,\r\n                startLineNumber: positionFrom.line,\r\n                endColumn: positionTo.column,\r\n                endLineNumber: positionTo.line\r\n            },\r\n            text: text\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { ColorClassIntrinsicData } from \"./Color.js\";\r\nimport { ColorHelper } from \"./ColorHelper.js\";\r\n\r\nexport class FilledShapeDefaults {\r\n    static defaultFillColor: number = 0x8080ff;\r\n    static defaultFillAlpha: number = 1.0;\r\n\r\n    static defaultBorderColor: number = null;\r\n    static defaultBorderAlpha: number = 1.0;\r\n    static defaultBorderWidth: number = 10;\r\n\r\n    static defaultVisibility: boolean = true;\r\n\r\n    static initDefaultValues() {\r\n        FilledShapeDefaults.defaultFillColor = 0x8080ff;\r\n        FilledShapeDefaults.defaultFillAlpha = 1.0;\r\n\r\n        FilledShapeDefaults.defaultBorderColor = null;\r\n        FilledShapeDefaults.defaultBorderAlpha = 1.0;\r\n        FilledShapeDefaults.defaultBorderWidth = 10;\r\n\r\n        FilledShapeDefaults.defaultVisibility = true;\r\n    }\r\n\r\n    static setDefaultVisibility(visibility: boolean) {\r\n        FilledShapeDefaults.defaultVisibility = visibility;\r\n    }\r\n\r\n    static setDefaultBorder(width: number, color: string | number | RuntimeObject, alpha?: number) {\r\n\r\n        FilledShapeDefaults.defaultBorderWidth = width;\r\n\r\n        if (color instanceof RuntimeObject) {\r\n            color = (<ColorClassIntrinsicData>(color.intrinsicData)).hex;\r\n        }\r\n\r\n        if (typeof color == \"string\") {\r\n            let c = ColorHelper.parseColorToOpenGL(color);\r\n            FilledShapeDefaults.defaultBorderColor = c.color;\r\n            FilledShapeDefaults.defaultBorderAlpha = alpha == null ? c.alpha : alpha;\r\n        } else {\r\n            FilledShapeDefaults.defaultBorderColor = color;\r\n            if (alpha != null) FilledShapeDefaults.defaultBorderAlpha = alpha;\r\n        }\r\n\r\n    }\r\n\r\n    static setDefaultFillColor(color: string | number | RuntimeObject, alpha?: number) {\r\n\r\n        if (color instanceof RuntimeObject) {\r\n            color = (<ColorClassIntrinsicData>(color.intrinsicData)).hex;\r\n        }\r\n\r\n        if (typeof color == \"string\") {\r\n            let c = ColorHelper.parseColorToOpenGL(color);\r\n            FilledShapeDefaults.defaultFillColor = c.color;\r\n            FilledShapeDefaults.defaultFillAlpha = alpha == null ? c.alpha : alpha;\r\n        } else {\r\n            FilledShapeDefaults.defaultFillColor = color;\r\n            if (alpha != null) FilledShapeDefaults.defaultFillAlpha = alpha;\r\n        }\r\n\r\n    }\r\n\r\n}","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { doublePrimitiveType, intPrimitiveType, stringPrimitiveType, voidPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Value } from \"../../compiler/types/Types.js\";\r\nimport { Interpreter, InterpreterState } from \"../../interpreter/Interpreter.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { ActorHelper } from \"./Actor.js\";\r\nimport { ColorClassIntrinsicData } from \"./Color.js\";\r\nimport { ColorHelper } from \"./ColorHelper.js\";\r\nimport { FilledShapeDefaults } from \"./FilledShapeDefaults.js\";\r\nimport { GroupClass, GroupHelper } from \"./Group.js\";\r\nimport { MouseListenerInterface } from \"./MouseListener.js\";\r\nimport { ShapeClass, ShapeHelper } from \"./Shape.js\";\r\nimport { SpriteHelper } from \"./Sprite.js\";\r\n\r\nexport class WorldClass extends Klass {\r\n\r\n    constructor(public module: Module) {\r\n\r\n        super(\"World\", module, \"Grafische Zeichenfläche mit Koordinatensystem\")\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        let groupType = <GroupClass>module.typeStore.getType(\"Group\");\r\n        let shapeType = <ShapeClass>module.typeStore.getType(\"Shape\");\r\n        let mouseListenerType = <MouseListenerInterface>module.typeStore.getType(\"MouseListener\");\r\n        let colorType: Klass = <Klass>this.module.typeStore.getType(\"Color\");\r\n\r\n        // this.addAttribute(new Attribute(\"PI\", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, \"Die Kreiszahl Pi (3.1415...)\"));\r\n\r\n        this.addMethod(new Method(\"World\", new Parameterlist([\r\n            { identifier: \"breite\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"höhe\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let breite: number = parameters[1].value;\r\n                let höhe: number = parameters[2].value;\r\n                let gh: WorldHelper = this.getWorldHelper(o, breite, höhe);  //new WorldHelper(breite, höhe, this.module, o);\r\n                o.intrinsicData[\"World\"] = gh;\r\n\r\n            }, false, false, \"Legt einen neuen Grafikbereich (='Welt') an\", true));\r\n\r\n        this.addMethod(new Method(\"World\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let gh: WorldHelper = this.getWorldHelper(o); // new WorldHelper(800, 600, this.module, o);\r\n                o.intrinsicData[\"World\"] = gh;\r\n\r\n            }, false, false, \"Legt einen neuen Grafikbereich (='Welt') an. Das Koordinatensystem geht von 0 bis 800 in x-Richtung und von 0 - 600 in y-Richtung.\", true));\r\n\r\n        this.addMethod(new Method(\"setBackgroundColor\", new Parameterlist([\r\n            { identifier: \"colorAsRGBInt\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: number = parameters[1].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n\r\n                wh.setBackgroundColor(color);\r\n\r\n            }, false, false, 'Setzt die Hintergrundfarbe. Die Farbe wird als integer-Zahl erwartet. Am besten schreibt man sie als Hexadezimalzahl, also z.B. setBackgroundColor(0xff8080).\"', false));\r\n\r\n        this.addMethod(new Method(\"setBackgroundColor\", new Parameterlist([\r\n            { identifier: \"colorAsRGBAString\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: string = parameters[1].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n\r\n                wh.setBackgroundColor(color);\r\n\r\n            }, false, false, 'Setzt die Hintergrundfarbe. Die Farbe ist entweder eine vordefinierte Farbe (\"schwarz\", \"rot\", ...) oder eine css-Farbe der Art \"#ffa7b3\" (ohne alpha), \"#ffa7b380\" (mit alpha), \"rgb(172, 22, 18)\" oder \"rgba(123, 22,18, 0.3)\"', false));\r\n\r\n        this.addMethod(new Method(\"setBackgroundColor\", new Parameterlist([\r\n            { identifier: \"color\", type: colorType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: RuntimeObject = parameters[1].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n\r\n                wh.setBackgroundColor(color);\r\n\r\n            }, false, false, 'Setzt die Hintergrundfarbe. Die Farbe ist entweder eine vordefinierte Farbe (\"schwarz\", \"rot\", ...) oder eine css-Farbe der Art \"#ffa7b3\" (ohne alpha), \"#ffa7b380\" (mit alpha), \"rgb(172, 22, 18)\" oder \"rgba(123, 22,18, 0.3)\"', false));\r\n\r\n\r\n        this.addMethod(new Method(\"move\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n\r\n                let matrix = new PIXI.Matrix().copyFrom(wh.stage.projectionTransform);\r\n                wh.stage.projectionTransform.identity();\r\n                wh.stage.projectionTransform.translate(x, y);\r\n                wh.stage.projectionTransform.prepend(matrix);\r\n\r\n                wh.computeCurrentWorldBounds();\r\n                wh.shapesNotAffectedByWorldTransforms.forEach((shape) => shape.move(-x, -y));\r\n\r\n            }, false, false, 'Verschiebt alle Objekte der Welt um x nach rechts und y nach unten.', false));\r\n\r\n        this.addMethod(new Method(\"follow\", new Parameterlist([\r\n            { identifier: \"shape\", type: shapeType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"margin\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"xMin\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"xMax\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"yMin\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"yMax\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let shape: RuntimeObject = parameters[1].value;\r\n                let frameWidth: number = parameters[2].value;\r\n                let xMin: number = parameters[3].value;\r\n                let xMax: number = parameters[4].value;\r\n                let yMin: number = parameters[5].value;\r\n                let yMax: number = parameters[6].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n\r\n                let shapeHelper: ShapeHelper = shape.intrinsicData[\"Actor\"];\r\n\r\n                let moveX: number = 0;\r\n                let moveY: number = 0;\r\n\r\n                let shapeX: number = shapeHelper.getCenterX();\r\n                let shapeY: number = shapeHelper.getCenterY();\r\n\r\n                let outsideRight = shapeX - (wh.currentLeft + wh.currentWidth - frameWidth);\r\n                if (outsideRight > 0 && wh.currentLeft + wh.currentWidth < xMax) {\r\n                    moveX = -outsideRight;\r\n                }\r\n\r\n                let outsideLeft = (wh.currentLeft + frameWidth) - shapeX;\r\n                if (outsideLeft > 0 && wh.currentLeft > xMin) {\r\n                    moveX = outsideLeft;\r\n                }\r\n\r\n                let outsideBottom = shapeY - (wh.currentTop + wh.currentHeight - frameWidth);\r\n                if (outsideBottom > 0 && wh.currentTop + wh.currentHeight <= yMax) {\r\n                    moveY = -outsideBottom;\r\n                }\r\n\r\n                let outsideTop = (wh.currentTop + frameWidth) - shapeY;\r\n                if (outsideTop > 0 && wh.currentTop >= yMin) {\r\n                    moveY = outsideTop;\r\n                }\r\n\r\n                if (moveX != 0 || moveY != 0) {\r\n                    let matrix = new PIXI.Matrix().copyFrom(wh.stage.projectionTransform);\r\n                    wh.stage.projectionTransform.identity();\r\n                    wh.stage.projectionTransform.translate(moveX, moveY);\r\n                    wh.stage.projectionTransform.prepend(matrix);\r\n\r\n                    wh.computeCurrentWorldBounds();\r\n                    wh.shapesNotAffectedByWorldTransforms.forEach((shape) => shape.move(-moveX, -moveY));\r\n                }\r\n\r\n\r\n            }, false, false, 'Verschiebt die Welt so, dass das übergebene graphische Objekt (shape) sichtbar wird. Verschoben wird nur, wenn das Objekt weniger als frameWidth vom Rand entfernt ist und die Welt nicht über die gegebenen Koordinaten xMin, xMax, yMin und yMax hinausragt.', false));\r\n\r\n        this.addMethod(new Method(\"rotate\", new Parameterlist([\r\n            { identifier: \"angleInDeg\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let angle: number = parameters[1].value;\r\n                let x: number = parameters[2].value;\r\n                let y: number = parameters[3].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n\r\n\r\n\r\n                let angleRad = -angle / 180 * Math.PI;\r\n                let matrix = new PIXI.Matrix().copyFrom(wh.stage.projectionTransform);\r\n                wh.stage.projectionTransform.identity();\r\n                wh.stage.projectionTransform.translate(-x, -y);\r\n                wh.stage.projectionTransform.rotate(angleRad);\r\n                wh.stage.projectionTransform.translate(x, y);\r\n                wh.stage.projectionTransform.prepend(matrix);\r\n\r\n                wh.computeCurrentWorldBounds();\r\n                wh.shapesNotAffectedByWorldTransforms.forEach(\r\n                    (shape) => {\r\n                        shape.rotate(-angle, x, y);\r\n                    });\r\n\r\n            }, false, false, 'Rotiert die Welt um den angegebenen Winkel im Urzeigersinn. Drehpunkt ist der Punkt (x/y).', false));\r\n\r\n        this.addMethod(new Method(\"scale\", new Parameterlist([\r\n            { identifier: \"factor\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let factor: number = parameters[1].value;\r\n                let x: number = parameters[2].value;\r\n                let y: number = parameters[3].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n\r\n\r\n                let matrix = new PIXI.Matrix().copyFrom(wh.stage.projectionTransform);\r\n                wh.stage.projectionTransform.identity();\r\n                wh.stage.projectionTransform.translate(-x, -y);\r\n                wh.stage.projectionTransform.scale(factor, factor);\r\n                wh.stage.projectionTransform.translate(x, y);\r\n                wh.stage.projectionTransform.prepend(matrix);\r\n                wh.computeCurrentWorldBounds();\r\n                wh.shapesNotAffectedByWorldTransforms.forEach((shape) => shape.scale(1 / factor, x, y));\r\n\r\n            }, false, false, 'Streckt die Welt um den angegebenen Faktor. Zentrum der Streckung ist (x/y).', false));\r\n\r\n        this.addMethod(new Method(\"setCoordinateSystem\", new Parameterlist([\r\n            { identifier: \"left\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"top\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"width\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"height\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let left: number = parameters[1].value;\r\n                let top: number = parameters[2].value;\r\n                let width: number = parameters[3].value;\r\n                let height: number = parameters[4].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n\r\n\r\n                wh.stage.projectionTransform.identity();     // coordinate system (0/0) to (initialWidth/initialHeight)\r\n                wh.stage.projectionTransform.translate(-left, -top);\r\n                wh.stage.projectionTransform.scale(wh.initialWidth / width, wh.initialHeight / height);\r\n                wh.computeCurrentWorldBounds();\r\n                wh.shapesNotAffectedByWorldTransforms.forEach((shape) => {\r\n                    shape.scale(width / wh.initialWidth, left, top);\r\n                    shape.move(left, top);\r\n                });\r\n\r\n            }, false, false, 'Streckt die Welt um den angegebenen Faktor. Zentrum der Streckung ist (x/y).', false));\r\n\r\n\r\n        this.addMethod(new Method(\"setDefaultGroup\", new Parameterlist([\r\n            { identifier: \"group\", type: groupType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let group: RuntimeObject = parameters[1].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n\r\n                wh.defaultGroup = group == null ? null : group.intrinsicData[\"Actor\"];\r\n\r\n            }, false, false, 'Legt eine Gruppe fest, zu der ab jetzt alle neuen Objekte automatisch hinzugefügt werden. Falls null angegeben wird, werden neue Objekte zu keiner Gruppe automatisch hinzugefügt.', false));\r\n\r\n\r\n        this.addMethod(new Method(\"getDefaultGroup\", new Parameterlist([\r\n        ]), groupType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n\r\n                return wh.getDefaultGroup();\r\n\r\n            }, false, false, 'Gibt die Gruppe zurück, zu der aktuell alle neuen Objekte automatisch hinzugefügt werden. Falls gerade keine defaultGroup festgelegt ist, wird null zurückgegeben.', false));\r\n\r\n\r\n        this.addMethod(new Method(\"addMouseListener\", new Parameterlist([\r\n            { identifier: \"listener\", type: mouseListenerType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let listener: RuntimeObject = parameters[1].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n\r\n                wh.addMouseListener(listener);\r\n\r\n            }, false, false, 'Fügt einen neuen MouseListener hinzu, dessen Methoden bei Mausereignissen aufgerufen werden.', false));\r\n\r\n\r\n        this.addMethod(new Method(\"getWidth\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n\r\n                return Math.round(wh.currentWidth);\r\n\r\n            }, false, false, 'Gibt die \"Breite\" des Grafikbereichs zurück, genauer: die x-Koordinate am rechten Rand.', false));\r\n\r\n        this.addMethod(new Method(\"getHeight\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n\r\n                return Math.round(wh.currentHeight);\r\n\r\n            }, false, false, 'Gibt die \"Höhe\" des Grafikbereichs zurück, genauer: die y-Koordinate am unteren Rand.', false));\r\n\r\n        this.addMethod(new Method(\"getTop\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n\r\n                return Math.round(wh.currentTop);\r\n\r\n            }, false, false, 'Gibt die y-Koordinate der linken oberen Ecke zurück.', false));\r\n\r\n        this.addMethod(new Method(\"getLeft\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n\r\n                return Math.round(wh.currentLeft);\r\n\r\n            }, false, false, 'Gibt die x-Koordinate der linken oberen Ecke zurück.', false));\r\n\r\n        this.addMethod(new Method(\"setCursor\", new Parameterlist([\r\n            { identifier: \"cursor\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WorldHelper = o.intrinsicData[\"World\"];\r\n                let cursor: string = parameters[1].value;\r\n\r\n                wh.setCursor(cursor);\r\n\r\n            }, false, false, 'Ändert die Form des Mauscursors im gesamten Grafikbereich. Mögiche Werte: siehe https://developer.mozilla.org/de/docs/Web/CSS/cursor.', false));\r\n\r\n\r\n    }\r\n\r\n    getWorldHelper(worldObject: RuntimeObject, breite: number = 800, höhe: number = 600): WorldHelper {\r\n\r\n        let wh = this.module?.main?.getInterpreter()?.worldHelper;\r\n\r\n\r\n        if (wh != null) {\r\n            if (wh.width != breite || wh.height != höhe) {\r\n\r\n                let ratio: number = Math.round(höhe / breite * 100);\r\n                wh.$containerOuter.css('padding-bottom', ratio + \"%\");\r\n\r\n                wh.stage.projectionTransform.scale(wh.width / breite, wh.width / höhe);\r\n\r\n                this.module.main.getRightDiv()?.adjustWidthToWorld();\r\n\r\n            }\r\n\r\n            return wh;\r\n\r\n        } else {\r\n\r\n            return new WorldHelper(breite, höhe, this.module, worldObject);\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport type MouseListenerShapeData = {\r\n    shapeHelper: ShapeHelper,\r\n    types: { [type: string]: boolean },\r\n    methods: { [type: string]: Method }\r\n}\r\n\r\nexport type MouseListenerData = {\r\n    listener: RuntimeObject,\r\n    types: { [type: string]: boolean },\r\n    methods: { [type: string]: Method }\r\n}\r\n\r\nexport type ActorData = {\r\n    actorHelper: ActorHelper,\r\n    method: Method\r\n}\r\n\r\n/**\r\n * @see https://javascript.plainenglish.io/inside-pixijs-projection-system-897872a3dc17\r\n */\r\nclass WorldContainer extends PIXI.Container {\r\n\r\n    projectionTransform: PIXI.Matrix;\r\n\r\n    constructor(public sourceFrame: PIXI.Rectangle, public destinationFrame: PIXI.Rectangle) {\r\n        super();\r\n        this.projectionTransform = new PIXI.Matrix();\r\n    }\r\n\r\n    render(renderer: PIXI.Renderer) {\r\n\r\n        renderer.projection.projectionMatrix.identity();\r\n        renderer.projection.transform = this.projectionTransform;\r\n        renderer.renderTexture.bind(\r\n            renderer.renderTexture.current,\r\n            this.sourceFrame,\r\n            this.destinationFrame,\r\n        );\r\n        super.render(renderer);\r\n        renderer.batch.flush();\r\n\r\n        renderer.batch.flush();\r\n        renderer.projection.projectionMatrix.identity();\r\n        renderer.projection.transform = null;\r\n        renderer.renderTexture.bind(null);\r\n    }\r\n}\r\n\r\n\r\nexport class WorldHelper {\r\n\r\n    $containerOuter: JQuery<HTMLElement>;\r\n    $containerInner: JQuery<HTMLElement>;\r\n    app: PIXI.Application;\r\n    stage: WorldContainer;\r\n\r\n    actActors: ActorData[] = [];\r\n    keyPressedActors: ActorData[] = [];\r\n    keyUpActors: ActorData[] = [];\r\n    keyDownActors: ActorData[] = [];\r\n    actorHelpersToDestroy: ActorHelper[] = [];\r\n\r\n    mouseListenerShapes: MouseListenerShapeData[] = [];\r\n    mouseListeners: MouseListenerData[] = [];\r\n\r\n    interpreter: Interpreter;\r\n    actorsFinished: boolean = true;\r\n    summedDelta: number = 0;\r\n\r\n    defaultGroup: GroupHelper;\r\n\r\n    initialWidth: number;\r\n    initialHeight: number;\r\n\r\n    $coordinateDiv: JQuery<HTMLElement>;\r\n\r\n    public scaledTextures: { [name: string]: PIXI.Texture } = {};\r\n\r\n\r\n    shapes: ShapeHelper[] = [];     // all shapes incl. groups that aren't part of a group\r\n\r\n    currentLeft: number;\r\n    currentTop: number;\r\n    currentWidth: number;\r\n    currentHeight: number;\r\n\r\n    shapesNotAffectedByWorldTransforms: ShapeHelper[] = [];\r\n\r\n    globalScale: number;\r\n\r\n    robotWorldHelper: any;\r\n\r\n    tickerFunction: (t: number) => void;\r\n\r\n    clearActorLists() {\r\n        this.actActors = [];\r\n        this.keyPressedActors = [];\r\n        this.keyUpActors = [];\r\n        this.keyDownActors = [];\r\n    }\r\n\r\n    constructor(public width: number, public height: number, private module: Module, public world: RuntimeObject) {\r\n\r\n        PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;\r\n        PIXI.settings.TARGET_FPMS = 30.0 / 1000.0;\r\n\r\n        this.globalScale = 1;\r\n\r\n        while (height > 1000 || width > 2000) {\r\n            this.globalScale *= 2;\r\n            height /= 2;\r\n            width /= 2;\r\n        }\r\n\r\n        this.initialHeight = this.height;\r\n        this.initialWidth = this.width;\r\n\r\n        this.currentLeft = 0;\r\n        this.currentTop = 0;\r\n        this.currentWidth = this.width;\r\n        this.currentHeight = this.height;\r\n\r\n        this.interpreter = this.module?.main?.getInterpreter();\r\n\r\n        if (this.interpreter.processingHelper != null) {\r\n            this.interpreter.throwException(\"Die herkömmliche Grafikausgabe kann nicht zusammen mit Processing genutzt werden.\");\r\n        }\r\n\r\n        if (this.interpreter.worldHelper != null) {\r\n            this.interpreter.throwException(\"Es darf nur ein World-Objekt instanziert werden.\");\r\n        }\r\n\r\n        this.interpreter.worldHelper = this;\r\n\r\n        let $graphicsDiv = this.module.main.getInterpreter().printManager.getGraphicsDiv();\r\n        this.$coordinateDiv = this.module.main.getRightDiv().$rightDiv.find(\".jo_coordinates\");\r\n\r\n        let f = () => {\r\n            let $jo_tabs = $graphicsDiv.parents(\".jo_tabs\");\r\n            if ($jo_tabs.length == 0) {\r\n                $jo_tabs = $graphicsDiv.parents(\".joe_rightDivInner\");\r\n            }\r\n            let maxWidth: number = $jo_tabs.width();\r\n            let maxHeight: number = $jo_tabs.height();\r\n\r\n            if (height / width > maxHeight / maxWidth) {\r\n                $graphicsDiv.css({\r\n                    'width': width / height * maxHeight + \"px\",\r\n                    'height': maxHeight + \"px\",\r\n                })\r\n            } else {\r\n                $graphicsDiv.css({\r\n                    'height': height / width * maxWidth + \"px\",\r\n                    'width': maxWidth + \"px\",\r\n                })\r\n            }\r\n        };\r\n\r\n        $graphicsDiv.off('sizeChanged');\r\n        $graphicsDiv.on('sizeChanged', f);\r\n\r\n        f();\r\n\r\n        this.$containerOuter = jQuery('<div></div>');\r\n        this.$containerInner = jQuery('<div></div>');\r\n        this.$containerOuter.append(this.$containerInner);\r\n\r\n        $graphicsDiv.append(this.$containerOuter);\r\n\r\n        $graphicsDiv.show();\r\n\r\n        $graphicsDiv[0].oncontextmenu = function (e) {\r\n            e.preventDefault();\r\n        };\r\n\r\n        if (this.module.main.pixiApp) {\r\n            this.app = this.module.main.pixiApp;\r\n            this.app.renderer.resize(width, height);\r\n            this.app.renderer.backgroundColor = 0x0;\r\n        } else {\r\n            this.app = new PIXI.Application({\r\n                antialias: true,\r\n                width: width, height: height,\r\n                //resizeTo: $containerInner[0]\r\n            });\r\n            this.module.main.pixiApp = this.app;\r\n        }\r\n\r\n        let that = this;\r\n\r\n        this.tickerFunction = (delta) => {\r\n            that.tick(PIXI.Ticker.shared.elapsedMS);\r\n        };\r\n\r\n        this.app.ticker.add(this.tickerFunction);\r\n        this.app.ticker.maxFPS = 30;\r\n\r\n        this.interpreter.timerExtern = true;\r\n\r\n        let sourceFrame = new PIXI.Rectangle(0, 0, this.width, this.height);\r\n        let destinationFrame = new PIXI.Rectangle(0, 0, width, height);\r\n        this.stage = new WorldContainer(sourceFrame, destinationFrame);\r\n        this.stage.projectionTransform = new PIXI.Matrix();\r\n\r\n        this.app.stage.addChild(this.stage);\r\n\r\n        this.$containerInner.append(this.app.view);\r\n\r\n        this.interpreter.keyboardTool.keyPressedCallbacks.push((key) => {\r\n            for (let kpa of that.keyPressedActors) {\r\n\r\n                that.runActorWhenKeyEvent(kpa, key);\r\n\r\n            }\r\n        });\r\n\r\n        this.interpreter.keyboardTool.keyUpCallbacks.push((key) => {\r\n            for (let kpa of that.keyUpActors) {\r\n\r\n                that.runActorWhenKeyEvent(kpa, key);\r\n\r\n            }\r\n        });\r\n\r\n        this.interpreter.keyboardTool.keyDownCallbacks.push((key) => {\r\n            for (let kpa of that.keyDownActors) {\r\n\r\n                that.runActorWhenKeyEvent(kpa, key);\r\n\r\n            }\r\n        });\r\n\r\n\r\n        for (let listenerType of [\"mouseup\", \"mousedown\", \"mousemove\", \"mouseenter\", \"mouseleave\"]) {\r\n\r\n            let eventType = listenerType;\r\n            if (window.PointerEvent) {\r\n                eventType = eventType.replace('mouse', 'pointer');\r\n            }\r\n\r\n            this.$containerInner.on(eventType, (e) => {\r\n                let x = width * e.offsetX / this.$containerInner.width();\r\n                let y = height * e.offsetY / this.$containerInner.height();\r\n\r\n                let p = new PIXI.Point(x * this.globalScale, y * this.globalScale);\r\n                this.stage.projectionTransform.applyInverse(p, p);\r\n                x = p.x;\r\n                y = p.y;\r\n\r\n                that.onMouseEvent(listenerType, x, y, e.button);\r\n\r\n                for (let listener of this.mouseListeners) {\r\n                    if (listener.types[listenerType] != null) {\r\n                        this.invokeMouseListener(listener, listenerType, x, y, e.button);\r\n                    }\r\n                }\r\n\r\n                if (listenerType == \"mousedown\") {\r\n                    let gngEreignisbehandlung = this.interpreter.gngEreignisbehandlungHelper;\r\n                    if (gngEreignisbehandlung != null) {\r\n                        gngEreignisbehandlung.handleMouseClickedEvent(x, y);\r\n                    }\r\n                }\r\n\r\n            });\r\n        }\r\n\r\n        let $coordinateDiv = this.$coordinateDiv;\r\n\r\n        let mousePointer = window.PointerEvent ? \"pointer\" : \"mouse\";\r\n\r\n        this.$containerInner.on(mousePointer + \"move\", (e) => {\r\n            let x = width * e.offsetX / this.$containerInner.width();\r\n            let y = height * e.offsetY / this.$containerInner.height();\r\n\r\n            let p = new PIXI.Point(x * this.globalScale, y * this.globalScale);\r\n            this.stage.projectionTransform.applyInverse(p, p);\r\n            x = Math.round(p.x);\r\n            y = Math.round(p.y);\r\n            $coordinateDiv.text(`(${x}/${y})`);\r\n        });\r\n\r\n        this.$containerInner.on(mousePointer + \"enter\", (e) => {\r\n            $coordinateDiv.show();\r\n        });\r\n\r\n        this.$containerInner.on(mousePointer + \"leave\", (e) => {\r\n            $coordinateDiv.hide();\r\n        });\r\n\r\n        this.module.main.getRightDiv()?.adjustWidthToWorld();\r\n\r\n    }\r\n\r\n    computeCurrentWorldBounds() {\r\n\r\n        let p1: PIXI.Point = new PIXI.Point(0, 0);\r\n        this.stage.projectionTransform.applyInverse(p1, p1);\r\n\r\n        let p2: PIXI.Point = new PIXI.Point(this.initialWidth, this.initialHeight);\r\n        this.stage.projectionTransform.applyInverse(p2, p2);\r\n\r\n        this.currentLeft = p1.x;\r\n        this.currentTop = p1.y;\r\n        this.currentWidth = Math.abs(p2.x - p1.x);\r\n        this.currentHeight = Math.abs(p2.y - p1.y);\r\n    }\r\n\r\n\r\n    hasActors(): boolean {\r\n        return this.actActors.length > 0 || this.keyPressedActors.length > 0 || this.keyUpActors.length > 0\r\n            || this.keyDownActors.length > 0 || this.mouseListeners.length > 0 || this.mouseListenerShapes.length > 0;\r\n    }\r\n\r\n    setAllHitpolygonsDirty() {\r\n        for (let shape of this.shapes) {\r\n            shape.setHitPolygonDirty(true);\r\n        }\r\n    }\r\n\r\n    setCursor(cursor: string) {\r\n        this.$containerInner.css('cursor', cursor);\r\n    }\r\n\r\n\r\n    actorsNotFinished: number = 0;\r\n    ticks: number = 0;\r\n    deltaSum: number = 0;\r\n\r\n    spriteAnimations: SpriteHelper[] = [];\r\n\r\n    tick(delta: any) {\r\n\r\n        if (this.interpreter != null) {\r\n            switch (this.interpreter.state) {\r\n                case InterpreterState.running:\r\n                    this.summedDelta += delta;\r\n                    for (let spriteHelper of this.spriteAnimations) {\r\n                        spriteHelper.tick(delta);\r\n                    }\r\n\r\n                    if (!this.actorsFinished) {\r\n                        this.actorsNotFinished++;\r\n                        break;\r\n                    }\r\n\r\n                    if (this.interpreter.pauseUntil != null) {\r\n                        break;\r\n                    }\r\n\r\n                    let first: boolean = true;\r\n\r\n                    for (let actorData of this.actActors) {\r\n\r\n                        let actorHelper = actorData.actorHelper;\r\n                        if (actorHelper.timerPaused || actorHelper.isDestroyed) continue;\r\n\r\n                        let program = actorData.method?.program;\r\n                        this.runActor(first, actorData, this.summedDelta);\r\n                        if (program != null && !actorData.actorHelper.isDestroyed) {\r\n                            first = false;\r\n                            this.actorsFinished = false;\r\n                        }\r\n                    }\r\n                    break;\r\n                case InterpreterState.done:\r\n                case InterpreterState.error:\r\n                case InterpreterState.not_initialized:\r\n                    this.clearActorLists();\r\n                    break;\r\n            }\r\n\r\n\r\n            this.summedDelta = 0;\r\n\r\n            if (this.interpreter.state == InterpreterState.running) {\r\n                if (this.actActors.length > 0) {\r\n                    this.interpreter.timerFunction(33.33, true, 0.5);\r\n                    //@ts-ignore\r\n                    if (this.interpreter.state == InterpreterState.running) {\r\n                        this.interpreter.timerStopped = false;\r\n                        this.interpreter.timerFunction(33.33, false, 0.08);\r\n                    }\r\n                } else {\r\n                    this.interpreter.timerFunction(33.33, false, 0.7);\r\n                }\r\n            }\r\n        }\r\n\r\n        while (this.actorHelpersToDestroy.length > 0) {\r\n\r\n            let actorHelper = this.actorHelpersToDestroy.pop();\r\n\r\n            for (let actorList of [this.keyPressedActors, this.keyUpActors, this.keyDownActors]) {\r\n                for (let i = 0; i < actorList.length; i++) {\r\n                    if (actorList[i].actorHelper === actorHelper) {\r\n                        actorList.splice(i, 1);\r\n                        i--;\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            for (let i = 0; i < this.mouseListenerShapes.length; i++) {\r\n                if (this.mouseListenerShapes[i].shapeHelper === actorHelper) {\r\n                    this.mouseListenerShapes.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < this.actActors.length; i++) {\r\n                if (this.actActors[i].actorHelper === actorHelper) {\r\n                    this.actActors.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            let displayObject = (<ShapeHelper>actorHelper).displayObject;\r\n            if (displayObject != null) {\r\n                displayObject.destroy();\r\n                (<ShapeHelper>actorHelper).displayObject = null;\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    setBackgroundColor(color: string | number | RuntimeObject) {\r\n\r\n        if (color instanceof RuntimeObject) {\r\n            color = (<ColorClassIntrinsicData>(color.intrinsicData)).hex;\r\n        }\r\n\r\n        if (typeof color == \"string\") {\r\n            let c = ColorHelper.parseColorToOpenGL(color);\r\n            this.app.renderer.backgroundColor = c.color;\r\n        } else {\r\n            this.app.renderer.backgroundColor = color;\r\n        }\r\n\r\n    }\r\n\r\n    runActorWhenKeyEvent(actorData: ActorData, key: string) {\r\n\r\n        let program = actorData.method?.program;\r\n        let invoke = actorData.method?.invoke;\r\n\r\n        let rto = actorData.actorHelper.runtimeObject;\r\n\r\n        let stackElements: Value[] = [\r\n            {\r\n                type: rto.class,\r\n                value: rto\r\n            },\r\n            {\r\n                type: stringPrimitiveType,\r\n                value: key\r\n            }\r\n        ];\r\n\r\n        if (program != null) {\r\n            this.interpreter.runTimer(actorData.method, stackElements, null, false);\r\n        } else if (invoke != null) {\r\n            invoke([]);\r\n        }\r\n    }\r\n\r\n\r\n    runActor(first: boolean, actorData: ActorData, delta: number) {\r\n\r\n        let program = actorData.method?.program;\r\n        let invoke = actorData.method?.invoke;\r\n\r\n        let rto = actorData.actorHelper.runtimeObject;\r\n\r\n        let stackElements: Value[] = [\r\n            {\r\n                type: rto.class,\r\n                value: rto\r\n            },\r\n        ];\r\n\r\n        if (actorData.method.getParameterCount() > 0) {\r\n            stackElements.push(\r\n                {\r\n                    type: doublePrimitiveType,\r\n                    value: delta\r\n                }\r\n\r\n            );\r\n        }\r\n\r\n        let that = this;\r\n\r\n        if (program != null) {\r\n            this.interpreter.runTimer(actorData.method, stackElements, first ? (interpreter) => {\r\n                that.actorsFinished = true;\r\n                interpreter.timerStopped = true;\r\n            } : null, true);\r\n        } else if (invoke != null) {\r\n            invoke([]);\r\n        }\r\n    }\r\n\r\n    cacheAsBitmap() {\r\n\r\n        let hasRobot = this.robotWorldHelper != null;\r\n\r\n        this.mouseListenerShapes = [];\r\n\r\n        let scaleMin = 1.0;\r\n        if (this.currentWidth * this.currentHeight > 2500000) scaleMin = Math.sqrt(2500000 / (this.currentWidth * this.currentHeight));\r\n        if (this.currentWidth * this.currentHeight < 1024 * 1024) scaleMin = Math.sqrt(1024 * 1024 / (this.currentWidth * this.currentHeight));\r\n\r\n        const brt = new PIXI.BaseRenderTexture(\r\n            {\r\n                scaleMode: PIXI.SCALE_MODES.LINEAR,\r\n                width: Math.round(this.currentWidth * scaleMin),\r\n                height: Math.round(this.currentHeight * scaleMin)\r\n            }\r\n        );\r\n        let rt: PIXI.RenderTexture = new PIXI.RenderTexture(brt);\r\n\r\n        let transform = new PIXI.Matrix().scale(scaleMin, scaleMin);\r\n\r\n        setTimeout(() => {\r\n            if (!hasRobot) {\r\n                this.app.renderer.render(this.stage, {\r\n                    renderTexture: rt,\r\n                    transform: transform\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    this.stage.children.forEach(c => c.destroy());\r\n                    this.stage.removeChildren();\r\n\r\n                    let sprite = new PIXI.Sprite(rt);\r\n                    sprite.localTransform.scale(this.globalScale, this.globalScale);\r\n                    // debugger;\r\n                    // sprite.localTransform.translate(0, rt.height);\r\n                    //@ts-ignore\r\n                    sprite.transform.onChange();\r\n                    // this.stage.projectionTransform = new PIXI.Matrix().scale(1, -1).translate(0, this.currentHeight);\r\n                    this.stage.projectionTransform = new PIXI.Matrix();\r\n                    this.stage.addChild(sprite);\r\n\r\n                }, 300);\r\n            }\r\n        }, 150);   // necessary to await Turtle's deferred rendering\r\n\r\n    }\r\n\r\n    destroyWorld() {\r\n        for (let listenerType of [\"mouseup\", \"mousedown\", \"mousemove\", \"mouseenter\", \"mouseleave\"]) {\r\n            this.$containerInner.off(listenerType);\r\n        }\r\n        this.spriteAnimations = [];\r\n        this.app.ticker.remove(this.tickerFunction);\r\n\r\n        this.app.stage.children.forEach(c => c.destroy());\r\n        this.app.stage.removeChildren();\r\n\r\n        if (this.robotWorldHelper != null) {\r\n            this.robotWorldHelper.destroy();\r\n            this.robotWorldHelper = null;\r\n        }\r\n\r\n        jQuery(this.app.view).detach();\r\n\r\n        this.$containerOuter.remove();\r\n        this.module.main.getInterpreter().printManager.getGraphicsDiv().hide();\r\n        this.interpreter.timerExtern = false;\r\n        this.interpreter.worldHelper = null;\r\n        this.$coordinateDiv.hide();\r\n\r\n        FilledShapeDefaults.initDefaultValues();\r\n    }\r\n\r\n    onMouseEvent(listenerType: string, x: number, y: number, button: number) {\r\n\r\n        switch (listenerType) {\r\n            case \"mousedown\":\r\n            case \"mouseup\":\r\n                for (let listener of this.mouseListenerShapes) {\r\n                    let shapeHelper: ShapeHelper = listener.shapeHelper;\r\n\r\n                    if (listener.types[listenerType] != null && (shapeHelper.containsPoint(x, y) || shapeHelper.trackMouseMove)) {\r\n                        this.invokeShapeMouseListener(listener, listenerType, x, y, button);\r\n                    }\r\n\r\n                }\r\n\r\n                break;\r\n            case \"mouseenter\":\r\n                for (let listener of this.mouseListenerShapes) {\r\n                    let shapeHelper: ShapeHelper = listener.shapeHelper;\r\n\r\n                    if (listener.types[listenerType] != null && shapeHelper.containsPoint(x, y) && !shapeHelper.mouseLastSeenInsideObject) {\r\n                        this.invokeShapeMouseListener(listener, listenerType, x, y, button, () => {\r\n                            shapeHelper.mouseLastSeenInsideObject = true;\r\n                        });\r\n                    }\r\n\r\n                }\r\n                break;\r\n            case \"mouseleave\":\r\n                for (let listener of this.mouseListenerShapes) {\r\n                    let shapeHelper: ShapeHelper = listener.shapeHelper;\r\n\r\n                    if (listener.types[listenerType] != null && shapeHelper.mouseLastSeenInsideObject) {\r\n                        this.invokeShapeMouseListener(listener, listenerType, x, y, button, () => {\r\n                            shapeHelper.mouseLastSeenInsideObject = false;\r\n                        });\r\n                    }\r\n\r\n                }\r\n                break;\r\n            case \"mousemove\":\r\n                for (let listener of this.mouseListenerShapes) {\r\n                    let shapeHelper: ShapeHelper = listener.shapeHelper;\r\n\r\n                    if (listener.types[\"mousemove\"] != null ||\r\n                        (listener.types[\"mouseenter\"] != null && !shapeHelper.mouseLastSeenInsideObject) ||\r\n                        (listener.types[\"mouseleave\"] != null && shapeHelper.mouseLastSeenInsideObject)\r\n                    ) {\r\n                        let containsPoint = shapeHelper.containsPoint(x, y);\r\n                        if ((shapeHelper.trackMouseMove || containsPoint) && listener.types[\"mousemove\"] != null) {\r\n                            this.invokeShapeMouseListener(listener, \"mousemove\", x, y, button);\r\n                        }\r\n                        if (containsPoint && listener.types[\"mouseenter\"] != null && !shapeHelper.mouseLastSeenInsideObject) {\r\n                            this.invokeShapeMouseListener(listener, \"mouseenter\", x, y, button, () => {\r\n                                shapeHelper.mouseLastSeenInsideObject = true;\r\n                            });\r\n                        }\r\n                        if (!containsPoint && listener.types[\"mouseleave\"] != null && shapeHelper.mouseLastSeenInsideObject) {\r\n                            this.invokeShapeMouseListener(listener, \"mouseleave\", x, y, button, () => {\r\n                                shapeHelper.mouseLastSeenInsideObject = false;\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    invokeShapeMouseListener(listener: MouseListenerShapeData, listenerType: string,\r\n        x: number, y: number, button: number, callback?: () => void) {\r\n\r\n        if (!listener.shapeHelper.reactToMouseEventsWhenInvisible &&\r\n            !listener.shapeHelper.displayObject.visible) return;\r\n\r\n        let method = listener.methods[listenerType];\r\n        let program = method.program;\r\n        let invoke = method.invoke;\r\n\r\n        let rto = listener.shapeHelper.runtimeObject;\r\n\r\n        let stackElements: Value[] = [\r\n            {\r\n                type: rto.class,\r\n                value: rto\r\n            },\r\n            {\r\n                type: doublePrimitiveType,\r\n                value: x\r\n            },\r\n            {\r\n                type: doublePrimitiveType,\r\n                value: y\r\n            }\r\n        ];\r\n\r\n        if (listenerType != \"mousemove\" && listenerType != \"mouseenter\" && listenerType != \"mouseleave\") {\r\n            stackElements.push(\r\n                {\r\n                    type: intPrimitiveType,\r\n                    value: button\r\n                });\r\n        }\r\n\r\n        if (program != null) {\r\n            this.interpreter.runTimer(method, stackElements, callback, false);\r\n        } else if (invoke != null) {\r\n            invoke([]);\r\n        }\r\n\r\n    }\r\n\r\n    addMouseListener(listener: RuntimeObject) {\r\n\r\n        /*\r\n            If a shape is registered as MouseListener of the world-object, it gets all mouse-events twice. \r\n            => Deregister shape as mouseListenerShape and register it as mouse listener for the world object.\r\n        */\r\n        let index: number = this.mouseListenerShapes.findIndex((mls) => { return mls.shapeHelper.runtimeObject == listener });\r\n        if (index >= 0) {\r\n            this.mouseListenerShapes.splice(index, 1);\r\n        }\r\n\r\n        let listenerTypes = [\r\n            { identifier: \"MouseUp\", signature: \"(double, double, int)\" },\r\n            { identifier: \"MouseDown\", signature: \"(double, double, int)\" },\r\n            { identifier: \"MouseMove\", signature: \"(double, double)\" },\r\n            { identifier: \"MouseEnter\", signature: \"(double, double)\" },\r\n            { identifier: \"MouseLeave\", signature: \"(double, double)\" },\r\n        ];\r\n\r\n        let sd: MouseListenerData = null;\r\n\r\n        for (let lt of listenerTypes) {\r\n            let method: Method = (<Klass>listener.class).getMethodBySignature(\"on\" + lt.identifier + lt.signature);\r\n\r\n            if (method?.program != null && method.program.statements.length > 2 || method?.invoke != null) {\r\n\r\n                if (sd == null) {\r\n                    sd = {\r\n                        listener: listener,\r\n                        types: {},\r\n                        methods: {}\r\n                    };\r\n                    this.mouseListeners.push(sd);\r\n                }\r\n\r\n                sd.types[lt.identifier.toLowerCase()] = true;\r\n                sd.methods[lt.identifier.toLowerCase()] = method;\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    invokeMouseListener(listener: MouseListenerData, listenerType: string,\r\n        x: number, y: number, button: number, callback?: () => void) {\r\n\r\n        let method = listener.methods[listenerType];\r\n        let program = method.program;\r\n        let invoke = method.invoke;\r\n\r\n        let rto = listener.listener;\r\n\r\n        let stackElements: Value[] = [\r\n            {\r\n                type: rto.class,\r\n                value: rto\r\n            },\r\n            {\r\n                type: doublePrimitiveType,\r\n                value: x\r\n            },\r\n            {\r\n                type: doublePrimitiveType,\r\n                value: y\r\n            }\r\n        ];\r\n\r\n        if (listenerType != \"mousemove\" && listenerType != \"mouseenter\" && listenerType != \"mouseleave\") {\r\n            stackElements.push(\r\n                {\r\n                    type: intPrimitiveType,\r\n                    value: button\r\n                });\r\n        }\r\n\r\n        if (program != null) {\r\n            this.interpreter.runTimer(method, stackElements, callback, false);\r\n        } else if (invoke != null) {\r\n            invoke([]);\r\n        }\r\n\r\n    }\r\n\r\n    getDefaultGroup(): RuntimeObject {\r\n        return this.defaultGroup?.runtimeObject;\r\n    }\r\n\r\n}","import { Interface, Klass } from \"../../compiler/types/Class.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { voidPrimitiveType, stringPrimitiveType, booleanPrimitiveType, doublePrimitiveType, intPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { WorldHelper, WorldClass } from \"./World.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\n\r\nexport class Actor extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Actor\", module, \"Abstrakte Klasse mit überschreibbaren Methoden act (zur Implementierung eines Timers) und onKeyTyped, onKeyUp usw. zur Entgegennahme von Tastaturereignissen\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n        this.isAbstract = true;\r\n\r\n        let methodSignatures: { signature: string, actorListIdentifier: string }[] = [\r\n            { signature: \"onKeyTyped(String)\", actorListIdentifier: \"keyPressedActors\" },\r\n            { signature: \"onKeyUp(String)\", actorListIdentifier: \"keyUpActors\" },\r\n            { signature: \"onKeyDown(String)\", actorListIdentifier: \"keyDownActors\" },\r\n            { signature: \"act()\", actorListIdentifier: \"actActors\" },\r\n            { signature: \"act(double)\", actorListIdentifier: \"actActors\" },\r\n        ];\r\n\r\n        this.postConstructorCallbacks = [\r\n            (r: RuntimeObject) => {\r\n\r\n                for (let ms of methodSignatures) {\r\n                    let method: Method = (<Klass>r.class).getMethodBySignature(ms.signature);\r\n\r\n                    if (method?.program != null \r\n                        // || method?.invoke != null\r\n                        ) {\r\n                        let ah: ActorHelper = <ActorHelper>r.intrinsicData['Actor'];\r\n                        ah.worldHelper[ms.actorListIdentifier].push({\r\n                            actorHelper: ah,\r\n                            method: method\r\n                        })\r\n                    }\r\n                }\r\n\r\n            }\r\n        ];\r\n\r\n        this.addMethod(new Method(\"Actor\", new Parameterlist([\r\n            // { identifier: \"deltaTimeInMs\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        // ]), this,\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let actorHelper = new ActorHelper(module.main.getInterpreter(), o);\r\n\r\n                o.intrinsicData[\"Actor\"] = actorHelper;\r\n\r\n                // return o;\r\n\r\n            },  // no implementation!\r\n            false, false, \"Der Konstruktor registriert den Actor beim Grafikfenster\", true));\r\n\r\n        this.addMethod(new Method(\"destroy\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ActorHelper = o.intrinsicData[\"Actor\"];\r\n                sh.destroy();\r\n\r\n            }, false, false, \"Vernichtet das Grafikobjekt. Falls es in einem Group-Objekt enthalten ist, wird es vor dem Vernichten automatisch aus diesem entfernt.\", false));\r\n\r\n        this.addMethod(new Method(\"isKeyUp\", new Parameterlist([\r\n            { identifier: \"key\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let key: string = parameters[1].value;\r\n                let sh: ActorHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                return !sh.isKeyDown(key);\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Benutzer die gegebenen Taste gerade NICHT drückt. Als Taste kann auch bsw. [shift]+m angegeben werden. Die Angabe von Sondertasten (Enter, ArrowUp, ArrowLeft, ...) ist auch möglich.\", false));\r\n\r\n        this.addMethod(new Method(\"isKeyDown\", new Parameterlist([\r\n            { identifier: \"key\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let key: string = parameters[1].value;\r\n                let sh: ActorHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                return sh.isKeyDown(key);\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Benutzer die gegebenen Taste gerade drückt. Als Taste kann auch bsw. [shift]+m angegeben werden. Die Angabe von Sondertasten (Enter, ArrowUp, ArrowLeft, ...) ist auch möglich.\", false));\r\n\r\n        this.addMethod(new Method(\"isGamepadButtonDown\", new Parameterlist([\r\n            { identifier: \"gamepadIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"buttonIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let gamepadIndex: number = parameters[1].value;\r\n                let buttonIndex: number = parameters[2].value;\r\n\r\n                return module.main.getInterpreter().gamepadTool.isGamepadButtonPressed(gamepadIndex, buttonIndex);\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Button buttonIndex des Gamepads GamepadIndex gedrückt ist.\", false));\r\n\r\n        this.addMethod(new Method(\"isGamepadConnected\", new Parameterlist([\r\n            { identifier: \"gamepadIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let gamepadIndex: number = parameters[1].value;\r\n\r\n                return module.main.getInterpreter().gamepadTool.isGamepadConnected(gamepadIndex);\r\n\r\n            }, false, false, \"Gibt true zurück, falls das Gamepad mit dem übergebenen Index angeschlossen ist. VORSICHT: Das erste Gamepad hat Index 0.\", false));\r\n\r\n        this.addMethod(new Method(\"getGamepadAxisValue\", new Parameterlist([\r\n            { identifier: \"gamepadIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"axisIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let gamepadIndex: number = parameters[1].value;\r\n                let axisIndex: number = parameters[2].value;\r\n\r\n                return module.main.getInterpreter().gamepadTool.getGamepadAxisValue(gamepadIndex, axisIndex);\r\n\r\n            }, false, false, \"Gibt den Wert des Gamepad-Steuerknüppels mit Index axisIndex zurück.\", false));\r\n\r\n        this.addMethod(new Method(\"isDestroyed\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ActorHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                return sh.isDestroyed;\r\n\r\n            }, false, false, \"Gibt true zurück, falls das Objekt bereits durch die Methode destroy() zerstört wurde.\", false));\r\n\r\n\r\n        this.addMethod(new Method(\"getWorld\", new Parameterlist([\r\n        ]), module.typeStore.getType(\"World\"),\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ActorHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                let interpreter = module.main.getInterpreter();\r\n                let worldHelper = interpreter.worldHelper;\r\n                if (worldHelper == null) {\r\n                    let w: RuntimeObject = new RuntimeObject(<Klass>interpreter.moduleStore.getType(\"World\").type);\r\n                    worldHelper = new WorldHelper(800, 600, interpreter.moduleStore.getModule(\"Base Module\"), w);\r\n                }        \r\n                return worldHelper.world;\r\n\r\n            }, false, false, \"Gibt das Welt-Objekt zurück.\", false));\r\n\r\n        this.addMethod(new Method(\"stopActing\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: ActorHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                // ah.timerPaused = true;\r\n                ah.setTimerPaused(true);\r\n\r\n                return;\r\n\r\n            }, false, false, \"Stoppt den 30-mal pro Sekunde erfolgenden Aufruf der Methode act für dieses Objekt.\", false));\r\n\r\n            this.addMethod(new Method(\"restartActing\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ActorHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                // sh.timerPaused = false;\r\n                sh.setTimerPaused(false);\r\n\r\n            }, false, false, \"Startet den 30-mal pro Sekunde erfolgenden Aufruf der Methode act für dieses Objekt erneut.\", false));\r\n\r\n            this.addMethod(new Method(\"isActing\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ActorHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                return !sh.timerPaused;\r\n\r\n            }, false, false, \"Gibt true zurück, wenn der periodische Aufruf der Methode act weiterhin erfolgt.\", false));\r\n\r\n        this.addMethod(new Method(\"act\", new Parameterlist([\r\n            { identifier: \"deltaTime\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), voidPrimitiveType,\r\n            null, // no statements!\r\n            false, false, \"Wird ca. 30-mal pro Sekunde aufgerufen\", false));\r\n\r\n        this.addMethod(new Method(\"act\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            null,\r\n            false, false, \"Wird ca. 30-mal pro Sekunde aufgerufen\", false));\r\n\r\n        this.addMethod(new Method(\"onKeyTyped\", new Parameterlist([\r\n            { identifier: \"key\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), voidPrimitiveType,\r\n            () => {\r\n                \r\n            },\r\n            false, false, \"Wird aufgerufen, nachdem der Benutzer eine Taste gedrückt und wieder losgelassen hat.\", false));\r\n\r\n        this.addMethod(new Method(\"onKeyDown\", new Parameterlist([\r\n            { identifier: \"key\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), voidPrimitiveType,\r\n            () => {\r\n                \r\n            },\r\n            false, false, \"Wird aufgerufen, nachdem der Benutzer eine Taste gedrückt hat.\", false));\r\n\r\n        this.addMethod(new Method(\"onKeyUp\", new Parameterlist([\r\n            { identifier: \"key\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), voidPrimitiveType,\r\n            () => {\r\n                \r\n            },\r\n            false, false, \"Wird aufgerufen, nachdem der Benutzer eine Taste losgelassen hat.\", false));\r\n\r\n\r\n    }\r\n\r\n    registerWorldType() {\r\n        this.methods.filter(m => m.identifier == \"getWorld\")[0].returnType = this.module.typeStore.getType(\"World\");\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class ActorHelper {\r\n\r\n    worldHelper: WorldHelper;\r\n    isDestroyed: boolean = false;\r\n\r\n    timerPaused: boolean = false;\r\n\r\n    constructor(interpreter: Interpreter, public runtimeObject: RuntimeObject) {\r\n        let worldHelper = interpreter.worldHelper;\r\n        if (worldHelper == null) {\r\n            let w: RuntimeObject = new RuntimeObject(<Klass>interpreter.moduleStore.getType(\"World\").type);\r\n            worldHelper = new WorldHelper(800, 600, interpreter.moduleStore.getModule(\"Base Module\"), w);\r\n            // worldHelper = new WorldHelper(800, 600, interpreter.main.currentWorkspace.moduleStore.getModule(\"Base Module\"), w);\r\n            w.intrinsicData[\"World\"] = worldHelper;\r\n            if(runtimeObject.intrinsicData[\"isGNG\"]){\r\n                worldHelper.setBackgroundColor(\"#e6e6e6\");\r\n            }\r\n        }\r\n        this.worldHelper = worldHelper;\r\n    }\r\n\r\n    setTimerPaused(tp: boolean) {\r\n        this.timerPaused = tp;\r\n    }\r\n\r\n\r\n    isKeyDown(key: string): boolean {\r\n        return this.worldHelper.interpreter.keyboardTool.isPressed(key);\r\n    }\r\n\r\n    destroy() {\r\n        this.isDestroyed = true;\r\n        this.worldHelper.actorHelpersToDestroy.push(this);\r\n    }\r\n\r\n    testdestroyed(method: string) {\r\n        if (this.isDestroyed) {\r\n            this.worldHelper.interpreter.throwException(\"Es wurde die Methode \" + method + \" eines bereits mit destroy() zerstörten Grafikobjekts aufgerufen.\");\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n}\r\n\r\n","import { Enum } from \"../../compiler/types/Enum.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { TokenType } from \"../../compiler/lexer/Token.js\";\r\n\r\nexport class AlignmentClass extends Enum {\r\n\r\n    constructor(module: Module){\r\n        super(\"Alignment\", module, [\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"left\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"center\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"right\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"top\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"bottom\"\r\n            },\r\n        ]);\r\n\r\n        this.documentation = \"Mögliche Ausrichtungen\"\r\n    }\r\n\r\n}","\r\nexport type Punkt = {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\nexport function gleich(a: number, b: number) {\r\n\r\n    return Math.abs(a - b) < 0.000000001;\r\n\r\n}\r\n\r\nexport function drehenUm(drehpunkt: Punkt, punkt: Punkt, winkelInGrad: number): Punkt {\r\n\r\n    let w = winkelInGrad / 180 * Math.PI;\r\n    let s = Math.sin(w);\r\n    let c = Math.cos(w);\r\n\r\n    let dx = punkt.x - drehpunkt.x;\r\n    let dy = punkt.y - drehpunkt.y;\r\n\r\n    let dxNeu = dx * c - dy * s;\r\n    let dyNeu = dx * s + dy * c;\r\n\r\n    return { x: drehpunkt.x + dxNeu, y: drehpunkt.y + dyNeu };\r\n\r\n}\r\n\r\n/**\r\n * Gibt true zurück, wenn die Strecke von (x0, y0) nach (x1, y1) die Strecke von\r\n * (x2, y2) nach (x3, y3) berührt.\r\n *\r\n * @param x0\r\n * @param y0\r\n * @param x1\r\n * @param y1\r\n * @param x2\r\n * @param y2\r\n * @param x3\r\n * @param y3\r\n * @return\r\n */\r\nexport function streckeSchneidetStrecke(p0: Punkt, p1: Punkt, p2: Punkt, p3: Punkt, schnittpunkt?:Punkt) {\r\n\r\n    let a1 = p1.x - p0.x;\r\n    let a2 = p1.y - p0.y;\r\n    let b1 = p2.x - p3.x;\r\n    let b2 = p2.y - p3.y;\r\n    let c1 = p2.x - p0.x;\r\n    let c2 = p2.y - p0.y;\r\n\r\n    let det = a1 * b2 - a2 * b1;\r\n\r\n    if (det * det < 0.000001) {\r\n        return false; // die Strecken sind so gut wie parallel\r\n    }\r\n\r\n    let det1 = c1 * b2 - c2 * b1;\r\n    let det2 = a1 * c2 - a2 * c1;\r\n\r\n    let s = det1 / det;\r\n    let t = det2 / det;\r\n\r\n    // liegt der Schnittpunkt innerhalb von beiden Strecken?\r\n    let schneidet = s >= 0 && s <= 1 && t >= 0 && t <= 1;\r\n\r\n    if(schneidet && schnittpunkt != null){\r\n        schnittpunkt.x = p0.x + s*(p1.x - p0.x);\r\n        schnittpunkt.y = p0.y + s*(p1.y - p0.y)\r\n        }\r\n\r\n    return schneidet;\r\n\r\n}\r\n\r\nexport function abstand(p1: Punkt, p2: Punkt) {\r\n\r\n    let dx = p2.x - p1.x;\r\n    let dy = p2.y - p1.y;\r\n\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n\r\n}\r\n\r\nexport function winkelGradZwischenPunkten(p1: Punkt, p2: Punkt): number {\r\n    let d = {\r\n        x: p2.x - p1.x,\r\n        y: p2.y - p1.y\r\n    }\r\n\r\n    return Math.atan2(d.y, d.x)/Math.PI*180;\r\n}\r\n\r\nexport function streckenzugEnthältPunkt(punkte: Punkt[], punkt: Punkt) {\r\n    for(let i = 0; i < punkte.length - 1; i++){\r\n        if(abstandPunktZuStrecke(punkte[i], punkte[i+1], punkt) < 0.000001){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function polygonEnthältPunkt(punkte: Punkt[], punkt: Punkt) {\r\n\r\n    let inside = false;\r\n    let vertexCount = punkte.length;\r\n\r\n    for (let index = 0; index <= vertexCount - 1; index++) {\r\n\r\n        let i = index % vertexCount;\r\n        let j = (index - 1) % vertexCount;\r\n        if (j < 0) {\r\n            j += vertexCount;\r\n        }\r\n\r\n        if (((punkte[i].y > punkt.y) != (punkte[j].y > punkt.y)) &&\r\n            (punkt.x < (punkte[j].x - punkte[i].x) * (punkt.y - punkte[i].y) / (punkte[j].y - punkte[i].y) + punkte[i].x))\r\n            inside = !inside;\r\n    }\r\n\r\n    return inside;\r\n\r\n}\r\n\r\nexport function kreisSchneidetStrecke(m: Punkt, r: number, p1: Punkt, p2: Punkt): boolean {\r\n    /*\r\n * Gerade: (x, y) = (x1, x2) + t*(x2-x1, y2-y1)\r\n * Kreis: (x-mx)^2 + (y-my)^2 = r^2\r\n *\r\n * Schneiden der beiden liefert eine quadratische Gleichung in t, die wir lösen...\r\n \r\n */\r\n\r\n    let x1 = p1.x;\r\n    let y1 = p1.y;\r\n    let x2 = p2.x;\r\n    let y2 = p2.y;\r\n\r\n\r\n    let a = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\r\n    let b = 2 * (x1 - m.x) * (x2 - x1) + 2 * (y1 - m.y) * (y2 - y1);\r\n    let c = (x1 - m.x) * (x1 - m.x) + (y1 - m.y) * (y1 - m.y) - r * r;\r\n\r\n    let determiante = b * b - 4 * a * c;\r\n\r\n    if (determiante < 0) {\r\n        return false; // Kreis schneidet die Gerade nicht\r\n    }\r\n\r\n    // Kreis schneidet die Gerade -> innerhalb der Strecke?\r\n\r\n    let sqrt = Math.sqrt(determiante);\r\n    let t1 = (-b + sqrt) / (2 * a);\r\n    let t2 = (-b - sqrt) / (2 * a);\r\n\r\n    if (t1 >= 0 && t1 <= 1) {\r\n        return true;\r\n    }\r\n\r\n    if (t2 >= 0 && t2 <= 1) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n\r\n}\r\n\r\nexport function schnittpunkteKreisStrecke(m: Punkt, r: number, p1: Punkt, p2: Punkt, schnittpunkte: Punkt[]): void {\r\n    /*\r\n * Gerade: (x, y) = (x1, x2) + t*(x2-x1, y2-y1)\r\n * Kreis: (x-mx)^2 + (y-my)^2 = r^2\r\n *\r\n * Schneiden der beiden liefert eine quadratische Gleichung in t, die wir lösen...\r\n \r\n */\r\n\r\n    let x1 = p1.x;\r\n    let y1 = p1.y;\r\n    let x2 = p2.x;\r\n    let y2 = p2.y;\r\n\r\n\r\n    let a = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\r\n    let b = 2 * (x1 - m.x) * (x2 - x1) + 2 * (y1 - m.y) * (y2 - y1);\r\n    let c = (x1 - m.x) * (x1 - m.x) + (y1 - m.y) * (y1 - m.y) - r * r;\r\n\r\n    let determiante = b * b - 4 * a * c;\r\n\r\n    if (determiante < 0) {\r\n        return; // Kreis schneidet die Gerade nicht\r\n    }\r\n\r\n    // Kreis schneidet die Gerade -> innerhalb der Strecke?\r\n\r\n    let sqrt = Math.sqrt(determiante);\r\n    let t1 = (-b + sqrt) / (2 * a);\r\n    let t2 = (-b - sqrt) / (2 * a);\r\n\r\n    if (t1 >= 0 && t1 <= 1) {\r\n        schnittpunkte.push({ x: x1 + t1 * (x2 - x1), y: y1 + t1 * (y2 - y1) });\r\n    }\r\n    if (t2 >= 0 && t2 <= 1) {\r\n        schnittpunkte.push({ x: x1 + t2 * (x2 - x1), y: y1 + t2 * (y2 - y1) });\r\n    }\r\n\r\n    return;\r\n\r\n}\r\n\r\nexport function KreisBerührtPolygon(m: Punkt, r: number, punkte: Punkt[]) {\r\n\r\n    for (let i = 0; i < punkte.length; i++) {\r\n\r\n        if (abstand(punkte[i], m) <= r) {\r\n            return true;\r\n        }\r\n\r\n    }\r\n\r\n    // Der Kreis enthält keinen Punkt des Vielecks. Enthält es den Mittelpunkt des Kreises?\r\n    if (polygonEnthältPunkt(punkte, m)) {\r\n        return true;\r\n    }\r\n\r\n    // schneidet die Kreislinie eine der Vielecksstrecken?\r\n    for (let i = 0; i < punkte.length; i++) {\r\n\r\n        let p2 = punkte[(i + 1) % punkte.length];\r\n        if (kreisSchneidetStrecke(m, r, punkte[i], p2)) {\r\n            return true;\r\n        }\r\n\r\n    }\r\n\r\n    return false;\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport function polygonBerührtPolygon(punkte1: Punkt[], punkte2: Punkt[]) {\r\n\r\n    // Nicht-exakte Lösung: prüfe, ob eines der Vielecke einen Eckpunkt des anderen enthält.\r\n    // Jede Kollision beginnt damit, dass ein Eckpunkt eines Polygons eine Seite des anderen schneidet.\r\n    // Falls oft genug geprüft wird, bleiben Kollisionen also nicht unerkannt.\r\n    for (let i = 0; i < punkte1.length; i++) {\r\n        if (polygonEnthältPunkt(punkte2, punkte1[i])) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < punkte2.length; i++) {\r\n        if (polygonEnthältPunkt(punkte1, punkte2[i])) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n\r\n}\r\n\r\nexport function steckenzugSchneidetStreckenzug(punkte1: Punkt[], punkte2: Punkt[]) {\r\n\r\n    for(let i = 0; i < punkte1.length - 1; i++){\r\n        for(let j = 0; j < punkte2.length - 1; j++){\r\n            if(streckeSchneidetStrecke(punkte1[i], punkte1[i+1], punkte2[j], punkte2[j+1])){\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n\r\nexport function abstandPunktZuStrecke(a: Punkt, b: Punkt, p: Punkt){\r\n\r\n    let dx = b.x - a.x;\r\n    let dy = b.y - a.y;\r\n\r\n    let q = dx*dx+dy*dy;\r\n\r\n    let lambda = ((-a.x+p.x)*dx + (-a.y+p.y)*dy)/q;\r\n\r\n    if(lambda < 0){\r\n        return abstand(a, p);\r\n    }\r\n\r\n    if(lambda > 1){\r\n        return abstand(b, p);\r\n    }\r\n\r\n    let fx = a.x + lambda * (b.x - a.x);\r\n    let fy = a.y + lambda * (b.y - a.y);\r\n\r\n    let s1 = p.x - fx;\r\n    let s2 = p.y - fy;\r\n\r\n    return Math.sqrt(s1*s1 + s2*s2);\r\n    \r\n}\r\n\r\nexport function abstandPunktZuGerade(a: Punkt, b: Punkt, p: Punkt) {\r\n\r\n    let dx = b.x - a.x;\r\n    let dy = b.y - a.y;\r\n\r\n    let l = Math.sqrt(dy * dy + dx * dx);\r\n\r\n    if (l < 0.000000001) {\r\n        return abstand(a, p);\r\n    }\r\n\r\n    return Math.abs(dy * p.x - dx * p.y + b.x * a.y - b.y * a.x) / l;\r\n\r\n}\r\n\r\nexport function polygonBerührtPolygonExakt(punkte1: Punkt[], punkte2: Punkt[], istGeschlossen1: boolean = false,\r\n    istGeschlossen2: boolean = false, normaleDerBerührtenGerade1: Punkt = null) {\r\n\r\n    if(punkte1.length == 0 || punkte2.length == 0) return false;\r\n\r\n    let endIndex1 = punkte1.length + (istGeschlossen1 ? 0 : -1);\r\n    let endIndex2 = punkte2.length + (istGeschlossen2 ? 0 : -1);\r\n\r\n    if (istGeschlossen1 && polygonEnthältPunkt(punkte1, punkte2[0])) {\r\n\r\n        if (normaleDerBerührtenGerade1 != null) {\r\n\r\n            let minAbstand = 100000;\r\n            let minIndex = 0;\r\n\r\n            for (let i = 0; i < punkte1.length - 1; i++) {\r\n                let j = (i + 1) % punkte1.length;\r\n\r\n                let d = abstandPunktZuStrecke(punkte1[i], punkte1[j], punkte2[0]);\r\n                if (d < minAbstand) {\r\n                    minAbstand = d;\r\n                    minIndex = 0;\r\n                }\r\n\r\n            }\r\n            let i2 = (minIndex + 1) % punkte1.length;\r\n            normaleDerBerührtenGerade1.y = punkte1[i2].x - punkte1[minIndex].x;\r\n            normaleDerBerührtenGerade1.x = -(punkte1[i2].y - punkte1[minIndex].y);\r\n\r\n        }\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    if (istGeschlossen1 && polygonEnthältPunkt(punkte2, punkte1[0])) {\r\n        return true;\r\n    }\r\n\r\n    for (let i = 0; i < endIndex1; i++) {\r\n        let p1a = punkte1[i];\r\n        let p1b = punkte1[(i + 1) % punkte1.length];\r\n        for (let j = 0; j < endIndex2; j++) {\r\n            let p2a = punkte2[j];\r\n            let p2b = punkte2[(j + 1) % punkte2.length];\r\n\r\n            if (streckeSchneidetStrecke(p1a, p1b, p2a, p2b)) {\r\n                return true;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return false;\r\n\r\n}\r\n\r\nexport function länge(vektor: Punkt): number {\r\n    return Math.sqrt(vektor.x * vektor.x + vektor.y * vektor.y);\r\n}\r\n\r\nexport function einheitsVektor(vektor: Punkt): Punkt {\r\n    let l = länge(vektor);\r\n    return { x: vektor.x / l, y: vektor.y / l };\r\n}\r\n\r\n// export function normalenvektorBeiImpactEinesKreises(punkte: Punkt[], isMove: boolean[], k: Kreis): Punkt {\r\n\r\n//     let minAbstand = 100000;\r\n//     let minIndex = 0;\r\n//     let m = k.getMitte();\r\n\r\n//     for (let i = 0; i < punkte.length - 1; i++) {\r\n//         if (isMove != null && !isMove[i]) {\r\n//             let j = (i + 1) % punkte.length;\r\n\r\n//             let d = abstandPunktZuStrecke(punkte[i], punkte[j], m);\r\n//             if (d < minAbstand) {\r\n//                 minAbstand = d;\r\n//                 minIndex = i;\r\n//             }\r\n\r\n//             // console.log(\"\" + i + \": (\" + punkte[i].x + \",\" + punkte[i].y + \")->(\" + punkte[j].x + \",\" + punkte[j].y + \"): \" + d);\r\n//         }\r\n//     }\r\n//     let i2 = (minIndex + 1) % punkte.length;\r\n\r\n//     // let v = {x: punkte[i2].x - punkte[minIndex].x, y: punkte[i2].y - punkte[minIndex].y};\r\n//     let am = { x: m.x - punkte[minIndex].x, y: m.y - punkte[minIndex].y };\r\n\r\n//     let n = {\r\n//         y: punkte[i2].x - punkte[minIndex].x,\r\n//         x: -(punkte[i2].y - punkte[minIndex].y)\r\n//     };\r\n\r\n//     let sp = skalarprodukt(n, am);\r\n//     if (sp > 0) {\r\n//         return n;\r\n//     } else {\r\n//         return { x: -n.x, y: -n.y };\r\n//     }\r\n\r\n// }\r\n\r\n// export function normalenvektorBeiImpactAufKreis(punkte: Punkt[], k: Kreis): Punkt {\r\n\r\n//     let schnittpunkte = [];\r\n//     let m = k.getMitte();\r\n//     let r = k.getRadius();\r\n\r\n//     for (let i = 0; i < punkte.length; i++) {\r\n//         let j = (i + 1) % punkte.length;\r\n//         schnittpunkteKreisStrecke(m, r, punkte[i], punkte[j], schnittpunkte);\r\n//     }\r\n\r\n//     if (schnittpunkte.length == 0) {\r\n//         return {\r\n//             x: punkte[0].x - m.x, y: punkte[0].y - m.y\r\n//         }\r\n//     }\r\n\r\n//     let schwerpunkt = { x: 0, y: 0 };\r\n//     for (let p of schnittpunkte) {\r\n//         schwerpunkt.x += p.x;\r\n//         schwerpunkt.y += p.y;\r\n//     }\r\n//     schwerpunkt.x /= punkte.length;\r\n//     schwerpunkt.y /= punkte.length;\r\n\r\n//     return {\r\n//         x: schwerpunkt.x - m.x,\r\n//         y: schwerpunkt.y - m.y\r\n//     }\r\n\r\n// }\r\n\r\nexport function skalarprodukt(v1: Punkt, v2: Punkt) {\r\n    return v1.x * v2.x + v1.y * v2.y;\r\n}\r\n\r\n\r\nexport function zufall(von: number, bis: number){\r\n    return Math.random()*(bis - von) + von;\r\n}\r\n\r\nexport function intZufall(von: number, bis: number){\r\n    return Math.trunc(Math.random()*(bis - von + 1 - 0.00000001) + von);\r\n}\r\n\r\nexport function vektorVonPolarkoordinaten(winkelGrad: number, länge: number){\r\n    let winkel = winkelGrad/180*Math.PI;\r\n    return {\r\n        x: länge * Math.cos(winkel),\r\n        y: länge * Math.sin(winkel)\r\n    }\r\n}\r\n\r\nexport function farbeAusRGB(rot: number, grün: number, blau: number):number{\r\n    return blau + 256 * (rot + 256 * grün);\r\n}","import { Klass, Visibility } from \"../../compiler/types/Class.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Method, Parameterlist, Attribute, Value, Type } from \"../../compiler/types/Types.js\";\r\nimport { intPrimitiveType, doublePrimitiveType, voidPrimitiveType, booleanPrimitiveType, DoublePrimitiveType, stringPrimitiveType, nullType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { ArrayType } from \"../../compiler/types/Array.js\";\r\nimport { ActorHelper } from \"./Actor.js\";\r\nimport { WorldHelper, MouseListenerShapeData } from \"./World.js\";\r\nimport { Punkt, polygonEnthältPunkt, polygonBerührtPolygon, polygonBerührtPolygonExakt } from \"../../tools/MatheTools.js\";\r\nimport { ColorHelper } from \"./ColorHelper.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { GroupHelper, GroupClass } from \"./Group.js\";\r\nimport { CircleHelper } from \"./Circle.js\";\r\nimport { TurtleHelper } from \"./Turtle.js\";\r\nimport { Enum, EnumInfo } from \"../../compiler/types/Enum.js\";\r\nimport { FilledShapeDefaults } from \"./FilledShapeDefaults.js\";\r\nimport { ColorClassIntrinsicData } from \"./Color.js\";\r\n\r\nexport class ShapeClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Shape\", module, \"Basisklasse für alle graphischen Objekte die verschoben, skaliert und gedreht werden können\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Actor\"));\r\n        this.isAbstract = true;\r\n\r\n        // let matrixType = new ArrayType(doublePrimitiveType);\r\n        let shapeType = module.typeStore.getType(\"Shape\");\r\n        let directionType = <Enum>(<any>module.typeStore.getType(\"Direction\"));\r\n        let shapeArrayType = new ArrayType(shapeType);\r\n        let colorType: Klass = <Klass>this.module.typeStore.getType(\"Color\");\r\n\r\n        let vector2Class = <Klass>module.typeStore.getType(\"Vector2\");\r\n\r\n        this.addAttribute(new Attribute(\"angle\", doublePrimitiveType,\r\n            (value) => {\r\n\r\n                let rto: RuntimeObject = value.object;\r\n                let helper: ShapeHelper = rto.intrinsicData[\"Actor\"];\r\n\r\n                if (helper == null || helper.isDestroyed || helper.displayObject == null) {\r\n                    value.value = 0;\r\n                    return;\r\n                }\r\n\r\n                value.value = helper.angle;\r\n\r\n            }, false, Visibility.protected, true, \"Richtung\"));\r\n\r\n        this.addAttribute(new Attribute(\"centerX\", doublePrimitiveType,\r\n            (value) => {\r\n\r\n                let rto: RuntimeObject = value.object;\r\n                let helper: ShapeHelper = rto.intrinsicData[\"Actor\"];\r\n                if (helper == null || helper.isDestroyed || helper.displayObject == null) {\r\n                    value.value = 0;\r\n                    return;\r\n                }\r\n\r\n                value.value = helper.getCenterX();\r\n\r\n            }, false, Visibility.protected, true, \"X-Koordinate des Diagonalenschnittpunkts der BoundingBox des Objekts\"));\r\n\r\n        this.addAttribute(new Attribute(\"centerY\", doublePrimitiveType,\r\n            (value) => {\r\n\r\n                let rto: RuntimeObject = value.object;\r\n                let helper: ShapeHelper = rto.intrinsicData[\"Actor\"];\r\n                if (helper == null || helper.isDestroyed || helper.displayObject == null) {\r\n                    value.value = 0;\r\n                    return;\r\n                }\r\n\r\n                value.value = helper.getCenterY();\r\n\r\n            }, false, Visibility.protected, true, \"Y-Koordinate des Diagonalenschnittpunkts der BoundingBox des Objekts\"));\r\n\r\n        this.setupAttributeIndicesRecursive();\r\n\r\n        // this.addAttribute(new Attribute(\"transformation\", matrixType,\r\n        //     (value) => {\r\n\r\n        //         let rto: RuntimeObject = value.object;\r\n        //         let helper: ShapeHelper = rto.intrinsicData[\"Actor\"];\r\n        //         if (helper == null || helper.isDestroyed || helper.displayObject.transform == null) {\r\n        //             value.value = null;\r\n        //             return;\r\n        //         }\r\n\r\n        //         let matrix = helper.displayObject.localTransform.toArray(false);\r\n\r\n        //         if (value.value == null) {\r\n        //             value.value = [];\r\n\r\n        //             for (let n of matrix) {\r\n        //                 value.value.push({\r\n        //                     type: doublePrimitiveType,\r\n        //                     value: n\r\n        //                 });\r\n        //             }\r\n        //         } else {\r\n        //             let i: number = 0;\r\n        //             for (let n of matrix) {\r\n        //                 value.value[i++].value = n;\r\n        //             }\r\n        //         }\r\n\r\n        //     }, false, Visibility.protected, true, \"Transformationsmatrix\"));\r\n\r\n        this.addMethod(new Method(\"move\", new Parameterlist([\r\n            { identifier: \"dx\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"dy\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let dx: number = parameters[1].value;\r\n                let dy: number = parameters[2].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"move\")) return;\r\n\r\n                sh.move(dx, dy);\r\n\r\n            }, false, false, \"Verschiebt das Grafikobjekt um dx Pixel nach rechts und um dy Pixel nach unten.\", false));\r\n\r\n        this.addMethod(new Method(\"rotate\", new Parameterlist([\r\n            { identifier: \"angleInDeg\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"centerX\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"centerY\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let angleInDeg: number = parameters[1].value;\r\n                let centerX: number = parameters[2].value;\r\n                let centerY: number = parameters[3].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"rotate\")) return;\r\n\r\n                sh.rotate(angleInDeg, centerX, centerY);\r\n\r\n            }, false, false, \"Dreht das Grafikobjekt um den angegebenen Winkel. Drehpunkt ist (centerX, centerY).\", false));\r\n\r\n        this.addMethod(new Method(\"rotate\", new Parameterlist([\r\n            { identifier: \"angleInDeg\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let angleInDeg: number = parameters[1].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"rotate\")) return;\r\n\r\n                sh.rotate(angleInDeg);\r\n\r\n            }, false, false, \"Dreht das Grafikobjekt um den angegebenen Winkel. Drehpunkt ist der 'Mittelpunkt' des Objekts\", false));\r\n\r\n        this.addMethod(new Method(\"scale\", new Parameterlist([\r\n            { identifier: \"factor\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"centerX\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"centerY\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let factor: number = parameters[1].value;\r\n                let centerX: number = parameters[2].value;\r\n                let centerY: number = parameters[3].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"scale\")) return;\r\n\r\n                sh.scale(factor, centerX, centerY);\r\n\r\n            }, false, false, \"Streckt das Grafikobjekt um den angegebenen Faktor. Das Zentrum der Streckung ist der Punkt (centerX, centerY)\", false));\r\n\r\n        this.addMethod(new Method(\"scale\", new Parameterlist([\r\n            { identifier: \"factor\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let factor: number = parameters[1].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"scale\")) return;\r\n\r\n                sh.scale(factor);\r\n\r\n            }, false, false, \"Streckt das Grafikobjekt um den angegebenen Faktor. Das Zentrum der Streckung ist der 'Mittelpunkt' des Objekts.\", false));\r\n\r\n        this.addMethod(new Method(\"mirrorX\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"mirrorX\")) return;\r\n\r\n                sh.mirrorXY(-1, 1);\r\n\r\n            }, false, false, \"Spiegelt das Objekt in X-Richtung.\", false));\r\n\r\n        this.addMethod(new Method(\"mirrorY\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"mirrorX\")) return;\r\n\r\n                sh.mirrorXY(1, -1);\r\n\r\n            }, false, false, \"Spiegelt das Objekt in Y-Richtung.\", false));\r\n\r\n        this.addMethod(new Method(\"isOutsideView\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"isOutsideView\")) return;\r\n\r\n                return sh.isOutsideView();\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn sich die Bounding Box des Objekts außerhalb des sichtbaren Bereichs befindet. \", false));\r\n\r\n        this.addMethod(new Method(\"getCenterX\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getCenterX\")) return;\r\n\r\n                return sh.getCenterX();\r\n\r\n            }, false, false, \"Gibt die x-Koordinate des 'Mittelpunkts' zurück. Der 'Mittelpunkt' des Grafikobjekts ist der Diagonalenschnittpunkt seiner achsenparallelen Bounding-Box.\", false));\r\n\r\n        this.addMethod(new Method(\"getCenterY\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getCenterY\")) return;\r\n\r\n                return sh.getCenterY();\r\n\r\n            }, false, false, \"Gibt die y-Koordinate des 'Mittelpunkts' zurück. Der 'Mittelpunkt' des Grafikobjekts ist der Diagonalenschnittpunkt seiner achsenparallelen Bounding-Box.\", false));\r\n\r\n        this.addMethod(new Method(\"getAngle\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getAngle\")) return;\r\n\r\n                return sh.angle;\r\n\r\n            }, false, false, \"Gibt den Winkel des Grafikobjekts in Grad zurück. Winkel == 0 bedeutet: dieselbe Richtung wie zum Zeipunkt der Instanzierung des Objekts. Positive Winkelzunahme bedeutet Rechtsdrehung.\", false));\r\n\r\n        this.addMethod(new Method(\"containsPoint\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"containsPoint\")) return;\r\n\r\n                return sh.containsPoint(x, y);\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn das Grafikobjekt den Punkt (x, y) enthält.\", false));\r\n\r\n        this.addMethod(new Method(\"collidesWith\", new Parameterlist([\r\n            { identifier: \"object\", type: this, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let shape: RuntimeObject = parameters[1].value;\r\n\r\n                if (shape == null) {\r\n                    module.main.getInterpreter().throwException(\"Der Parameter der Methode collidesWith darf nicht null sein.\");\r\n                }\r\n\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n                let sh1: ShapeHelper = shape.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"collidesWith\")) return;\r\n\r\n                if (sh1.isDestroyed) {\r\n                    sh.worldHelper.interpreter.throwException(\"Die der Methode collidesWith als Parameter übergebene Figur ist bereits zerstört.\");\r\n                    return;\r\n                }\r\n\r\n                return sh.collidesWith(sh1);\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn das Grafikobjekt und das andere Grafikobjekt kollidieren.\", false));\r\n\r\n        this.addMethod(new Method(\"collidesWithAnyShape\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"collidesWithAnyShape\")) return;\r\n\r\n                return sh.collidesWithAnyShape();\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn das Grafikobjekt mit irgendeinem anderen Grafikobjekt kollidiert.\", false));\r\n\r\n        this.addMethod(new Method(\"moveBackFrom\", new Parameterlist([\r\n            { identifier: \"otherShape\", type: this, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"keepColliding\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let shape: RuntimeObject = parameters[1].value;\r\n                let keepColliding: boolean = parameters[2].value;\r\n\r\n                if (shape == null) {\r\n                    module.main.getInterpreter().throwException(\"Der erste Parameter der Methode moveBackFrom darf nicht null sein.\");\r\n                }\r\n\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n                let sh1: ShapeHelper = shape.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"moveBackFrom\")) return;\r\n\r\n                if (sh1.isDestroyed) {\r\n                    sh.worldHelper.interpreter.throwException(\"Die der Methode moveBackFrom als Parameter übergebene Figur ist bereits zerstört.\");\r\n                    return;\r\n                }\r\n\r\n                sh.moveBackFrom(sh1, keepColliding);\r\n\r\n            }, false, false, \"Rückt das Objekt entlang der letzten durch move vorgegebenen Richtung zurück, bis es das übergebene Objekt gerade noch (keepColliding == true) bzw. gerade nicht mehr (keepColliding == false) berührt.\", false));\r\n\r\n        this.addMethod(new Method(\"directionRelativeTo\", new Parameterlist([\r\n            { identifier: \"otherShape\", type: this, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), directionType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let shape: RuntimeObject = parameters[1].value;\r\n\r\n                if (shape == null) {\r\n                    module.main.getInterpreter().throwException(\"Der erste Parameter der Methode directionRelativeTo darf nicht null sein.\");\r\n                }\r\n\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n                let sh1: ShapeHelper = shape.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"directionRelativeTo\")) return;\r\n\r\n                if (sh1.isDestroyed) {\r\n                    sh.worldHelper.interpreter.throwException(\"Die der Methode directionRelativeTo als Parameter übergebene Figur ist bereits zerstört.\");\r\n                    return;\r\n                }\r\n\r\n                return sh.directionRelativeTo(sh1, directionType);\r\n\r\n            }, false, false, \"Gibt die Richtung (top, right, bottom oder left) zurück, in der das graphische Objekt relativ zum übergebenen graphischen Objekt steht.\", false));\r\n\r\n        this.addMethod(new Method(\"moveTo\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n\r\n                if (sh.testdestroyed(\"moveTo\")) return;\r\n\r\n                sh.move(x - sh.getCenterX(), y - sh.getCenterY());\r\n\r\n            }, false, false, \"Verschiebt das Grafikobjekt so, dass sich sein 'Mittelpunkt' an den angegebenen Koordinaten befindet.\", false));\r\n\r\n        this.addMethod(new Method(\"defineCenter\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n\r\n                if (sh.testdestroyed(\"defineCenter\")) return;\r\n\r\n                sh.defineCenter(x, y);\r\n\r\n            }, false, false, \"Setzt fest, wo der 'Mittelpunkt' des Objekts liegen soll. Dieser Punkt wird als Drehpunkt der Methode rotate, als Zentrum der Methode Scale und als Referenzpunkt der Methode moveTo benutzt.\", false));\r\n\r\n        this.addMethod(new Method(\"defineCenterRelative\", new Parameterlist([\r\n            { identifier: \"xRel\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"yRel\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n\r\n                if (sh.testdestroyed(\"defineCenterRelative\")) return;\r\n\r\n                sh.defineCenterRelative(x, y);\r\n\r\n            }, false, false, \"Setzt fest, wo der 'Mittelpunkt' des Objekts liegen soll. Dabei bedeutet (XRel/YRel) = (0/0) die linke obere Ecke der Bounding Box des Objekts, (XRel/YRel) = (1/1) die rechte untere Ecke. Defaultwert ist (XRel/YRel) = (0.5/0.5), also der Diagonalenschnittpunkt der Bounding Box. Dieser Punkt wird als Drehpunkt der Methode rotate, als Zentrum der Methode Scale und als Referenzpunkt der Methode moveTo benutzt.\\n\\nVORSICHT: Diese Methode arbeitet nicht mehr korrekt, wenn das Objekt schon gedreht wurde!\", false));\r\n\r\n        this.addMethod(new Method(\"setAngle\", new Parameterlist([\r\n            { identifier: \"angleDeg\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n                let angleDeg: number = parameters[1].value;\r\n\r\n                if (sh.testdestroyed(\"setAngle\")) return;\r\n\r\n                sh.rotate(angleDeg - sh.angle);\r\n\r\n            }, false, false, \"Dreht das Objekt zur angegebenen Richtung.\", false));\r\n\r\n        this.addMethod(new Method(\"setDefaultVisibility\", new Parameterlist([\r\n            { identifier: \"visibility\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let visibility: boolean = parameters[1].value;\r\n\r\n                FilledShapeDefaults.setDefaultVisibility(visibility);\r\n\r\n            }, false, true, 'Setzt den Standardwert für das Attribut \"visible\". Dieser wird nachfolgend immer dann verwendet, wenn ein neues grafisches Objekt instanziert wird.', false));\r\n\r\n\r\n        this.addMethod(new Method(\"setVisible\", new Parameterlist([\r\n            { identifier: \"visible\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n                let visible: boolean = parameters[1].value;\r\n\r\n                if (sh.testdestroyed(\"setVisible\")) return;\r\n\r\n                sh.setVisible(visible);\r\n\r\n            }, false, false, \"Macht das Grafikobjekt sichtbar (visible == true) bzw. unsichtbar (visible == false).\", false));\r\n\r\n        this.addMethod(new Method(\"setStatic\", new Parameterlist([\r\n            { identifier: \"isStatic\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n                let isStatic: boolean = parameters[1].value;\r\n\r\n                if (sh.testdestroyed(\"setStatic\")) return;\r\n\r\n                sh.setStatic(isStatic);\r\n\r\n            }, false, false, \"setStatic(true) hat zur Folge, dass die Ansicht des Objekts durch Transformationen des World-Objekts nicht verändert wird.\", false));\r\n\r\n        this.addMethod(new Method(\"onMouseEnter\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType, () => { }, // no statements!\r\n            false, false, \"Wird aufgerufen, wenn sich der Mauspfeil in das Objekt hineinbewegt.\", false));\r\n\r\n        this.addMethod(new Method(\"onMouseLeave\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType, () => { }, // no statements!\r\n            false, false, \"Wird aufgerufen, wenn sich der Mauspfeil in das Objekt hineinbewegt.\", false));\r\n\r\n        this.addMethod(new Method(\"onMouseDown\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"key\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType, () => { }, // no statements!\r\n            false, false, \"Wird aufgerufen, wenn sich der Mauspfeil über dem Objekt befindet und der Benutzer eine Maustaste nach unten drückt.\", false));\r\n\r\n        this.addMethod(new Method(\"onMouseUp\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"key\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType, () => { }, // no statements!\r\n            false, false, \"Wird aufgerufen, wenn sich der Mauspfeil über dem Objekt befindet und der Benutzer eine Maustaste loslässt.\", false));\r\n\r\n        this.addMethod(new Method(\"onMouseMove\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType, () => { }, // no statements!\r\n            false, false, \"Wird aufgerufen, wenn sich der Mauspfeil über dem Objekt befindet und bewegt.\", false));\r\n\r\n        this.addMethod(new Method(\"tint\", new Parameterlist([\r\n            { identifier: \"colorAsRGBAString\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: string = parameters[1].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"tint\")) return;\r\n\r\n                sh.tint(color);\r\n\r\n            }, false, false, 'Überzieht das Grafikobjekt mit einer halbdurchsichtigen Farbschicht.', false));\r\n\r\n        this.addMethod(new Method(\"tint\", new Parameterlist([\r\n            { identifier: \"colorAsInt\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: number = parameters[1].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"tint\")) return;\r\n\r\n                sh.tint(color);\r\n\r\n            }, false, false, 'Überzieht das Grafikobjekt mit einer halbdurchsichtigen Farbschicht. Die Farbe wird als int-Wert angegeben, praktischerweise hexadezimal, also z.B. tint(0x303030).', false));\r\n\r\n        this.addMethod(new Method(\"tint\", new Parameterlist([\r\n            { identifier: \"color\", type: colorType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: RuntimeObject = parameters[1].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"tint\")) return;\r\n\r\n                sh.tint(color);\r\n\r\n            }, false, false, 'Überzieht das Grafikobjekt mit einer halbdurchsichtigen Farbschicht. Die Farbe wird als int-Wert angegeben, praktischerweise hexadezimal, also z.B. tint(0x303030).', false));\r\n\r\n\r\n        this.addMethod(new Method(\"startTrackingEveryMouseMovement\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                sh.trackMouseMove = true;\r\n\r\n            }, false, false, 'Sorgt dafür, dass ab jetzt JEDE Bewegung des Mauszeigers (auch wenn sich dieser außerhalb des Objekts befindet) ein MouseMove-Ereignis für dieses Objekt auslöst. -> Praktisch zur Umsetzung des \"Ziehens\" von Objekten mit der Maus!', false));\r\n\r\n        this.addMethod(new Method(\"stopTrackingEveryMouseMovement\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                sh.trackMouseMove = false;\r\n\r\n            }, false, false, 'Sorgt dafür, dass ab jetzt nur noch dann Bewegungen des Mauszeigers ein MouseMove-Ereignis für dieses Objekt auslösen, wenn sich der Mauszeiger über dem Objekt befindet. -> Praktisch zur Umsetzung des \"Ziehens\" von Objekten mit der Maus!', false));\r\n\r\n        this.addMethod(new Method(\"reactToMouseEventsWhenInvisible\", new Parameterlist([\r\n            { identifier: \"react\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let react: boolean = parameters[1].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                sh.reactToMouseEventsWhenInvisible = react;\r\n\r\n            }, false, false, 'Legt fest, ob das Objekt auf Mausevents (buttondown, mouse move, ...) reagiert, wenn es unsichtbar ist.', false));\r\n\r\n        this.addMethod(new Method(\"tint\", new Parameterlist([\r\n            { identifier: \"colorAsRGBAString\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: string = parameters[1].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"tint\")) return;\r\n\r\n                sh.tint(color);\r\n\r\n            }, false, false, 'Überzieht das Grafikobjekt mit einer halbdurchsichtigen Farbschicht.', false));\r\n\r\n        this.addMethod(new Method(\"defineDirection\", new Parameterlist([\r\n            { identifier: \"angleInDeg\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let direction: number = parameters[1].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"defineDirection\")) return;\r\n\r\n                sh.directionRad = direction / 180 * Math.PI;\r\n\r\n            }, false, false, 'Setzt die Blickrichtung des graphischen Objekts. Dies ist die Richtung, in die es durch Aufruf der Methode forward bewegt wird. \\nBemerkung: die Methode rotate ändert auch die Blickrichtung!', false));\r\n\r\n        this.addMethod(new Method(\"forward\", new Parameterlist([\r\n            { identifier: \"distance\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let distance: number = parameters[1].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"forward\")) return;\r\n\r\n                sh.forward(distance);\r\n\r\n            }, false, false, 'Bewegt das Objekt um die angegebene Länge in Richtung seiner Blickrichtung.\\nBemerkung: Die Blickrichtung kann mit defineDirection gesetzt werden.', false));\r\n\r\n        this.addMethod(new Method(\"copy\", new Parameterlist([\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"copy\")) return;\r\n\r\n                return sh.getCopy(<Klass>o.class);\r\n\r\n            }, true, false, 'Erstellt eine Kopie des Grafikobjekts und git sie zurück.', false));\r\n\r\n\r\n        this.addMethod(new Method(\"bringToFront\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"bringToFront\")) return;\r\n\r\n                return sh.bringToFront();\r\n\r\n            }, false, false, 'Setzt das Grafikobjekt vor alle anderen.', false));\r\n\r\n        this.addMethod(new Method(\"sendToBack\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"sendToBack\")) return;\r\n\r\n                return sh.sendToBack();\r\n\r\n            }, false, false, 'Setzt das Grafikobjekt hinter alle anderen.', false));\r\n\r\n        this.addMethod(new Method(\"getHitPolygon\", new Parameterlist([\r\n        ]), new ArrayType(vector2Class),\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getHitPolygon\")) return;\r\n\r\n                return sh.getHitPolygon(vector2Class);\r\n\r\n            }, false, false, \"Gibt ein Array zurück, das die vier Eckpunkte des Hit-Polygons in Form von Vector2-Ortsvektoren enthält. Bei den Klassen Rectangle, Triangle und Polygon sind dies die Eckpunkte.\", false));\r\n\r\n    }\r\n\r\n}\r\n\r\nexport abstract class ShapeHelper extends ActorHelper {\r\n\r\n    displayObject: PIXI.DisplayObject;\r\n\r\n    belongsToGroup: GroupHelper;\r\n\r\n    centerXInitial: number;\r\n    centerYInitial: number;\r\n\r\n    angle: number = 0;\r\n\r\n    hitPolygonInitial: Punkt[] = null;\r\n    hitPolygonTransformed: Punkt[] = null;\r\n    hitPolygonDirty = true;\r\n\r\n    reactToMouseEventsWhenInvisible: boolean = false;\r\n\r\n    mouseLastSeenInsideObject: boolean = false;\r\n\r\n    trackMouseMove: boolean = false;\r\n\r\n    scaleFactor: number = 1.0;\r\n\r\n    directionRad: number = 0;\r\n\r\n    lastMoveDx: number = 0;\r\n    lastMoveDy: number = 0;\r\n\r\n    copyFrom(shapeHelper: ShapeHelper) {\r\n\r\n        this.centerXInitial = shapeHelper.centerXInitial;\r\n        this.centerYInitial = shapeHelper.centerYInitial;\r\n\r\n        if (shapeHelper.hitPolygonInitial != null) {\r\n            this.hitPolygonInitial = [];\r\n            for (let p of shapeHelper.hitPolygonInitial) this.hitPolygonInitial.push(Object.assign({}, p));\r\n        }\r\n\r\n        this.setHitPolygonDirty(true);\r\n\r\n        this.hitPolygonDirty = shapeHelper.hitPolygonDirty;\r\n        this.reactToMouseEventsWhenInvisible = shapeHelper.reactToMouseEventsWhenInvisible;\r\n        this.mouseLastSeenInsideObject = shapeHelper.mouseLastSeenInsideObject;\r\n\r\n        this.displayObject.localTransform.copyFrom(shapeHelper.displayObject.transform.localTransform);\r\n        this.displayObject.updateTransform();\r\n\r\n    }\r\n\r\n    constructor(interpreter: Interpreter, runtimeObject: RuntimeObject) {\r\n\r\n        super(interpreter, runtimeObject);\r\n\r\n        let listenerTypes = [\r\n            { identifier: \"MouseUp\", signature: \"(double, double, int)\" },\r\n            { identifier: \"MouseDown\", signature: \"(double, double, int)\" },\r\n            { identifier: \"MouseMove\", signature: \"(double, double)\" },\r\n            { identifier: \"MouseEnter\", signature: \"(double, double)\" },\r\n            { identifier: \"MouseLeave\", signature: \"(double, double)\" },\r\n        ];\r\n\r\n        let sd: MouseListenerShapeData = null;\r\n\r\n        for (let lt of listenerTypes) {\r\n            let method: Method = (<Klass>runtimeObject.class).getMethodBySignature(\"on\" + lt.identifier + lt.signature);\r\n\r\n            if (method?.program != null || method?.invoke != null) {\r\n\r\n                if (sd == null) {\r\n                    sd = {\r\n                        shapeHelper: this,\r\n                        types: {},\r\n                        methods: {}\r\n                    };\r\n                    this.worldHelper.mouseListenerShapes.push(sd);\r\n                }\r\n\r\n                sd.types[lt.identifier.toLowerCase()] = true;\r\n                sd.methods[lt.identifier.toLowerCase()] = method;\r\n\r\n            }\r\n        }\r\n\r\n        if (this.worldHelper.defaultGroup == null) {\r\n            this.worldHelper.shapes.push(this);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    setHitPolygonDirty(dirty: boolean) {\r\n        this.hitPolygonDirty = dirty;\r\n    }\r\n\r\n    bringOnePlaneFurtherToFront() {\r\n        let container: PIXI.Container = <PIXI.Container>this.displayObject.parent;\r\n        let highestIndex = container.children.length - 1;\r\n        let index = container.getChildIndex(this.displayObject);\r\n        if (index < highestIndex) {\r\n            container.setChildIndex(this.displayObject, index + 1);\r\n        }\r\n    }\r\n\r\n    bringOnePlaneFurtherToBack() {\r\n        let container: PIXI.Container = <PIXI.Container>this.displayObject.parent;\r\n        let index = container.getChildIndex(this.displayObject);\r\n        if (index > 0) {\r\n            container.setChildIndex(this.displayObject, index - 1);\r\n        }\r\n    }\r\n\r\n    bringToFront() {\r\n        let container: PIXI.Container = <PIXI.Container>this.displayObject.parent;\r\n        let highestIndex = container.children.length - 1;\r\n\r\n        if (this.belongsToGroup != null) {\r\n            this.belongsToGroup.setChildIndex(this, highestIndex);\r\n        } else {\r\n            container.setChildIndex(this.displayObject, highestIndex);\r\n        }\r\n    }\r\n\r\n    sendToBack() {\r\n        if (this.belongsToGroup != null) {\r\n            this.belongsToGroup.setChildIndex(this, 0);\r\n        } else {\r\n            let container: PIXI.Container = <PIXI.Container>this.displayObject.parent;\r\n            container.setChildIndex(this.displayObject, 0);\r\n        }\r\n    }\r\n\r\n    addToDefaultGroupAndSetDefaultVisibility() {\r\n\r\n        this.displayObject.visible = FilledShapeDefaults.defaultVisibility;\r\n\r\n        if (this.worldHelper.defaultGroup != null) {\r\n            this.runtimeObject.intrinsicData[\"Actor\"] = this;\r\n            let groupHelper = <GroupHelper>this.worldHelper.defaultGroup;\r\n            groupHelper.add(this.runtimeObject);\r\n        }\r\n    }\r\n\r\n    tint(color: string | number | RuntimeObject) {\r\n        let c: number;\r\n        if (color instanceof RuntimeObject) {\r\n            color = (<ColorClassIntrinsicData>(color.intrinsicData)).hex;\r\n        }\r\n        if (typeof color == 'string') {\r\n            c = ColorHelper.parseColorToOpenGL(color).color;\r\n        } else {\r\n            c = color;\r\n        }\r\n        //@ts-ignore\r\n        if (this.displayObject.tint) {\r\n            //@ts-ignore\r\n            this.displayObject.tint = c;\r\n        }\r\n        this.render();\r\n    }\r\n\r\n    setVisible(visible: boolean) {\r\n\r\n        this.displayObject.visible = visible;\r\n    }\r\n\r\n    collidesWithAnyShape(): boolean {\r\n        this.displayObject.updateTransform();\r\n        if (this.hitPolygonDirty) this.transformHitPolygon();\r\n\r\n        for (let shapeHelper of this.worldHelper.shapes) {\r\n            if (this == shapeHelper) continue;\r\n\r\n            if (shapeHelper[\"shapes\"] || shapeHelper[\"turtle\"]) {\r\n                if (shapeHelper.collidesWith(this)) {\r\n                    return true;\r\n                } else {\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            if (this[\"turtle\"]) {\r\n                if (this.collidesWith(shapeHelper)) {\r\n                    return true;\r\n                } else {\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            let bb = this.displayObject.getBounds();\r\n            let bb1 = shapeHelper.displayObject.getBounds();\r\n\r\n            if (bb.left > bb1.right || bb1.left > bb.right) continue;\r\n\r\n            if (bb.top > bb1.bottom || bb1.top > bb.bottom) continue;\r\n\r\n            // boundig boxes collide, so check further:\r\n            if (shapeHelper.hitPolygonDirty) shapeHelper.transformHitPolygon();\r\n\r\n            // return polygonBerührtPolygon(this.hitPolygonTransformed, shapeHelper.hitPolygonTransformed);\r\n            if (polygonBerührtPolygonExakt(this.hitPolygonTransformed, shapeHelper.hitPolygonTransformed, true, true)) {\r\n                return true;\r\n            }\r\n\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    collidesWith(shapeHelper: ShapeHelper) {\r\n\r\n        // if(!(this instanceof TurtleHelper) && (shapeHelper instanceof TurtleHelper)){\r\n        if (this[\"lineElements\"] == null && (shapeHelper[\"lineElements\"] != null)) {\r\n            return shapeHelper.collidesWith(this);\r\n        }\r\n\r\n        if (shapeHelper[\"shapes\"]) {\r\n            return shapeHelper.collidesWith(this);\r\n        }\r\n\r\n        if (this.displayObject == null || shapeHelper.displayObject == null) return;\r\n\r\n        this.displayObject.updateTransform();\r\n        shapeHelper.displayObject.updateTransform();\r\n\r\n        let bb = this.displayObject.getBounds();\r\n        let bb1 = shapeHelper.displayObject.getBounds();\r\n\r\n        if (bb.left > bb1.right || bb1.left > bb.right) return false;\r\n\r\n        if (bb.top > bb1.bottom || bb1.top > bb.bottom) return false;\r\n\r\n        if (this.hitPolygonInitial == null || shapeHelper.hitPolygonInitial == null) return true;\r\n\r\n        // boundig boxes collide, so check further:\r\n        if (this.hitPolygonDirty) this.transformHitPolygon();\r\n        if (shapeHelper.hitPolygonDirty) shapeHelper.transformHitPolygon();\r\n\r\n        // return polygonBerührtPolygon(this.hitPolygonTransformed, shapeHelper.hitPolygonTransformed);\r\n        return polygonBerührtPolygonExakt(this.hitPolygonTransformed, shapeHelper.hitPolygonTransformed, true, true);\r\n\r\n    }\r\n\r\n    directionRelativeTo(shapeHelper: ShapeHelper, directionType: Enum) {\r\n        this.displayObject.updateTransform();\r\n        shapeHelper.displayObject.updateTransform();\r\n\r\n        let bb = this.displayObject.getBounds();\r\n        let bb1 = shapeHelper.displayObject.getBounds();\r\n\r\n        let dx1 = bb1.left - bb.right;  // positive if left\r\n        let dx2 = bb.left - bb1.right;  // positive if right\r\n\r\n        let dy1 = bb1.top - bb.bottom;  // positive if top\r\n        let dy2 = bb.top - bb1.bottom;  // positive if bottom\r\n\r\n        let enuminfo = directionType.enumInfoList;\r\n        let pairs: { distance: number, ei: EnumInfo }[] = [];\r\n\r\n        if (this.lastMoveDx > 0) {\r\n            pairs.push({ distance: dx1, ei: enuminfo[3] });\r\n        } else if (this.lastMoveDx < 0) {\r\n            pairs.push({ distance: dx2, ei: enuminfo[1] });\r\n        }\r\n\r\n        if (this.lastMoveDy > 0) {\r\n            pairs.push({ distance: dy1, ei: enuminfo[0] });\r\n        } else if (this.lastMoveDy < 0) {\r\n            pairs.push({ distance: dy2, ei: enuminfo[2] });\r\n        }\r\n\r\n        if (pairs.length == 0) {\r\n            pairs = [\r\n                { distance: dx1, ei: enuminfo[3] },\r\n                { distance: dx2, ei: enuminfo[1] },\r\n                { distance: dy1, ei: enuminfo[0] },\r\n                { distance: dy2, ei: enuminfo[2] }\r\n            ]\r\n        }\r\n\r\n\r\n        let max = pairs[0].distance;\r\n        let ei = pairs[0].ei;\r\n        for (let i = 1; i < pairs.length; i++) {\r\n            if (pairs[i].distance > max) {\r\n                max = pairs[i].distance;\r\n                ei = pairs[i].ei;\r\n            }\r\n        }\r\n\r\n        return ei.object;\r\n    }\r\n\r\n\r\n    moveBackFrom(sh1: ShapeHelper, keepColliding: boolean) {\r\n\r\n        // subsequent calls to move destroy values in this.lastMoveDx and this.lastMoveDy, so:\r\n        let lmdx = this.lastMoveDx;\r\n        let lmdy = this.lastMoveDy;\r\n\r\n        let length = Math.sqrt(lmdx * lmdx + lmdy * lmdy);\r\n        if (length < 0.001) return;\r\n\r\n        if (!this.collidesWith(sh1)) return;\r\n\r\n        let parameterMax = 0;       // collision with this parameter\r\n        this.move(-lmdx, -lmdy);\r\n\r\n        let currentParameter = -1;  // move to parameterMin\r\n\r\n        while (this.collidesWith(sh1)) {\r\n            parameterMax = currentParameter;    // collision at this parameter\r\n            let newParameter = currentParameter * 2;\r\n            this.move(lmdx * (newParameter - currentParameter), lmdy * (newParameter - currentParameter));\r\n            currentParameter = newParameter;\r\n            if ((currentParameter + 1) * length < -100) {\r\n                this.move(lmdx * (-1 - currentParameter), lmdy * (-1 - currentParameter));\r\n                return;\r\n            }\r\n        }\r\n        let parameterMin = currentParameter;\r\n\r\n        let isColliding: boolean = false;\r\n        // Situation now: no collision at parameterMin == currentParameter, collision at parameterMax\r\n        while ((parameterMax - parameterMin) * length > 1) {\r\n            let np = (parameterMax + parameterMin) / 2;\r\n            this.move(lmdx * (np - currentParameter), lmdy * (np - currentParameter));\r\n            if (isColliding = this.collidesWith(sh1)) {\r\n                parameterMax = np;\r\n            } else {\r\n                parameterMin = np;\r\n            }\r\n            currentParameter = np;\r\n        }\r\n\r\n        if (keepColliding && !isColliding) {\r\n            this.move(lmdx * (parameterMax - currentParameter), lmdy * (parameterMax - currentParameter));\r\n        } else if (isColliding && !keepColliding) {\r\n            this.move(lmdx * (parameterMin - currentParameter), lmdy * (parameterMin - currentParameter));\r\n        }\r\n\r\n        this.lastMoveDx = lmdx;\r\n        this.lastMoveDy = lmdy;\r\n    }\r\n\r\n\r\n\r\n    containsPoint(x: number, y: number) {\r\n        if (!this.displayObject.getBounds().contains(x, y)) return false;\r\n\r\n        if (this.hitPolygonInitial == null) return true;\r\n\r\n        if (this.hitPolygonDirty) this.transformHitPolygon();\r\n        return polygonEnthältPunkt(this.hitPolygonTransformed, { x: x, y: y });\r\n    }\r\n\r\n    transformHitPolygon() {\r\n        let p = new PIXI.Point(this.centerXInitial, this.centerYInitial);\r\n        this.displayObject.updateTransform();\r\n        this.displayObject.transform.worldTransform.apply(p, p);\r\n\r\n        this.hitPolygonTransformed = [];\r\n        let m = this.displayObject.transform.worldTransform;\r\n        for (let p of this.hitPolygonInitial) {\r\n            this.hitPolygonTransformed.push({\r\n                x: (m.a * p.x) + (m.c * p.y) + m.tx,\r\n                y: (m.b * p.x) + (m.d * p.y) + m.ty\r\n            });\r\n        }\r\n        this.setHitPolygonDirty(false);\r\n\r\n    }\r\n\r\n    isOutsideView() {\r\n        let bounds = this.displayObject.getBounds(true);\r\n        let wh = this.worldHelper;\r\n        return bounds.right < wh.currentLeft || bounds.left > wh.currentLeft + wh.currentWidth\r\n            || bounds.bottom < wh.currentTop || bounds.top > wh.currentTop + wh.currentHeight;\r\n    }\r\n\r\n    defineCenter(x: number, y: number) {\r\n        let p = new PIXI.Point(x, y);\r\n        this.displayObject.transform.worldTransform.applyInverse(p, p);\r\n        this.centerXInitial = p.x;\r\n        this.centerYInitial = p.y;\r\n    }\r\n\r\n    defineCenterRelative(x: number, y: number) {\r\n        let bounds = this.displayObject.getBounds(false);\r\n        this.defineCenter(bounds.left + bounds.width * x, bounds.top + bounds.height * y);\r\n    }\r\n\r\n    move(dx: number, dy: number) {\r\n\r\n        if (dx != 0 || dy != 0) {\r\n            this.lastMoveDx = dx;\r\n            this.lastMoveDy = dy;\r\n        }\r\n\r\n        this.displayObject.localTransform.translate(dx, dy);\r\n        //@ts-ignore\r\n        this.displayObject.transform.onChange();\r\n        this.displayObject.updateTransform();\r\n        this.setHitPolygonDirty(true);\r\n    }\r\n\r\n    forward(distance: number) {\r\n        let dx = distance * Math.cos(this.directionRad);\r\n        let dy = -distance * Math.sin(this.directionRad);\r\n        this.move(dx, dy);\r\n    }\r\n\r\n    rotate(angleInDeg: number, cX?: number, cY?: number) {\r\n\r\n        if (cX == null) {\r\n            let p = new PIXI.Point(this.centerXInitial, this.centerYInitial);\r\n            this.displayObject.localTransform.apply(p, p);\r\n            cX = p.x;\r\n            cY = p.y;\r\n        } else {\r\n            let p = new PIXI.Point(cX, cY);\r\n            this.displayObject.updateTransform();       // necessary if world coordinate system is scaled\r\n            this.displayObject.transform.worldTransform.applyInverse(p, p);\r\n            this.displayObject.localTransform.apply(p, p);\r\n            cX = p.x;\r\n            cY = p.y;\r\n        }\r\n\r\n        this.displayObject.localTransform.translate(-cX, -cY);\r\n        this.displayObject.localTransform.rotate(-angleInDeg / 180 * Math.PI);\r\n        this.displayObject.localTransform.translate(cX, cY);\r\n        //@ts-ignore\r\n        this.displayObject.transform.onChange();\r\n        this.displayObject.updateTransform();\r\n        this.setHitPolygonDirty(true);\r\n\r\n        this.angle += angleInDeg;\r\n        this.directionRad += angleInDeg / 180 * Math.PI;\r\n    }\r\n\r\n    mirrorXY(scaleX: number, scaleY: number) {\r\n        let cX: number, cY: number;\r\n\r\n        let p = new PIXI.Point(this.centerXInitial, this.centerYInitial);\r\n        this.displayObject.localTransform.apply(p, p);\r\n        cX = p.x;\r\n        cY = p.y;\r\n\r\n        this.displayObject.localTransform.translate(-cX, -cY);\r\n        this.displayObject.localTransform.scale(scaleX, scaleY);\r\n        this.displayObject.localTransform.translate(cX, cY);\r\n        //@ts-ignore\r\n        this.displayObject.transform.onChange();\r\n        this.displayObject.updateTransform();\r\n\r\n        this.setHitPolygonDirty(true);\r\n\r\n    }\r\n\r\n\r\n    scale(factor: number, cX?: number, cY?: number) {\r\n\r\n        if (cX == null) {\r\n            let p = new PIXI.Point(this.centerXInitial, this.centerYInitial);\r\n            this.displayObject.localTransform.apply(p, p);\r\n            cX = p.x;\r\n            cY = p.y;\r\n        } else {\r\n            let p = new PIXI.Point(cX, cY);\r\n            this.displayObject.transform.worldTransform.applyInverse(p, p);\r\n            this.displayObject.localTransform.apply(p, p);\r\n            cX = p.x;\r\n            cY = p.y;\r\n        }\r\n\r\n        this.displayObject.localTransform.translate(-cX, -cY);\r\n        this.displayObject.localTransform.scale(factor, factor);\r\n        this.displayObject.localTransform.translate(cX, cY);\r\n        //@ts-ignore\r\n        this.displayObject.transform.onChange();\r\n        this.displayObject.updateTransform();\r\n\r\n        this.setHitPolygonDirty(true);\r\n\r\n        this.scaleFactor *= factor;\r\n\r\n    }\r\n\r\n    public getCenterX(): number {\r\n        let p = new PIXI.Point(this.centerXInitial, this.centerYInitial);\r\n        this.displayObject.updateTransform();\r\n        // this.displayObject.localTransform.apply(p, p);\r\n        this.displayObject.transform.worldTransform.apply(p, p);\r\n        return p.x;\r\n    }\r\n\r\n    public getCenterY(): number {\r\n        let p = new PIXI.Point(this.centerXInitial, this.centerYInitial);\r\n        this.displayObject.updateTransform();\r\n        this.displayObject.transform.worldTransform.apply(p, p);\r\n        return p.y;\r\n    }\r\n\r\n    public abstract render(): void;\r\n\r\n    public destroy(): void {\r\n        super.destroy();\r\n        if (this.belongsToGroup != null) {\r\n            this.belongsToGroup.remove(this.runtimeObject);\r\n        } else {\r\n            let index = this.worldHelper.shapes.indexOf(this);\r\n            if (index >= 0) this.worldHelper.shapes.splice(index, 1);\r\n        }\r\n\r\n        let index1 = this.worldHelper.shapesNotAffectedByWorldTransforms.indexOf(this);\r\n        if (index1 >= 0) {\r\n            this.worldHelper.shapesNotAffectedByWorldTransforms.splice(index1, 1);\r\n        }\r\n\r\n    }\r\n\r\n    getCollidingShapes(groupHelper: GroupHelper, shapeType: Type): any {\r\n        let collidingShapes: Value[] = [];\r\n        for (let shape of groupHelper.shapes) {\r\n            let shapeHelper: ShapeHelper = <ShapeHelper>shape.intrinsicData[\"Actor\"];\r\n            if (shapeHelper.collidesWith(this)) {\r\n                collidingShapes.push({\r\n                    type: shapeType,\r\n                    value: shape\r\n                });\r\n            }\r\n        }\r\n\r\n        return collidingShapes;\r\n    }\r\n\r\n    abstract getCopy(klass: Klass): RuntimeObject;\r\n\r\n    getHitPolygon(vector2Class: Klass): Value[] {\r\n\r\n        if (this.hitPolygonDirty) {\r\n            this.transformHitPolygon();\r\n        }\r\n\r\n        let ret: Value[] = [];\r\n        for (let p of this.hitPolygonTransformed) {\r\n            let ro = new RuntimeObject(vector2Class);\r\n            ro.attributes = [{ type: doublePrimitiveType, value: p.x }, { type: doublePrimitiveType, value: p.y }];\r\n            ret.push({ type: vector2Class, value: ro });\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    setStatic(isStatic: boolean) {\r\n        let list = this.worldHelper.shapesNotAffectedByWorldTransforms;\r\n        if (isStatic) {\r\n            list.push(this);\r\n        } else {\r\n            let index = list.indexOf(this);\r\n            if (index >= 0) {\r\n                list.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getParentGroup(): RuntimeObject {\r\n        return this.belongsToGroup?.runtimeObject || null\r\n    }\r\n\r\n\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { doublePrimitiveType, intPrimitiveType, stringPrimitiveType, voidPrimitiveType, booleanPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { FilledShapeHelper } from \"./FilledShape.js\";\r\nimport { WorldHelper } from \"./World.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { ShapeHelper } from \"./Shape.js\";\r\nimport { ColorHelper } from \"./ColorHelper.js\";\r\nimport { ColorClassIntrinsicData } from \"./Color.js\";\r\nimport { isPrefixUnaryExpression } from \"typescript\";\r\nimport { BufferResource } from \"@pixi/core\";\r\nimport { FORMATS } from \"@pixi/constants\";\r\n\r\nexport class BitmapClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Bitmap\", module, \"Rechteckige Bitmap mit beliebiger Auflösung und Positionierung in der Grafikausgabe\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Shape\"));\r\n\r\n        // this.addAttribute(new Attribute(\"PI\", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, \"Die Kreiszahl Pi (3.1415...)\"));\r\n\r\n        let colorType: Klass = <Klass>this.module.typeStore.getType(\"Color\");\r\n\r\n        this.addMethod(new Method(\"Bitmap\", new Parameterlist([\r\n            { identifier: \"pointsX\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"pointsY\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"left\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"top\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"displayWidth\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"displayHeight\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let pointsX: number = parameters[1].value;\r\n                let pointsY: number = parameters[2].value;\r\n                let left: number = parameters[3].value;\r\n                let top: number = parameters[4].value;\r\n                let width: number = parameters[5].value;\r\n                let height: number = parameters[6].value;\r\n\r\n                let rh = new BitmapHelperNew(pointsX, pointsY, left, top, width, height, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = rh;\r\n\r\n            }, false, false, 'Instanziert eine neue Bitmap. pointsX bzw. pointsY bezeichnet Anzahl der Bildpunkte in x bzw. y-Richtung, (left, top) sind die Koordinaten der linken oberen Ecke.', true));\r\n\r\n        this.addMethod(new Method(\"getColor\", new Parameterlist([\r\n            { identifier: \"x\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), colorType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let sh: BitmapHelperNew = o.intrinsicData[\"Actor\"];\r\n\r\n                return sh.getFarbeAsObject(x, y, colorType);\r\n\r\n            }, false, false, 'Gibt die Farbe des Punkts (x, y) zurück.', false));\r\n\r\n        this.addMethod(new Method(\"setColor\", new Parameterlist([\r\n            { identifier: \"x\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"color\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let color: number = parameters[3].value;\r\n                let alpha: number = parameters[4].value;\r\n                let sh: BitmapHelperNew = o.intrinsicData[\"Actor\"];\r\n\r\n                sh.setzeFarbe(x, y, color, alpha);\r\n\r\n            }, false, false, 'Setzt die Farbe des Pixels bei (x, y). Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau und 0.0 <= alpha <= 1.0.', false));\r\n\r\n        this.addMethod(new Method(\"setColor\", new Parameterlist([\r\n            { identifier: \"x\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"color\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let color: number = parameters[3].value;\r\n                let sh: BitmapHelperNew = o.intrinsicData[\"Actor\"];\r\n\r\n                sh.setzeFarbe(x, y, color);\r\n\r\n            }, false, false, 'Setzt die Farbe des Pixels bei (x, y). Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau.', false));\r\n\r\n        this.addMethod(new Method(\"setColor\", new Parameterlist([\r\n            { identifier: \"x\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"color\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let color: string = parameters[3].value;\r\n                let sh: BitmapHelperNew = o.intrinsicData[\"Actor\"];\r\n\r\n                sh.setzeFarbe(x, y, color);\r\n\r\n            }, false, false, 'Setzt die Farbe des Pixels bei (x, y). Die Farbe ist entweder eine vordefinierte Farbe (Color.black, Color.red, ...) oder eine css-Farbe der Art \"#ffa7b3\" (ohne alpha), \"#ffa7b380\" (mit alpha), \"rgb(172, 22, 18)\" oder \"rgba(123, 22,18, 0.3)\"', false));\r\n\r\n        this.addMethod(new Method(\"setColor\", new Parameterlist([\r\n            { identifier: \"x\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"color\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let color: string = parameters[3].value;\r\n                let alpha: number = parameters[4].value;\r\n                let sh: BitmapHelperNew = o.intrinsicData[\"Actor\"];\r\n\r\n                sh.setzeFarbe(x, y, color, alpha);\r\n\r\n            }, false, false, 'Setzt die Farbe des Pixels bei (x, y). Die Farbe ist entweder eine vordefinierte Farbe (Color.black, Color.red, ...) oder eine css-Farbe der Art \"#ffa7b3\" (ohne alpha), \"#ffa7b380\" (mit alpha), \"rgb(172, 22, 18)\" oder \"rgba(123, 22,18, 0.3)\". 0.0 <= alpha <= 1.0.', false));\r\n\r\n        this.addMethod(new Method(\"setColor\", new Parameterlist([\r\n            { identifier: \"x\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"color\", type: colorType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let color: string = parameters[3].value;\r\n                let sh: BitmapHelperNew = o.intrinsicData[\"Actor\"];\r\n\r\n                sh.setzeFarbe(x, y, color);\r\n\r\n            }, false, false, 'Setzt die Farbe des Pixels bei (x, y). Die Farbe ist entweder eine vordefinierte Farbe (Color.black, Color.red, ...) oder eine css-Farbe der Art \"#ffa7b3\" (ohne alpha), \"#ffa7b380\" (mit alpha), \"rgb(172, 22, 18)\" oder \"rgba(123, 22,18, 0.3)\"', false));\r\n\r\n        this.addMethod(new Method(\"setColor\", new Parameterlist([\r\n            { identifier: \"x\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"color\", type: colorType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let color: string = parameters[3].value;\r\n                let alpha: number = parameters[4].value;\r\n                let sh: BitmapHelperNew = o.intrinsicData[\"Actor\"];\r\n\r\n                sh.setzeFarbe(x, y, color, alpha);\r\n\r\n            }, false, false, 'Setzt die Farbe des Pixels bei (x, y). Die Farbe ist entweder eine vordefinierte Farbe (Color.black, Color.red, ...) oder eine css-Farbe der Art \"#ffa7b3\" (ohne alpha), \"#ffa7b380\" (mit alpha), \"rgb(172, 22, 18)\" oder \"rgba(123, 22,18, 0.3)\". 0.0 <= alpha <= 1.0.', false));\r\n\r\n        this.addMethod(new Method(\"isColor\", new Parameterlist([\r\n            { identifier: \"x\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"colorAsRGBAString\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let color: string = parameters[3].value;\r\n                let sh: BitmapHelperNew = o.intrinsicData[\"Actor\"];\r\n\r\n                return sh.istFarbe(x, y, color);\r\n\r\n            }, false, false, 'Gibt genau dann true zurück, wenn das Pixel bei (x, y) die angegebene Farbe besitzt. Die Farbe ist entweder eine vordefinierte Farbe (Color.black, Color.red, ...) oder eine css-Farbe der Art \"#ffa7b3\" (ohne alpha), \"#ffa7b380\" (mit alpha), \"rgb(172, 22, 18)\" oder \"rgba(123, 22,18, 0.3)\"', false));\r\n\r\n        this.addMethod(new Method(\"isColor\", new Parameterlist([\r\n            { identifier: \"x\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"color\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let color: number = parameters[3].value;\r\n                let sh: BitmapHelperNew = o.intrinsicData[\"Actor\"];\r\n\r\n                return sh.istFarbe(x, y, color, 1);\r\n\r\n            }, false, false, 'Gibt genau dann true zurück, wenn das Pixel bei (x, y) die angegebene Farbe besitzt. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau und 0.0 <= alpha <= 1.0', false));\r\n\r\n        this.addMethod(new Method(\"isColor\", new Parameterlist([\r\n            { identifier: \"x\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"color\", type: colorType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let color: RuntimeObject = parameters[3].value;\r\n                let sh: BitmapHelperNew = o.intrinsicData[\"Actor\"];\r\n\r\n                return sh.istFarbe(x, y, color);\r\n\r\n            }, false, false, 'Gibt genau dann true zurück, wenn das Pixel bei (x, y) die angegebene Farbe besitzt. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau und 0.0 <= alpha <= 1.0', false));\r\n\r\n\r\n        this.addMethod(new Method(\"fillAll\", new Parameterlist([\r\n            { identifier: \"color\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: number = parameters[1].value;\r\n                let alpha: number = parameters[2].value;\r\n                let sh: BitmapHelperNew = o.intrinsicData[\"Actor\"];\r\n\r\n                sh.fillAll(color, alpha);\r\n\r\n            }, false, false, 'Füllt die ganze Bitmap mit einer Farbe. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau und 0.0 <= alpha <= 1.0', false));\r\n\r\n        this.addMethod(new Method(\"fillAll\", new Parameterlist([\r\n            { identifier: \"color\", type: colorType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: RuntimeObject = parameters[1].value;\r\n                let alpha: number = parameters[2].value;\r\n                let sh: BitmapHelperNew = o.intrinsicData[\"Actor\"];\r\n\r\n                sh.fillAll(color, alpha);\r\n\r\n            }, false, false, 'Füllt die ganze Bitmap mit einer Farbe. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau und 0.0 <= alpha <= 1.0', false));\r\n\r\n\r\n        this.addMethod(new Method(\"fillAll\", new Parameterlist([\r\n            { identifier: \"colorAsRGBAString\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: number = parameters[1].value;\r\n                let sh: BitmapHelperNew = o.intrinsicData[\"Actor\"];\r\n\r\n                sh.fillAll(color);\r\n\r\n            }, false, false, 'Füllt die ganze Bitmap mit einer Farbe. Die Farbe ist entweder eine vordefinierte Farbe (Color.black, Color.red, ...) oder eine css-Farbe der Art \"#ffa7b3\" (ohne alpha), \"#ffa7b380\" (mit alpha), \"rgb(172, 22, 18)\" oder \"rgba(123, 22,18, 0.3)\"', false));\r\n\r\n        this.addMethod(new Method(\"copy\", new Parameterlist([\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: BitmapHelperNew = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"copy\")) return;\r\n\r\n                return sh.getCopy(<Klass>o.class);\r\n\r\n            }, false, false, 'Erstellt eine Kopie des Bitmap-Objekts und git sie zurück.', false));\r\n\r\n        this.addMethod(new Method(\"clone\", new Parameterlist([\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: BitmapHelperNew = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"clone\")) return;\r\n\r\n                return sh.getCopyOrClone(<Klass>o.class, true);\r\n\r\n            }, false, false, 'Erstellt ein weiteres Bitmap-Objekt, das auf dieselben Pixeldaten zurückgreift.', false));\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport class BitmapHelperNew extends ShapeHelper {\r\n\r\n    texture: PIXI.Texture;\r\n    data: Uint32Array;\r\n\r\n    isBigEndian: boolean = true;\r\n\r\n    getCopy(klass: Klass): RuntimeObject {\r\n\r\n        return this.getCopyOrClone(klass, false)\r\n    }\r\n\r\n    getCopyOrClone(klass: Klass, clone: boolean = false): RuntimeObject {\r\n\r\n        let ro: RuntimeObject = new RuntimeObject(klass);\r\n        let bh: BitmapHelperNew = new BitmapHelperNew(this.anzahlX, this.anzahlY, this.left, this.top, this.width, this.height, this.worldHelper.interpreter, ro, this, clone);\r\n\r\n        ro.intrinsicData[\"Actor\"] = bh;\r\n\r\n        bh.copyFrom(this);\r\n        bh.render();\r\n\r\n        return ro;\r\n    }\r\n\r\n\r\n    constructor(public anzahlX, public anzahlY, public left: number, public top: number, public width: number, public height: number,\r\n        interpreter: Interpreter, runtimeObject: RuntimeObject, bitmapToCopy?: BitmapHelperNew, clone: boolean = false) {\r\n        super(interpreter, runtimeObject);\r\n\r\n        let uInt32 = new Uint32Array([0x11223344]);\r\n        let uInt8 = new Uint8Array(uInt32.buffer);\r\n\r\n        if (uInt8[0] === 0x44) {\r\n            this.isBigEndian = false;\r\n        } else if (uInt8[0] === 0x11) {\r\n            this.isBigEndian = true;\r\n        }\r\n\r\n        // TODO: Little Endian...\r\n\r\n        this.centerXInitial = left + width / 2;\r\n        this.centerYInitial = top + height / 2;\r\n\r\n        this.hitPolygonInitial = [\r\n            { x: left, y: top }, { x: left, y: top + height }, { x: left + width, y: top + height }, { x: left + width, y: top }\r\n        ];\r\n\r\n        this.initGraphics(bitmapToCopy, clone);\r\n\r\n        let sprite = <PIXI.Sprite>this.displayObject;\r\n\r\n        sprite.localTransform.scale(width / anzahlX, height / anzahlY);\r\n        sprite.localTransform.translate(left, top);\r\n        //@ts-ignore\r\n        sprite.transform.onChange();\r\n\r\n        let p = new PIXI.Point(this.centerXInitial, this.centerYInitial);\r\n        sprite.localTransform.applyInverse(p, p);\r\n        this.centerXInitial = p.x;\r\n        this.centerYInitial = p.y;\r\n\r\n\r\n        this.addToDefaultGroupAndSetDefaultVisibility();\r\n    }\r\n\r\n    render(): void {\r\n\r\n    };\r\n\r\n    protected initGraphics(bitmapToCopy?: BitmapHelperNew, clone: boolean = false) {\r\n\r\n        if (bitmapToCopy == null) {\r\n            this.data = new Uint32Array(this.anzahlX * this.anzahlY);\r\n        } else {\r\n            if (clone) {\r\n                this.data = bitmapToCopy.data;\r\n            } else {\r\n                this.data = new Uint32Array(bitmapToCopy.data);\r\n            }\r\n        }\r\n\r\n        let u8Array = new Uint8Array(this.data.buffer);\r\n\r\n        if (!clone) {\r\n            let bufferResource = new PIXI.BufferResource(u8Array, { width: this.anzahlX, height: this.anzahlY });\r\n            let bt = new PIXI.BaseTexture(bufferResource, {\r\n                scaleMode: PIXI.SCALE_MODES.NEAREST\r\n            });\r\n            this.texture = new PIXI.Texture(bt);\r\n        } else {\r\n            this.texture = bitmapToCopy.texture;\r\n        }\r\n\r\n        this.displayObject = new PIXI.Sprite(this.texture);\r\n        this.worldHelper.stage.addChild(this.displayObject);\r\n    }\r\n\r\n    uploadData() {\r\n        this.texture.baseTexture.update();\r\n    }\r\n\r\n    public getFarbeAsObject(x: number, y: number, colorType: Klass): RuntimeObject {\r\n\r\n        let i = (x + y * (this.anzahlX));\r\n\r\n        // let a = this.data[i + 3];\r\n        let rto: RuntimeObject = new RuntimeObject(colorType);\r\n\r\n        let c = this.data[i];\r\n\r\n        let red = c & 0xff;\r\n        let green = (c & 0xff00) >> 8;\r\n        let blue = (c & 0xff0000) >> 16;\r\n\r\n        let id: ColorClassIntrinsicData = {\r\n            red: red,\r\n            green: green,\r\n            blue: blue,\r\n            hex: ColorHelper.intColorToHexRGB(c >> 8)\r\n        }\r\n\r\n        rto.intrinsicData = id;\r\n\r\n        return rto;\r\n\r\n    }\r\n\r\n\r\n    public istFarbe(x: number, y: number, color: string | number | RuntimeObject, alpha?: number) {\r\n\r\n        let i = (x + y * (this.anzahlX));\r\n\r\n        let c: number;\r\n\r\n        if (color instanceof RuntimeObject) {\r\n            color = (<ColorClassIntrinsicData>(color.intrinsicData)).hex;\r\n        }\r\n\r\n        if (typeof color == \"string\") {\r\n            let ch = ColorHelper.parseColorToOpenGL(color);\r\n            c = ch.color;\r\n            alpha = ch.alpha;\r\n        } else {\r\n            c = color;\r\n        }\r\n\r\n        let c1 = this.data[i];\r\n        let red = c1 & 0xff;\r\n        let green = (c1 & 0xff00) >> 8;\r\n        let blue = (c1 & 0xff0000) >> 16;\r\n\r\n\r\n        return c == red * 0x10000 + green * 0x100 + blue;\r\n\r\n    }\r\n\r\n    public setzeFarbe(x: number, y: number, color: string | number | RuntimeObject, alpha?: number) {\r\n\r\n        let i = (x + y * (this.anzahlX));\r\n        let c: number;\r\n\r\n        if (color instanceof RuntimeObject) {\r\n            color = (<ColorClassIntrinsicData>(color.intrinsicData)).hex;\r\n        }\r\n\r\n        if (typeof color == \"string\") {\r\n            let ch = ColorHelper.parseColorToOpenGL(color);\r\n            c = ch.color;\r\n            if (alpha == null) alpha = ch.alpha;\r\n        } else {\r\n            c = color;\r\n            if (alpha == null) alpha = 1.0;\r\n        }\r\n\r\n        this.data[i] = Math.round(alpha * 255) * 0x1000000 + ((c & 0xff) << 16) + (c & 0xff00) + ((c & 0xff0000) >> 16);\r\n\r\n        this.uploadData();\r\n    }\r\n\r\n    public fillAll(color: string | number | RuntimeObject, alpha?: number) {\r\n        let c: number;\r\n\r\n        if (color instanceof RuntimeObject) {\r\n            color = (<ColorClassIntrinsicData>(color.intrinsicData)).hex;\r\n        }\r\n\r\n        if (typeof color == \"string\") {\r\n            let ch = ColorHelper.parseColorToOpenGL(color);\r\n            c = ch.color;\r\n            alpha = ch.alpha;\r\n        } else {\r\n            c = color;\r\n        }\r\n\r\n        this.data.fill(Math.round(alpha * 255) * 0x1000000 + ((c & 0xff) << 16) + (c & 0xff00) + ((c & 0xff0000) >> 16));\r\n        // this.data.fill(0xffff0000);\r\n\r\n        this.uploadData();\r\n    }\r\n\r\n    public setzeFarbeRGBA(x: number, y: number, r: number, g: number, b: number, alpha: number) {\r\n        let c = alpha * 0xff000000 + b * 0x10000 + g * 0x100 + r;\r\n        let i = (x + y * (this.anzahlX));\r\n        this.data[i] = c;\r\n        this.uploadData();\r\n    }\r\n\r\n    public getFarbe(x: number, y: number): number {\r\n        let c = this.data[x + y * this.anzahlX] & 0xffffff;\r\n        return (c & 0xff) << 16 + (c & 0xff00) + (c & 0xff0000) >> 16;\r\n    }\r\n\r\n    public getAlpha(x: number, y: number): number {\r\n        return (this.data[x + y * this.anzahlX] & 0xff000000) >> 24 / 255;\r\n    }\r\n\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass, Visibility } from \"../../compiler/types/Class.js\";\r\nimport { doublePrimitiveType, stringPrimitiveType, voidPrimitiveType, intPrimitiveType, booleanPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Attribute, Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { ColorHelper } from \"./ColorHelper.js\";\r\nimport { ShapeHelper } from \"./Shape.js\";\r\nimport { WorldHelper } from \"./World.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { ColorClassIntrinsicData } from \"./Color.js\";\r\nimport { FilledShapeDefaults } from \"./FilledShapeDefaults.js\";\r\n\r\nexport class FilledShapeClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"FilledShape\", module, \"Basisklasse für grafische Objekte mit Füllfarbe und Randfarbe, beide wahlweise auch transparent\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Shape\"));\r\n        this.isAbstract = true;\r\n\r\n        let that = this;\r\n\r\n        let colorType: Klass = <Klass>this.module.typeStore.getType(\"Color\");\r\n\r\n        this.addMethod(new Method(\"getFillColor\", new Parameterlist([\r\n        ]), colorType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                return sh.getFarbeAsObject(sh.fillColor, sh.fillColor, colorType);\r\n\r\n            }, false, false, 'Gibt die Füllfarbe des Objekts zurück.', false));\r\n\r\n        this.addMethod(new Method(\"getBorderColor\", new Parameterlist([\r\n        ]), colorType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                return sh.getFarbeAsObject(sh.borderColor, sh.borderColor, colorType);\r\n\r\n            }, false, false, 'Gibt die Randfarbe des Objekts zurück.', false));\r\n\r\n        this.addAttribute(new Attribute(\"borderWidth\", doublePrimitiveType,\r\n            (value) => {\r\n\r\n                let rto: RuntimeObject = value.object;\r\n                let helper: FilledShapeHelper = rto.intrinsicData[\"Actor\"];\r\n                if (helper == null) {\r\n                    value.value = Number.NaN;\r\n                    return;\r\n                }\r\n\r\n                value.value = helper.borderWidth;\r\n\r\n            }, false, Visibility.protected, true, \"Randbreite in Pixeln\"));\r\n\r\n        this.addMethod(new Method(\"setAlpha\", new Parameterlist([\r\n            { identifier: \"alphaValue\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let alpha: number = parameters[1].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setAlpha\")) return;\r\n\r\n                sh.setAlpha(alpha);\r\n\r\n            }, false, false, 'Setzt die Durchsichtigkeit von Füllung und Rand. 0.0 bedeutet vollkommen durchsichtig, 1.0 bedeutet vollkommen undurchsichtig.\"', false));\r\n\r\n        this.addMethod(new Method(\"getAlpha\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getAlpha\")) return;\r\n\r\n                return sh.fillAlpha;\r\n\r\n            }, false, false, 'Setzt die Durchsichtigkeit von Füllung und Rand. 0.0 bedeutet vollkommen durchsichtig, 1.0 bedeutet vollkommen undurchsichtig.\"', false));\r\n\r\n        this.addMethod(new Method(\"setDefaultBorder\", new Parameterlist([\r\n            { identifier: \"width\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"color\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let width: number = parameters[1].value;\r\n                let color: string = parameters[2].value;\r\n\r\n                FilledShapeDefaults.setDefaultBorder(width, color);\r\n\r\n            }, false, true, 'Setzt Default-Eigenschaften des Randes. Sie werden nachfolgend immer dann verwendet, wenn ein neues grafisches Objekt erstellt wird. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau und 0.0 <= alpha <= 1.0', false));\r\n\r\n        this.addMethod(new Method(\"setDefaultBorder\", new Parameterlist([\r\n            { identifier: \"width\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"color\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let width: number = parameters[1].value;\r\n                let color: number = parameters[2].value;\r\n                let alpha: number = parameters[3].value;\r\n\r\n                FilledShapeDefaults.setDefaultBorder(width, color, alpha);\r\n\r\n            }, false, true, 'Setzt Default-Eigenschaften des Randes. Sie werden nachfolgend immer dann verwendet, wenn ein neues grafisches Objekt erstellt wird. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau und 0.0 <= alpha <= 1.0', false));\r\n\r\n        this.addMethod(new Method(\"setDefaultBorder\", new Parameterlist([\r\n            { identifier: \"width\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"color\", type: colorType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let width: number = parameters[1].value;\r\n                let color: RuntimeObject = parameters[2].value;\r\n                let alpha: number = parameters[3].value;\r\n\r\n                FilledShapeDefaults.setDefaultBorder(width, color, alpha);\r\n\r\n            }, false, true, 'Setzt Default-Eigenschaften des Randes. Sie werden nachfolgend immer dann verwendet, wenn ein neues grafisches Objekt erstellt wird. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau und 0.0 <= alpha <= 1.0', false));\r\n\r\n\r\n        this.addMethod(new Method(\"setDefaultBorder\", new Parameterlist([\r\n            { identifier: \"width\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"color\", type: colorType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let width: number = parameters[1].value;\r\n                let color: RuntimeObject = parameters[2].value;\r\n                let alpha: number = parameters[3].value;\r\n\r\n                FilledShapeDefaults.setDefaultBorder(width, color);\r\n\r\n            }, false, true, 'Setzt Default-Eigenschaften des Randes. Sie werden nachfolgend immer dann verwendet, wenn ein neues grafisches Objekt erstellt wird. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau und 0.0 <= alpha <= 1.0', false));\r\n\r\n        this.addMethod(new Method(\"setDefaultFillColor\", new Parameterlist([\r\n            { identifier: \"color\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let color: number = parameters[1].value;\r\n                let alpha: number = parameters[2].value;\r\n\r\n                FilledShapeDefaults.setDefaultFillColor(color, alpha);\r\n\r\n            }, false, true, 'Setzt die Default-Füllfarbe. Sie wird nachfolgend immer dann verwendet, wenn ein neues grafisches Objekt erstellt wird. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau und 0.0 <= alpha <= 1.0', false));\r\n\r\n        this.addMethod(new Method(\"setDefaultFillColor\", new Parameterlist([\r\n            { identifier: \"color\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let color: string = parameters[1].value;\r\n\r\n                FilledShapeDefaults.setDefaultFillColor(color);\r\n\r\n            }, false, true, 'Setzt die Default-Füllfarbe. Sie wird nachfolgend immer dann verwendet, wenn ein neues grafisches Objekt erstellt wird. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau und 0.0 <= alpha <= 1.0', false));\r\n\r\n        this.addMethod(new Method(\"setDefaultFillColor\", new Parameterlist([\r\n            { identifier: \"color\", type: colorType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let color: RuntimeObject = parameters[1].value;\r\n                let alpha: number = parameters[2].value;\r\n\r\n                FilledShapeDefaults.setDefaultFillColor(color, alpha);\r\n\r\n            }, false, true, 'Setzt die Default-Füllfarbe. Sie wird nachfolgend immer dann verwendet, wenn ein neues grafisches Objekt erstellt wird. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau und 0.0 <= alpha <= 1.0', false));\r\n\r\n        this.addMethod(new Method(\"setDefaultFillColor\", new Parameterlist([\r\n            { identifier: \"color\", type: colorType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let color: RuntimeObject = parameters[1].value;\r\n\r\n                FilledShapeDefaults.setDefaultFillColor(color);\r\n\r\n            }, false, true, 'Setzt die Default-Füllfarbe. Sie wird nachfolgend immer dann verwendet, wenn ein neues grafisches Objekt erstellt wird. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau und 0.0 <= alpha <= 1.0', false));\r\n\r\n        this.addMethod(new Method(\"setFillColor\", new Parameterlist([\r\n            { identifier: \"color\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: number = parameters[1].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setFillColor\")) return;\r\n\r\n                sh.setFillColor(color);\r\n\r\n            }, false, false, 'Setzt die Füllfarbe. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau', false));\r\n\r\n\r\n        this.addMethod(new Method(\"setFillColor\", new Parameterlist([\r\n            { identifier: \"color\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: number = parameters[1].value;\r\n                let alpha: number = parameters[2].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setFillColor\")) return;\r\n\r\n                sh.setFillColor(color, alpha);\r\n\r\n            }, false, false, 'Setzt die Füllfarbe. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau und 0.0 <= alpha <= 1.0', false));\r\n\r\n        this.addMethod(new Method(\"setFillColor\", new Parameterlist([\r\n            { identifier: \"color\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: string = parameters[1].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setFillColor\")) return;\r\n\r\n                sh.setFillColor(color);\r\n\r\n            }, false, false, 'Setzt die Füllfarbe. Die Farbe ist entweder eine vordefinierte Farbe (Color.black, Color.red, ...) oder eine css-Farbe der Art \"#ffa7b3\" (ohne alpha), \"#ffa7b380\" (mit alpha), \"rgb(172, 22, 18)\" oder \"rgba(123, 22,18, 0.3)\"', false));\r\n\r\n        this.addMethod(new Method(\"setFillColor\", new Parameterlist([\r\n            { identifier: \"color\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: string = parameters[1].value;\r\n                let alpha: number = parameters[2].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setFillColor\")) return;\r\n\r\n                sh.setFillColor(color, alpha);\r\n\r\n            }, false, false, 'Setzt die Füllfarbe. Die Farbe ist entweder eine vordefinierte Farbe (Color.black, Color.red, ...) oder eine css-Farbe der Art \"#ffa7b3\" oder \"rgb(172, 22, 18)\" und 0.0 <= alpha <= 1.0\"', false));\r\n\r\n        this.addMethod(new Method(\"setFillColor\", new Parameterlist([\r\n            { identifier: \"color\", type: colorType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: RuntimeObject = parameters[1].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setFillColor\")) return;\r\n\r\n                sh.setFillColor(color);\r\n\r\n            }, false, false, 'Setzt die Füllfarbe. Die Farbe ist entweder eine vordefinierte Farbe (Color.black, Color.red, ...) oder eine css-Farbe der Art \"#ffa7b3\" (ohne alpha), \"#ffa7b380\" (mit alpha), \"rgb(172, 22, 18)\" oder \"rgba(123, 22,18, 0.3)\"', false));\r\n\r\n        this.addMethod(new Method(\"setFillColor\", new Parameterlist([\r\n            { identifier: \"color\", type: colorType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: RuntimeObject = parameters[1].value;\r\n                let alpha: number = parameters[2].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setFillColor\")) return;\r\n\r\n                sh.setFillColor(color, alpha);\r\n\r\n            }, false, false, 'Setzt die Füllfarbe. Die Farbe ist entweder eine vordefinierte Farbe (Color.black, Color.red, ...) oder eine css-Farbe der Art \"#ffa7b3\" oder \"rgb(172, 22, 18)\" und 0.0 <= alpha <= 1.0\"', false));\r\n\r\n\r\n        this.addMethod(new Method(\"setBorderColor\", new Parameterlist([\r\n            { identifier: \"color\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: number = parameters[1].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setBorderColor\")) return;\r\n\r\n                sh.setBorderColor(color);\r\n\r\n            }, false, false, 'Setzt die Randfarbe. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau\"', false));\r\n\r\n        this.addMethod(new Method(\"setBorderColor\", new Parameterlist([\r\n            { identifier: \"color\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: number = parameters[1].value;\r\n                let alpha: number = parameters[2].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setBorderColor\")) return;\r\n\r\n                sh.setBorderColor(color, alpha);\r\n\r\n            }, false, false, 'Setzt die Randfarbe. Die Farbe wird als int-Wert gegeben, wobei farbe == 255*255*rot + 255*grün + blau und 0.0 <= alpha <= 1.0\"', false));\r\n\r\n        this.addMethod(new Method(\"setBorderColor\", new Parameterlist([\r\n            { identifier: \"color\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: string = parameters[1].value;\r\n                let alpha: number = parameters[2].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setBorderColor\")) return;\r\n\r\n                sh.setBorderColor(color, alpha);\r\n\r\n            }, false, false, 'Setzt die Randfarbe. Die Farbe ist entweder eine vordefinierte Farbe (Color.black, Color.red, ...) oder eine css-Farbe der Art \"#ffa7b3\" oder \"rgb(172, 22, 18)\" und 0.0 <= alpha <= 1.0\"', false));\r\n\r\n        this.addMethod(new Method(\"setBorderColor\", new Parameterlist([\r\n            { identifier: \"colorAsRGBAString\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: string = parameters[1].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setBorderColor\")) return;\r\n\r\n                sh.setBorderColor(color);\r\n\r\n            }, false, false, 'Setzt die Randfarbe. Die Farbe ist entweder eine vordefinierte Farbe (Color.black, Color.red, ...) oder eine css-Farbe der Art \"#ffa7b3\" (ohne alpha), \"#ffa7b380\" (mit alpha), \"rgb(172, 22, 18)\" oder \"rgba(123, 22,18, 0.3)\"', false));\r\n\r\n        this.addMethod(new Method(\"setBorderColor\", new Parameterlist([\r\n            { identifier: \"color\", type: colorType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: RuntimeObject = parameters[1].value;\r\n                let alpha: number = parameters[2].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setBorderColor\")) return;\r\n\r\n                sh.setBorderColor(color, alpha);\r\n\r\n            }, false, false, 'Setzt die Randfarbe. Die Farbe ist entweder eine vordefinierte Farbe (Color.black, Color.red, ...) oder eine css-Farbe der Art \"#ffa7b3\" oder \"rgb(172, 22, 18)\" und 0.0 <= alpha <= 1.0\"', false));\r\n\r\n        this.addMethod(new Method(\"setBorderColor\", new Parameterlist([\r\n            { identifier: \"color\", type: colorType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let color: RuntimeObject = parameters[1].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setBorderColor\")) return;\r\n\r\n                sh.setBorderColor(color);\r\n\r\n            }, false, false, 'Setzt die Randfarbe. Die Farbe ist entweder eine vordefinierte Farbe (Color.black, Color.red, ...) oder eine css-Farbe der Art \"#ffa7b3\" (ohne alpha), \"#ffa7b380\" (mit alpha), \"rgb(172, 22, 18)\" oder \"rgba(123, 22,18, 0.3)\"', false));\r\n\r\n\r\n        this.addMethod(new Method(\"setBorderWidth\", new Parameterlist([\r\n            { identifier: \"widthInPixel\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let width: number = parameters[1].value;\r\n                let sh: FilledShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setBorderWidth\")) return;\r\n\r\n                sh.setBorderWidth(width);\r\n\r\n            }, false, false, 'Setzt die Linienbreite des Randes (Einheit: Pixel)\"', false));\r\n\r\n\r\n        this.setupAttributeIndicesRecursive();\r\n\r\n    }\r\n\r\n    rgbaToHex(rgb: number, alpha: number): string {\r\n        let s = rgb == null ? \"---\" : rgb.toString(16);\r\n        while (s.length < 6) s = \"0\" + s;\r\n\r\n        let a = Math.round(alpha * 255).toString(16);\r\n        if (a.length < 2) a = \"0\" + a;\r\n\r\n        return \"#\" + s + a;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport abstract class FilledShapeHelper extends ShapeHelper {\r\n\r\n    fillColor: number;\r\n    fillAlpha: number;\r\n\r\n    borderColor: number;\r\n    borderAlpha: number;\r\n    borderWidth: number;\r\n\r\n\r\n    constructor(interpreter: Interpreter, runtimeObject: RuntimeObject) {\r\n        super(interpreter, runtimeObject);\r\n        this.borderColor = FilledShapeDefaults.defaultBorderColor;\r\n        this.borderAlpha = FilledShapeDefaults.defaultBorderAlpha;\r\n        this.borderWidth = FilledShapeDefaults.defaultBorderWidth;\r\n\r\n        this.fillColor = FilledShapeDefaults.defaultFillColor;\r\n        this.fillAlpha = FilledShapeDefaults.defaultFillAlpha;\r\n    }\r\n\r\n    copyFrom(fsh: FilledShapeHelper) {\r\n        super.copyFrom(fsh);\r\n        this.fillColor = fsh.fillColor;\r\n        this.fillAlpha = fsh.fillAlpha;\r\n\r\n        this.borderColor = fsh.borderColor;\r\n        this.borderAlpha = fsh.borderAlpha;\r\n        this.borderWidth = fsh.borderWidth;\r\n    }\r\n\r\n    setAlpha(alpha: number) {\r\n\r\n        this.fillAlpha = alpha;\r\n        this.borderAlpha = alpha;\r\n        this.render();\r\n    }\r\n\r\n    setBorderColor(color: string | number | RuntimeObject, alpha?: number) {\r\n\r\n        if (color instanceof RuntimeObject) {\r\n            color = (<ColorClassIntrinsicData>(color.intrinsicData)).hex;\r\n        }\r\n\r\n        if (typeof color == \"string\") {\r\n            let c = ColorHelper.parseColorToOpenGL(color);\r\n            this.borderColor = c.color;\r\n            this.borderAlpha = alpha == null ? c.alpha : alpha;\r\n        } else {\r\n            this.borderColor = color;\r\n            this.borderAlpha = alpha;\r\n        }\r\n\r\n        this.render();\r\n\r\n    }\r\n\r\n    setFillColor(color: string | number | RuntimeObject, alpha?: number) {\r\n\r\n        if (color instanceof RuntimeObject) {\r\n            color = (<ColorClassIntrinsicData>(color.intrinsicData)).hex;\r\n        }\r\n\r\n        if (typeof color == \"string\") {\r\n            let c = ColorHelper.parseColorToOpenGL(color);\r\n            this.fillColor = c.color;\r\n            this.fillAlpha = alpha == null ? c.alpha : alpha;\r\n        } else {\r\n            this.fillColor = color;\r\n            if (alpha != null) this.fillAlpha = alpha;\r\n        }\r\n\r\n\r\n        this.render();\r\n\r\n    }\r\n\r\n    setBorderWidth(width: number) {\r\n        this.borderWidth = width;\r\n        this.render();\r\n    }\r\n\r\n    public getFarbeAsObject(color: number, alpha: number, colorType: Klass): RuntimeObject {\r\n\r\n        if (color == null) return null;\r\n\r\n        let r = (color & 0xff0000) >> 16;\r\n        let g = (color & 0xff00) >> 8;\r\n        let b = color & 0xff;\r\n\r\n        let rto: RuntimeObject = new RuntimeObject(colorType);\r\n\r\n        let id: ColorClassIntrinsicData = {\r\n            red: r,\r\n            green: g,\r\n            blue: b,\r\n            hex: ColorHelper.intColorToHexRGB(color)\r\n        }\r\n\r\n        rto.intrinsicData = id;\r\n\r\n        return rto;\r\n\r\n    }\r\n\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { doublePrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { FilledShapeHelper } from \"./FilledShape.js\";\r\nimport { WorldHelper } from \"./World.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { ShapeHelper } from \"./Shape.js\";\r\n\r\nexport class CircleClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Circle\", module, \"Kreis\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"FilledShape\"));\r\n\r\n        // this.addAttribute(new Attribute(\"PI\", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, \"Die Kreiszahl Pi (3.1415...)\"));\r\n\r\n        this.addMethod(new Method(\"Circle\", new Parameterlist([\r\n            { identifier: \"mx\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"my\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"r\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let mx: number = parameters[1].value;\r\n                let my: number = parameters[2].value;\r\n                let r: number = parameters[3].value;\r\n\r\n                let rh = new CircleHelper(mx, my, r, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = rh;\r\n\r\n            }, false, false, 'Instanziert einen neuen Kreis. (mx, my) ist der Mittelpunt, r sein Radius.', true));\r\n\r\n        this.addMethod(new Method(\"setRadius\", new Parameterlist([\r\n            { identifier: \"radius\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let r: number = parameters[1].value;\r\n                let sh: CircleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setRadius\")) return;\r\n\r\n                sh.setRadius(r);\r\n\r\n            }, false, false, 'Setzt den Radius des Kreises.\"', false));\r\n\r\n        this.addMethod(new Method(\"getRadius\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: CircleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getRadius\")) return;\r\n\r\n                return sh.r * sh.displayObject.scale.x;\r\n\r\n            }, false, false, \"Gibt den Radius zurück.\", false));\r\n\r\n        this.addMethod(new Method(\"copy\", new Parameterlist([\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: CircleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"copy\")) return;\r\n\r\n                return sh.getCopy(<Klass>o.class);\r\n\r\n            }, false, false, 'Erstellt eine Kopie des Circle-Objekts und git sie zurück.', false));\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport class CircleHelper extends FilledShapeHelper {\r\n\r\n    constructor(public mx: number, public my: number, public r: number,\r\n        interpreter: Interpreter, runtimeObject: RuntimeObject) {\r\n        super(interpreter, runtimeObject);\r\n        this.centerXInitial = mx;\r\n        this.centerYInitial = my;\r\n\r\n        this.render();\r\n        this.addToDefaultGroupAndSetDefaultVisibility();\r\n\r\n    }\r\n\r\n    getCopy(klass: Klass): RuntimeObject {\r\n\r\n        let ro: RuntimeObject = new RuntimeObject(klass);\r\n        let rh: CircleHelper = new CircleHelper(this.mx, this.my, this.r, this.worldHelper.interpreter, ro);\r\n        ro.intrinsicData[\"Actor\"] = rh;\r\n\r\n        rh.copyFrom(this);\r\n        rh.render();\r\n\r\n        return ro;\r\n    }\r\n\r\n\r\n    render(): void {\r\n\r\n        this.hitPolygonInitial = [];\r\n\r\n        let deltaAlpha = Math.PI / 8;\r\n        for (let i = 0; i < 16; i++) {\r\n            let alpha = deltaAlpha * i;\r\n            this.hitPolygonInitial.push({\r\n                x: this.mx + this.r * Math.cos(alpha),\r\n                y: this.my + this.r * Math.sin(alpha)\r\n            });\r\n        }\r\n        this.hitPolygonDirty = true;\r\n\r\n        let g: PIXI.Graphics = <any>this.displayObject;\r\n\r\n        if (this.displayObject == null) {\r\n            g = new PIXI.Graphics();\r\n            this.displayObject = g;\r\n            this.worldHelper.stage.addChild(g);\r\n\r\n        } else {\r\n            g.clear();\r\n        }\r\n\r\n        if (this.fillColor != null) {\r\n            g.beginFill(this.fillColor, this.fillAlpha);\r\n        }\r\n        if (this.borderColor != null) {\r\n            g.lineStyle(this.borderWidth, this.borderColor, this.borderAlpha, 0.5)\r\n        }\r\n\r\n        g.drawCircle(this.mx, this.my, this.r);\r\n        g.closePath();\r\n\r\n        if (this.fillColor != null) {\r\n            g.endFill();\r\n        }\r\n\r\n    };\r\n\r\n    setRadius(r: number) {\r\n        this.r = r;\r\n        this.render();\r\n    }\r\n\r\n    isOutsideView() {\r\n\r\n        return super.isOutsideView();\r\n\r\n    }\r\n\r\n    containsPoint(x: number, y: number) {\r\n\r\n        if (!this.displayObject.getBounds().contains(x, y)) return false;\r\n\r\n        let p: PIXI.Point = new PIXI.Point(x, y);\r\n        let m = this.displayObject.transform.worldTransform;\r\n\r\n        m.applyInverse(p, p);\r\n\r\n        let dx = p.x - this.mx;\r\n        let dy = p.y - this.my;\r\n        return dx * dx + dy * dy <= this.r * this.r;\r\n\r\n    }\r\n\r\n    collidesWith(shapeHelper: ShapeHelper) {\r\n        if (shapeHelper instanceof CircleHelper) {\r\n\r\n            let p1 = new PIXI.Point(this.centerXInitial, this.centerYInitial);\r\n            this.displayObject.updateTransform();\r\n            this.displayObject.transform.worldTransform.apply(p1, p1);\r\n\r\n            let radius1 = this.r * this.displayObject.scale.x\r\n            \r\n            let p2 = new PIXI.Point(shapeHelper.centerXInitial, shapeHelper.centerYInitial);\r\n            shapeHelper.displayObject.updateTransform();\r\n            shapeHelper.displayObject.transform.worldTransform.apply(p2, p2);\r\n            \r\n            let radius2 = shapeHelper.r * shapeHelper.displayObject.scale.x\r\n\r\n            let d1 = p1.x - p2.x;\r\n            let d2 = p1.y - p2.y;\r\n\r\n            return d1*d1 + d2*d2 <= (radius1 + radius2) * (radius1 + radius2);\r\n\r\n\r\n        } else {\r\n            return super.collidesWith(shapeHelper);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { booleanPrimitiveType, doublePrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { FilledShapeHelper } from \"./FilledShape.js\";\r\nimport { WorldHelper } from \"./World.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { ShapeHelper } from \"./Shape.js\";\r\n\r\nexport class SectorClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Sector\", module, \"Kreisbogen/Kreissektor\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"FilledShape\"));\r\n\r\n        this.addMethod(new Method(\"Sector\", new Parameterlist([\r\n            { identifier: \"mx\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"my\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"r\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"startAngle\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"endAngle\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let mx: number = parameters[1].value;\r\n                let my: number = parameters[2].value;\r\n                let r: number = parameters[3].value;\r\n                let startAngle: number = parameters[4].value;\r\n                let endAngle: number = parameters[5].value;\r\n\r\n                let rh = new SectorHelper(mx, my, r, startAngle/180*Math.PI, endAngle/180*Math.PI, true, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = rh;\r\n\r\n            }, false, false, 'Instanziert einen neuen Kreisbogen bzw. (falls die Füllfarbe nicht null ist) Kreissektor. (mx, my) ist der Mittelpunt, r sein Radius. Der Kreisbogen wird von startAngle bis endAngle (beides in Grad) gegen den Uhrzeigersinn gezogen.', true));\r\n\r\n            this.addMethod(new Method(\"drawRadii\", new Parameterlist([\r\n                { identifier: \"radiiZeichnen\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            ]), null,\r\n                (parameters) => {\r\n    \r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let r: boolean = parameters[1].value;\r\n                    let sh: SectorHelper = o.intrinsicData[\"Actor\"];\r\n    \r\n                    if (sh.testdestroyed(\"drawRadii\")) return;\r\n    \r\n                    sh.drawRadii = r;\r\n                    sh.render();\r\n    \r\n                }, false, false, 'Legt fest, ob beim Zeichnen des Umrisses auch die beiden Radii ( = Strecken vom Mittelpunkt zur Kreislinie) mitgezeichnet werden sollen.', false));\r\n    \r\n\r\n        this.addMethod(new Method(\"setRadius\", new Parameterlist([\r\n            { identifier: \"radius\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let r: number = parameters[1].value;\r\n                let sh: SectorHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setRadius\")) return;\r\n\r\n                sh.setRadius(r);\r\n\r\n            }, false, false, 'Setzt den Radius des Kreisbogens/Kreissektors.\"', false));\r\n\r\n        this.addMethod(new Method(\"setStartAngle\", new Parameterlist([\r\n            { identifier: \"startWinkelInGrad\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let angle: number = parameters[1].value;\r\n                let sh: SectorHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setStartAngle\")) return;\r\n\r\n                if(angle < 0){\r\n                    angle += Math.ceil(-angle/360) * 360;\r\n                }\r\n\r\n                if(angle > 360){\r\n                    angle -= Math.trunc(angle/360) * 360;\r\n                }\r\n\r\n                sh.startAngleRad = angle/180*Math.PI;\r\n                sh.render();\r\n\r\n            }, false, false, 'Setzt den Startwinkel des Kreisbogens/Kreissektors.\"', false));\r\n\r\n            this.addMethod(new Method(\"setEndAngle\", new Parameterlist([\r\n            { identifier: \"endWinkelInGrad\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let angle: number = parameters[1].value;\r\n                let sh: SectorHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setEndAngle\")) return;\r\n\r\n                if(angle < 0){\r\n                    angle += Math.ceil(-angle/360) * 360;\r\n                }\r\n\r\n                if(angle > 360){\r\n                    angle -= Math.trunc(angle/360) * 360;\r\n                }\r\n\r\n                sh.endAngleRad = angle/180*Math.PI;\r\n                sh.render();\r\n\r\n            }, false, false, 'Setzt den Endwinkel des Kreisbogens/Kreissektors.\"', false));\r\n\r\n        this.addMethod(new Method(\"getRadius\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: SectorHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getRadius\")) return;\r\n\r\n                return sh.r * sh.displayObject.scale.x;\r\n\r\n            }, false, false, \"Gibt den Radius zurück.\", false));\r\n\r\n        this.addMethod(new Method(\"getStartAngle\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: SectorHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getStartAngle\")) return;\r\n\r\n                return sh.startAngleRad/Math.PI*180;\r\n\r\n            }, false, false, \"Gibt den Startwinkel in Grad zurück.\", false));\r\n\r\n        this.addMethod(new Method(\"getEndAngle\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: SectorHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getEndAngle\")) return;\r\n\r\n                return sh.endAngleRad/Math.PI*180;\r\n\r\n            }, false, false, \"Gibt den Endwinkel in Grad zurück.\", false));\r\n\r\n        this.addMethod(new Method(\"copy\", new Parameterlist([\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: SectorHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"copy\")) return;\r\n\r\n                return sh.getCopy(<Klass>o.class);\r\n\r\n            }, false, false, 'Erstellt eine Kopie des Sector-Objekts und git sie zurück.', false));\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport class SectorHelper extends FilledShapeHelper {\r\n\r\n    constructor(public mx: number, public my: number, public r: number,\r\n        public startAngleRad: number, public endAngleRad: number,\r\n        public drawRadii: boolean,\r\n        interpreter: Interpreter, runtimeObject: RuntimeObject) {\r\n        super(interpreter, runtimeObject);\r\n        this.centerXInitial = mx;\r\n        this.centerYInitial = my;\r\n\r\n        this.render();\r\n        this.addToDefaultGroupAndSetDefaultVisibility();\r\n\r\n    }\r\n\r\n    getCopy(klass: Klass): RuntimeObject {\r\n\r\n        let ro: RuntimeObject = new RuntimeObject(klass);\r\n        let rh: SectorHelper = new SectorHelper(this.mx, this.my, this.r, this.startAngleRad, this.endAngleRad, this.drawRadii, this.worldHelper.interpreter, ro);\r\n        ro.intrinsicData[\"Actor\"] = rh;\r\n\r\n        rh.copyFrom(this);\r\n        rh.render();\r\n\r\n        return ro;\r\n    }\r\n\r\n\r\n    render(): void {\r\n\r\n        this.hitPolygonInitial = [];\r\n\r\n        let deltaAlpha = this.endAngleRad - this.startAngleRad;\r\n        this.hitPolygonInitial.push({x: this.mx, y: this.my});\r\n\r\n        for (let i = 0; i < 16; i++) {\r\n            let alpha = this.startAngleRad + deltaAlpha * i;\r\n            this.hitPolygonInitial.push({\r\n                x: this.mx + this.r * Math.cos(alpha),\r\n                y: this.my + this.r * Math.sin(alpha)\r\n            });\r\n        }\r\n        this.hitPolygonInitial.push({x: this.mx, y: this.my});\r\n\r\n        this.hitPolygonDirty = true;\r\n\r\n        let g: PIXI.Graphics = <any>this.displayObject;\r\n\r\n        if (this.displayObject == null) {\r\n            g = new PIXI.Graphics();\r\n            this.displayObject = g;\r\n            this.worldHelper.stage.addChild(g);\r\n\r\n        } else {\r\n            g.clear();\r\n        }\r\n\r\n        if (this.fillColor != null) {\r\n            g.beginFill(this.fillColor, this.fillAlpha);\r\n        }\r\n        if (this.borderColor != null) {\r\n            g.lineStyle(this.borderWidth, this.borderColor, this.borderAlpha, 0.5)\r\n        }\r\n\r\n        if(Math.abs(this.startAngleRad - this.endAngleRad) < 0.00000001){\r\n            g.drawCircle(this.mx, this.my, this.r);\r\n        } else {\r\n            if(this.drawRadii){\r\n                g.moveTo(this.mx, this.my);\r\n            }\r\n            g.arc(this.mx, this.my, this.r, -this.startAngleRad, -this.endAngleRad, true);\r\n            if(this.drawRadii){\r\n                g.lineTo(this.mx, this.my);\r\n            }\r\n        }\r\n        if(this.drawRadii){\r\n            g.closePath();\r\n        }\r\n\r\n\r\n        if (this.fillColor != null) {\r\n            g.endFill();\r\n        }\r\n\r\n    };\r\n\r\n    setRadius(r: number) {\r\n        this.r = r;\r\n        this.render();\r\n    }\r\n\r\n    isOutsideView() {\r\n\r\n        return super.isOutsideView();\r\n\r\n    }\r\n\r\n    containsPoint(x: number, y: number) {\r\n\r\n        if (!this.displayObject.getBounds().contains(x, y)) return false;\r\n\r\n        let p: PIXI.Point = new PIXI.Point(x, y);\r\n        let m = this.displayObject.transform.worldTransform;\r\n\r\n        m.applyInverse(p, p);\r\n\r\n        let dx = p.x - this.mx;\r\n        let dy = p.y - this.my;\r\n        let angle = Math.atan2(-dy, dx);\r\n\r\n        if (dx * dx + dy * dy <= this.r * this.r) {\r\n            let towPI = 2*Math.PI;\r\n            let normalizedStartAngle = this.startAngleRad < 0 ? towPI + this.startAngleRad : this.startAngleRad;\r\n            let normalizedEndAngle = this.endAngleRad < 0 ? towPI + this.endAngleRad : this.endAngleRad;\r\n            let normalizedAngle = angle < 0 ? towPI + angle : angle;\r\n            let ret = (normalizedAngle >= normalizedStartAngle && normalizedStartAngle <= normalizedEndAngle);\r\n            if(normalizedStartAngle <= normalizedEndAngle){\r\n                return ret;\r\n            } else {\r\n                return !ret;\r\n            }  \r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { booleanPrimitiveType, doublePrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { FilledShapeHelper } from \"./FilledShape.js\";\r\nimport { WorldHelper } from \"./World.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { ShapeHelper } from \"./Shape.js\";\r\n\r\nexport class ArcClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Arc\", module, \"Kreisbogenumriss (wahlweise gefüllt)\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"FilledShape\"));\r\n\r\n        this.addMethod(new Method(\"Arc\", new Parameterlist([\r\n            { identifier: \"mx\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"my\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"innerRadius\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"outerRadius\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"startAngle\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"endAngle\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let mx: number = parameters[1].value;\r\n                let my: number = parameters[2].value;\r\n                let ri: number = parameters[3].value;\r\n                let ra: number = parameters[4].value;\r\n                let startAngle: number = parameters[5].value;\r\n                let endAngle: number = parameters[6].value;\r\n\r\n                let rh = new ArcHelper(mx, my, ri, ra, startAngle / 180 * Math.PI, endAngle / 180 * Math.PI, true, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = rh;\r\n\r\n            }, false, false, 'Instanziert einen neuen Kreisbogen. (mx, my) ist der Mittelpunt, ri sein Innenradius, ra sein Außenradius. Der Kreisbogen wird von startAngle bis endAngle (beides in Grad) gegen den Uhrzeigersinn gezogen.', true));\r\n\r\n        this.addMethod(new Method(\"setInnerRadius\", new Parameterlist([\r\n            { identifier: \"innerRadius\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let r: number = parameters[1].value;\r\n                let sh: ArcHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setRadius\")) return;\r\n                sh.ri = r;\r\n                sh.render();\r\n\r\n            }, false, false, 'Setzt den inneren Radius des Kreisbogens\"', false));\r\n\r\n        this.addMethod(new Method(\"setOuterRadius\", new Parameterlist([\r\n            { identifier: \"outerRadius\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let r: number = parameters[1].value;\r\n                let sh: ArcHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setRadius\")) return;\r\n                sh.ra = r;\r\n                sh.render();\r\n\r\n            }, false, false, 'Setzt den äußeren Radius des Kreisbogens\"', false));\r\n\r\n        this.addMethod(new Method(\"setStartAngle\", new Parameterlist([\r\n            { identifier: \"startWinkelInGrad\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let angle: number = parameters[1].value;\r\n                let sh: ArcHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setStartAngle\")) return;\r\n\r\n                if (angle < 0) {\r\n                    angle += Math.ceil(-angle / 360) * 360;\r\n                }\r\n\r\n                if (angle > 360) {\r\n                    angle -= Math.trunc(angle / 360) * 360;\r\n                }\r\n\r\n                sh.startAngleRad = angle / 180 * Math.PI;\r\n                sh.render();\r\n\r\n            }, false, false, 'Setzt den Startwinkel des Kreisbogens/Kreissektors.\"', false));\r\n\r\n        this.addMethod(new Method(\"setEndAngle\", new Parameterlist([\r\n            { identifier: \"endWinkelInGrad\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let angle: number = parameters[1].value;\r\n                let sh: ArcHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setEndAngle\")) return;\r\n\r\n                if (angle < 0) {\r\n                    angle += Math.ceil(-angle / 360) * 360;\r\n                }\r\n\r\n                if (angle > 360) {\r\n                    angle -= Math.trunc(angle / 360) * 360;\r\n                }\r\n\r\n                sh.endAngleRad = angle / 180 * Math.PI;\r\n                sh.render();\r\n\r\n            }, false, false, 'Setzt den Endwinkel des Kreisbogens/Kreissektors.\"', false));\r\n\r\n        this.addMethod(new Method(\"getInnerRadius\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ArcHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getRadius\")) return;\r\n\r\n                return sh.ri * sh.displayObject.scale.x;\r\n\r\n            }, false, false, \"Gibt den inneren Radius zurück.\", false));\r\n\r\n        this.addMethod(new Method(\"getOuterRadius\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ArcHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getOuterRadius\")) return;\r\n\r\n                return sh.ra * sh.displayObject.scale.x;\r\n\r\n            }, false, false, \"Gibt den äußeren Radius zurück.\", false));\r\n\r\n        this.addMethod(new Method(\"getStartAngle\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ArcHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getStartAngle\")) return;\r\n\r\n                return sh.startAngleRad / Math.PI * 180;\r\n\r\n            }, false, false, \"Gibt den Startwinkel in Grad zurück.\", false));\r\n\r\n        this.addMethod(new Method(\"getEndAngle\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ArcHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getEndAngle\")) return;\r\n\r\n                return sh.endAngleRad / Math.PI * 180;\r\n\r\n            }, false, false, \"Gibt den Endwinkel in Grad zurück.\", false));\r\n\r\n        this.addMethod(new Method(\"copy\", new Parameterlist([\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: ArcHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"copy\")) return;\r\n\r\n                return sh.getCopy(<Klass>o.class);\r\n\r\n            }, false, false, 'Erstellt eine Kopie des Arc-Objekts und git sie zurück.', false));\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport class ArcHelper extends FilledShapeHelper {\r\n\r\n    constructor(public mx: number, public my: number, public ri: number,\r\n        public ra: number,\r\n        public startAngleRad: number, public endAngleRad: number,\r\n        public drawRadii: boolean,\r\n        interpreter: Interpreter, runtimeObject: RuntimeObject) {\r\n        super(interpreter, runtimeObject);\r\n        this.centerXInitial = mx;\r\n        this.centerYInitial = my;\r\n\r\n        this.render();\r\n        this.addToDefaultGroupAndSetDefaultVisibility();\r\n\r\n    }\r\n\r\n    getCopy(klass: Klass): RuntimeObject {\r\n\r\n        let ro: RuntimeObject = new RuntimeObject(klass);\r\n        let rh: ArcHelper = new ArcHelper(this.mx, this.my, this.ri, this.ra, this.startAngleRad, this.endAngleRad, this.drawRadii, this.worldHelper.interpreter, ro);\r\n        ro.intrinsicData[\"Actor\"] = rh;\r\n\r\n        rh.copyFrom(this);\r\n        rh.render();\r\n\r\n        return ro;\r\n    }\r\n\r\n\r\n    render(): void {\r\n\r\n        this.hitPolygonInitial = [];\r\n\r\n        let deltaAlpha = this.endAngleRad - this.startAngleRad;\r\n\r\n        for (let i = 0; i < 16; i++) {\r\n            let alpha = this.startAngleRad + deltaAlpha * i;\r\n            this.hitPolygonInitial.push({\r\n                x: this.mx + this.ra * Math.cos(alpha),\r\n                y: this.my + this.ra * Math.sin(alpha)\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < 16; i++) {\r\n            let alpha = this.endAngleRad - deltaAlpha * i;\r\n            this.hitPolygonInitial.push({\r\n                x: this.mx + this.ri * Math.cos(alpha),\r\n                y: this.my + this.ri * Math.sin(alpha)\r\n            });\r\n        }\r\n\r\n        this.hitPolygonDirty = true;\r\n\r\n        let g: PIXI.Graphics = <any>this.displayObject;\r\n\r\n        if (this.displayObject == null) {\r\n            g = new PIXI.Graphics();\r\n            this.displayObject = g;\r\n            this.worldHelper.stage.addChild(g);\r\n\r\n        } else {\r\n            g.clear();\r\n        }\r\n\r\n        if (this.fillColor != null) {\r\n            g.beginFill(this.fillColor, this.fillAlpha);\r\n        }\r\n        if (this.borderColor != null) {\r\n            g.lineStyle(this.borderWidth, this.borderColor, this.borderAlpha, 0.5)\r\n        }\r\n\r\n\r\n        if (this.startAngleRad === void 0) { this.startAngleRad = 0; }\r\n        if (this.endAngleRad === void 0) { this.endAngleRad = Math.PI * 2; }\r\n        if (Math.abs(this.endAngleRad - this.startAngleRad) >= Math.PI * 2) {\r\n            g.drawCircle(this.mx, this.my, this.ra)\r\n                .beginHole()\r\n                .drawCircle(this.mx, this.my, this.ri)\r\n                .endHole();\r\n        } else {\r\n            g.moveTo(this.mx + this.ra * Math.cos(this.startAngleRad), this.my - this.ra * Math.sin(this.startAngleRad));\r\n            g.lineTo(this.mx + this.ri * Math.cos(this.startAngleRad), this.my - this.ri * Math.sin(this.startAngleRad));\r\n            g.arc(this.mx, this.my, this.ri, -this.startAngleRad, -this.endAngleRad, true)\r\n                .arc(this.mx, this.my, this.ra, -this.endAngleRad, -this.startAngleRad, false)\r\n        }\r\n\r\n        g.closePath();\r\n\r\n\r\n        if (this.fillColor != null) {\r\n            g.endFill();\r\n        }\r\n\r\n    };\r\n\r\n    \r\n\r\n    isOutsideView() {\r\n\r\n        return super.isOutsideView();\r\n\r\n    }\r\n\r\n    containsPoint(x: number, y: number) {\r\n\r\n        if (!this.displayObject.getBounds().contains(x, y)) return false;\r\n\r\n        let p: PIXI.Point = new PIXI.Point(x, y);\r\n        let m = this.displayObject.transform.worldTransform;\r\n\r\n        m.applyInverse(p, p);\r\n\r\n        let dx = p.x - this.mx;\r\n        let dy = p.y - this.my;\r\n        let angle = Math.atan2(-dy, dx);\r\n\r\n        let r2 = dx * dx + dy * dy;\r\n\r\n        if ( r2 <= this.ra * this.ra && r2 >= this.ri * this.ri) {\r\n            let towPI = 2 * Math.PI;\r\n            let normalizedStartAngle = this.startAngleRad < 0 ? towPI + this.startAngleRad : this.startAngleRad;\r\n            let normalizedEndAngle = this.endAngleRad < 0 ? towPI + this.endAngleRad : this.endAngleRad;\r\n            let normalizedAngle = angle < 0 ? towPI + angle : angle;\r\n            let ret = (normalizedAngle >= normalizedStartAngle && normalizedStartAngle <= normalizedEndAngle);\r\n            if (normalizedStartAngle <= normalizedEndAngle) {\r\n                return ret;\r\n            } else {\r\n                return !ret;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","import { Klass, Visibility } from \"../../compiler/types/Class.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Method, Parameterlist, Attribute } from \"../../compiler/types/Types.js\";\r\nimport { intPrimitiveType, doublePrimitiveType, voidPrimitiveType, stringPrimitiveType, booleanPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { ShapeHelper } from \"./Shape.js\";\r\nimport { ColorHelper } from \"./ColorHelper.js\";\r\nimport { FilledShapeHelper } from \"./FilledShape.js\";\r\nimport { WorldHelper, WorldClass } from \"./World.js\";\r\nimport { param } from \"jquery\";\r\n\r\nexport type ColorClassIntrinsicData = {\r\n    red: number,\r\n    green: number,\r\n    blue: number,\r\n    hex: string\r\n}\r\n\r\nexport class ColorClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Color\", module, \"Farbe\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        for (let colorName in ColorHelper.predefinedColors) {\r\n\r\n            let intColor = ColorHelper.predefinedColors[colorName];\r\n\r\n            let r: RuntimeObject = new RuntimeObject(this);\r\n\r\n            let red = (intColor & 0xff0000) >> 16;\r\n            let green = (intColor & 0xff00) >> 8;\r\n            let blue = (intColor & 0xff);\r\n\r\n            let id: ColorClassIntrinsicData = {\r\n                red: red,\r\n                green: green,\r\n                blue: blue,\r\n                hex: ColorHelper.intColorToHexRGB(intColor)\r\n            }\r\n\r\n            r.intrinsicData = id;\r\n\r\n            let a: Attribute = new Attribute(colorName, this,\r\n                (value) => { value.value = r }, true, Visibility.public, true,\r\n                \"Die Farbe \" + colorName + \" (\" + ColorHelper.intColorToHexRGB(intColor) + \") oder \" + ColorHelper.intColorToRGB(intColor));\r\n\r\n            //@ts-ignore\r\n            a.color = ColorHelper.intColorToHexRGB(intColor);\r\n\r\n            this.addAttribute(a);\r\n        }\r\n\r\n        this.setupAttributeIndicesRecursive();\r\n        this.staticClass.setupAttributeIndicesRecursive();\r\n\r\n        this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n\r\n        this.addMethod(new Method(\"Color\", new Parameterlist([\r\n            { identifier: \"red\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"green\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"blue\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let red: number = Math.trunc(parameters[1].value);\r\n                let green: number = Math.trunc(parameters[2].value);\r\n                let blue: number = Math.trunc(parameters[3].value);\r\n\r\n\r\n                let intrinsicData: ColorClassIntrinsicData = {\r\n                    red: red,\r\n                    green: green,\r\n                    blue: blue,\r\n                    hex: \"rgb(\" + red + \", \" + green + \", \" + blue + \")\"\r\n                };\r\n\r\n                o.intrinsicData = intrinsicData;\r\n\r\n            }, false, false, 'Instanziert eine neue Farbe. Red, green und blue sind die Farbanteile, jeweils als integer-Zahlen im Bereich von 0 bis 255.'\r\n            , true));\r\n\r\n        this.addMethod(new Method(\"randomColor\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                return Math.floor(Math.random() * 0xffffff);\r\n\r\n            }, false, true, 'Gibt eine zufällige Farbe (ohne Transparenz) zurück.'\r\n            , false));\r\n\r\n        this.addMethod(new Method(\"randomColor\", new Parameterlist([\r\n            { identifier: \"minimumRGBValue\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let min: number = parameters[1].value;\r\n                if (min < 0) min = 0;\r\n                if (min > 255) min = 255;\r\n\r\n                let r: number = Math.floor(Math.random() * (256 - min)) + min;\r\n                let g: number = Math.floor(Math.random() * (256 - min)) + min;\r\n                let b: number = Math.floor(Math.random() * (256 - min)) + min;\r\n\r\n                return 0x10000 * r + 0x100 * g + b;\r\n\r\n            }, false, true, 'Gibt eine zufällige Farbe (ohne Transparenz) zurück. Min ist der Mindestwert für den Rot-, Grün- und Blauanteil, wobei jeder der Anteile und daher auch min zwischen 0 und 255 (jeweils einschließlich) liegen muss.'\r\n            , false));\r\n\r\n        this.addMethod(new Method(\"randomColor\", new Parameterlist([\r\n            { identifier: \"minimumRGBValue\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"maximumRGBValue\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let min: number = parameters[1].value;\r\n                let max: number = parameters[1].value;\r\n                if (min < 0) min = 0;\r\n                if (min > 255) min = 255;\r\n                if (max < 0) max = 0;\r\n                if (max > 255) max = 255;\r\n\r\n                if (max < min) {\r\n                    let z = max;\r\n                    max = min;\r\n                    min = z;\r\n                }\r\n\r\n                let r: number = Math.floor(Math.random() * (max - min + 1)) + min;\r\n                let g: number = Math.floor(Math.random() * (max - min + 1)) + min;\r\n                let b: number = Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\n                return 0x10000 * r + 0x100 * g + b;\r\n\r\n            }, false, true, 'Gibt eine zufällige Farbe (ohne Transparenz) zurück. Min ist der Mindestwert für den Rot-, Grün- und Blauanteil, max der Höchstwert, wobei jeder der Anteile und daher auch min zwischen 0 und 255 (jeweils einschließlich) liegen muss.'\r\n            , false));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                return (<ColorClassIntrinsicData>(o.intrinsicData)).hex;\r\n\r\n            }, false, false, 'Verwandelt die Farbe in einen String.', false));\r\n\r\n        this.addMethod(new Method(\"toInt\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let cid = <ColorClassIntrinsicData>(o.intrinsicData);\r\n\r\n                return 0x10000 * cid.red + 0x100 * cid.green + cid.blue;\r\n\r\n            }, false, false, 'Verwandelt die Farbe in einen int-Wert um, genauer: gibt 0x10000 * red + 0x100 * green + blue zurück.', false));\r\n\r\n        this.addMethod(new Method(\"equals\", new Parameterlist([\r\n            { identifier: \"otherColor\", type: this, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let o1: RuntimeObject = parameters[1].value;\r\n\r\n                let d = <ColorClassIntrinsicData>(o.intrinsicData);\r\n                let d1 = <ColorClassIntrinsicData>(o1.intrinsicData);\r\n\r\n                return (d.red == d1.red && d.green == d1.green && d.blue == d1.blue);\r\n\r\n            }, false, false, 'Vergleicht zwei Farben', false));\r\n\r\n        this.addMethod(new Method(\"getRed\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                return (<ColorClassIntrinsicData>(o.intrinsicData)).red;\r\n\r\n            }, false, false, 'Gibt den Rotanteil der Farbe zurück (0 - 255).', false));\r\n\r\n        this.addMethod(new Method(\"getGreen\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                return (<ColorClassIntrinsicData>(o.intrinsicData)).green;\r\n\r\n            }, false, false, 'Gibt den Grünanteil der Farbe zurück (0 - 255).', false));\r\n\r\n        this.addMethod(new Method(\"getBlue\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                return (<ColorClassIntrinsicData>(o.intrinsicData)).blue;\r\n\r\n            }, false, false, 'Gibt den Blauanteil der Farbe zurück (0 - 255).', false));\r\n\r\n        this.addMethod(new Method(\"fromRGB\", new Parameterlist([\r\n            { identifier: \"red\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"green\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"blue\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let r: number = parameters[1].value;\r\n                let g: number = parameters[2].value;\r\n                let b: number = parameters[3].value;\r\n\r\n                r = Math.min(r, 255); r = Math.max(0, r);\r\n                g = Math.min(g, 255); g = Math.max(0, g);\r\n                b = Math.min(b, 255); b = Math.max(0, b);\r\n\r\n                return (r * 0x10000 + g * 0x100 + b);\r\n\r\n            }, false, true, 'Berechnet aus Rot-, Grün- und Blauwert (alle zwischen 0 und 255) die Farbe.', false));\r\n\r\n        this.addMethod(new Method(\"fromRGBA\", new Parameterlist([\r\n            { identifier: \"red\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"green\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"blue\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let r: number = parameters[1].value;\r\n                let g: number = parameters[2].value;\r\n                let b: number = parameters[3].value;\r\n                let a: number = parameters[4].value;\r\n\r\n                r = Math.min(r, 255); r = Math.max(0, r);\r\n                g = Math.min(g, 255); g = Math.max(0, g);\r\n                b = Math.min(b, 255); b = Math.max(0, b);\r\n\r\n                a = Math.min(a, 1); a = Math.max(0, a);\r\n\r\n                let color: string = (r * 0x1000000 + g * 0x10000 + b * 0x100 + Math.floor(a * 255)).toString(16);\r\n                while (color.length < 8) color = \"0\" + color;\r\n\r\n                return \"#\" + color;\r\n\r\n            }, false, true, 'Berechnet aus Rot-, Grün- und Blauwert (alle zwischen 0 und 255) sowie Alpha-Wert (zwischen 0 und 1) die Farbe.', false));\r\n\r\n        this.addMethod(new Method(\"fromHSLA\", new Parameterlist([\r\n            { identifier: \"hue\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"saturation\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"luminance\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"alpha\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let h: number = parameters[1].value;\r\n                let s: number = parameters[2].value;\r\n                let l: number = parameters[3].value;\r\n                let a: number = parameters[4].value;\r\n\r\n                h = Math.min(h, 360); h = Math.max(0, h);\r\n                s = Math.min(s, 100); s = Math.max(0, s);\r\n                l = Math.min(l, 100); l = Math.max(0, l);\r\n                a = Math.min(a, 1); a = Math.max(0, a);\r\n\r\n                let rgb = this.hslToRgb(h, s, l);\r\n\r\n                let color: string = (rgb.r * 0x1000000 + rgb.g * 0x10000 + rgb.b * 0x100 + Math.floor(a * 255)).toString(16);\r\n                while (color.length < 8) color = \"0\" + color;\r\n\r\n                return \"#\" + color;\r\n\r\n            }, false, true, 'Berechnet Hue (0 - 360), Saturation (0 - 100) und Luminance (0 - 100) sowie Alpha-Wert (zwischen 0 und 1) die Farbe.', false));\r\n\r\n        this.addMethod(new Method(\"fromHSL\", new Parameterlist([\r\n            { identifier: \"hue\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"saturation\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"luminance\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let h: number = parameters[1].value;\r\n                let s: number = parameters[2].value;\r\n                let l: number = parameters[3].value;\r\n\r\n                h = Math.min(h, 360); h = Math.max(0, h);\r\n                s = Math.min(s, 100); s = Math.max(0, s);\r\n                l = Math.min(l, 100); l = Math.max(0, l);\r\n\r\n                let rgb = this.hslToRgb(h, s, l);\r\n\r\n                return (rgb.r * 0x10000 + rgb.g * 0x100 + rgb.b);\r\n\r\n            }, false, true, 'Berechnet Hue (0 - 360), Saturation (0 - 100) und Luminance (0 - 100)die Farbe.', false));\r\n\r\n\r\n    }\r\n\r\n    hslToRgb(h: number, s: number, l: number): { r: number, g: number, b: number } {\r\n\r\n        s /= 100;\r\n        l /= 100;\r\n\r\n        let c = (1 - Math.abs(2 * l - 1)) * s,\r\n            x = c * (1 - Math.abs((h / 60) % 2 - 1)),\r\n            m = l - c / 2,\r\n            r = 0,\r\n            g = 0,\r\n            b = 0;\r\n\r\n        if (0 <= h && h < 60) {\r\n            r = c; g = x; b = 0;\r\n        } else if (60 <= h && h < 120) {\r\n            r = x; g = c; b = 0;\r\n        } else if (120 <= h && h < 180) {\r\n            r = 0; g = c; b = x;\r\n        } else if (180 <= h && h < 240) {\r\n            r = 0; g = x; b = c;\r\n        } else if (240 <= h && h < 300) {\r\n            r = x; g = 0; b = c;\r\n        } else if (300 <= h && h < 360) {\r\n            r = c; g = 0; b = x;\r\n        }\r\n        r = Math.round((r + m) * 255);\r\n        g = Math.round((g + m) * 255);\r\n        b = Math.round((b + m) * 255);\r\n\r\n\r\n        return {r: r, g: g, b: b}\r\n\r\n    }\r\n\r\n}\r\n\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { doublePrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { FilledShapeHelper } from \"./FilledShape.js\";\r\nimport { WorldHelper } from \"./World.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { ShapeHelper } from \"./Shape.js\";\r\n\r\nexport class EllipseClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Ellipse\", module, \"Ellipse\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"FilledShape\"));\r\n\r\n        // this.addAttribute(new Attribute(\"PI\", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, \"Die Kreiszahl Pi (3.1415...)\"));\r\n\r\n        this.addMethod(new Method(\"Ellipse\", new Parameterlist([\r\n            { identifier: \"mx\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"my\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"rx\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"ry\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let mx: number = parameters[1].value;\r\n                let my: number = parameters[2].value;\r\n                let rx: number = parameters[3].value;\r\n                let ry: number = parameters[4].value;\r\n\r\n                let rh = new EllipseHelper(mx, my, rx, ry, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = rh;\r\n\r\n            }, false, false, 'Instanziert eine neue Ellipse. (mx, my) ist der Mittelpunt, rx und ry sind ihre Radien.', true));\r\n\r\n            this.addMethod(new Method(\"setRadiusX\", new Parameterlist([\r\n                { identifier: \"rx\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            ]), null,\r\n                (parameters) => {\r\n    \r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let r: number = parameters[1].value;\r\n                    let sh: EllipseHelper = o.intrinsicData[\"Actor\"];\r\n    \r\n                    sh.setRadiusX(r);\r\n    \r\n                }, false, false, 'Setzt den x-Radius der Ellipse\"', false));\r\n\r\n            this.addMethod(new Method(\"setRadiusY\", new Parameterlist([\r\n                { identifier: \"ry\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            ]), null,\r\n                (parameters) => {\r\n    \r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let r: number = parameters[1].value;\r\n                    let sh: EllipseHelper = o.intrinsicData[\"Actor\"];\r\n    \r\n                    sh.setRadiusY(r);\r\n    \r\n                }, false, false, 'Setzt den y-Radius der Ellipse\"', false));\r\n    \r\n                this.addMethod(new Method(\"copy\", new Parameterlist([\r\n                ]), this,\r\n                    (parameters) => {\r\n        \r\n                        let o: RuntimeObject = parameters[0].value;\r\n                        let sh: EllipseHelper = o.intrinsicData[\"Actor\"];\r\n        \r\n                        if (sh.testdestroyed(\"copy\")) return;\r\n        \r\n                        return sh.getCopy(<Klass>o.class);\r\n        \r\n                    }, false, false, 'Erstellt eine Kopie des Ellipse-Objekts und git sie zurück.', false));\r\n    \r\n\r\n    }\r\n\r\n}\r\n\r\nexport class EllipseHelper extends FilledShapeHelper {\r\n\r\n    constructor(public mx: number, public my: number, public rx: number, public ry: number,\r\n        interpreter: Interpreter, runtimeObject: RuntimeObject) {\r\n        super(interpreter, runtimeObject);\r\n        this.centerXInitial = mx;\r\n        this.centerYInitial = my;\r\n\r\n        this.render();\r\n        this.addToDefaultGroupAndSetDefaultVisibility();\r\n\r\n    }\r\n\r\n    getCopy(klass: Klass): RuntimeObject {\r\n\r\n        let ro: RuntimeObject = new RuntimeObject(klass);\r\n        let rh: EllipseHelper = new EllipseHelper(this.mx, this.my, this.rx, this.ry, this.worldHelper.interpreter, ro);\r\n        ro.intrinsicData[\"Actor\"] = rh;\r\n\r\n        rh.copyFrom(this);\r\n        rh.render();\r\n\r\n        return ro;\r\n    }\r\n\r\n    \r\n    render(): void {\r\n\r\n        this.hitPolygonInitial = [];\r\n\r\n        let deltaAlpha = Math.PI/8;\r\n        for(let i = 0; i < 16; i++){\r\n            let alpha = deltaAlpha * i;\r\n            this.hitPolygonInitial.push({\r\n                x: this.mx + this.rx*Math.cos(alpha),\r\n                y: this.my + this.ry*Math.sin(alpha)\r\n            });\r\n        }\r\n\r\n        let g: PIXI.Graphics = <any>this.displayObject;\r\n\r\n        if (this.displayObject == null) {\r\n            g = new PIXI.Graphics();\r\n            this.displayObject = g;\r\n            this.worldHelper.stage.addChild(g);\r\n\r\n        } else {\r\n            g.clear();\r\n        }\r\n\r\n        if (this.fillColor != null) {\r\n            g.beginFill(this.fillColor, this.fillAlpha);\r\n        }\r\n        if (this.borderColor != null) {\r\n            g.lineStyle(this.borderWidth, this.borderColor, this.borderAlpha, 0.5)\r\n        }\r\n\r\n        g.drawEllipse(this.mx, this.my, this.rx, this.ry);\r\n        g.closePath();\r\n\r\n        if (this.fillColor != null) {\r\n            g.endFill();\r\n        }\r\n    };\r\n\r\n    setRadiusX(r: number){\r\n        this.rx = r;\r\n        this.render();\r\n    }\r\n\r\n    setRadiusY(r: number){\r\n        this.rx = r;\r\n        this.render();\r\n    }\r\n\r\n    isOutsideView() {\r\n\r\n        return super.isOutsideView();\r\n\r\n    }\r\n\r\n    containsPoint(x: number, y: number) {\r\n\r\n        if (!this.displayObject.getBounds().contains(x, y)) return false;\r\n\r\n        let p: PIXI.Point = new PIXI.Point(x, y);\r\n        let m = this.displayObject.transform.worldTransform;\r\n\r\n        m.applyInverse(p, p);\r\n\r\n        let dx = p.x - this.mx;\r\n        let dy = p.y - this.my;\r\n        return dx*dx/(this.rx*this.rx) + dy*dy/(this.ry*this.ry) <= 1;\r\n    \r\n    }\r\n    \r\n\r\n\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass, Visibility } from \"../../compiler/types/Class.js\";\r\nimport { doublePrimitiveType, intPrimitiveType, booleanPrimitiveType, voidPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Value, Attribute, Type } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { FilledShapeHelper } from \"./FilledShape.js\";\r\nimport { WorldHelper } from \"./World.js\";\r\nimport { EnumRuntimeObject } from \"../../compiler/types/Enum.js\";\r\nimport { ShapeHelper, ShapeClass } from \"./Shape.js\";\r\nimport { HitPolygonStore } from \"./PolygonStore.js\";\r\nimport { ArrayType } from \"../../compiler/types/Array.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\n\r\nexport class CollisionPairClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"CollisionPair\", module, \"Speichert die Referenzen auf zwei Figuren, die gerade kollidiert sind. Diese Klasse von den Kollisionsmethden der Klasse Group benutzt.\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        let shapeType = module.typeStore.getType(\"Shape\");\r\n\r\n        this.addAttribute(new Attribute(\"shapeA\", shapeType,\r\n            (value) => {\r\n\r\n                let rto: RuntimeObject = value.object;\r\n                value.value = rto.intrinsicData[\"ShapeA\"];\r\n\r\n            }, false, Visibility.public, true, \"Erstes an der Kollision beteiligtes Shape\"));\r\n\r\n        this.addAttribute(new Attribute(\"shapeB\", shapeType,\r\n            (value) => {\r\n\r\n                let rto: RuntimeObject = value.object;\r\n                value.value = rto.intrinsicData[\"ShapeB\"];\r\n\r\n            }, false, Visibility.public, true, \"Zweites an der Kollision beteiligtes Shape\"));\r\n\r\n        this.setupAttributeIndicesRecursive();\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport class GroupClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Group\", module, \"Klasse zum Gruppieren grafischer Elemente. Die gruppierten Elemente können miteinander verschoben, gedreht, gestreckt sowie ein- und ausgeblendet werden. Zudem besitzt die Klasse Methoden zur schnellen Erkennung von Kollision mit Elementen außerhalb der Gruppe.\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Shape\"));\r\n\r\n        let collisionPairType = module.typeStore.getType(\"CollisionPair\");\r\n        let collisionPairArrayType = new ArrayType(collisionPairType);\r\n        let shapeType = module.typeStore.getType(\"Shape\");\r\n\r\n\r\n        this.addMethod(new Method(\"Group\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let rh = new GroupHelper(module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = rh;\r\n\r\n            }, false, false, 'Instanziert eine neue Gruppe. Ihr können mit der Methode add Elemente hinzugefügt werden, die dann mit der Gruppe verschoben, gedreht, ... werden.', true));\r\n\r\n        this.addMethod(new Method(\"Group\", new Parameterlist([\r\n            { identifier: \"shapes\", type: new ArrayType(module.typeStore.getType(\"Shape\")), declaration: null, usagePositions: null, isFinal: true, isEllipsis: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let shapes: Value[] = parameters[1].value;\r\n\r\n                let rh = new GroupHelper(module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = rh;\r\n\r\n                for (let s of shapes) {\r\n                    rh.add(s.value);\r\n                }\r\n\r\n            }, false, false, 'Instanziert eine neue Gruppe und fügt die übergebenen Grafikobjekte der Gruppe hinzu. Der Gruppe können mit der Methode add weitere Grafikobjekte hinzugefügt werden, die dann mit der Gruppe verschoben, gedreht, ... werden.', true));\r\n\r\n        this.addMethod(new Method(\"add\", new Parameterlist([\r\n            { identifier: \"shapes\", type: new ArrayType(shapeType), declaration: null, usagePositions: null, isFinal: true, isEllipsis: true },\r\n\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let shapes: Value[] = parameters[1].value;\r\n                let sh: GroupHelper = <GroupHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"add\")) return;\r\n\r\n                for (let s of shapes) {\r\n                    sh.add(s.value);\r\n                }\r\n\r\n            }, false, false, 'Fügt die Grafikobjekte der Gruppe hinzu.', false));\r\n\r\n        this.addMethod(new Method(\"get\", new Parameterlist([\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n\r\n        ]), shapeType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let index: number = parameters[1].value;\r\n                let sh: GroupHelper = <GroupHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"get\")) return;\r\n\r\n                return sh.getElement(index);\r\n\r\n            }, false, false, 'Gibt das Grafikelement der Gruppe mit dem entsprechenden Index zurück. VORSICHT: Das erste Element hat Index 0!', false));\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let index: number = parameters[1].value;\r\n                let sh: GroupHelper = <GroupHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                sh.removeElementAt(index);\r\n\r\n            }, false, false, 'Entfernt das Grafikelement aus der Gruppe mit dem entsprechenden Index, zerstört es jedoch nicht. VORSICHT: Das erste Element hat Index 0!', false));\r\n\r\n        this.addMethod(new Method(\"remove\", new Parameterlist([\r\n            { identifier: \"shape\", type: shapeType, declaration: null, usagePositions: null, isFinal: true },\r\n\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let shape: RuntimeObject = parameters[1].value;\r\n                let sh: GroupHelper = <GroupHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"remove\")) return;\r\n\r\n                sh.remove(shape);\r\n                sh.worldHelper.shapes.push(shape.intrinsicData[\"Actor\"]);\r\n\r\n            }, false, false, 'Entfernt das übergebene Grafikelement aus der Gruppe, zerstört es jedoch nicht.', false));\r\n\r\n\r\n        let shapeArrayType = new ArrayType(shapeType);\r\n\r\n        this.addMethod(new Method(\"getCollidingShapes\", new Parameterlist([\r\n            { identifier: \"shape\", type: module.typeStore.getType(\"Shape\"), declaration: null, usagePositions: null, isFinal: true },\r\n\r\n        ]), shapeArrayType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let shape: RuntimeObject = parameters[1].value;\r\n                let sh: GroupHelper = <GroupHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getCollidingShapes\") || shape == null) return [];\r\n\r\n                let shapes: RuntimeObject[] = sh.getCollidingObjects(shape);\r\n\r\n                let values: Value[] = [];\r\n                for (let sh of shapes) {\r\n                    values.push({\r\n                        type: shapeType,\r\n                        value: sh\r\n                    })\r\n\r\n                }\r\n\r\n                return values;\r\n\r\n            }, false, false, 'Gibt die Objekte der Gruppe zurück, die mit dem übergebenen Shape kollidieren.', false));\r\n\r\n        this.addMethod(new Method(\"getCollisionPairs\", new Parameterlist([\r\n            { identifier: \"group\", type: this, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"maxOneCollisionPerShape\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), collisionPairArrayType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let group2: RuntimeObject = parameters[1].value;\r\n                let maxOneCollisionPerShape: boolean = parameters[2].value;\r\n                let sh: GroupHelper = <GroupHelper>o.intrinsicData[\"Actor\"];\r\n                let groupHelper2: GroupHelper = <GroupHelper>group2.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getCollidingShapes\")) return;\r\n\r\n                return sh.getCollidingObjects2(groupHelper2, collisionPairType, maxOneCollisionPerShape);\r\n\r\n            }, false, false, 'Überprüft, welche Objekte der Gruppe mit welchen der anderen kollidieren.' +\r\n            ' Gibt für jede Kollision ein Collisionpair-Objekt zurück, das die beiden kollidierenden Objekte enthält.' +\r\n        ' Falls maxOneCollisionPerShape == true ist jedes Objekt dabei aber nur in max. einem Collisionpair-Objekt enthalten.', false));\r\n\r\n\r\n        this.addMethod(new Method(\"size\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: GroupHelper = <GroupHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"size\")) return;\r\n\r\n                return sh.shapes.length;\r\n\r\n            }, false, false, 'Gibt zurück, wie viele Elemente in der Gruppe enthalten sind.', false));\r\n\r\n        this.addMethod(new Method(\"empty\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: GroupHelper = <GroupHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"empty\")) return;\r\n\r\n                sh.removeAllChidren();\r\n\r\n            }, false, false, 'Entfernt alle Elemente aus der Gruppe, löscht die Elemente aber nicht.', false));\r\n\r\n        this.addMethod(new Method(\"destroyAllChildren\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: GroupHelper = <GroupHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"destroyAllChildren\")) return;\r\n\r\n                sh.destroyChildren();\r\n\r\n            }, false, false, 'Löscht alle Elemente der Gruppe, nicht aber die Gruppe selbst.', false));\r\n\r\n\r\n        (<Klass>shapeType).addMethod(new Method(\"getCollidingShapes\", new Parameterlist([\r\n            { identifier: \"group\", type: this, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), shapeArrayType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let group: RuntimeObject = parameters[1].value;\r\n                let groupHelper: GroupHelper = group.intrinsicData[\"Actor\"];\r\n                let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getCollidingShapes\")) return;\r\n\r\n                return sh.getCollidingShapes(groupHelper, shapeType);\r\n\r\n            }, false, false, 'Gibt alle Shapes der Gruppe group zurück, die mit dem Shape kollidieren.', false));\r\n\r\n        this.addMethod(new Method(\"copy\", new Parameterlist([\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: GroupHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"copy\")) return;\r\n\r\n                return sh.getCopy(<Klass>o.class);\r\n\r\n            }, false, false, 'Erstellt eine Kopie des Group-Objekts (und aller seiner enthaltenen Grafikobjekte!) und git sie zurück.', false));\r\n\r\n        this.addMethod(new Method(\"renderAsStaticBitmap\", new Parameterlist([\r\n            { identifier: \"renderAsStaticBitmap\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: GroupHelper = o.intrinsicData[\"Actor\"];\r\n                let doCache: boolean = parameters[1].value;\r\n\r\n                if (sh.testdestroyed(\"renderAsStaticBitmap\")) return;\r\n\r\n                sh.cacheAsBitmap(doCache);\r\n\r\n                return;\r\n\r\n            }, false, false, 'Zeichnet alle Objekte dieser Group in ein Bild und verwendet fortan nur noch dieses Bild, ohne die Kindelemente der Group erneut zu zeichnen. Mit dieser Methode können komplexe Bilder (z.B. ein Sternenhimmel) aufgebaut und dann statisch gemacht werden. Nach dem Aufbau brauchen sie daher kaum mehr Rechenzeit.', false));\r\n\r\n            (<Klass>shapeType).addMethod(new Method(\"getParentGroup\", new Parameterlist([\r\n            ]), this,\r\n                (parameters) => {\r\n    \r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let sh: ShapeHelper = o.intrinsicData[\"Actor\"];\r\n    \r\n                    if (sh.testdestroyed(\"getParentGroup\")) return;\r\n    \r\n                    return sh.getParentGroup();\r\n    \r\n                }, false, false, 'Gibt die Group zurück, in der sich das Grafikobjekt befindet, bzw. null, falls es in keiner Group ist.', false));\r\n    \r\n    }\r\n\r\n}\r\n\r\nexport class GroupHelper extends ShapeHelper {\r\n\r\n    shapes: RuntimeObject[] = [];\r\n\r\n    constructor(interpreter: Interpreter, runtimeObject: RuntimeObject) {\r\n        super(interpreter, runtimeObject);\r\n        this.displayObject = new PIXI.Container();\r\n        this.worldHelper.stage.addChild(this.displayObject);\r\n        this.addToDefaultGroupAndSetDefaultVisibility();\r\n\r\n    }\r\n\r\n    setChildIndex(sh: ShapeHelper, index: number) {\r\n        let container: PIXI.Container = <PIXI.Container>this.displayObject;\r\n        container.setChildIndex(sh.displayObject, index);\r\n\r\n        let oldIndex = this.shapes.indexOf(sh.runtimeObject);\r\n        this.shapes.splice(oldIndex, 1);\r\n        this.shapes.splice(index, 0, sh.runtimeObject);\r\n}\r\n\r\n\r\n    cacheAsBitmap(doCache: boolean) {\r\n        let container = <PIXI.Container>this.displayObject;\r\n\r\n        // If you set doCache to false and shortly afterwards to true: \r\n        // make shure there's at least one rendercycle in between.\r\n        if (doCache) {\r\n            setTimeout(() => {\r\n                container.cacheAsBitmap = true;\r\n            }, 300);\r\n        } else {\r\n            container.cacheAsBitmap = doCache;\r\n        }\r\n    }\r\n\r\n\r\n    removeElementAt(index: number) {\r\n        if (index < 0 || index >= this.shapes.length) {\r\n            this.worldHelper.interpreter.throwException(\"In der Gruppe gibt es kein Element mit Index \" + index + \".\");\r\n            return;\r\n        }\r\n\r\n        let shape = this.shapes[index];\r\n        this.remove(shape);\r\n    }\r\n\r\n    getElement(index: number): RuntimeObject {\r\n        if (index < 0 || index >= this.shapes.length) {\r\n            this.worldHelper.interpreter.throwException(\"In der Gruppe gibt es kein Element mit Index \" + index + \".\");\r\n            return;\r\n        }\r\n        return this.shapes[index];\r\n    }\r\n\r\n    getCopy(klass: Klass): RuntimeObject {\r\n\r\n        let ro: RuntimeObject = new RuntimeObject(klass);\r\n        let groupHelperCopy: GroupHelper = new GroupHelper(this.worldHelper.interpreter, ro);\r\n        ro.intrinsicData[\"Actor\"] = groupHelperCopy;\r\n\r\n        for (let ro of this.shapes) {\r\n            let shapeHelper: ShapeHelper = ro.intrinsicData[\"Actor\"];\r\n\r\n            let roCopy: RuntimeObject = shapeHelper.getCopy(<Klass>ro.class)\r\n            let shapeHelperCopy: ShapeHelper = roCopy.intrinsicData[\"Actor\"];\r\n\r\n            groupHelperCopy.add(roCopy);\r\n        }\r\n\r\n        groupHelperCopy.copyFrom(this);\r\n        groupHelperCopy.render();\r\n\r\n        return ro;\r\n    }\r\n\r\n    setTimerPaused(tp: boolean) {\r\n        this.timerPaused = tp;\r\n\r\n        for (let shape of this.shapes) {\r\n            let sh: ShapeHelper = <ShapeHelper>shape.intrinsicData[\"Actor\"];\r\n            sh.timerPaused = tp;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    add(shape: RuntimeObject) {\r\n\r\n        if(shape == null) return;\r\n\r\n        let shapeHelper: ShapeHelper = <ShapeHelper>shape.intrinsicData[\"Actor\"];\r\n\r\n        if (shapeHelper.isDestroyed) {\r\n            this.worldHelper.interpreter.throwException(\"Ein schon zerstörtes Objekt kann keiner Gruppe hinzugefügt werden.\");\r\n            return;\r\n        }\r\n\r\n        if (this.hasCircularReference(shape)) {\r\n            return;\r\n        }\r\n\r\n        this.shapes.push(shape);\r\n\r\n        if (shapeHelper.belongsToGroup != null) {\r\n            shapeHelper.belongsToGroup.remove(shape);\r\n        } else {\r\n            let index = this.worldHelper.shapes.indexOf(shapeHelper);\r\n            if (index >= 0) this.worldHelper.shapes.splice(index, 1);\r\n        }\r\n\r\n        shapeHelper.belongsToGroup = this;\r\n\r\n        this.displayObject.parent.updateTransform();\r\n        let inverse = new PIXI.Matrix().copyFrom(this.displayObject.transform.worldTransform);\r\n        inverse.invert();\r\n        shapeHelper.displayObject.localTransform.prepend(inverse.prepend(this.worldHelper.stage.localTransform));\r\n        //@ts-ignore\r\n        shapeHelper.displayObject.transform.onChange();\r\n\r\n        (<PIXI.Container>this.displayObject).addChild(shapeHelper.displayObject);\r\n        shapeHelper.displayObject.updateTransform();\r\n\r\n        let xSum: number = 0;\r\n        let ySum: number = 0;\r\n\r\n        for (let shape of this.shapes) {\r\n            let sh: ShapeHelper = <ShapeHelper>shape.intrinsicData[\"Actor\"];\r\n            xSum += sh.getCenterX();\r\n            ySum += sh.getCenterY();\r\n        }\r\n\r\n        let x = xSum / this.shapes.length;\r\n        let y = ySum / this.shapes.length;\r\n\r\n        this.displayObject.updateTransform();\r\n        let p1: PIXI.Point = this.displayObject.worldTransform.applyInverse(new PIXI.Point(x, y));\r\n        this.centerXInitial = p1.x;\r\n        this.centerYInitial = p1.y;\r\n    }\r\n\r\n    public removeAllChidren() {\r\n        let index: number = 0;\r\n        for (let shape of this.shapes) {\r\n            this.deregister(shape, index++);\r\n        }\r\n        this.shapes = [];\r\n    }\r\n\r\n    public remove(shape: RuntimeObject) {\r\n        let index = this.shapes.indexOf(shape);\r\n        if (index >= 0) {\r\n            this.shapes.splice(index, 1);\r\n            this.deregister(shape, index);\r\n        }\r\n    }\r\n\r\n    private deregister(shape: RuntimeObject, index: number) {\r\n        let shapeHelper: ShapeHelper = shape.intrinsicData['Actor'];\r\n\r\n        let transform = new PIXI.Matrix().copyFrom(shapeHelper.displayObject.transform.worldTransform);\r\n\r\n        (<PIXI.Container>this.displayObject).removeChild(shapeHelper.displayObject);\r\n\r\n        let inverseStageTransform = new PIXI.Matrix().copyFrom(this.worldHelper.stage.localTransform);\r\n        inverseStageTransform.invert();\r\n        shapeHelper.displayObject.localTransform.identity();\r\n        shapeHelper.displayObject.localTransform.append(transform.prepend(inverseStageTransform));\r\n        //@ts-ignore\r\n        shapeHelper.displayObject.transform.onChange();\r\n        this.worldHelper.stage.addChild(shapeHelper.displayObject);\r\n        shapeHelper.displayObject.updateTransform();\r\n        shapeHelper.belongsToGroup = null;\r\n\r\n    }\r\n\r\n\r\n    public render(): void {\r\n    }\r\n\r\n    public destroy(): void {\r\n        this.destroyChildren();\r\n        super.destroy();\r\n    }\r\n\r\n    public destroyChildren(): void {\r\n        for (let shape of this.shapes.slice(0)) {\r\n            let sh: ShapeHelper = <ShapeHelper>shape.intrinsicData[\"Actor\"];\r\n            sh.destroy();\r\n        }\r\n        this.shapes = [];\r\n    }\r\n\r\n    hasOverlappingBoundingBoxWith(shapeHelper: ShapeHelper): boolean {\r\n        this.displayObject.updateTransform();\r\n        shapeHelper.displayObject.updateTransform();\r\n\r\n        let bb = this.displayObject.getBounds();\r\n        let bb1 = shapeHelper.displayObject.getBounds();\r\n\r\n        if (bb.left > bb1.right || bb1.left > bb.right) return false;\r\n\r\n        if (bb.top > bb1.bottom || bb1.top > bb.bottom) return false;\r\n        return true;\r\n    }\r\n\r\n\r\n    collidesWith(shapeHelper: ShapeHelper) {\r\n        if (!this.hasOverlappingBoundingBoxWith(shapeHelper)) {\r\n            return false;\r\n        }\r\n\r\n        for (let shape of this.shapes) {\r\n            let sh: ShapeHelper = <ShapeHelper>shape.intrinsicData[\"Actor\"];\r\n            if (sh.collidesWith(shapeHelper)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    setHitPolygonDirty(dirty: boolean) {\r\n        for (let shape of this.shapes) {\r\n            let sh: ShapeHelper = <ShapeHelper>shape.intrinsicData[\"Actor\"];\r\n            sh.setHitPolygonDirty(dirty);\r\n        }\r\n    }\r\n\r\n    containsPoint(x: number, y: number) {\r\n        this.displayObject.updateTransform();\r\n\r\n        let bb = this.displayObject.getBounds();\r\n\r\n        if (x < bb.left || x > bb.left + bb.width || y < bb.top || y > bb.top + bb.height) {\r\n            return false;\r\n        }\r\n\r\n        for (let shape of this.shapes) {\r\n            let sh: ShapeHelper = <ShapeHelper>shape.intrinsicData[\"Actor\"];\r\n            if (sh.containsPoint(x, y)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getCollidingObjects(shape: RuntimeObject): RuntimeObject[] {\r\n\r\n        let collidingShapes: RuntimeObject[] = [];\r\n        let shapeHelper: ShapeHelper = <ShapeHelper>shape.intrinsicData[\"Actor\"];\r\n\r\n        for (let s of this.shapes) {\r\n            let sh: ShapeHelper = <ShapeHelper>s.intrinsicData[\"Actor\"];\r\n            if (sh.collidesWith(shapeHelper)) {\r\n                collidingShapes.push(s);\r\n            }\r\n        }\r\n\r\n        return collidingShapes;\r\n\r\n    }\r\n\r\n    getCollidingObjects2(groupHelper2: GroupHelper, collisionPairType: Type,\r\n        maxOneCollisionPerShape: boolean): Value[] {\r\n\r\n        let collisionPairs: Value[] = [];\r\n\r\n        let alreadyCollidedHelpers2: Map<ShapeHelper, boolean> = new Map();\r\n\r\n        for (let shape1 of this.shapes) {\r\n            let shapeHelper1: ShapeHelper = <ShapeHelper>shape1.intrinsicData[\"Actor\"];\r\n            for (let shape2 of groupHelper2.shapes) {\r\n                let shapeHelper2: ShapeHelper = <ShapeHelper>shape2.intrinsicData[\"Actor\"];\r\n                if (shapeHelper1.collidesWith(shapeHelper2)) {\r\n\r\n                    if (!maxOneCollisionPerShape || alreadyCollidedHelpers2.get(shapeHelper2) == null) {\r\n                        alreadyCollidedHelpers2.set(shapeHelper2, true);\r\n                        let rto: RuntimeObject = new RuntimeObject(<Klass>collisionPairType);\r\n\r\n                        rto.intrinsicData[\"ShapeA\"] = shapeHelper1.runtimeObject;\r\n                        rto.intrinsicData[\"ShapeB\"] = shapeHelper2.runtimeObject;\r\n                        collisionPairs.push({\r\n                            type: collisionPairType,\r\n                            value: rto\r\n                        });\r\n                    }\r\n\r\n                    if (maxOneCollisionPerShape) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return collisionPairs;\r\n\r\n    }\r\n\r\n    hasCircularReference(shapeToAdd: RuntimeObject) {\r\n        let gh = shapeToAdd.intrinsicData[\"Actor\"];\r\n        if (gh instanceof GroupHelper) {\r\n            if (gh == this) {\r\n                this.worldHelper.interpreter.throwException(\"Eine Group darf sich nicht selbst enthalten!\");\r\n                return true;\r\n            } else {\r\n                for (let shape of gh.shapes) {\r\n                    if (this.hasCircularReference(shape)) {\r\n                        return true;\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    tint(color: string) {\r\n        for (let child of this.shapes) {\r\n            (<ShapeHelper>child.intrinsicData[\"Actor\"]).tint(color);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { Type, Method, Parameterlist, Value, Attribute } from \"../../compiler/types/Types.js\";\r\nimport { Klass, Visibility } from \"../../compiler/types/Class.js\";\r\nimport { stringPrimitiveType, doublePrimitiveType, floatPrimitiveType, intPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { PrintManager } from \"../../main/gui/PrintManager.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\n\r\nexport class KeyClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"Key\", module, \"Aufzählung von Sondertasten zur Benutzung in den Methoden Actor.onKeyUp, Actor.onKeyTyped und Actor.onKeyDown\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        this.addAttribute(new Attribute(\"ArrowUp\", stringPrimitiveType, (value) => { value.value = \"ArrowUp\" }, true, Visibility.public, true, \"\"));\r\n        this.addAttribute(new Attribute(\"ArrowDown\", stringPrimitiveType, (value) => { value.value = \"ArrowDown\" }, true, Visibility.public, true, \"\"));\r\n        this.addAttribute(new Attribute(\"ArrowLeft\", stringPrimitiveType, (value) => { value.value = \"ArrowLeft\" }, true, Visibility.public, true, \"\"));\r\n        this.addAttribute(new Attribute(\"ArrowRight\", stringPrimitiveType, (value) => { value.value = \"ArrowRight\" }, true, Visibility.public, true, \"\"));\r\n        this.addAttribute(new Attribute(\"Enter\", stringPrimitiveType, (value) => { value.value = \"Enter\" }, true, Visibility.public, true, \"\"));\r\n        this.addAttribute(new Attribute(\"Space\", stringPrimitiveType, (value) => { value.value = \" \" }, true, Visibility.public, true, \"\"));\r\n        this.addAttribute(new Attribute(\"Shift\", stringPrimitiveType, (value) => { value.value = \"Shift\" }, true, Visibility.public, true, \"\"));\r\n        this.addAttribute(new Attribute(\"Alt\", stringPrimitiveType, (value) => { value.value = \"Alt\" }, true, Visibility.public, true, \"\"));\r\n        this.addAttribute(new Attribute(\"Strg\", stringPrimitiveType, (value) => { value.value = \"Control\" }, true, Visibility.public, true, \"\"));\r\n        this.addAttribute(new Attribute(\"PageUp\", stringPrimitiveType, (value) => { value.value = \"PageUp\" }, true, Visibility.public, true, \"\"));\r\n        this.addAttribute(new Attribute(\"PageDown\", stringPrimitiveType, (value) => { value.value = \"PageDown\" }, true, Visibility.public, true, \"\"));\r\n        this.addAttribute(new Attribute(\"Backspace\", stringPrimitiveType, (value) => { value.value = \"Backspace\" }, true, Visibility.public, true, \"\"));\r\n        this.addAttribute(new Attribute(\"Escape\", stringPrimitiveType, (value) => { value.value = \"Escape\" }, true, Visibility.public, true, \"\"));\r\n        this.addAttribute(new Attribute(\"Entf\", stringPrimitiveType, (value) => { value.value = \"Delete\" }, true, Visibility.public, true, \"\"));\r\n        this.addAttribute(new Attribute(\"Einf\", stringPrimitiveType, (value) => { value.value = \"Insert\" }, true, Visibility.public, true, \"\"));\r\n        this.addAttribute(new Attribute(\"Ende\", stringPrimitiveType, (value) => { value.value = \"End\" }, true, Visibility.public, true, \"\"));\r\n\r\n        this.staticClass.setupAttributeIndicesRecursive();\r\n\r\n        this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n\r\n\r\n    }\r\n\r\n}","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { doublePrimitiveType, intPrimitiveType, booleanPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Value } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { FilledShapeHelper } from \"./FilledShape.js\";\r\nimport { ArrayType } from \"../../compiler/types/Array.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { ShapeHelper } from \"./Shape.js\";\r\nimport { convexhull } from \"../../tools/ConvexHull.js\";\r\nimport { GroupHelper } from \"./Group.js\";\r\nimport { polygonEnthältPunkt, streckenzugEnthältPunkt } from \"../../tools/MatheTools.js\";\r\n\r\nexport class PolygonClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Polygon\", module, \"Wahlweise geschlossenes Polygon (mit Füllung und Rand) oder offener Streckenzug\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"FilledShape\"));\r\n        let shapeClass = <Klass>module.typeStore.getType(\"Shape\");\r\n\r\n        // this.addAttribute(new Attribute(\"PI\", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, \"Die Kreiszahl Pi (3.1415...)\"));\r\n\r\n        this.addMethod(new Method(\"Polygon\", new Parameterlist([\r\n            { identifier: \"closeAndFill\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"points\", type: new ArrayType(doublePrimitiveType), declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let closeAndFill: boolean = parameters[1].value;\r\n                let points: Value[] = parameters[2].value;\r\n\r\n                let pointsNumber: number[] = [];\r\n                points.forEach(v => pointsNumber.push(v.value));\r\n\r\n                let ph = new PolygonHelper(pointsNumber, closeAndFill, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = ph;\r\n\r\n            }, false, false, 'Instanziert ein neues Polygon. Die Punkte werden als Array von double-Werten der Form {x1, y1, x2, y2, ...} übergeben.', true));\r\n\r\n        this.addMethod(new Method(\"Polygon\", new Parameterlist([\r\n            { identifier: \"closeAndFill\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"points\", type: new ArrayType(doublePrimitiveType), declaration: null, usagePositions: null, isFinal: true, isEllipsis: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let closeAndFill: boolean = parameters[1].value;\r\n                let points: Value[] = parameters[2].value;\r\n\r\n                let pointsNumber: number[] = [];\r\n                points.forEach(v => pointsNumber.push(v.value));\r\n\r\n                let ph = new PolygonHelper(pointsNumber, closeAndFill, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = ph;\r\n\r\n            }, false, false, 'Instanziert ein neues Polygon. Die Punkte werden als double-Werte der Form x1, y1, x2, y2, ... übergeben.', true));\r\n\r\n        this.addMethod(new Method(\"Polygon\", new Parameterlist([\r\n            { identifier: \"closeAndFill\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let closeAndFill: boolean = parameters[1].value;\r\n\r\n                let pointsNumber: number[] = [];\r\n\r\n                let ph = new PolygonHelper(pointsNumber, closeAndFill, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = ph;\r\n\r\n            }, false, false, 'Instanziert ein neues Polygon ohne Punkte.', true));\r\n\r\n        this.addMethod(new Method(\"Polygon\", new Parameterlist([\r\n            { identifier: \"shape\", type: shapeClass, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let shape: RuntimeObject = parameters[1].value;\r\n\r\n                if(shape == null){\r\n                    module.main.getInterpreter().throwException(\"Die übergebene Figur ist null.\");\r\n                    return;\r\n                }\r\n\r\n                let shapeHelper: ShapeHelper = shape.intrinsicData[\"Actor\"];\r\n                shapeHelper.displayObject.getBounds();  // seems to work magic in updating transforms of children...\r\n                \r\n                let points: convexhull.Point[] = [];\r\n                points = this.extractPoints(shapeHelper, points);\r\n                points = convexhull.makeHull(points);\r\n\r\n\r\n                let pointsNumber: number[] = [];\r\n                for(let p of points){\r\n                    pointsNumber.push(p.x);\r\n                    pointsNumber.push(p.y);\r\n                }\r\n\r\n                if(pointsNumber.length > 0){\r\n                    pointsNumber = pointsNumber.concat(pointsNumber.slice(0, 2))\r\n                }\r\n\r\n                let ph = new PolygonHelper(pointsNumber, false, module.main.getInterpreter(), o, true);\r\n                o.intrinsicData[\"Actor\"] = ph;\r\n\r\n            }, false, false, 'Instanziert ein neues Polygon. Seine Punkte sind die Punkte des Hitpolygons der übergebenen Figur.', true));\r\n            \r\n        this.addMethod(new Method(\"addPoint\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let sh: PolygonHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"addPoint\")) return;\r\n\r\n                sh.addPoint(x, y);\r\n\r\n            }, false, false, 'Fügt dem Polygon einen Punkt hinzu.\"', false));\r\n\r\n            this.addMethod(new Method(\"setPoints\", new Parameterlist([\r\n                { identifier: \"points\", type: new ArrayType(doublePrimitiveType), declaration: null, usagePositions: null, isFinal: true },\r\n            ]), null,\r\n                (parameters) => {\r\n    \r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let points: Value[] = parameters[1].value;\r\n                    let sh: PolygonHelper = o.intrinsicData[\"Actor\"];\r\n    \r\n                    if (sh.testdestroyed(\"addPoints\")) return;\r\n    \r\n                    let p: { x: number, y: number }[];\r\n    \r\n                    sh.setPoints(points.map(value => value.value));\r\n    \r\n                }, false, false, 'Löscht alle Punkte des Polygons und setzt komplett neue. Diese werden in einem double[] übergeben, das abwechselnd die x- und y-Koordinaten enthält.\"', false));\r\n                \r\n        this.addMethod(new Method(\"addPoints\", new Parameterlist([\r\n            { identifier: \"points\", type: new ArrayType(doublePrimitiveType), declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let points: Value[] = parameters[1].value;\r\n                let sh: PolygonHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"addPoints\")) return;\r\n\r\n                let p: { x: number, y: number }[];\r\n\r\n                for (let i = 0; i < points.length - 1; i += 2) {\r\n                    sh.addPoint(points[i].value, points[i + 1].value, i >= points.length - 2);\r\n                }\r\n\r\n            }, false, false, 'Fügt dem Polygon mehrere Punkte hinzu. Diese werden in einem double[] übergeben, das abwechselnd die x- und y-Koordinaten enthält.\"', false));\r\n\r\n        this.addMethod(new Method(\"insertPoint\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let index: number = parameters[3].value;\r\n                let sh: PolygonHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"insertPoint\")) return;\r\n\r\n                sh.insertPoint(x, y, index);\r\n\r\n            }, false, false, 'Fügt dem Polygon einen Punkt als \"index-ter\" Punkt hinzu. index == 0 => ganz am Anfang; index == Anzahl der bisherigen Punkte => ganz am Ende;\"', false));\r\n\r\n        this.addMethod(new Method(\"movePointTo\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let index: number = parameters[3].value;\r\n                let sh: PolygonHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"insertPoint\")) return;\r\n\r\n                sh.movePointTo(x, y, index);\r\n\r\n            }, false, false, 'schiebt den index-ten Punkt nach (x, y). index == 0 => erster Punkt, index == 1 => zweiter Punkt usw.', false));\r\n\r\n        this.addMethod(new Method(\"close\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: PolygonHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"close\")) return;\r\n\r\n                sh.isClosed = true;\r\n                sh.render();\r\n\r\n            }, false, false, 'Schließt das Polygon. Diese Methode hat bei gefüllten Polygonen keinen Effekt.', false));\r\n\r\n        this.addMethod(new Method(\"open\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: PolygonHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"open\")) return;\r\n\r\n                sh.isClosed = false;\r\n                sh.render();\r\n\r\n            }, false, false, 'Öffnet das Polygon. Diese Methode hat bei gefüllten Polygonen keinen Effekt.', false));\r\n\r\n        this.addMethod(new Method(\"copy\", new Parameterlist([\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: PolygonHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"copy\")) return;\r\n\r\n                return sh.getCopy(<Klass>o.class);\r\n\r\n            }, false, false, 'Erstellt eine Kopie des Polygon-Objekts und git sie zurück.', false));\r\n\r\n\r\n    }\r\n\r\n\r\n    extractPoints(shapeHelper: ShapeHelper, points: convexhull.Point[]): convexhull.Point[]{\r\n        if(shapeHelper instanceof GroupHelper){\r\n            let points1: convexhull.Point[] = [];\r\n            for(let sh of shapeHelper.shapes){\r\n                points1 = this.extractPoints(sh.intrinsicData[\"Actor\"], points1);\r\n            }\r\n            return points.concat(points1);\r\n        } else {\r\n            if(shapeHelper.hitPolygonDirty) shapeHelper.transformHitPolygon();\r\n            return points.concat(shapeHelper.hitPolygonTransformed.map(function(punkt){return {x: punkt.x, y: punkt.y}}));\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport class PolygonHelper extends FilledShapeHelper {\r\n\r\n    isClosed: boolean = false;\r\n\r\n    constructor(points: number[], private closeAndFill: boolean,\r\n        interpreter: Interpreter, runtimeObject: RuntimeObject, isClosed: boolean = false) {\r\n        super(interpreter, runtimeObject);\r\n\r\n        this.isClosed = isClosed;\r\n        let xSum = 0; let ySum = 0;\r\n        this.hitPolygonInitial = [];\r\n\r\n        for (let i = 0; i < points.length;) {\r\n            let x = points[i++];\r\n            let y = points[i++];\r\n            xSum += x;\r\n            ySum += y;\r\n            this.hitPolygonInitial.push({ x: x, y: y });\r\n        }\r\n\r\n        if (points.length > 1) {\r\n            this.centerXInitial = xSum / this.hitPolygonInitial.length;\r\n            this.centerYInitial = ySum / this.hitPolygonInitial.length;\r\n        }\r\n\r\n        if (!closeAndFill) {\r\n            this.borderColor = 0x0000ff;\r\n        }\r\n\r\n        this.render();\r\n        this.addToDefaultGroupAndSetDefaultVisibility();\r\n\r\n    }\r\n\r\n    getCopy(klass: Klass): RuntimeObject {\r\n\r\n        let ro: RuntimeObject = new RuntimeObject(klass);\r\n        let rh: PolygonHelper = new PolygonHelper([], this.closeAndFill, this.worldHelper.interpreter, ro);\r\n        ro.intrinsicData[\"Actor\"] = rh;\r\n\r\n        rh.copyFrom(this);\r\n        rh.render();\r\n\r\n        return ro;\r\n    }\r\n\r\n\r\n    render(): void {\r\n\r\n        let g: PIXI.Graphics = <any>this.displayObject;\r\n\r\n        if (this.displayObject == null) {\r\n            g = new PIXI.Graphics();\r\n            this.displayObject = g;\r\n            this.worldHelper.stage.addChild(g);\r\n\r\n        } else {\r\n            g.clear();\r\n        }\r\n\r\n        if (this.fillColor != null && this.closeAndFill) {\r\n            g.beginFill(this.fillColor, this.fillAlpha);\r\n        }\r\n        if (this.borderColor != null) {\r\n            g.lineStyle(this.borderWidth, this.borderColor, this.borderAlpha, 0.5)\r\n        }\r\n\r\n        if (this.hitPolygonInitial.length > 0) {\r\n            g.moveTo(this.hitPolygonInitial[0].x, this.hitPolygonInitial[0].y);\r\n            for (let i = 1; i < this.hitPolygonInitial.length; i++) {\r\n                g.lineTo(this.hitPolygonInitial[i].x, this.hitPolygonInitial[i].y);\r\n            }\r\n        }\r\n\r\n        if (this.closeAndFill || this.isClosed) {\r\n            g.closePath();\r\n        }\r\n\r\n        if (this.fillColor != null && this.closeAndFill) {\r\n            g.endFill();\r\n        }\r\n    };\r\n\r\n\r\n    addPoint(x: number, y: number, render: boolean = true) {\r\n        let p = new PIXI.Point(x, y);\r\n        this.displayObject.transform.worldTransform.applyInverse(p, p);\r\n        this.hitPolygonInitial.push({ x: p.x, y: p.y });\r\n        this.hitPolygonDirty = true;\r\n        if (render) this.render();\r\n    }\r\n\r\n    insertPoint(x: number, y: number, index: number) {\r\n        if (index < 0) index = 0;\r\n        if (index > this.hitPolygonInitial.length) index = this.hitPolygonInitial.length;\r\n        let p = new PIXI.Point(x, y);\r\n        this.displayObject.transform.worldTransform.applyInverse(p, p);\r\n        this.hitPolygonInitial.splice(index, 0, { x: p.x, y: p.y });\r\n        this.hitPolygonDirty = true;\r\n        this.render();\r\n    }\r\n\r\n    movePointTo(x: number, y: number, index: number) {\r\n        if (index < 0) index = 0;\r\n        if (index > this.hitPolygonInitial.length) index = this.hitPolygonInitial.length;\r\n        if(this.hitPolygonInitial.length == 0) return;\r\n        let p = new PIXI.Point(x, y);\r\n        this.displayObject.transform.worldTransform.applyInverse(p, p);\r\n        this.hitPolygonInitial[index].x = p.x;\r\n        this.hitPolygonInitial[index].y = p.y;\r\n        this.hitPolygonDirty = true;\r\n        this.render();\r\n    }\r\n\r\n    setPoint(x: number, y: number, index: number) {\r\n        if (index == 0 || index == 1) {\r\n            this.hitPolygonInitial[index] = { x: x, y: y };\r\n            this.hitPolygonDirty = true;\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    setPoints(coordinates: number[]) {\r\n\r\n        this.hitPolygonInitial = [];\r\n        for(let i = 0; i < coordinates.length - 1; i += 2){\r\n            this.hitPolygonInitial.push({x: coordinates[i], y: coordinates[i+1]});\r\n        }\r\n\r\n        this.hitPolygonDirty = true;\r\n        this.render();\r\n    }\r\n\r\n    setAllPointsUntransformed(points: number[]) {\r\n        this.hitPolygonInitial = [];\r\n        for (let i = 0; i < points.length; i += 2) {\r\n            this.hitPolygonInitial.push({ x: points[i], y: points[i + 1] })\r\n        }\r\n        this.hitPolygonDirty = true;\r\n        this.render();\r\n    }\r\n\r\n    containsPoint(x: number, y: number) {\r\n\r\n        if (!this.displayObject.getBounds().contains(x, y)) return false;\r\n\r\n        if (this.hitPolygonInitial == null) return true;\r\n\r\n        if (this.hitPolygonDirty) this.transformHitPolygon();\r\n\r\n        if(this.closeAndFill){\r\n            return polygonEnthältPunkt(this.hitPolygonTransformed, { x: x, y: y });\r\n        } else {\r\n            return streckenzugEnthältPunkt(this.hitPolygonTransformed, { x: x, y: y });\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { doublePrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { FilledShapeHelper } from \"./FilledShape.js\";\r\nimport { WorldHelper } from \"./World.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { FilledShapeDefaults } from \"./FilledShapeDefaults.js\";\r\n\r\nexport class RectangleClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Rectangle\", module, \"Rechteck\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"FilledShape\"));\r\n\r\n        // this.addAttribute(new Attribute(\"PI\", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, \"Die Kreiszahl Pi (3.1415...)\"));\r\n\r\n        this.addMethod(new Method(\"Rectangle\", new Parameterlist([\r\n            { identifier: \"left\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"top\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"width\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"height\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let left: number = parameters[1].value;\r\n                let top: number = parameters[2].value;\r\n                let width: number = parameters[3].value;\r\n                let height: number = parameters[4].value;\r\n                \r\n                let rh = new RectangleHelper(left, top, width, height, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = rh;\r\n                \r\n            }, false, false, 'Instanziert ein neues, achsenparalleles Rechteck-Objekt. (left, top) sind die Koordinaten der linken oberen Ecke.', true));\r\n            \r\n            this.addMethod(new Method(\"setWidth\", new Parameterlist([\r\n                { identifier: \"width\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n            ]), null,\r\n            (parameters) => {\r\n                \r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: RectangleHelper = o.intrinsicData[\"Actor\"];\r\n                let width: number = parameters[1].value;\r\n                \r\n                if (sh.testdestroyed(\"setWidth\")) return;\r\n\r\n                sh.width = width / sh.displayObject.scale.x;\r\n                sh.centerXInitial = sh.left + sh.width/2;\r\n\r\n                sh.render();\r\n\r\n            }, false, false, \"Setzt die Breite des Rechtecks.\", false));\r\n\r\n            this.addMethod(new Method(\"setHeight\", new Parameterlist([\r\n                { identifier: \"height\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n            ]), null,\r\n            (parameters) => {\r\n                \r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: RectangleHelper = o.intrinsicData[\"Actor\"];\r\n                let height: number = parameters[1].value;\r\n                \r\n                if (sh.testdestroyed(\"setHeight\")) return;\r\n\r\n                sh.height = height / sh.displayObject.scale.y;\r\n                sh.centerYInitial = sh.top + sh.height/2;\r\n\r\n                sh.render();\r\n\r\n            }, false, false, \"Setzt die Höhe des Rechtecks.\", false));\r\n\r\n        this.addMethod(new Method(\"getWidth\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: RectangleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getWidth\")) return;\r\n\r\n                return sh.width * sh.scaleFactor;\r\n\r\n            }, false, false, \"Gibt die Breite zurück.\", false));\r\n\r\n        this.addMethod(new Method(\"getHeight\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: RectangleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getHeight\")) return;\r\n\r\n                return sh.height * sh.scaleFactor;\r\n\r\n            }, false, false, \"Gibt die Höhe zurück.\", false));\r\n\r\n            this.addMethod(new Method(\"copy\", new Parameterlist([\r\n            ]), this,\r\n                (parameters) => {\r\n    \r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let sh: RectangleHelper = o.intrinsicData[\"Actor\"];\r\n    \r\n                    if (sh.testdestroyed(\"copy\")) return;\r\n    \r\n                    return sh.getCopy(<Klass>o.class);\r\n    \r\n                }, false, false, 'Erstellt eine Kopie des Rectangle-Objekts und git sie zurück.', false));\r\n    \r\n\r\n    }\r\n\r\n}\r\n\r\nexport class RectangleHelper extends FilledShapeHelper {\r\n\r\n    constructor(public left: number, public top: number, public width: number, public height: number,\r\n        interpreter: Interpreter, runtimeObject: RuntimeObject) {\r\n        super(interpreter, runtimeObject);\r\n        this.centerXInitial = left + width / 2;\r\n        this.centerYInitial = top + height / 2;\r\n\r\n        this.render();\r\n\r\n        this.addToDefaultGroupAndSetDefaultVisibility();\r\n\r\n    }\r\n\r\n    getCopy(klass: Klass): RuntimeObject {\r\n\r\n        let ro: RuntimeObject = new RuntimeObject(klass);\r\n        let rh: RectangleHelper = new RectangleHelper(this.left, this.top, this.width, this.height, this.worldHelper.interpreter, ro);\r\n        ro.intrinsicData[\"Actor\"] = rh;\r\n\r\n        rh.copyFrom(this);\r\n        rh.render();\r\n\r\n        return ro;\r\n    }\r\n\r\n    render(): void {\r\n\r\n        this.hitPolygonInitial = [\r\n            { x: this.left, y: this.top }, { x: this.left, y: this.top + this.height },\r\n             { x: this.left + this.width, y: this.top + this.height }, { x: this.left + this.width, y: this.top }\r\n        ];\r\n\r\n        let g: PIXI.Graphics = <any>this.displayObject;\r\n\r\n        if (this.displayObject == null) {\r\n            g = new PIXI.Graphics();\r\n            this.displayObject = g;\r\n            this.worldHelper.stage.addChild(g);\r\n\r\n        } else {\r\n            g.clear();\r\n        }\r\n\r\n        if (this.fillColor != null) {\r\n            g.beginFill(this.fillColor, this.fillAlpha);\r\n        }\r\n        if (this.borderColor != null) {\r\n            g.lineStyle(this.borderWidth, this.borderColor, this.borderAlpha, 0.5)\r\n        }\r\n\r\n        g.moveTo(this.left, this.top);\r\n        g.lineTo(this.left + this.width, this.top);\r\n        g.lineTo(this.left + this.width, this.top + this.height);\r\n        g.lineTo(this.left, this.top + this.height);\r\n        g.closePath();\r\n\r\n        if (this.fillColor != null) {\r\n            g.endFill();\r\n        }\r\n    };\r\n\r\n\r\n}\r\n","import { Enum } from \"../../compiler/types/Enum.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { TokenType } from \"../../compiler/lexer/Token.js\";\r\n\r\nexport class RepeatTypeClass extends Enum {\r\n\r\n    constructor(module: Module){\r\n        super(\"RepeatType\", module, [\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null, \r\n                identifier: \"once\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"loop\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"backAndForth\"\r\n            },\r\n        ]);\r\n\r\n        this.documentation = \"Gibt an, auf welche Art eine Sprite-Animation abgespielt werden soll.\"\r\n    }\r\n\r\n}","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { doublePrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { FilledShapeHelper } from \"./FilledShape.js\";\r\nimport { WorldHelper } from \"./World.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\n\r\nexport class RoundedRectangleClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"RoundedRectangle\", module, \"Rechteck mit abgerundeten Ecken\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"FilledShape\"));\r\n\r\n        this.addMethod(new Method(\"RoundedRectangle\", new Parameterlist([\r\n            { identifier: \"left\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"top\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"width\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"height\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"radius\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let left: number = parameters[1].value;\r\n                let top: number = parameters[2].value;\r\n                let width: number = parameters[3].value;\r\n                let height: number = parameters[4].value;\r\n                let radius: number = parameters[5].value;\r\n\r\n                let rh = new RoundedRectangleHelper(left, top, width, height, radius, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = rh;\r\n\r\n            }, false, false, 'Instanziert ein neues, achsenparalleles abgerundetes Rechteck-Objekt. (left, top) sind die Koordinaten der linken oberen Ecke.', true));\r\n\r\n        this.addMethod(new Method(\"getWidth\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: RoundedRectangleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getWidth\")) return;\r\n\r\n                return sh.width * sh.displayObject.scale.x;\r\n\r\n            }, false, false, \"Gibt die Breite zurück.\", false));\r\n\r\n        this.addMethod(new Method(\"getHeight\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: RoundedRectangleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getHeight\")) return;\r\n\r\n                return sh.height * sh.displayObject.scale.y;\r\n\r\n            }, false, false, \"Gibt die Höhe zurück.\", false));\r\n\r\n            this.addMethod(new Method(\"getRadius\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: RoundedRectangleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getHeight\")) return;\r\n\r\n                return sh.radius * sh.displayObject.scale.y;\r\n\r\n            }, false, false, \"Gibt den Eckradius zurück.\", false));\r\n\r\n            this.addMethod(new Method(\"copy\", new Parameterlist([\r\n            ]), this,\r\n                (parameters) => {\r\n    \r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let sh: RoundedRectangleHelper = o.intrinsicData[\"Actor\"];\r\n    \r\n                    if (sh.testdestroyed(\"copy\")) return;\r\n    \r\n                    return sh.getCopy(<Klass>o.class);\r\n    \r\n                }, false, false, 'Erstellt eine Kopie des RoundedRectangle-Objekts und git sie zurück.', false));\r\n    \r\n\r\n    }\r\n\r\n}\r\n\r\nexport class RoundedRectangleHelper extends FilledShapeHelper {\r\n\r\n    constructor(public left: number, public top: number, public width: number, public height: number, public radius: number,\r\n        interpreter: Interpreter, runtimeObject: RuntimeObject) {\r\n        super(interpreter, runtimeObject);\r\n        this.centerXInitial = left + width / 2;\r\n        this.centerYInitial = top + height / 2;\r\n\r\n        this.hitPolygonInitial = [];\r\n\r\n        this.addCenterCircle(left + radius, top + radius, Math.PI/2);\r\n        this.addCenterCircle(left + radius, top + height - radius, Math.PI);\r\n        this.addCenterCircle(left + width - radius, top + height - radius, 3*Math.PI/2);\r\n        this.addCenterCircle(left + width - radius, top + radius, 0);\r\n        this.hitPolygonInitial.push({x: left + radius, y: top});\r\n\r\n        this.render();\r\n        this.addToDefaultGroupAndSetDefaultVisibility();\r\n\r\n    }\r\n\r\n    getCopy(klass: Klass): RuntimeObject {\r\n\r\n        let ro: RuntimeObject = new RuntimeObject(klass);\r\n        let rh: RoundedRectangleHelper = new RoundedRectangleHelper(this.left, this.top, this.width, this.height, this.radius, this.worldHelper.interpreter, ro);\r\n        ro.intrinsicData[\"Actor\"] = rh;\r\n\r\n        rh.copyFrom(this);\r\n        rh.render();\r\n\r\n        return ro;\r\n    }\r\n\r\n\r\n    addCenterCircle(midx: number, midy: number, angleStart: number){\r\n        let n = 8;\r\n        let dw = Math.PI/2/n;\r\n\r\n        for(let i = 0; i <= n; i++){\r\n            this.hitPolygonInitial.push({x: midx + this.radius*Math.cos(angleStart + dw*i), y: midy - this.radius*Math.sin(angleStart + dw*i)})\r\n        }\r\n    }\r\n\r\n    render(): void {\r\n\r\n        let g: PIXI.Graphics = <any>this.displayObject;\r\n\r\n        if (this.displayObject == null) {\r\n            g = new PIXI.Graphics();\r\n            this.displayObject = g;\r\n            this.worldHelper.stage.addChild(g);\r\n\r\n        } else {\r\n            g.clear();\r\n        }\r\n\r\n        if (this.fillColor != null) {\r\n            g.beginFill(this.fillColor, this.fillAlpha);\r\n        }\r\n        if (this.borderColor != null) {\r\n            g.lineStyle(this.borderWidth, this.borderColor, this.borderAlpha, 0.5)\r\n        }\r\n\r\n        g.drawRoundedRect(this.left,this.top, this.width, this.height, this.radius);\r\n\r\n        if (this.fillColor != null) {\r\n            g.endFill();\r\n        }\r\n\r\n        // g.lineStyle(1, 0xff0000, 1);\r\n\r\n        // g.moveTo(this.hitPolygonInitial[0].x, this.hitPolygonInitial[0].y);\r\n        // for(let i = 1; i < this.hitPolygonInitial.length; i++){\r\n        //     g.lineTo(this.hitPolygonInitial[i].x, this.hitPolygonInitial[i].y);\r\n        // }\r\n        \r\n    };\r\n\r\n\r\n}\r\n","import { Enum } from \"../../compiler/types/Enum.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { TokenType } from \"../../compiler/lexer/Token.js\";\r\n\r\nexport class ScaleModeClass extends Enum {\r\n\r\n    constructor(module: Module){\r\n        super(\"ScaleMode\", module, [\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"linear\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"nearest_neighbour\"\r\n            }\r\n        ]);\r\n\r\n        this.documentation = \"Art der Interpolation der Pixelfarben beim Skalieren von grafischen Objekten\"\r\n    }\r\n\r\n}","import { Type, Method, Parameterlist, Value, Attribute } from \"../../compiler/types/Types.js\";\r\nimport { Klass, Visibility } from \"../../compiler/types/Class.js\";\r\nimport { stringPrimitiveType, doublePrimitiveType, floatPrimitiveType, intPrimitiveType, voidPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { PrintManager } from \"../../main/gui/PrintManager.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { SoundTools } from \"../../tools/SoundTools.js\";\r\n\r\nexport class SoundKlass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"Sound\", module, \"Aufzählung aller Geräusche\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        for(let sound of SoundTools.sounds){\r\n            this.addAttribute(new Attribute(sound.name, stringPrimitiveType, (value) => { value.value = sound.name }, true, Visibility.public, true, sound.description));\r\n        }\r\n\r\n        this.staticClass.setupAttributeIndicesRecursive();\r\n\r\n        this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n\r\n        this.addMethod(new Method(\"playSound\", new Parameterlist([\r\n            { identifier: \"sound\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n        (parameters) => {\r\n            let sound: string = parameters[1].value;\r\n            SoundTools.play(sound);\r\n        }    \r\n        , false, true, \"Spielt einen Sound ab. Die Möglichen Sounds sind als statische Variablen der Klasse Sound hinterlegt. Tippe als Parameter also Sound gefolgt von einem Punkt ein, um eine Auswahl zu sehen!\"));\r\n\r\n        this.addMethod(new Method(\"getVolume\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n        (parameters) => {\r\n            if(!SoundTools.volumeDetectionRunning) SoundTools.startDetectingVolume();\r\n            return SoundTools.getVolume();\r\n        }    \r\n        , false, true, \"Gibt die aktuelle Mikrofonlautstärke zurück. Beim ersten Aufruf muss der Benutzer dem Browser die Erlaubnis zur Benutzung des Mikrofons geben. Solange dies noch nicht erfolgt ist, gibt die Funktion den Wert -1 zurück.\"));\r\n\r\n\r\n    }\r\n\r\n}","import { Punkt, abstandPunktZuGerade, abstand } from \"../../tools/MatheTools.js\";\r\nimport { WorldHelper } from \"./World.js\";\r\nimport { SpriteHelper } from \"./Sprite.js\";\r\n\r\nexport class HitPolygonStore {\r\n\r\n    private static polygonStore: { [path: string]: Punkt[] } = {};\r\n\r\n    public static getPolygonForTexture(name: string, index: number, spriteHelper: SpriteHelper, sprite: PIXI.Sprite): Punkt[] {\r\n\r\n        if (index == null) {\r\n            index = 0;\r\n        }\r\n        name += \"#\" + index;\r\n\r\n        let polygon = HitPolygonStore.polygonStore[name];\r\n\r\n        if (polygon == null) {\r\n            // polygon = HitPolygonStore.getPolygon(<PIXI.Sprite>spriteHelper.displayObject, spriteHelper.worldHelper);\r\n            polygon = HitPolygonStore.getPolygon(sprite, spriteHelper.worldHelper);\r\n\r\n            HitPolygonStore.polygonStore[name] = polygon;\r\n        }\r\n\r\n\r\n        return polygon;\r\n\r\n    }\r\n\r\n    private static getPolygon(sprite: PIXI.Sprite, worldHelper: WorldHelper): Punkt[] {\r\n\r\n        let pixels = worldHelper.app.renderer.plugins.extract.pixels(sprite);\r\n        let w = sprite.width;\r\n        let h = sprite.height;\r\n\r\n        if (pixels.length !== 4 * w * h) {\r\n            return [{ x: 0, y: 0 }, { x: w, y: 0 }, { x: w, y: h }, { x: 0, y: h }];\r\n        }\r\n\r\n        let polygon: Punkt[] = [];\r\n        let additionalPointsPerHalfBorder = 3;\r\n        let pointsPerBorder = additionalPointsPerHalfBorder*2 + 3;\r\n\r\n        let probes: Punkt[] = [];\r\n        HitPolygonStore.addPointsOnLine({x: 0, y: 0}, {x: w-1, y: 0}, \r\n            pointsPerBorder, probes);\r\n        HitPolygonStore.addPointsOnLine({x: w-1, y: 0}, {x: w-1, y: h-1}, \r\n            pointsPerBorder, probes);\r\n        HitPolygonStore.addPointsOnLine({x: w-1, y: h-1}, {x: 0, y: h-1}, \r\n            pointsPerBorder, probes);\r\n        HitPolygonStore.addPointsOnLine({x: 0, y: h-1}, {x: 0, y: 0}, \r\n            pointsPerBorder, probes);\r\n\r\n        let mid = {x: w/2, y: h/2};    \r\n        for(let probe of probes){\r\n            HitPolygonStore.probe(polygon, probe, mid,w, h, pixels);\r\n        }\r\n\r\n        let done: boolean = false;\r\n        while(!done){\r\n            done = true;\r\n            for(let i = 0; i < polygon.length - 1; i++){\r\n                let d = abstandPunktZuGerade(polygon[i], polygon[(i+2)%polygon.length], polygon[i+1]);\r\n                if(d < 2){\r\n                    polygon.splice(i+1, 1);\r\n                    done = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // console.log(polygon);\r\n\r\n        return polygon;\r\n\r\n    }\r\n\r\n    private static addPointsOnLine(start: Punkt, end: Punkt, n: number, points: Punkt[]){\r\n    \r\n        let fx = (end.x - start.x)/(n-1);\r\n        let fy = (end.y - start.y)/(n-1);\r\n\r\n        for(let i = 1; i <= n - 1 + 0.1; i++ ){\r\n            points.push({\r\n                x: start.x + fx*i,\r\n                y: start.y + fy*i\r\n            });\r\n        }    \r\n\r\n\r\n    }\r\n\r\n    private static probe(polygon: Punkt[], start: Punkt, end: Punkt, \r\n        width: number, height: number, pixels: Uint8Array) {\r\n\r\n        let length = abstand(start, end);\r\n        let fx = (end.x - start.x) / length;\r\n        let fy = (end.y - start.y) / length;\r\n\r\n        let x: number, y: number;\r\n\r\n        for (let i = 0; i <= length - 2; i++) {\r\n\r\n            x = start.x + i * fx;\r\n            y = start.y + i * fy;\r\n\r\n            if (!HitPolygonStore.isTransparent(x, y, width, height, pixels)) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        polygon.push({ x: x, y: y });\r\n\r\n    }\r\n\r\n\r\n    private static isTransparent(x: number, y: number, width: number, height: number, pixels: Uint8Array) {\r\n\r\n        if (x < 0 || y < 0 || x > width || y > height) {\r\n            return true;\r\n        }\r\n\r\n        let p = pixels[4 * Math.round(x) + 4 * width * Math.round(y) + 3];\r\n        // console.log(\"x: \" + x + \", y: \" + y + \", width: \" + width + \" = \" + p);\r\n        // console.log(\"index: \" + (4 * x + 4 * width * y + 3) + \", length: \" + pixels.length);\r\n\r\n        return p == 0;\r\n    }\r\n\r\n\r\n}","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { doublePrimitiveType, intPrimitiveType, voidPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Value } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { FilledShapeHelper } from \"./FilledShape.js\";\r\nimport { WorldHelper } from \"./World.js\";\r\nimport { EnumRuntimeObject } from \"../../compiler/types/Enum.js\";\r\nimport { ShapeHelper } from \"./Shape.js\";\r\nimport { HitPolygonStore } from \"./PolygonStore.js\";\r\nimport { ArrayType } from \"../../compiler/types/Array.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { SpriteLibraryPage } from \"../../help/SpriteLibraryPage.js\";\r\nimport { RenderTexture } from \"@pixi/core\";\r\nimport { convexhull } from \"../../tools/ConvexHull.js\";\r\nimport { GroupHelper } from \"./Group.js\";\r\n\r\nexport class SpriteClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Sprite\", module, \"Ein Sprite ist eine kleine Pixelgrafik, die verschoben, gedreht und skaliert werden kann. Zudem besitzt es Methoden zum Erkennen von Kollisionen mit anderen grafischen Objekten.\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Shape\"));\r\n\r\n        let scaleModeClass = <Klass>module.typeStore.getType(\"ScaleMode\")\r\n\r\n        // this.addAttribute(new Attribute(\"PI\", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, \"Die Kreiszahl Pi (3.1415...)\"));\r\n\r\n        this.addMethod(new Method(\"Sprite\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"spriteLibraryEntry\", type: module.typeStore.getType(\"SpriteLibrary\"), declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"scalemode\", type: scaleModeClass, declaration: null, usagePositions: null, isFinal: true },\r\n\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let spriteLibraryEntry: EnumRuntimeObject = parameters[3].value;\r\n                let index: number = parameters[4].value;\r\n                let scaleMode: EnumRuntimeObject = parameters[5].value;\r\n\r\n                let rh = new SpriteHelper(x, y, spriteLibraryEntry.enumValue.identifier, index, module.main.getInterpreter(), o, null, scaleMode.enumValue.identifier);\r\n                o.intrinsicData[\"Actor\"] = rh;\r\n\r\n            }, false, false, 'Instanziert ein neues Sprite und stellt es an der Position (x, y) dar. SpriteLibraryEntry ist ein Auzählungstyp (enum). Gib einfach SpriteLibraryEntry gefolgt von einem Punkt ein, dann erhältst Du ein Auswahl von Bildern. Einen Überblick über die Bilder bekommst Du auch über den Menüpunkt Hilfe->Sprite-Bilderübersicht.', true));\r\n\r\n        this.addMethod(new Method(\"Sprite\", new Parameterlist([\r\n            { identifier: \"shape\", type: module.typeStore.getType(\"Shape\"), declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"scalemode\", type: scaleModeClass, declaration: null, usagePositions: null, isFinal: true },\r\n\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let shape: RuntimeObject = parameters[1].value;\r\n                let scaleMode: EnumRuntimeObject = parameters[2].value;\r\n\r\n                if (shape == null) {\r\n                    module.main.getInterpreter().throwException(\"Die übergebene Figur ist null.\");\r\n                    return;\r\n                }\r\n\r\n                let rh = new SpriteHelper(0, 0, \"\", 0, module.main.getInterpreter(), o, shape.intrinsicData[\"Actor\"], scaleMode.enumValue.identifier);\r\n                o.intrinsicData[\"Actor\"] = rh;\r\n\r\n            }, false, false, 'Zeichnet das graphische Objekt (shape) in eine Bitmap und macht daraus ein Sprite. Dieses wird an der Position (x, y) dargestellt.', true));\r\n\r\n        this.addMethod(new Method(\"Sprite\", new Parameterlist([\r\n            { identifier: \"shape\", type: module.typeStore.getType(\"Shape\"), declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let shape: RuntimeObject = parameters[1].value;\r\n\r\n                if (shape == null) {\r\n                    module.main.getInterpreter().throwException(\"Die übergebene Figur ist null.\");\r\n                    return;\r\n                }\r\n\r\n                let rh = new SpriteHelper(0, 0, \"\", 0, module.main.getInterpreter(), o, shape.intrinsicData[\"Actor\"], \"linear\");\r\n                o.intrinsicData[\"Actor\"] = rh;\r\n\r\n            }, false, false, 'Zeichnet das graphische Objekt (shape) in eine Bitmap und macht daraus ein Sprite. Dieses wird an der Position (x, y) dargestellt.', true));\r\n\r\n        this.addMethod(new Method(\"Sprite\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"spriteLibraryEntry\", type: module.typeStore.getType(\"SpriteLibrary\"), declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let spriteLibraryEntry: EnumRuntimeObject = parameters[3].value;\r\n                let index: number = parameters[4].value;\r\n\r\n                let rh = new SpriteHelper(x, y, spriteLibraryEntry.enumValue.identifier, index, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = rh;\r\n\r\n            }, false, false, 'Instanziert ein neues Sprite und stellt es an der Position (x, y) dar. SpriteLibraryEntry ist ein Aufzählungstyp (enum). Gib einfach SpriteLibraryEntry gefolgt von einem Punkt ein, dann erhältst Du ein Auswahl von Bildern. Einen Überblick über die Bilder bekommst Du auch über den Menüpunkt Hilfe->Sprite-Bilderübersicht.', true));\r\n\r\n        this.addMethod(new Method(\"Sprite\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"spriteLibraryEntry\", type: module.typeStore.getType(\"SpriteLibrary\"), declaration: null, usagePositions: null, isFinal: true },\r\n\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let spriteLibraryEntry: EnumRuntimeObject = parameters[3].value;\r\n\r\n                let rh = new SpriteHelper(x, y, spriteLibraryEntry.enumValue.identifier, null, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = rh;\r\n\r\n            }, false, false, 'Instanziert ein neues Sprite und stellt es an der Position (x, y) dar. SpriteLibraryEntry ist ein Auzählungstyp (enum). Gib einfach SpriteLibraryEntry gefolgt von einem Punkt ein, dann erhältst Du ein Auswahl von Bildern. Einen Überblick über die Bilder bekommst Du auch über den Menüpunkt Hilfe->Sprite-Bilderübersicht.', true));\r\n\r\n        this.addMethod(new Method(\"setImage\", new Parameterlist([\r\n            { identifier: \"spriteLibraryEntry\", type: module.typeStore.getType(\"SpriteLibrary\"), declaration: null, usagePositions: null, isFinal: true },\r\n\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let spriteLibraryEntry: EnumRuntimeObject = parameters[1].value;\r\n                let sh: SpriteHelper = <SpriteHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.isDestroyed) return;\r\n\r\n                sh.setTexture(spriteLibraryEntry.enumValue.identifier);\r\n\r\n            }, false, false, 'Ändert das Bild des Sprites. SpriteLibraryEntry ist ein Auzählungstyp (enum). Gib einfach SpriteLibraryEntry gefolgt von einem Punkt ein, dann erhältst Du ein Auswahl von Bildern. Einen Überblick über die Bilder bekommst Du auch über den Menüpunkt Hilfe->Sprite-Bilderübersicht.', false));\r\n\r\n        this.addMethod(new Method(\"setImage\", new Parameterlist([\r\n            { identifier: \"spriteLibraryEntry\", type: module.typeStore.getType(\"SpriteLibrary\"), declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let spriteLibraryEntry: EnumRuntimeObject = parameters[1].value;\r\n                let index: number = parameters[2].value;\r\n                let sh: SpriteHelper = <SpriteHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.isDestroyed) return;\r\n\r\n                sh.setTexture(spriteLibraryEntry.enumValue.identifier, index);\r\n\r\n            }, false, false, 'Ändert das Bild des Sprites. SpriteLibraryEntry ist ein Auzählungstyp (enum). Gib einfach SpriteLibraryEntry gefolgt von einem Punkt ein, dann erhältst Du ein Auswahl von Bildern. Einen Überblick über die Bilder bekommst Du auch über den Menüpunkt Hilfe->Sprite-Bilderübersicht.', false));\r\n\r\n        this.addMethod(new Method(\"setImageIndex\", new Parameterlist([\r\n            { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let index: number = parameters[1].value;\r\n                let sh: SpriteHelper = <SpriteHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.isDestroyed) return;\r\n\r\n\r\n                sh.setTexture(sh.textureName, index);\r\n\r\n            }, false, false, 'Ändert den Bildindex des Sprites.', false));\r\n\r\n        this.addMethod(new Method(\"playAnimation\", new Parameterlist([\r\n            { identifier: \"indexArray\", type: new ArrayType(intPrimitiveType), declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"repeatType\", type: module.typeStore.getType(\"RepeatType\"), declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"imagesPerSecond\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let indexArray: Value[] = parameters[1].value;\r\n                let repeatType: EnumRuntimeObject = parameters[2].value;\r\n                let imagesPerSecond: number = parameters[3].value;\r\n                let sh: SpriteHelper = <SpriteHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                let indices: number[] = [];\r\n                for (let v of indexArray) {\r\n                    indices.push(v.value);\r\n                }\r\n\r\n                if (sh.testdestroyed(\"playAnimation\")) return;\r\n\r\n                sh.playAnimation(indices, repeatType.enumValue.identifier, imagesPerSecond);\r\n\r\n            }, false, false, 'Spielt eine Animation ab.', false));\r\n\r\n        this.addMethod(new Method(\"playAnimation\", new Parameterlist([\r\n            { identifier: \"fromIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"toIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"repeatType\", type: module.typeStore.getType(\"RepeatType\"), declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"imagesPerSecond\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let fromIndex: number = parameters[1].value;\r\n                let toIndex: number = parameters[2].value;\r\n                let repeatType: EnumRuntimeObject = parameters[3].value;\r\n                let imagesPerSecond: number = parameters[4].value;\r\n                let sh: SpriteHelper = <SpriteHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"playAnimation\")) return;\r\n\r\n                let indices: number[] = [];\r\n\r\n                if (Math.abs(toIndex - fromIndex) < 10000) {\r\n                    let delta = Math.sign(toIndex - fromIndex);\r\n                    for (let i = fromIndex; i != toIndex; i = i + delta) indices.push(i);\r\n                }\r\n\r\n                sh.playAnimation(indices, repeatType.enumValue.identifier, imagesPerSecond);\r\n\r\n            }, false, false, 'Spielt eine Animation ab.', false));\r\n\r\n        this.addMethod(new Method(\"stopAnimation\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: SpriteHelper = <SpriteHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.isDestroyed) return;\r\n\r\n                sh.stopAnimation(false);\r\n\r\n            }, false, false, 'Stoppt die gerade laufende Animation', false));\r\n\r\n        this.addMethod(new Method(\"pauseAnimation\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: SpriteHelper = <SpriteHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"pauseAnimation\")) return;\r\n\r\n                sh.pauseAnimation();\r\n\r\n            }, false, false, 'Pausiert die laufende Animation.', false));\r\n\r\n        this.addMethod(new Method(\"resumeAnimation\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: SpriteHelper = <SpriteHelper>o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"resumeAnimation\")) return;\r\n\r\n                sh.resumeAnimation();\r\n\r\n            }, false, false, 'Fährt mit einer pausierten Animation wieder fort.', false));\r\n\r\n        this.addMethod(new Method(\"setAlpha\", new Parameterlist([\r\n            { identifier: \"alphaValue\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let alpha: number = parameters[1].value;\r\n                let sh: SpriteHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"setAlpha\")) return;\r\n\r\n                sh.setAlpha(alpha);\r\n\r\n            }, false, false, 'Setzt die Durchsichtigkeit. 0.0 bedeutet vollkommen durchsichtig, 1.0 bedeutet vollkommen undurchsichtig.', false));\r\n\r\n        this.addMethod(new Method(\"copy\", new Parameterlist([\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: SpriteHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"copy\")) return;\r\n\r\n                return sh.getCopy(<Klass>o.class);\r\n\r\n            }, false, false, 'Erstellt eine Kopie des Sprite-Objekts und git sie zurück.', false));\r\n\r\n\r\n        this.addMethod(new Method(\"getWidth\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: SpriteHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getWidth\")) return;\r\n\r\n                return sh.getWidth();\r\n\r\n            }, false, false, \"Gibt die Breite zurück.\", false));\r\n\r\n        this.addMethod(new Method(\"getHeight\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: SpriteHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getHeight\")) return;\r\n\r\n                return sh.getHeight();\r\n\r\n            }, false, false, \"Gibt die Höhe zurück.\", false));\r\n\r\n        this.addMethod(new Method(\"makeTiling\", new Parameterlist([\r\n            { identifier: \"width\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"height\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let width: number = parameters[1].value;\r\n                let height: number = parameters[2].value;\r\n                let sh: SpriteHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"makeTiling\")) return;\r\n\r\n                sh.makeTiling(width, height);\r\n\r\n            }, false, false, \"Fügt das identische Bild nach rechts und unten kachelartig ('tile'!) so oft hinzu, bis die angegebene Breite erreicht ist. \\nTIPP: Mit der Methode getTileImage() erhält man ein Tile-Objekt, dessen Methoden move, scale, mirrorX und mirrorY sich gleichzeitig auf jede einzelne Kachel auswirken.\", false));\r\n\r\n        this.addMethod(new Method(\"getTileImage\", new Parameterlist([\r\n        ]), <Klass>module.typeStore.getType(\"Tile\"),\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: SpriteHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getTileImage\")) return;\r\n\r\n                if(!sh.isTileSprite){\r\n                    sh.worldHelper.interpreter.throwException(\"Das Sprite hat kein TileImage. Sie müssen es zuerst mit der Methode makeTiling in ein Kachel-Sprite umwandeln.\")\r\n                    return;\r\n                }\r\n\r\n                let ret: RuntimeObject = new RuntimeObject(<Klass>module.typeStore.getType(\"Tile\"));\r\n\r\n                ret.intrinsicData[\"Actor\"] = new TileHelper(sh);\r\n\r\n                return ret;\r\n\r\n            }, false, false, \"Nachdem das Sprite mittels der Methode 'makeTiling' zum TileSprite gemacht wurde, kann wirken die Methoden move, scale und rotate immer auf den ganzen gekachelten Bereich. Will man das verfielfachte Bild ändern, so bekommt man über diese Methode das Sprite-Objekt, das diesem Bild entspricht. Ruft man für dieses Objekt die Methoden move, rotate oder scale auf, so wirken sie auf jede der einzelnen Kacheln.\", false));\r\n\r\n    }\r\n\r\n}\r\n\r\nexport class SpriteHelper extends ShapeHelper {\r\n\r\n    animationIndices: number[] = [];\r\n    animationRuns: boolean = false;\r\n    imagesPerMillisecond: number = 1;\r\n    animationTime: number = 0;\r\n    animationPaused: boolean = false;\r\n\r\n    repeatType = \"once\";\r\n    textureName: string = \"\";\r\n\r\n    isTileSprite: boolean = false;\r\n\r\n    constructor(public x: number, public y: number, public name: string, public index: number,\r\n        interpreter: Interpreter, runtimeObject: RuntimeObject, copyFromOtherShape?: ShapeHelper,\r\n        public scaleMode: string = \"nearest_neighbour\") {\r\n        super(interpreter, runtimeObject);\r\n\r\n        if (copyFromOtherShape == null) {\r\n            this.setTexture(null, index);\r\n        } else {\r\n            this.copyBitmapFromShape(copyFromOtherShape);\r\n            let bounds = copyFromOtherShape.displayObject.getBounds();\r\n            this.x = bounds.left + bounds.width / 2;\r\n            this.y = bounds.top + bounds.height / 2;\r\n        }\r\n\r\n        let sprite = <PIXI.Sprite>this.displayObject;\r\n\r\n        this.displayObject.localTransform.translate(this.x - sprite.width / 2, this.y - sprite.height / 2);\r\n        //@ts-ignore\r\n        this.displayObject.transform.onChange();\r\n\r\n        this.worldHelper.stage.addChild(sprite);\r\n\r\n        this.centerXInitial = sprite.width / 2;\r\n        this.centerYInitial = sprite.height / 2;\r\n\r\n        this.addToDefaultGroupAndSetDefaultVisibility();\r\n\r\n    }\r\n\r\n    makeTiling(width: number, height: number) {\r\n        width /= this.scaleFactor;\r\n        height /= this.scaleFactor;\r\n        let sprite: PIXI.Sprite = <PIXI.Sprite>this.displayObject;\r\n        let tileSprite = new PIXI.TilingSprite(sprite.texture, width, height);\r\n        sprite.texture.baseTexture.mipmap = PIXI.MIPMAP_MODES.OFF;\r\n        tileSprite.setParent(sprite.parent);\r\n        tileSprite.transform.localTransform.copyFrom(sprite.transform.localTransform);\r\n        //@ts-ignore\r\n        tileSprite.transform.onChange();\r\n        tileSprite.updateTransform();\r\n        // tileSprite.clampMargin = -0.5;\r\n        this.displayObject = tileSprite;\r\n        this.centerXInitial += -sprite.width / 2 + width / 2;\r\n        this.centerYInitial += -sprite.height / 2 + height / 2;\r\n        let left = this.centerXInitial - width / 2;\r\n        let top = this.centerYInitial - height / 2;\r\n        let right = left + width;\r\n        let bottom = top + height;\r\n        this.hitPolygonInitial = [\r\n            { x: left, y: top }, { x: right, y: top }, { x: right, y: bottom }, { x: left, y: bottom }\r\n        ];\r\n        this.setHitPolygonDirty(true);\r\n        sprite.destroy();\r\n        this.isTileSprite = true;\r\n    }\r\n\r\n    setTileOffset(x: number, y: number) {\r\n        if (this.isTileSprite) {\r\n            let tileSprite: PIXI.TilingSprite = <PIXI.TilingSprite>this.displayObject;\r\n            tileSprite.tilePosition.set(x, y);\r\n        }\r\n    }\r\n\r\n\r\n    copyBitmapFromShape(copyFromOtherShape: ShapeHelper) {\r\n\r\n        let bounds = copyFromOtherShape.displayObject.getBounds();\r\n\r\n        let width = bounds.width;\r\n        let height = bounds.height;\r\n\r\n        const brt = new PIXI.BaseRenderTexture(\r\n            {\r\n                scaleMode: this.scaleMode == \"nearest_neighbour\" ? PIXI.SCALE_MODES.NEAREST : PIXI.SCALE_MODES.LINEAR,\r\n                width: width,\r\n                height: height\r\n            }\r\n        );\r\n        let rt: PIXI.RenderTexture = new PIXI.RenderTexture(brt);\r\n\r\n        let dob = copyFromOtherShape.displayObject;\r\n        this.worldHelper.app.renderer.render(dob, {\r\n            renderTexture: rt,\r\n            transform: new PIXI.Matrix().translate(-bounds.left, -bounds.top)\r\n        });\r\n\r\n        let points: convexhull.Point[] = [];\r\n        points = this.extractPoints(copyFromOtherShape, points);\r\n\r\n        for (let p of points) {\r\n            p.x -= bounds.left;\r\n            p.y -= bounds.top;\r\n        }\r\n\r\n        this.hitPolygonInitial = points;\r\n        this.hitPolygonInitial = convexhull.makeHull(points);\r\n\r\n        this.hitPolygonDirty = true;\r\n\r\n        this.displayObject = new PIXI.Sprite(rt);\r\n\r\n        copyFromOtherShape.setHitPolygonDirty(true);\r\n\r\n    }\r\n\r\n    extractPoints(shapeHelper: ShapeHelper, points: convexhull.Point[]): convexhull.Point[] {\r\n        if (shapeHelper instanceof GroupHelper) {\r\n            for (let sh of shapeHelper.shapes) {\r\n                points = this.extractPoints(sh.intrinsicData[\"Actor\"], points);\r\n            }\r\n            return points;\r\n        } else {\r\n            if (shapeHelper.hitPolygonDirty) shapeHelper.transformHitPolygon();\r\n            return points.concat(shapeHelper.hitPolygonTransformed.map(function (punkt) { return { x: punkt.x, y: punkt.y } }));\r\n\r\n        }\r\n    }\r\n\r\n    getWidth(): number {\r\n        let sprite = <PIXI.Sprite>this.displayObject;\r\n        return sprite.width * this.scaleFactor;\r\n    }\r\n\r\n    getHeight(): number {\r\n        let sprite = <PIXI.Sprite>this.displayObject;\r\n        return sprite.height * this.scaleFactor;\r\n    }\r\n\r\n    getCopy(klass: Klass): RuntimeObject {\r\n\r\n        let ro: RuntimeObject = new RuntimeObject(klass);\r\n        let rh: SpriteHelper = new SpriteHelper(this.x, this.y, this.name, this.index, this.worldHelper.interpreter, ro);\r\n        ro.intrinsicData[\"Actor\"] = rh;\r\n\r\n        rh.copyFrom(this);\r\n        rh.render();\r\n\r\n        return ro;\r\n    }\r\n\r\n\r\n    setAlpha(alpha: number) {\r\n        this.displayObject.alpha = alpha;\r\n    }\r\n\r\n    setTexture(name?: string, index?: number) {\r\n\r\n        if (name == this.name && index == this.index) return;\r\n\r\n        if (name == null) name = this.name;\r\n        if (index == null) index = 0;\r\n        this.index = index;\r\n\r\n        this.textureName = name;\r\n\r\n        // let prefix = \"\";\r\n        // //@ts-ignore\r\n        // if (window.javaOnlineDir != null) {\r\n        //     //@ts-ignore\r\n        //     prefix = window.javaOnlineDir;\r\n        // }\r\n\r\n        // let sheet = PIXI.Loader.shared.resources[prefix + \"assets/graphics/spritesheet.json\"].spritesheet;\r\n        let sheet = PIXI.Loader.shared.resources[\"spritesheet\"].spritesheet;\r\n        let nameWithIndex = name + \"#\" + index;\r\n        let texture = sheet.textures[nameWithIndex];\r\n\r\n        if (texture != null) {\r\n\r\n            if (this.scaleMode == \"linear\") {\r\n\r\n                let t = this.worldHelper.scaledTextures[nameWithIndex];\r\n\r\n                if (t == null) {\r\n                    let sprite = new PIXI.Sprite(texture);\r\n\r\n                    let dynamicTexture1 = PIXI.RenderTexture.create({\r\n                        width: sprite.width,\r\n                        height: sprite.height,\r\n                        scaleMode: PIXI.SCALE_MODES.LINEAR\r\n                    });\r\n\r\n                    this.worldHelper.app.renderer.render(sprite, {\r\n                        renderTexture: dynamicTexture1\r\n                    });\r\n                    this.worldHelper.scaledTextures[nameWithIndex] = dynamicTexture1;\r\n                    t = dynamicTexture1;\r\n                }\r\n\r\n                texture = t;\r\n                if (texture == null) texture = sheet.textures[nameWithIndex];\r\n\r\n                // let t = this.worldHelper.scaledTextures[nameWithIndex][this.scaleOnTextureGeneration];\r\n                // if( t != null){\r\n                //     texture = t;\r\n                // } else {\r\n                //     let sprite = new PIXI.Sprite(texture);\r\n\r\n                //     let dynamicTexture1 = PIXI.RenderTexture.create({\r\n                //         width: sprite.width,\r\n                //         height: sprite.height,\r\n                //         scaleMode: PIXI.SCALE_MODES.NEAREST\r\n                //     });\r\n\r\n                //     this.worldHelper.app.renderer.render(sprite, dynamicTexture1, true);\r\n\r\n                //     sprite = new PIXI.Sprite(dynamicTexture1);\r\n\r\n                //     let dynamicTexture2 = PIXI.RenderTexture.create({\r\n                //         width: sprite.width * this.scaleOnTextureGeneration,\r\n                //         height: sprite.height * this.scaleOnTextureGeneration,\r\n                //         scaleMode: PIXI.SCALE_MODES.LINEAR\r\n                //     });\r\n\r\n                //     let m = new PIXI.Matrix();\r\n                //     m.scale(this.scaleOnTextureGeneration, this.scaleOnTextureGeneration);\r\n\r\n                //     this.worldHelper.app.renderer.render(sprite, dynamicTexture2, true,\r\n                //         m);\r\n\r\n                //     texture = dynamicTexture2;\r\n\r\n                //     this.worldHelper.scaledTextures[nameWithIndex][this.scaleOnTextureGeneration] = texture;\r\n            }\r\n\r\n            let sprite: PIXI.Sprite = <PIXI.Sprite>this.displayObject;\r\n            if (sprite == null) {\r\n                sprite = new PIXI.Sprite(texture);\r\n                this.displayObject = sprite;\r\n            } else {\r\n                sprite.texture = texture; // sheet.textures[nameWithIndex];\r\n            }\r\n\r\n            this.hitPolygonInitial = HitPolygonStore.getPolygonForTexture(name, index, this, new PIXI.Sprite(sheet.textures[nameWithIndex]));\r\n            this.hitPolygonDirty = true;\r\n\r\n        } else {\r\n            if (this.displayObject == null) {\r\n                this.displayObject = new PIXI.Sprite();\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render(): void {\r\n\r\n    };\r\n\r\n    playAnimation(indexArray: number[], repeatType: string, imagesPerSecond: number) {\r\n        this.stopAnimation(false);\r\n        this.animationIndices = indexArray;\r\n        this.repeatType = repeatType;\r\n        this.imagesPerMillisecond = imagesPerSecond / 1000;\r\n        this.animationTime = 0;\r\n        this.animationRuns = true;\r\n        this.worldHelper.spriteAnimations.push(this);\r\n    }\r\n\r\n    stopAnimation(setInvisible: boolean) {\r\n        if (this.animationRuns) {\r\n            let spriteHelperList = this.worldHelper.spriteAnimations;\r\n            let i = spriteHelperList.indexOf(this);\r\n            if (i >= 0) spriteHelperList.splice(i, 1);\r\n        }\r\n        this.animationRuns = false;\r\n        if (setInvisible) this.setVisible(false);\r\n    }\r\n\r\n    pauseAnimation() {\r\n        this.animationPaused = true;\r\n    }\r\n\r\n    resumeAnimation() {\r\n        this.animationPaused = false;\r\n    }\r\n\r\n    tick(deltaTime: number) {\r\n\r\n        if (this.animationPaused) return;\r\n\r\n        let image: number;\r\n\r\n        if (this.repeatType == \"backAndForth\") {\r\n            let period2 = this.animationIndices.length * 2 / this.imagesPerMillisecond;\r\n            let numberOfPeriodsDone = Math.trunc(this.animationTime / period2);\r\n            let timeIntoPeriod = this.animationTime - numberOfPeriodsDone * period2;\r\n            image = this.imagesPerMillisecond * timeIntoPeriod;\r\n            if (image >= this.animationIndices.length) {\r\n                image = Math.max(2 * this.animationIndices.length - 0.1 - image, 0);\r\n            }\r\n            image = Math.trunc(image);\r\n        } else\r\n            if (this.repeatType == \"loop\") {\r\n                let period = this.animationIndices.length / this.imagesPerMillisecond;\r\n                let numberOfPeriodsDone = Math.trunc(this.animationTime / period);\r\n                let timeIntoPeriod = this.animationTime - numberOfPeriodsDone * period;\r\n                image = this.imagesPerMillisecond * timeIntoPeriod;\r\n                image = Math.trunc(image);\r\n            } else {\r\n                image = Math.trunc(this.imagesPerMillisecond * this.animationTime);\r\n                if (image >= this.animationIndices.length) {\r\n                    this.stopAnimation(true);\r\n                    return;\r\n                }\r\n            }\r\n\r\n        this.animationTime += deltaTime;\r\n\r\n        this.setTexture(null, this.animationIndices[image]);\r\n    }\r\n\r\n}\r\n\r\nexport class TileClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Tile\", module, \"Eine Kachel in einem Sprite, das mithilfe der Methode makeTiling zu einer Kachelfläche gemacht wurde.\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        this.addMethod(new Method(\"move\", new Parameterlist([\r\n            { identifier: \"dx\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"dy\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let dx: number = parameters[1].value;\r\n                let dy: number = parameters[2].value;\r\n                let sh: TileHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"move\")) return;\r\n\r\n                sh.move(dx, dy);\r\n\r\n            }, false, false, \"Verschiebt das Grafikobjekt um dx Pixel nach rechts und um dy Pixel nach unten.\", false));\r\n\r\n        this.addMethod(new Method(\"scale\", new Parameterlist([\r\n            { identifier: \"factor\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let factor: number = parameters[1].value;\r\n                let sh: TileHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"scale\")) return;\r\n\r\n                sh.scale(factor, factor);\r\n\r\n            }, false, false, \"Streckt das Grafikobjekt um den angegebenen Faktor. Das Zentrum der Streckung ist der 'Mittelpunkt' des Objekts.\", false));\r\n\r\n        this.addMethod(new Method(\"mirrorX\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: TileHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"mirrorX\")) return;\r\n\r\n                sh.scale(-1, 1);\r\n\r\n            }, false, false, \"Spiegelt das Objekt in X-Richtung.\", false));\r\n\r\n        this.addMethod(new Method(\"mirrorY\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: TileHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"mirrorX\")) return;\r\n\r\n                sh.scale(1, -1);\r\n\r\n            }, false, false, \"Spiegelt das Objekt in Y-Richtung.\", false));\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport class TileHelper {\r\n    constructor(public spriteHelper: SpriteHelper) {\r\n    }\r\n\r\n    move(dx: number, dy: number){\r\n        let tileSprite: PIXI.TilingSprite = <PIXI.TilingSprite>this.spriteHelper.displayObject;\r\n        tileSprite.tilePosition.x += dx;\r\n        tileSprite.tilePosition.y += dy;\r\n    }\r\n    \r\n    scale(fx: number, fy: number){\r\n        let tileSprite: PIXI.TilingSprite = <PIXI.TilingSprite>this.spriteHelper.displayObject;\r\n        tileSprite.tileScale.x *= fx;\r\n        tileSprite.tileScale.y *= fy;\r\n    }\r\n\r\n    testdestroyed(method: string) {\r\n        return this.spriteHelper.testdestroyed(method);\r\n    }\r\n\r\n\r\n}","import { Enum } from \"../../compiler/types/Enum.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { TokenType } from \"../../compiler/lexer/Token.js\";\r\n\r\ntype SpriteLibraryEntry = {\r\n    filename: string,\r\n    name: string,\r\n    index?: number\r\n}\r\n\r\ndeclare var SpriteLibrary: SpriteLibraryEntry[];\r\n\r\nexport class SpriteLibraryClass extends Enum {\r\n\r\n    constructor(module: Module) {\r\n        super(\"SpriteLibrary\", module,\r\n\r\n            SpriteLibrary.filter(\r\n                (sle) => {\r\n                    return sle.index == null || sle.index == 0\r\n                }\r\n            ).map((sle: SpriteLibraryEntry) => {\r\n                return {\r\n                    type: TokenType.pushEnumValue,\r\n                    position: null,\r\n                    identifier: sle.name\r\n                };\r\n\r\n            })\r\n\r\n        );\r\n        this.documentation = \"Aufzählung der Sprite-Grafiken\"\r\n    }\r\n\r\n}","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { booleanPrimitiveType, doublePrimitiveType, stringPrimitiveType, voidPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { FilledShapeHelper } from \"./FilledShape.js\";\r\nimport { WorldHelper } from \"./World.js\";\r\nimport { EnumRuntimeObject } from \"../../compiler/types/Enum.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\n\r\nexport class TextClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Text\", module, \"Text, der innerhalb der Grafikausgabe dargestellt werden kann\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"FilledShape\"));\r\n\r\n        // this.addAttribute(new Attribute(\"PI\", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, \"Die Kreiszahl Pi (3.1415...)\"));\r\n\r\n        this.addMethod(new Method(\"Text\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"fontsize\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"text\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let fontsize: number = parameters[3].value;\r\n                let text: string = parameters[4].value;\r\n\r\n                let sh = new TextHelper(x, y, fontsize, text, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = sh;\r\n\r\n            }, false, false, 'Instanziert ein neues Textobjekt. (x, y) sind die Koordinaten des Textankers (default: links oben), fontsize die Höhe des Textes in Pixeln.', true));\r\n\r\n        this.addMethod(new Method(\"Text\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"fontsize\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"text\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"font-family\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let fontsize: number = parameters[3].value;\r\n                let text: string = parameters[4].value;\r\n                let fontFamily: string = parameters[5].value;\r\n\r\n                let sh = new TextHelper(x, y, fontsize, text, module.main.getInterpreter(), o, fontFamily);\r\n                o.intrinsicData[\"Actor\"] = sh;\r\n\r\n            }, false, false, 'Instanziert ein neues Textobjekt. (x, y) sind die Koordinaten des Textankers (default: links oben), fontsize die Höhe des Textes in Pixeln.', true));\r\n\r\n        this.addMethod(new Method(\"setFontsize\", new Parameterlist([\r\n            { identifier: \"fontsize\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let fontsize: number = parameters[1].value;\r\n                let sh: TextHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                sh.setFontsize(fontsize);\r\n\r\n            }, false, false, 'Setzt die Schriftgröße des Textes (Einheit: Pixel).', false));\r\n\r\n        this.addMethod(new Method(\"setAlignment\", new Parameterlist([\r\n            { identifier: \"alignment\", type: module.typeStore.getType(\"Alignment\"), declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let alignment: EnumRuntimeObject = parameters[1].value;\r\n                let sh: TextHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                sh.setAlignment(alignment.enumValue.identifier);\r\n\r\n            }, false, false, 'Setzt die Ausrichtung in X-Richtung. Zulässige Werte sind \"Alignment.left\", \"Alignment.right\" und \"Alignment.center\".', false));\r\n\r\n        this.addMethod(new Method(\"setText\", new Parameterlist([\r\n            { identifier: \"text\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let text: string = parameters[1].value;\r\n                let sh: TextHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                sh.setText(text);\r\n\r\n            }, false, false, 'Setzt den Text.', false));\r\n\r\n        this.addMethod(new Method(\"copy\", new Parameterlist([\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: TextHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"copy\")) return;\r\n\r\n                return sh.getCopy(<Klass>o.class);\r\n\r\n            }, false, false, 'Erstellt eine Kopie des Text-Objekts und git sie zurück.', false));\r\n\r\n        this.addMethod(new Method(\"getWidth\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: TextHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getWidth\")) return;\r\n\r\n                return sh.getWidth();\r\n\r\n            }, false, false, 'Gibt die Breite des Textes zurück.', false));\r\n\r\n        this.addMethod(new Method(\"getHeight\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: TextHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getHeight\")) return;\r\n\r\n                return sh.getHeight();\r\n\r\n            }, false, false, 'Gibt die Höhe des Textes zurück.', false));\r\n\r\n        this.addMethod(new Method(\"setStyle\", new Parameterlist([\r\n            { identifier: \"isBold\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"isItalic\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let isBold: boolean = parameters[1].value;\r\n                let isItalic: boolean = parameters[2].value;\r\n                let sh: TextHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"getHeight\")) return;\r\n\r\n                sh.setStyle(isBold, isItalic);\r\n\r\n                return;\r\n\r\n            }, false, false, 'Gibt die Höhe des Textes zurück.', false));\r\n\r\n    }\r\n\r\n}\r\n\r\nexport class TextHelper extends FilledShapeHelper {\r\n\r\n    alignment: string = \"left\";\r\n\r\n    textStyle: PIXI.TextStyle =\r\n        new PIXI.TextStyle({\r\n            fontFamily: 'Arial',\r\n            fontSize: this.fontsize,\r\n            fontStyle: 'normal',\r\n            fontWeight: 'normal',\r\n            fill: [this.fillColor], // gradient possible...\r\n            stroke: this.borderColor,\r\n            strokeThickness: this.borderWidth,\r\n            dropShadow: false,\r\n            wordWrap: false,\r\n            align: \"left\",\r\n            lineJoin: 'round'\r\n        });\r\n\r\n    constructor(public x: number, public y: number, public fontsize: number,\r\n        public text: string,\r\n        interpreter: Interpreter, runtimeObject: RuntimeObject, public fontFamily?: string) {\r\n        super(interpreter, runtimeObject);\r\n        this.centerXInitial = x;\r\n        this.centerYInitial = y;\r\n\r\n        if (this.fontsize == 0) this.fontsize = 10;\r\n\r\n        this.borderColor = null;\r\n        this.textStyle.stroke = null;\r\n        if (fontFamily != null) {\r\n            this.textStyle.fontFamily = fontFamily;\r\n        }\r\n\r\n        this.hitPolygonInitial = [];\r\n\r\n        this.render();\r\n        this.addToDefaultGroupAndSetDefaultVisibility();\r\n    }\r\n\r\n    setStyle(isBold: boolean, isItalic: boolean){\r\n        this.textStyle.fontWeight = isBold ? \"bold\" : \"normal\";\r\n        this.textStyle.fontStyle = isItalic ? \"italic\" : \"normal\";\r\n        this.render();\r\n    }\r\n\r\n    getCopy(klass: Klass): RuntimeObject {\r\n\r\n        let ro: RuntimeObject = new RuntimeObject(klass);\r\n        let rh: TextHelper = new TextHelper(this.x, this.y, this.fontsize, this.text, this.worldHelper.interpreter, ro);\r\n        ro.intrinsicData[\"Actor\"] = rh;\r\n\r\n        rh.alignment = this.alignment;\r\n\r\n        rh.copyFrom(this);\r\n        rh.render();\r\n\r\n        return ro;\r\n    }\r\n\r\n\r\n    render(): void {\r\n\r\n        let g: PIXI.Text = <any>this.displayObject;\r\n        this.textStyle.fill = this.fillColor;\r\n        this.textStyle.stroke = this.borderColor;\r\n        this.textStyle.strokeThickness = this.borderWidth;\r\n        this.textStyle.fontSize = this.fontsize;\r\n\r\n        if (this.displayObject == null) {\r\n            g = new PIXI.Text(this.text, this.textStyle);\r\n            this.displayObject = g;\r\n            this.displayObject.localTransform.translate(this.x, this.y);\r\n            //@ts-ignore\r\n            this.displayObject.transform.onChange();\r\n            this.worldHelper.stage.addChild(g);\r\n        } else {\r\n            g.text = this.text;\r\n            g.alpha = this.fillAlpha;\r\n            switch (this.alignment) {\r\n                case \"left\": g.anchor.x = 0; break;\r\n                case \"center\": g.anchor.x = 0.5; break;\r\n                case \"right\": g.anchor.x = 1.0; break;\r\n            }\r\n            g.style = this.textStyle;\r\n        }\r\n\r\n        this.centerXInitial = 0;\r\n        this.centerYInitial = 0;\r\n        if (this.text != null) {\r\n            let tm = PIXI.TextMetrics.measureText(this.text, this.textStyle);\r\n\r\n            this.centerXInitial = tm.width / 2;\r\n            this.centerYInitial = tm.height / 2;\r\n        }\r\n\r\n\r\n    };\r\n\r\n    setFontsize(fontsize: number) {\r\n        this.fontsize = fontsize;\r\n        if (this.fontsize == 0) this.fontsize = 10;\r\n        this.render();\r\n    }\r\n\r\n    setText(text: string) {\r\n        this.text = text;\r\n        this.render();\r\n    }\r\n\r\n    setAlignment(alignment: string) {\r\n        this.alignment = alignment;\r\n        this.render();\r\n    }\r\n\r\n    getWidth(): number {\r\n        let g: PIXI.Text = <any>this.displayObject;\r\n        return g.width;\r\n    }\r\n\r\n    getHeight(): number {\r\n        let g: PIXI.Text = <any>this.displayObject;\r\n        return g.height;\r\n    }\r\n\r\n}\r\n","import { Type, Method, Parameterlist, Value, Attribute } from \"../compiler/types/Types.js\";\r\nimport { Klass, Visibility } from \"../compiler/types/Class.js\";\r\nimport { stringPrimitiveType, doublePrimitiveType, floatPrimitiveType, intPrimitiveType, charPrimitiveType, booleanPrimitiveType } from \"../compiler/types/PrimitiveTypes.js\";\r\nimport { Module } from \"../compiler/parser/Module.js\";\r\nimport { PrintManager } from \"../main/gui/PrintManager.js\";\r\n\r\nexport class InputClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"Input\", module, \"Klasse mit statischen Methoden zur Eingabe von Text per Tastatur\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        this.addMethod(new Method(\"readChar\", new Parameterlist([\r\n            { identifier: \"Meldungstext\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"Defaultwert\", type: charPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n            ]), charPrimitiveType,\r\n            (parameters) => {\r\n                return null; // done by compiler magic in class Interpreter!\r\n            }, \r\n        false, true, \"Erwartet vom Benutzer die Eingabe eines Wertes vom Datentyp char\"));\r\n\r\n        this.addMethod(new Method(\"readInt\", new Parameterlist([\r\n            { identifier: \"Meldungstext\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"Defaultwert\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n            ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return null; // done by compiler magic in class Interpreter!\r\n            }, \r\n        false, true, \"Erwartet vom Benutzer die Eingabe eines Wertes vom Datentyp int\"));\r\n\r\n        this.addMethod(new Method(\"readString\", new Parameterlist([\r\n            { identifier: \"Meldungstext\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"Defaultwert\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n            ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return null; // done by compiler magic in class Interpreter!\r\n            }, \r\n        false, true, \"Erwartet vom Benutzer die Eingabe eines Wertes vom Datentyp String\"));\r\n\r\n        this.addMethod(new Method(\"readFloat\", new Parameterlist([\r\n            { identifier: \"Meldungstext\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"Defaultwert\", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n            ]), floatPrimitiveType,\r\n            (parameters) => {\r\n                return null; // done by compiler magic in class Interpreter!\r\n            }, \r\n        false, true, \"Erwartet vom Benutzer die Eingabe eines Wertes vom Datentyp float\"));\r\n\r\n        this.addMethod(new Method(\"readDouble\", new Parameterlist([\r\n            { identifier: \"Meldungstext\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"Defaultwert\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n            ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return null; // done by compiler magic in class Interpreter!\r\n            }, \r\n        false, true, \"Erwartet vom Benutzer die Eingabe eines Wertes vom Datentyp double\"));\r\n\r\n        this.addMethod(new Method(\"readBoolean\", new Parameterlist([\r\n            { identifier: \"Meldungstext\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"Defaultwert\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n            ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return null; // done by compiler magic in class Interpreter!\r\n            }, \r\n        false, true, \"Erwartet vom Benutzer die Eingabe eines Wertes vom Datentyp boolean\"));\r\n\r\n        /**\r\n         * Same methods without default value:\r\n         */\r\n\r\n        this.addMethod(new Method(\"readChar\", new Parameterlist([\r\n            { identifier: \"Meldungstext\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            ]), charPrimitiveType,\r\n            (parameters) => {\r\n                return null; // done by compiler magic in class Interpreter!\r\n            }, \r\n        false, true, \"Erwartet vom Benutzer die Eingabe eines Wertes vom Datentyp char\"));\r\n\r\n        this.addMethod(new Method(\"readInt\", new Parameterlist([\r\n            { identifier: \"Meldungstext\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return null; // done by compiler magic in class Interpreter!\r\n            }, \r\n        false, true, \"Erwartet vom Benutzer die Eingabe eines Wertes vom Datentyp int\"));\r\n\r\n        this.addMethod(new Method(\"readString\", new Parameterlist([\r\n            { identifier: \"Meldungstext\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                return null; // done by compiler magic in class Interpreter!\r\n            }, \r\n        false, true, \"Erwartet vom Benutzer die Eingabe eines Wertes vom Datentyp String\"));\r\n\r\n        this.addMethod(new Method(\"readFloat\", new Parameterlist([\r\n            { identifier: \"Meldungstext\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            ]), floatPrimitiveType,\r\n            (parameters) => {\r\n                return null; // done by compiler magic in class Interpreter!\r\n            }, \r\n        false, true, \"Erwartet vom Benutzer die Eingabe eines Wertes vom Datentyp float\"));\r\n\r\n        this.addMethod(new Method(\"readDouble\", new Parameterlist([\r\n            { identifier: \"Meldungstext\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return null; // done by compiler magic in class Interpreter!\r\n            }, \r\n        false, true, \"Erwartet vom Benutzer die Eingabe eines Wertes vom Datentyp double\"));\r\n\r\n        this.addMethod(new Method(\"readBoolean\", new Parameterlist([\r\n            { identifier: \"Meldungstext\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n                return null; // done by compiler magic in class Interpreter!\r\n            }, \r\n        false, true, \"Erwartet vom Benutzer die Eingabe eines Wertes vom Datentyp boolean\"));\r\n\r\n    }\r\n\r\n\r\n}","import { Type, Method, Parameterlist, Value, Attribute } from \"../compiler/types/Types.js\";\r\nimport { Klass, Visibility } from \"../compiler/types/Class.js\";\r\nimport { stringPrimitiveType, doublePrimitiveType, floatPrimitiveType, intPrimitiveType, booleanPrimitiveType } from \"../compiler/types/PrimitiveTypes.js\";\r\nimport { Module } from \"../compiler/parser/Module.js\";\r\nimport { PrintManager } from \"../main/gui/PrintManager.js\";\r\nimport { RuntimeObject } from \"../interpreter/RuntimeObject.js\";\r\n\r\nexport class GamepadClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"Gamepad\", module, \"Klasse mit statischen Methoden zur Abfrage der Gamepads\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        // this.addAttribute(new Attribute(\"PI\", doublePrimitiveType, (value) => { value.value = Math.PI }, true, Visibility.public, true, \"Die Kreiszahl Pi (3.1415...)\"));\r\n        // this.addAttribute(new Attribute(\"E\", doublePrimitiveType, (value) => { value.value = Math.E }, true, Visibility.public, true, \"Die Eulersche Zahl e\"));\r\n\r\n        this.staticClass.setupAttributeIndicesRecursive();\r\n\r\n        this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n\r\n        this.addMethod(new Method(\"isButtonDown\", new Parameterlist([\r\n            { identifier: \"gamepadIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"buttonIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let gamepadIndex: number = parameters[1].value;\r\n                let buttonIndex: number = parameters[2].value;\r\n\r\n                return module.main.getInterpreter().gamepadTool.isGamepadButtonPressed(gamepadIndex, buttonIndex);\r\n\r\n            }, false, true, \"Gibt genau dann true zurück, wenn der Button buttonIndex des Gamepads GamepadIndex gedrückt ist.\", false));\r\n\r\n        this.addMethod(new Method(\"isConnected\", new Parameterlist([\r\n            { identifier: \"gamepadIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let gamepadIndex: number = parameters[1].value;\r\n\r\n                return module.main.getInterpreter().gamepadTool.isGamepadConnected(gamepadIndex);\r\n\r\n            }, false, true, \"Gibt true zurück, falls das Gamepad mit dem übergebenen Index angeschlossen ist. VORSICHT: Das erste Gamepad hat Index 0.\", false));\r\n\r\n        this.addMethod(new Method(\"getAxisValue\", new Parameterlist([\r\n            { identifier: \"gamepadIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"axisIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let gamepadIndex: number = parameters[1].value;\r\n                let axisIndex: number = parameters[2].value;\r\n\r\n                return module.main.getInterpreter().gamepadTool.getGamepadAxisValue(gamepadIndex, axisIndex);\r\n\r\n            }, false, true, \"Gibt den Wert des Gamepad-Steuerknüppels mit Index axisIndex zurück.\", false));\r\n\r\n\r\n    }\r\n}","import { Type, Method, Parameterlist, Value, Attribute } from \"../compiler/types/Types.js\";\r\nimport { Klass, Visibility } from \"../compiler/types/Class.js\";\r\nimport { stringPrimitiveType, doublePrimitiveType, floatPrimitiveType, intPrimitiveType } from \"../compiler/types/PrimitiveTypes.js\";\r\nimport { Module } from \"../compiler/parser/Module.js\";\r\nimport { PrintManager } from \"../main/gui/PrintManager.js\";\r\nimport { RuntimeObject } from \"../interpreter/RuntimeObject.js\";\r\n\r\nexport class MathClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"Math\", module, \"Klasse mit statischen Methoden zur Berechnung mathematischer Funktionen (sin, cos, abs, ...) und zur Ermittlung von Zufallszahlen.\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        this.addAttribute(new Attribute(\"PI\", doublePrimitiveType, (value) => { value.value = Math.PI }, true, Visibility.public, true, \"Die Kreiszahl Pi (3.1415...)\"));\r\n        this.addAttribute(new Attribute(\"E\", doublePrimitiveType, (value) => { value.value = Math.E }, true, Visibility.public, true, \"Die Eulersche Zahl e\"));\r\n\r\n        this.staticClass.setupAttributeIndicesRecursive();\r\n\r\n        this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n\r\n        this.addMethod(new Method(\"round\", new Parameterlist([\r\n            { identifier: \"Wert\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return Math.round(<number>parameters[1].value);\r\n            }, false, true, \"**Rundet** den Wert\"));\r\n\r\n        this.addMethod(new Method(\"floor\", new Parameterlist([\r\n            { identifier: \"Wert\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return Math.floor(<number>parameters[1].value);\r\n            }, false, true, \"Rundet den Wert ab, sucht also die **nächstkleinere** ganze Zahl\"));\r\n\r\n        this.addMethod(new Method(\"ceil\", new Parameterlist([\r\n            { identifier: \"Wert\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return Math.ceil(<number>parameters[1].value);\r\n            }, false, true, \"Rundet den Wert auf, sucht also die **nächstgrößere** Zahl.\"));\r\n\r\n        this.addMethod(new Method(\"signum\", new Parameterlist([\r\n            { identifier: \"Wert\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return Math.sign(<number>parameters[1].value);\r\n            }, false, true, \"Gibt das Vorzeichen der Zahl zurück, d.h. \\n  - -1, falls die Zahl **negativ** ist,\\n  - 0, falls die Zahl **0** ist und\\n  - +1, falls die Zahl **positiv** ist.\"));\r\n\r\n        this.addMethod(new Method(\"sqrt\", new Parameterlist([\r\n            { identifier: \"Wert\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.sqrt(<number>parameters[1].value);\r\n            }, false, true, \"Gibt die **Quadratwurzel** der Zahl zurück. Für andere Wurzeln benutze Math.pow(a, b), z.B. Math.pow(10, 1.0/3.0) für die Kubikwurzel aus 10.\"));\r\n\r\n        this.addMethod(new Method(\"random\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.random();\r\n            }, false, true, \"Gibt eine Zufallszahl aus dem Intervall [0;1[ zurück.\"));\r\n\r\n        this.addMethod(new Method(\"pow\", new Parameterlist([\r\n            { identifier: \"Basis\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"Exponent\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.pow(<number>parameters[1].value, <number>parameters[2].value);\r\n            }, false, true, 'Math.pow(a, b) gibt \"a hoch b\" zurück.'));\r\n\r\n        this.addMethod(new Method(\"toDegrees\", new Parameterlist([\r\n            { identifier: \"WinkelInRad\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return (<number>parameters[1].value) / Math.PI * 180;\r\n            }, false, true, \"Wandelt einen Winkel von Rad in Grad um, d.h. berechnet Winkel/Pi*180.\"));\r\n\r\n        this.addMethod(new Method(\"toRadians\", new Parameterlist([\r\n            { identifier: \"WinkelInGrad\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return (<number>parameters[1].value) / 180 * Math.PI;\r\n            }, false, true, \"Wandelt einen Winkel von Grad in Rad um, d.h. berechnet Winkel/180*Pi.\"));\r\n\r\n        this.addMethod(new Method(\"exp\", new Parameterlist([\r\n            { identifier: \"Zahl\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.exp(<number>parameters[1].value);\r\n            }, false, true, 'Berechnet \"e hoch die Zahl\".'));\r\n\r\n        this.addMethod(new Method(\"log\", new Parameterlist([\r\n            { identifier: \"Zahl\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.log(<number>parameters[1].value);\r\n            }, false, true, \"Berechnet den natürlichen Logarithmus der Zahl.\"));\r\n\r\n        this.addMethod(new Method(\"log10\", new Parameterlist([\r\n            { identifier: \"Zahl\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.log10(<number>parameters[1].value);\r\n            }, false, true, \"Berechnet den Zehnerlogarithmus der Zahl.\"));\r\n\r\n        this.addMethod(new Method(\"sin\", new Parameterlist([\r\n            { identifier: \"WinkelInRad\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.sin(<number>parameters[1].value);\r\n            }, false, true, \"Berechnet den Sinus des Winkels.\"));\r\n\r\n        this.addMethod(new Method(\"cos\", new Parameterlist([\r\n            { identifier: \"WinkelInRad\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.cos(<number>parameters[1].value);\r\n            }, false, true, \"Berechnet den Cosinus des Winkels.\"));\r\n\r\n        this.addMethod(new Method(\"tan\", new Parameterlist([\r\n            { identifier: \"WinkelInRad\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.tan(<number>parameters[1].value);\r\n            }, false, true, \"Berechnet den Tangens des Winkels.\"));\r\n\r\n        this.addMethod(new Method(\"asin\", new Parameterlist([\r\n            { identifier: \"WertDesSinus\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.asin(<number>parameters[1].value);\r\n            }, false, true, \"Berechnet den Arcus-Sinus des Wertes in Rad.\"));\r\n\r\n        this.addMethod(new Method(\"acos\", new Parameterlist([\r\n            { identifier: \"WertDesCosinus\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.acos(<number>parameters[1].value);\r\n            }, false, true, \"Berechnet den Arcus-Cosinus des Wertes in Rad.\"));\r\n\r\n        this.addMethod(new Method(\"atan\", new Parameterlist([\r\n            { identifier: \"WertDesTangens\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.atan(<number>parameters[1].value);\r\n            }, false, true, \"Berechnet den Arcus-Tangens des Wertes in Rad.\"));\r\n\r\n        this.addMethod(new Method(\"atan2\", new Parameterlist([\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.atan2(<number>parameters[1].value, <number>parameters[2].value);\r\n            }, false, true, \"Sind (x, y) die kartesischen Koordinaten eines Punktes, so ist Math.atan2(x, y) der Winkel alpha der Polarkoordinaten (alpha, r) des Punktes. \\n**Bem.: **Alpha wird in Rad berechnet.\"));\r\n\r\n        this.addMethod(new Method(\"abs\", new Parameterlist([\r\n            { identifier: \"Wert\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.abs(<number>parameters[1].value);\r\n            }, false, true, \"Berechnet den Betrag des Wertes.\"));\r\n\r\n        this.addMethod(new Method(\"abs\", new Parameterlist([\r\n            { identifier: \"Wert\", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), floatPrimitiveType,\r\n            (parameters) => {\r\n                return Math.abs(<number>parameters[1].value);\r\n            }, false, true, \"Berechnet den Betrag des Wertes.\"));\r\n\r\n        this.addMethod(new Method(\"abs\", new Parameterlist([\r\n            { identifier: \"Wert\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return Math.abs(<number>parameters[1].value);\r\n            }, false, true, \"Berechnet den Betrag des Wertes.\"));\r\n\r\n        this.addMethod(new Method(\"max\", new Parameterlist([\r\n            { identifier: \"a\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"b\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return Math.max(<number>parameters[1].value, <number>parameters[2].value);\r\n            }, false, true, \"Gibt die größere der beiden Zahlen zurück.\"));\r\n\r\n        this.addMethod(new Method(\"max\", new Parameterlist([\r\n            { identifier: \"a\", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"b\", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), floatPrimitiveType,\r\n            (parameters) => {\r\n                return Math.max(<number>parameters[1].value, <number>parameters[2].value);\r\n            }, false, true, \"Gibt die größere der beiden Zahlen zurück.\"));\r\n\r\n        this.addMethod(new Method(\"max\", new Parameterlist([\r\n            { identifier: \"a\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"b\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.max(<number>parameters[1].value, <number>parameters[2].value);\r\n            }, false, true, \"Gibt die größere der beiden Zahlen zurück.\"));\r\n\r\n        this.addMethod(new Method(\"min\", new Parameterlist([\r\n            { identifier: \"a\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"b\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return Math.min(<number>parameters[1].value, <number>parameters[2].value);\r\n            }, false, true, \"Gibt die kleinere der beiden Zahlen zurück.\"));\r\n\r\n        this.addMethod(new Method(\"min\", new Parameterlist([\r\n            { identifier: \"a\", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"b\", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), floatPrimitiveType,\r\n            (parameters) => {\r\n                return Math.min(<number>parameters[1].value, <number>parameters[2].value);\r\n            }, false, true, \"Gibt die kleinere der beiden Zahlen zurück.\"));\r\n\r\n        this.addMethod(new Method(\"min\", new Parameterlist([\r\n            { identifier: \"a\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"b\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                return Math.min(<number>parameters[1].value, <number>parameters[2].value);\r\n            }, false, true, \"Gibt die kleinere der beiden Zahlen zurück.\"));\r\n\r\n    }\r\n}","import { Type, Method, Parameterlist, Value, Attribute } from \"../compiler/types/Types.js\";\r\nimport { Klass, Visibility } from \"../compiler/types/Class.js\";\r\nimport { stringPrimitiveType, doublePrimitiveType, floatPrimitiveType, intPrimitiveType, booleanPrimitiveType } from \"../compiler/types/PrimitiveTypes.js\";\r\nimport { Module } from \"../compiler/parser/Module.js\";\r\nimport { PrintManager } from \"../main/gui/PrintManager.js\";\r\nimport { RuntimeObject } from \"../interpreter/RuntimeObject.js\";\r\nimport { ArrayType } from \"../compiler/types/Array.js\";\r\nimport { abstandPunktZuGerade, abstandPunktZuStrecke, polygonEnthältPunkt, Punkt, schnittpunkteKreisStrecke, streckeSchneidetStrecke, vektorVonPolarkoordinaten } from \"../tools/MatheTools.js\";\r\nimport { param } from \"jquery\";\r\n\r\nexport class MathToolsClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"MathTools\", module, \"Klasse mit mathematischen Hilfsfunktionen als statische Methoden\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        this.staticClass.setupAttributeIndicesRecursive();\r\n\r\n        this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n\r\n        let vector2Class = <Klass>module.typeStore.getType(\"Vector2\");\r\n        let vectorArrayClass = new ArrayType(vector2Class);\r\n\r\n        let xIndex = vector2Class.attributeMap.get(\"x\").index;\r\n        let yIndex = vector2Class.attributeMap.get(\"y\").index;\r\n\r\n\r\n        this.addMethod(new Method(\"intersectCircleWithPolygon\", new Parameterlist([\r\n            { identifier: \"mx\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"my\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"r\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"points\", type: vectorArrayClass, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), vectorArrayClass,\r\n            (parameters) => {\r\n\r\n                let mx: number = parameters[1].value;\r\n                let my: number = parameters[2].value;\r\n                let r: number = parameters[3].value;\r\n                let points: Value[] = parameters[4].value;\r\n\r\n                let punkte: Punkt[] = [];\r\n                for(let p of points){\r\n                    punkte.push({x: p.value.attributes[xIndex].value, y: p.value.attributes[yIndex].value});\r\n                }\r\n\r\n                let schnittpunkte: Punkt[] = [];\r\n                let m: Punkt = {x: mx, y: my};\r\n                for(let i = 0; i < punkte.length; i++){\r\n                    let p1 = punkte[i];\r\n                    let p2 = punkte[(i+1)%punkte.length];\r\n                    schnittpunkteKreisStrecke(m, r, p1, p2, schnittpunkte);\r\n                }\r\n\r\n                let returnArray: Value[] = []\r\n\r\n                for(let p of schnittpunkte){\r\n                    let pVector = new RuntimeObject(vector2Class);\r\n                    pVector.attributes[xIndex] = {type: doublePrimitiveType, value: p.x};\r\n                    pVector.attributes[yIndex] = {type: doublePrimitiveType, value: p.y};\r\n                    returnArray.push({type: vector2Class, value:pVector});\r\n                }\r\n\r\n                return returnArray;\r\n\r\n            }, false, true, \"Zu einem gegebenen Kreis werden die Punkte berechnet, die auf den Seiten eines gegebenen Polygons liegen.\"));\r\n\r\n        this.addMethod(new Method(\"intersectLineSegments\", new Parameterlist([\r\n            { identifier: \"p0\", type: vector2Class, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"p1\", type: vector2Class, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"p2\", type: vector2Class, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"p3\", type: vector2Class, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), vector2Class,\r\n            (parameters) => {\r\n\r\n                let p: Punkt[] = [];\r\n                for(let i = 0; i < 4; i++){\r\n                    let att = parameters[i].value.attributes;\r\n                    p.push({x: att[xIndex].value, y: att[yIndex].value})\r\n                }\r\n\r\n                let ps: Punkt = {x: 0, y: 0};\r\n                if(streckeSchneidetStrecke(p[0], p[1], p[2], p[3], ps)){\r\n                    let pVector = new RuntimeObject(vector2Class);\r\n                    pVector.attributes[xIndex] = {type: doublePrimitiveType, value: ps.x};\r\n                    pVector.attributes[yIndex] = {type: doublePrimitiveType, value: ps.y};\r\n                    return pVector;\r\n                } else {\r\n                    return null;                    \r\n                }\r\n\r\n            }, false, true, \"Berechnet den Schnittpunkt der Strecken [p0, p1] und [p2, p3]. Gibt null zurück, wenn sich die Strecken nicht schneiden oder wenn sie parallel sind und teilweise aufeinander liegen.\"));\r\n\r\n        this.addMethod(new Method(\"polygonContainsPoint\", new Parameterlist([\r\n            { identifier: \"polygonPoints\", type: vectorArrayClass, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"p\", type: vector2Class, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let points = parameters[1].value;\r\n                let punkte: Punkt[] = [];\r\n                for(let p of points){\r\n                    punkte.push({x: p.value.attributes[xIndex].value, y: p.value.attributes[yIndex].value});\r\n                }\r\n\r\n                let att = parameters[2].value.attributes;\r\n                let p: Punkt = {x: att[xIndex].value, y: att[yIndex].value}\r\n\r\n                return polygonEnthältPunkt(punkte, p);\r\n\r\n            }, false, true, \"Gibt genau dann true zurück, wenn das Polygon den Punkt enthält.\"));\r\n\r\n            this.addMethod(new Method(\"distancePointToLine\", new Parameterlist([\r\n                { identifier: \"p\", type: vector2Class, declaration: null, usagePositions: null, isFinal: true },\r\n                { identifier: \"a\", type: vector2Class, declaration: null, usagePositions: null, isFinal: true },\r\n                { identifier: \"b\", type: vector2Class, declaration: null, usagePositions: null, isFinal: true },\r\n            ]), doublePrimitiveType,\r\n                (parameters) => {\r\n    \r\n                    let p: Punkt[] = [];\r\n                    for(let i = 0; i < 3; i++){\r\n                        let att = parameters[i].value.attributes;\r\n                        p.push({x: att[xIndex].value, y: att[yIndex].value})\r\n                    }\r\n    \r\n                    return abstandPunktZuGerade(p[1], p[2], p[0]);\r\n    \r\n                }, false, true, \"Berechnet den Abstand des Punktes P zur Gerade AB.\"));\r\n    \r\n            this.addMethod(new Method(\"distancePointToLineSegment\", new Parameterlist([\r\n                { identifier: \"p\", type: vector2Class, declaration: null, usagePositions: null, isFinal: true },\r\n                { identifier: \"a\", type: vector2Class, declaration: null, usagePositions: null, isFinal: true },\r\n                { identifier: \"b\", type: vector2Class, declaration: null, usagePositions: null, isFinal: true },\r\n            ]), doublePrimitiveType,\r\n                (parameters) => {\r\n    \r\n                    let p: Punkt[] = [];\r\n                    for(let i = 0; i < 3; i++){\r\n                        let att = parameters[i].value.attributes;\r\n                        p.push({x: att[xIndex].value, y: att[yIndex].value})\r\n                    }\r\n    \r\n                    return abstandPunktZuStrecke(p[1], p[2], p[0]);\r\n    \r\n                }, false, true, \"Berechnet den Abstand des Punktes P zur Strecke [AB].\"));\r\n    \r\n    \r\n\r\n\r\n    }\r\n}","import { Type, Method, Parameterlist, Value, Attribute } from \"../compiler/types/Types.js\";\r\nimport { Klass, Visibility, Interface } from \"../compiler/types/Class.js\";\r\nimport { stringPrimitiveType, doublePrimitiveType, floatPrimitiveType, intPrimitiveType, voidPrimitiveType } from \"../compiler/types/PrimitiveTypes.js\";\r\nimport { Module } from \"../compiler/parser/Module.js\";\r\nimport { PrintManager } from \"../main/gui/PrintManager.js\";\r\nimport { RuntimeObject } from \"../interpreter/RuntimeObject.js\";\r\nimport { EnumRuntimeObject } from \"../compiler/types/Enum.js\";\r\nimport { SoundTools } from \"../tools/SoundTools.js\";\r\n\r\nexport class SystemClass extends Klass {\r\n\r\n    printStream: RuntimeObject;\r\n\r\n    deltaTimeMillis: number = 0; // when using WebSocket then the Server sends time synchronization\r\n\r\n    constructor(module: Module) {\r\n        super(\"System\", module, \"Klasse mit statischen Methoden für Systemfunktionen, z.B. Sound, Löschen der Ausgabe usw.\");\r\n\r\n        this.printStream = new RuntimeObject(<Klass>module.typeStore.getType(\"PrintStream\"));\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        this.addAttribute(new Attribute(\"out\", module.typeStore.getType(\"PrintStream\"),\r\n            (value) => { value.value = this.printStream }, true, Visibility.public, true, \"PrintStream-Objekt, mit dem Text ausgegeben werden kann.\"));\r\n\r\n        this.staticClass.setupAttributeIndicesRecursive();\r\n\r\n\r\n        this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n\r\n        // this.addMethod(new Method(\"clearScreen\", new Parameterlist([\r\n        // ]), null,\r\n        //     (parameters) => {\r\n        //         module.main.getInterpreter().printManager.clear();\r\n        //     }, false, true, \"Löscht den Bildschirm\"));\r\n\r\n        // this.addMethod(new Method(\"addKeyListener\", new Parameterlist([\r\n        //     { identifier: \"keyListener\", type: module.typeStore.getType(\"KeyListener\"), declaration: null, usagePositions: null, isFinal: true }\r\n        // ]), null,\r\n        // (parameters) => {\r\n        //     let r: RuntimeObject = parameters[1].value;\r\n        //     let method = (<Klass>r.class).getMethodBySignature(\"onKeyTyped(String)\");\r\n\r\n        //     if (method != null) {\r\n\r\n        //         module.main.getInterpreter().keyboardTool.keyPressedCallbacks.push((key) => {\r\n\r\n        //             let program = method?.program;\r\n        //             let invoke = method?.invoke;\r\n\r\n        //             let stackElements: Value[] = [\r\n        //                 {\r\n        //                     type: r.class,\r\n        //                     value: r\r\n        //                 },\r\n        //                 {\r\n        //                     type: stringPrimitiveType,\r\n        //                     value: key\r\n        //                 }\r\n        //             ];\r\n\r\n        //             if (program != null) {\r\n        //                 module.main.getInterpreter().runTimer(method, stackElements, null, false);\r\n        //             } else if (invoke != null) {\r\n        //                 invoke([]);\r\n        //             }\r\n\r\n\r\n        //         });\r\n        //     }\r\n        // }    \r\n        // , false, true, \"Fügt einen KeyListener hinzu, dessen Methode keyTyped immer dann aufgerufen wird, wenn eine Taste gedrückt und anschließend losgelassen wird.\"));\r\n\r\n        // this.addMethod(new Method(\"playSound\", new Parameterlist([\r\n        //     { identifier: \"sound\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        // ]), null,\r\n        // (parameters) => {\r\n        //     let sound: string = parameters[1].value;\r\n        //     SoundTools.play(sound);\r\n        // }    \r\n        // , false, true, \"Spielt einen Sound ab. Die Möglichen Sounds sind als statische Variablen der Klasse Sound hinterlegt. Tippe als Parameter also Sound gefolgt von einem Punkt ein, um eine Auswahl zu sehen!\"));\r\n\r\n        this.addMethod(new Method(\"currentTimeMillis\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return Date.now() + this.deltaTimeMillis;\r\n            }\r\n            , false, true, \"Gibt die Anzahl der Millisekunden, die seit dem 01.01.1970 00:00:00 UTC vergangen sind, zurück.\"));\r\n\r\n        this.addMethod(new Method(\"exit\", new Parameterlist([\r\n            { identifier: \"status\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n                let console = module.main.getBottomDiv()?.console;\r\n                if(console != null){\r\n                    console.writeConsoleEntry(\"Das Programm wurde angehalten mit Statuswert: \" + parameters[1].value, null, \"#0000ff\");\r\n                    console.showTab();\r\n                }\r\n                module.main.getInterpreter().stop();\r\n            }\r\n            , false, true, \"Beendet das Programm und gibt den übergebenen Wert in der Konsole aus.\"));\r\n\r\n    }\r\n\r\n}\r\n\r\nexport class PrintStreamClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"PrintStream\", module, \"Interne Hilfsklasse, um System.out.println zu ermöglichen. Das Objekt System.out ist von der Klasse PrintStream.\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        this.addMethod(new Method(\"print\", new Parameterlist([\r\n            { identifier: \"text\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n                module.main.getInterpreter().printManager.print(parameters[1].value);\r\n            }, false, true, \"Gibt den Text aus.\"));\r\n\r\n        this.addMethod(new Method(\"println\", new Parameterlist([\r\n            { identifier: \"text\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n                module.main.getInterpreter().printManager.println(parameters[1].value);\r\n            }, false, true, \"Gibt den Text aus, gefolgt von einem Zeilensprung.\"));\r\n\r\n        this.addMethod(new Method(\"println\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n                module.main.getInterpreter().printManager.println(\"\");\r\n            }, false, true, \"Setzt den Cursor in die nächste Zeile.\"));\r\n\r\n\r\n    }\r\n\r\n}","import { Type, Method, Parameterlist, Value, Attribute } from \"../compiler/types/Types.js\";\r\nimport { Klass, Visibility, Interface } from \"../compiler/types/Class.js\";\r\nimport { stringPrimitiveType, doublePrimitiveType, floatPrimitiveType, intPrimitiveType, voidPrimitiveType } from \"../compiler/types/PrimitiveTypes.js\";\r\nimport { Module } from \"../compiler/parser/Module.js\";\r\nimport { PrintManager } from \"../main/gui/PrintManager.js\";\r\nimport { RuntimeObject } from \"../interpreter/RuntimeObject.js\";\r\nimport { EnumRuntimeObject } from \"../compiler/types/Enum.js\";\r\nimport { SoundTools } from \"../tools/SoundTools.js\";\r\n\r\nexport class SystemToolsClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"SystemTools\", module, \"Klasse mit statischen Methoden für Systemfunktionen, z.B. Löschen der Ausgabe, Registrieren eines Tastaturlisteners usw.\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n        this.staticClass.setupAttributeIndicesRecursive();\r\n\r\n        this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n\r\n        this.addMethod(new Method(\"clearScreen\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n                module.main.getInterpreter().printManager.clear();\r\n            }, false, true, \"Löscht den Bildschirm\"));\r\n\r\n        this.addMethod(new Method(\"setSpeed\", new Parameterlist([\r\n            {identifier: \"speed\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n                let speed: number = parameters[1].value;\r\n                module.main.getInterpreter().controlButtons.speedControl.setSpeedInStepsPerSecond(speed >= 1 ? speed : \"max\");\r\n\r\n            }, false, true, \"Setzt die Ausführungsgeschwindigkeit. Der Parameter speed wir in Steps/Sekunde angegeben. Eine negative Zahl bedeutet: 'maximal'.\"));\r\n\r\n        this.addMethod(new Method(\"getSpeed\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                return module.main.getInterpreter().controlButtons.speedControl.getSpeedInStepsPerSecond();\r\n\r\n            }, false, true, \"Gibt die Ausführungsgeschwindigkeit in Steps pro Sekunde zurück.\"));\r\n\r\n        this.addMethod(new Method(\"pause\", new Parameterlist([\r\n            {identifier: \"durationInMs\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n            }, false, true, \"Pausiert das Programm für die angegebene Zeit in ms.\"));\r\n\r\n        this.addMethod(new Method(\"addKeyListener\", new Parameterlist([\r\n            { identifier: \"keyListener\", type: module.typeStore.getType(\"KeyListener\"), declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n                let r: RuntimeObject = parameters[1].value;\r\n                let method = (<Klass>r.class).getMethodBySignature(\"onKeyTyped(String)\");\r\n\r\n                if (method != null) {\r\n\r\n                    module.main.getInterpreter().keyboardTool.keyPressedCallbacks.push((key) => {\r\n\r\n                        let program = method?.program;\r\n                        let invoke = method?.invoke;\r\n\r\n                        let stackElements: Value[] = [\r\n                            {\r\n                                type: r.class,\r\n                                value: r\r\n                            },\r\n                            {\r\n                                type: stringPrimitiveType,\r\n                                value: key\r\n                            }\r\n                        ];\r\n\r\n                        if (program != null) {\r\n                            module.main.getInterpreter().runTimer(method, stackElements, null, false);\r\n                        } else if (invoke != null) {\r\n                            invoke([]);\r\n                        }\r\n\r\n\r\n                    });\r\n                }\r\n            }\r\n            , false, true, \"Fügt einen KeyListener hinzu, dessen Methode keyTyped immer dann aufgerufen wird, wenn eine Taste gedrückt und anschließend losgelassen wird.\"));\r\n\r\n        // this.addMethod(new Method(\"playSound\", new Parameterlist([\r\n        //     { identifier: \"sound\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        // ]), null,\r\n        // (parameters) => {\r\n        //     let sound: string = parameters[1].value;\r\n        //     SoundTools.play(sound);\r\n        // }    \r\n        // , false, true, \"Spielt einen Sound ab. Die Möglichen Sounds sind als statische Variablen der Klasse Sound hinterlegt. Tippe als Parameter also Sound gefolgt von einem Punkt ein, um eine Auswahl zu sehen!\"));\r\n    }\r\n}\r\n\r\nexport class KeyListener extends Interface {\r\n\r\n    constructor(module: Module) {\r\n        super(\"KeyListener\", module, \"Interface mit Methode onKeyTyped. Eine Klasse, die dieses Interface implementiert, kann auf Tastatureingaben reagieren. Ein Objekt dieser Klasse muss zuvor aber mit System.addKeyListener() registriert werden.\");\r\n\r\n        this.addMethod(new Method(\"onKeyTyped\", new Parameterlist([\r\n            { identifier: \"key\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), voidPrimitiveType,\r\n            null,  // no implementation!\r\n            false, false, \"Wird aufgerufen, nachdem eine Taste gedrückt wurde.\"));\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class PrintStreamClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"PrintStream\", module, \"Interne Hilfsklasse, um System.out.println zu ermöglichen. Das Objekt System.out ist von der Klasse PrintStream.\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        this.addMethod(new Method(\"print\", new Parameterlist([\r\n            { identifier: \"text\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n                module.main.getInterpreter().printManager.print(parameters[1].value);\r\n            }, false, true, \"Gibt den Text aus.\"));\r\n\r\n        this.addMethod(new Method(\"println\", new Parameterlist([\r\n            { identifier: \"text\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n                module.main.getInterpreter().printManager.println(parameters[1].value);\r\n            }, false, true, \"Gibt den Text aus, gefolgt von einem Zeilensprung.\"));\r\n\r\n\r\n    }\r\n\r\n}","import { Type, Method, Parameterlist, Value, Attribute } from \"../compiler/types/Types.js\";\r\nimport { Klass, Visibility, Interface } from \"../compiler/types/Class.js\";\r\nimport { stringPrimitiveType, doublePrimitiveType, floatPrimitiveType, intPrimitiveType, voidPrimitiveType } from \"../compiler/types/PrimitiveTypes.js\";\r\nimport { Module } from \"../compiler/parser/Module.js\";\r\nimport { PrintManager } from \"../main/gui/PrintManager.js\";\r\nimport { RuntimeObject } from \"../interpreter/RuntimeObject.js\";\r\nimport { Enum } from \"../compiler/types/Enum.js\";\r\nimport { InterpreterState, Interpreter } from \"../interpreter/Interpreter.js\";\r\nimport { Program } from \"../compiler/parser/Program.js\";\r\n\r\n\r\nexport class Runnable extends Interface {\r\n\r\n    constructor(module: Module) {\r\n        super(\"Runnable\", module);\r\n\r\n        this.addMethod(new Method(\"run\", new Parameterlist([\r\n            // { identifier: \"deltaTimeInMs\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), voidPrimitiveType,\r\n            null,  // no implementation!\r\n            false, false, \"Wird vom Timer immer wieder aufgerufen\"));\r\n    }\r\n\r\n}\r\n\r\ntype TimerEntry = {\r\n    timerListener: RuntimeObject,\r\n    dt: number,\r\n    running: boolean,\r\n    lastTimeFired: number,\r\n    method: Method\r\n}\r\n\r\nexport class TimerClass extends Klass {\r\n\r\n    timerEntries: TimerEntry[] = [];\r\n    timerRunning: boolean = false;\r\n\r\n    timerStarted: boolean = false;\r\n\r\n    constructor(module: Module) {\r\n        super(\"Timer\", module, \"Timer Klasse zur periodischen Ausführung von Methoden\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n\r\n        this.addMethod(new Method(\"repeat\", new Parameterlist([\r\n            {\r\n                identifier: \"runnable\", type: module.typeStore.getType(\"Runnable\"),\r\n                declaration: null, usagePositions: null, isFinal: true\r\n            },\r\n            {\r\n                identifier: \"deltaTimeInMs\", type: intPrimitiveType,\r\n                declaration: null, usagePositions: null, isFinal: true\r\n            },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let tl: RuntimeObject = <RuntimeObject>parameters[1].value;\r\n                let dt: number = <number>parameters[2].value;\r\n\r\n                let timerEntry: TimerEntry = {\r\n                    timerListener: tl,\r\n                    dt: dt,\r\n                    lastTimeFired: 0,\r\n                    running: true,\r\n                    method: tl.class.getMethod(\"run\", new Parameterlist([\r\n                        // {\r\n                        //     identifier: \"deltaTimeInMs\",\r\n                        //     type: intPrimitiveType,\r\n                        //     declaration: null,\r\n                        //     isFinal: true,\r\n                        //     usagePositions: null\r\n                        // }\r\n                    ]))\r\n                }\r\n\r\n                this.timerEntries.push(timerEntry);\r\n\r\n                // console.log(\"TimerListener added with dt = \" + dt + \" ms.\");\r\n\r\n            }, false, true, \"Fügt ein neues TimerListener-Objekt hinzu und ruft dessen tick-Methode immer wieder auf.\"));\r\n\r\n    }\r\n\r\n    startTimer(){\r\n        if(!this.timerStarted){\r\n            this.timerStarted = true;\r\n            this.processTimerEntries();\r\n        }\r\n    }\r\n    \r\n    stopTimer(){\r\n        this.timerStarted = false;\r\n    }\r\n\r\n    processTimerEntries() {\r\n\r\n        if(!this.timerStarted){\r\n            return;\r\n        }\r\n\r\n        if (this.timerEntries.length > 0) {\r\n            let interpreter = this.module?.main?.getInterpreter();\r\n\r\n            if (interpreter != null) {\r\n                if (!this.timerRunning && interpreter.state == InterpreterState.running) {\r\n                    let t: number = performance.now();\r\n                    for (let timerentry of this.timerEntries) {\r\n                        let dt = t - timerentry.lastTimeFired;\r\n                        if (dt >= timerentry.dt) {\r\n                            this.runEntry(timerentry, interpreter, Math.round(dt));\r\n                            timerentry.lastTimeFired = t;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                switch (interpreter.state) {\r\n                    case InterpreterState.done:\r\n                    case InterpreterState.error:\r\n                    case InterpreterState.not_initialized:\r\n                        this.timerEntries = [];\r\n                        this.timerRunning = false;\r\n                        break;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n        let that = this;\r\n        setTimeout(() => {\r\n            that.processTimerEntries();\r\n        }, 10);\r\n\r\n    }\r\n\r\n    runEntry(timerentry: TimerEntry, interpreter: Interpreter, dt: number) {\r\n        let stackElements: Value[] = [\r\n            {\r\n                type: timerentry.timerListener.class,\r\n                value: timerentry.timerListener\r\n            },\r\n            // {\r\n            //     type: intPrimitiveType,\r\n            //     value: dt\r\n            // }\r\n        ];\r\n\r\n        this.timerRunning = true;\r\n        let that = this;\r\n\r\n        interpreter.runTimer(timerentry.method, stackElements, (interpreter) => {\r\n            that.timerRunning = false;\r\n        }, false);\r\n    }\r\n\r\n}","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { Interface, TypeVariable, Klass } from \"../../compiler/types/Class.js\";\r\nimport { voidPrimitiveType, booleanPrimitiveType, intPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\n\r\nexport class MapClass extends Interface {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Map\", module, \"Interface mit Methoden einer Map (Schlüssel-Wert-Speicher)\");\r\n\r\n        let objectType = module.typeStore.getType(\"Object\");\r\n\r\n        let typeK: Klass = (<Klass>objectType).clone();\r\n        typeK.identifier = \"K\";\r\n        typeK.isTypeVariable = true;\r\n\r\n        let tvK: TypeVariable = {\r\n            identifier: \"K\",\r\n            scopeFrom: { line: 1, column: 1, length: 1 },\r\n            scopeTo: { line: 1, column: 1, length: 1 },\r\n            type: typeK\r\n        };\r\n        this.typeVariables.push(tvK);\r\n\r\n        let typeV: Klass = (<Klass>objectType).clone();\r\n        typeV.identifier = \"V\";\r\n        typeV.isTypeVariable = true;\r\n\r\n        let tvV: TypeVariable = {\r\n            identifier: \"V\",\r\n            scopeFrom: { line: 1, column: 1, length: 1 },\r\n            scopeTo: { line: 1, column: 1, length: 1 },\r\n            type: typeV\r\n        };\r\n        this.typeVariables.push(tvV);\r\n\r\n        this.addMethod(new Method(\"size\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt die Anzahl der Elemente der Map zurück.\"));\r\n\r\n        this.addMethod(new Method(\"isEmpty\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Testet, ob die Map leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"containsKey\", new Parameterlist([\r\n            { identifier: \"key\", type: typeK, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt genau dann true zurück, wenn die Map zum Schlüssel key einen Wert enthält.\"));\r\n\r\n        this.addMethod(new Method(\"containsValue\", new Parameterlist([\r\n            { identifier: \"value\", type: typeV, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt genau dann true zurück, wenn die Map den Wert enthält.\"));\r\n\r\n        this.addMethod(new Method(\"get\", new Parameterlist([\r\n            { identifier: \"key\", type: typeK, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), typeV,\r\n            null,  // no implementation!\r\n            true, false, \"Gibt den Wert zum Schlüssel key zurück. Gibt null zurück, falls die Map zum Schlüssel key keinen Wert enthält.\"));\r\n\r\n        this.addMethod(new Method(\"put\", new Parameterlist([\r\n            { identifier: \"key\", type: typeK, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"value\", type: typeV, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), typeV,\r\n            null,  // no implementation!\r\n            true, false, \"Speichert das key-value pair in der Map. Falls zum key vorher schon ein Value gespeichert war, wird dieser zurückgegeben. In der Map wird er dann durch den neuen Value überschrieben. Falls es zum key noch keinen value in der Map gab, wird null zurückgegeben.\"));\r\n\r\n        this.addMethod(new Method(\"clear\", new Parameterlist([\r\n        ]), null,\r\n            null,  // no implementation!\r\n            true, false, \"Entfernt alle Element aus dieser Map.\"));\r\n\r\n    }\r\n\r\n}\r\n","import { TextPosition, TokenType } from \"../../compiler/lexer/Token.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Program, Statement } from \"../../compiler/parser/Program.js\";\r\nimport { Interface, Klass } from \"../../compiler/types/Class.js\";\r\nimport { Enum } from \"../../compiler/types/Enum.js\";\r\nimport { booleanPrimitiveType, stringPrimitiveType, StringPrimitiveType, voidPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, PrimitiveType, Value } from \"../../compiler/types/Types.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { ListHelper } from \"./ArrayList.js\";\r\n\r\n\r\nexport class MapHelper {\r\n\r\n    keyArray: Value[] = [];\r\n    valueArray: Value[] = [];\r\n\r\n    map: Map<any, Value> = new Map(); // Maps key objects to value-Values\r\n\r\n    constructor(private runtimeObject: RuntimeObject, public interpreter: Interpreter, private module: Module) {\r\n    }\r\n\r\n    get(key: Value){\r\n        return this.map.get(key.value);\r\n    }\r\n\r\n    set(key: Value, value: Value): Value {\r\n\r\n        let old = this.map.get(key.value);\r\n\r\n        if(old == null){\r\n            this.keyArray.push(key);\r\n        } else {\r\n            this.valueArray.splice(this.valueArray.indexOf(old), 1);\r\n        }\r\n\r\n        this.valueArray.push(value);\r\n        \r\n        this.map.set(key.value, value);\r\n\r\n        return old;\r\n\r\n    }\r\n\r\n    allElementsPrimitive(): boolean {\r\n        for (let v of this.keyArray) {\r\n            if (!(v.type instanceof PrimitiveType || [\"String\", \"_Double\", \"Integer\", \"Boolean\" ,\"Character\"].indexOf(v.type.identifier) >= 0)) {\r\n                return false;\r\n            }\r\n        }\r\n        for (let v of this.valueArray) {\r\n            if (!(v.type instanceof PrimitiveType || [\"String\", \"_Double\", \"Integer\", \"Boolean\" ,\"Character\"].indexOf(v.type.identifier) >= 0)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    to_String(): any {\r\n\r\n        if (this.allElementsPrimitive()) {\r\n            let s = \"[\";\r\n            for (let i = 0; i < this.keyArray.length; i++) {\r\n                s += \"\" + this.keyArray[i].value + \" => \" + this.valueArray[i].value;\r\n                if (i < this.keyArray.length - 1) s += \", \";\r\n            }\r\n\r\n            return s + \"]\";\r\n        }\r\n\r\n        let position: TextPosition = {\r\n            line: 1,\r\n            column: 1,\r\n            length: 1\r\n        }\r\n\r\n        let statements: Statement[] = [\r\n            {\r\n                type: TokenType.noOp,\r\n                position: position,\r\n                stepFinished: false\r\n            },\r\n            {\r\n                type: TokenType.pushConstant,\r\n                dataType: stringPrimitiveType,\r\n                value: \"[\",\r\n                position: position,\r\n                stepFinished: false\r\n            },\r\n        ];\r\n\r\n        let toStringParameters = new Parameterlist([]);\r\n\r\n        for (let i = 0; i < this.valueArray.length; i++) {\r\n\r\n            let key = this.keyArray[i];\r\n            if (key.type instanceof PrimitiveType || key.type instanceof StringPrimitiveType) {\r\n                statements.push({\r\n                    type: TokenType.pushConstant,\r\n                    dataType: stringPrimitiveType,\r\n                    value: key.type.castTo(key, stringPrimitiveType).value,\r\n                    position: position,\r\n                    stepFinished: false\r\n                });\r\n            } else {\r\n                statements.push({\r\n                    type: TokenType.pushConstant,\r\n                    dataType: key.type,\r\n                    value: key.value,\r\n                    stepFinished: false,\r\n                    position: position\r\n                });\r\n                statements.push({\r\n                    type: TokenType.callMethod,\r\n                    method: (<Klass | Interface | Enum>key.type).getMethod(\"toString\", toStringParameters),\r\n                    isSuperCall: false,\r\n                    stackframeBegin: -1,\r\n                    stepFinished: false,\r\n                    position: position\r\n                });\r\n\r\n            }\r\n\r\n            statements.push({\r\n                type: TokenType.binaryOp,\r\n                operator: TokenType.plus,\r\n                leftType: stringPrimitiveType,\r\n                stepFinished: false,\r\n                position: position\r\n            });\r\n\r\n            statements.push({\r\n                type: TokenType.pushConstant,\r\n                dataType: stringPrimitiveType,\r\n                value: \" => \",\r\n                position: position,\r\n                stepFinished: false\r\n            });\r\n            statements.push({\r\n                type: TokenType.binaryOp,\r\n                operator: TokenType.plus,\r\n                leftType: stringPrimitiveType,\r\n                stepFinished: false,\r\n                position: position\r\n            });\r\n\r\n\r\n            let value = this.valueArray[i];\r\n            if (value.value == null || value.type instanceof PrimitiveType || value.type instanceof StringPrimitiveType) {\r\n                statements.push({\r\n                    type: TokenType.pushConstant,\r\n                    dataType: stringPrimitiveType,\r\n                    value: value.value == null ? \"null\" : value.type.castTo(value, stringPrimitiveType).value,\r\n                    position: position,\r\n                    stepFinished: false\r\n                });\r\n            } else {\r\n                statements.push({\r\n                    type: TokenType.pushConstant,\r\n                    dataType: value.type,\r\n                    value: value.value,\r\n                    stepFinished: false,\r\n                    position: position\r\n                });\r\n                statements.push({\r\n                    type: TokenType.callMethod,\r\n                    method: (<Klass | Interface | Enum>value.type).getMethod(\"toString\", toStringParameters),\r\n                    isSuperCall: false,\r\n                    stackframeBegin: -1,\r\n                    stepFinished: false,\r\n                    position: position\r\n                });\r\n\r\n            }\r\n\r\n            statements.push({\r\n                type: TokenType.binaryOp,\r\n                operator: TokenType.plus,\r\n                leftType: stringPrimitiveType,\r\n                stepFinished: false,\r\n                position: position\r\n            });\r\n\r\n            if (i < this.valueArray.length - 1) {\r\n                statements.push({\r\n                    type: TokenType.pushConstant,\r\n                    dataType: stringPrimitiveType,\r\n                    value: \", \",\r\n                    position: position,\r\n                    stepFinished: false\r\n                });\r\n                statements.push({\r\n                    type: TokenType.binaryOp,\r\n                    leftType: stringPrimitiveType,\r\n                    operator: TokenType.plus,\r\n                    stepFinished: false,\r\n                    position: position\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n\r\n        statements.push({\r\n            type: TokenType.pushConstant,\r\n            dataType: stringPrimitiveType,\r\n            value: \"]\",\r\n            position: position,\r\n            stepFinished: false\r\n        });\r\n\r\n        statements.push({\r\n            type: TokenType.binaryOp,\r\n            operator: TokenType.plus,\r\n            leftType: stringPrimitiveType,\r\n            stepFinished: false,\r\n            position: position\r\n        });\r\n\r\n        // statements.push({\r\n        //     type: TokenType.binaryOp,\r\n        //     operator: TokenType.plus,\r\n        //     leftType: stringPrimitiveType,\r\n        //     stepFinished: false,\r\n        //     position: position\r\n        // });\r\n\r\n        statements.push({\r\n            type: TokenType.return,\r\n            copyReturnValueToStackframePos0: true,\r\n            leaveThisObjectOnStack: false,\r\n            stepFinished: false,\r\n            position: position,\r\n            methodWasInjected: true\r\n        });\r\n\r\n        let program: Program = {\r\n            module: this.module,\r\n            statements: statements,\r\n            labelManager: null\r\n        }\r\n\r\n        let method: Method = new Method(\"toString\", new Parameterlist([]), stringPrimitiveType, program, false, false);\r\n        this.interpreter.runTimer(method, [], () => console.log(\"List.toString fertig!\"), true)\r\n\r\n        return \"\";\r\n    }\r\n\r\n    size(): number {\r\n        return this.valueArray.length;\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return this.valueArray.length == 0;\r\n    }\r\n\r\n    containsKey(key: Value): any {\r\n        return this.map.get(key.value) != null;\r\n    }\r\n\r\n    containsValue(value: Value): any {\r\n        for(let v of this.valueArray){\r\n            if(v.value == value.value) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    clear() {\r\n        this.valueArray = [];\r\n        this.keyArray = [];\r\n        this.map.clear();\r\n    }\r\n\r\n}\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Interface, Klass, TypeVariable } from \"../../compiler/types/Class.js\";\r\nimport { booleanPrimitiveType, intPrimitiveType, stringPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Value } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { MapHelper } from \"./MapHelper.js\";\r\n\r\nexport class HashMapClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"HashMap\", module, \"Map-Klasse mit Zugriffszeit proportional zu log(Anzahl der Elemente)\");\r\n\r\n        let objectType = module.typeStore.getType(\"Object\");\r\n\r\n        this.setBaseClass(<Klass>objectType);\r\n\r\n        let typeK: Klass = (<Klass>objectType).clone();\r\n        typeK.identifier = \"K\";\r\n        typeK.isTypeVariable = true;\r\n\r\n        let tvK: TypeVariable = {\r\n            identifier: \"K\",\r\n            scopeFrom: { line: 1, column: 1, length: 1 },\r\n            scopeTo: { line: 1, column: 1, length: 1 },\r\n            type: typeK\r\n        };\r\n        this.typeVariables.push(tvK);\r\n\r\n        let typeV: Klass = (<Klass>objectType).clone();\r\n        typeV.identifier = \"V\";\r\n        typeV.isTypeVariable = true;\r\n\r\n        let tvV: TypeVariable = {\r\n            identifier: \"V\",\r\n            scopeFrom: { line: 1, column: 1, length: 1 },\r\n            scopeTo: { line: 1, column: 1, length: 1 },\r\n            type: typeV\r\n        };\r\n        this.typeVariables.push(tvV);\r\n\r\n\r\n\r\n        let setInterface = (<Interface>module.typeStore.getType(\"Map\")).clone();\r\n        setInterface.typeVariables = [tvK, tvV];\r\n\r\n        this.implements.push(setInterface);\r\n\r\n        this.addMethod(new Method(\"HashMap\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let mh = new MapHelper(o, module.main.getInterpreter(), module);\r\n                o.intrinsicData[\"MapHelper\"] = mh;\r\n\r\n            }, false, false, 'Instanziert eine neue HashMap', true));\r\n\r\n\r\n        this.addMethod(new Method(\"put\", new Parameterlist([\r\n            { identifier: \"key\", type: typeK, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"value\", type: typeV, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), typeV,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let key: Value = parameters[1];\r\n                let value: Value = parameters[2];\r\n                let ah: MapHelper = o.intrinsicData[\"MapHelper\"];\r\n\r\n                return ah.set(key, value);\r\n\r\n            }, false, false, \"Speichert das key-value pair in der Map. Falls zum key vorher schon ein Value gespeichert war, wird dieser zurückgegeben. In der Map wird er dann durch den neuen Value überschrieben. Falls es zum key noch keinen value in der Map gab, wird null zurückgegeben.\"));\r\n\r\n        this.addMethod(new Method(\"clear\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: MapHelper = o.intrinsicData[\"MapHelper\"];\r\n\r\n                return ah.clear();\r\n\r\n            },\r\n            false, false, \"Entfernt alle Key-Value-Pairs aus dieser HashMap.\"));\r\n\r\n        this.addMethod(new Method(\"containsKey\", new Parameterlist([\r\n            { identifier: \"key\", type: typeK, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let key: Value = parameters[1];\r\n                let ah: MapHelper = o.intrinsicData[\"MapHelper\"];\r\n\r\n                return ah.containsKey(key);\r\n\r\n            },  // no implementation!\r\n            false, false, \"Gibt genau dann true zurück, wenn die Map zum Schlüssel key einen Wert enthält.\"));\r\n\r\n        this.addMethod(new Method(\"containsValue\", new Parameterlist([\r\n            { identifier: \"value\", type: typeV, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let value: Value = parameters[1];\r\n                let ah: MapHelper = o.intrinsicData[\"MapHelper\"];\r\n\r\n                return ah.containsValue(value);\r\n\r\n            },  // no implementation!\r\n            false, false, \"Gibt genau dann true zurück, wenn die Map den Wert enthält.\"));\r\n\r\n        this.addMethod(new Method(\"get\", new Parameterlist([\r\n            { identifier: \"key\", type: typeK, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), typeV,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let key: Value = parameters[1];\r\n                let ah: MapHelper = o.intrinsicData[\"MapHelper\"];\r\n\r\n                let v: Value = ah.get(key);\r\n                return v == null ? null : v.value;\r\n\r\n            },  // no implementation!\r\n            false, false, \"Gibt den Wert zum Schlüssel key zurück. Gibt null zurück, falls die Map zum Schlüssel key keinen Wert enthält.\"));\r\n\r\n\r\n        this.addMethod(new Method(\"isEmpty\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: MapHelper = o.intrinsicData[\"MapHelper\"];\r\n\r\n                return ah.isEmpty();\r\n\r\n            },\r\n            false, false, \"Testet, ob die HashMap leer ist.\"));\r\n\r\n        this.addMethod(new Method(\"size\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: MapHelper = o.intrinsicData[\"MapHelper\"];\r\n\r\n                return ah.size();\r\n\r\n            },\r\n            false, false, \"Gibt die Anzahl der key-value-pairs der HashMap zurück.\"));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([]), stringPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ah: MapHelper = o.intrinsicData[\"MapHelper\"];\r\n\r\n                return ah.to_String();\r\n\r\n            }, false, false));\r\n\r\n    }\r\n\r\n}\r\n\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { booleanPrimitiveType, doublePrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { PolygonHelper } from \"./Polygon.js\";\r\n\r\nexport class TriangleClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Triangle\", module, \"Dreieck\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Polygon\"));\r\n\r\n        this.addMethod(new Method(\"Triangle\", new Parameterlist([\r\n            { identifier: \"x1\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y1\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"x2\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y2\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"x3\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y3\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let pointsNumber: number[] = [];\r\n                for(let i = 1; i <= 6; i++){\r\n                    pointsNumber.push(parameters[i].value);\r\n                }\r\n\r\n                let ph = new PolygonHelper(pointsNumber, true, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = ph;\r\n\r\n            }, false, false, 'Instanziert ein neues Dreieck.', true));\r\n\r\n        this.addMethod(new Method(\"copy\", new Parameterlist([\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: PolygonHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"copy\")) return;\r\n\r\n                return sh.getCopy(<Klass>o.class);\r\n\r\n            }, false, false, 'Erstellt eine Kopie des Triangle-Objekts und git sie zurück.', false));\r\n\r\n        }\r\n\r\n}\r\n","import { TokenType } from \"../../compiler/lexer/Token.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { Enum, EnumRuntimeObject } from \"../../compiler/types/Enum.js\";\r\nimport { intPrimitiveType, stringPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\n\r\nexport type LocalDateTimeIntrinsicData = {\r\n    date: Date\r\n}\r\n\r\nexport class LocalDateTimeClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"LocalDateTime\", module, \"Ein LocalDate-Objekt speichert einen Zeitpunkt (Datum und Uhrzeit).\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n        let dayOfWeekType = <Enum>module.typeStore.getType(\"DayOfWeek\");\r\n        let MonthType = <Enum>module.typeStore.getType(\"Month\");\r\n\r\n        // this.staticClass.classObject = new RuntimeObject(this.staticClass);\r\n        // this.staticClass.classObject.initializeAttributeValues();\r\n        \r\n        this.addMethod(new Method(\"LocalDateTime\", new Parameterlist([]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                var today = new Date();\r\n\r\n                let intrinsicData: LocalDateTimeIntrinsicData = {\r\n                    date: today\r\n                };\r\n\r\n                o.intrinsicData[\"ldt\"] = intrinsicData;\r\n\r\n                return;\r\n\r\n            }, false, false, 'Holt den aktuellen Zeitpunkt von der Systemuhr des Rechners und gibt ihn als LocalDateTime-Objekt zurück.'\r\n            , true));\r\n\r\n\r\n        this.addMethod(new Method(\"now\", new Parameterlist([]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = new RuntimeObject(this);\r\n\r\n                var today = new Date();\r\n\r\n                let intrinsicData: LocalDateTimeIntrinsicData = {\r\n                    date: today\r\n                };\r\n\r\n                o.intrinsicData[\"ldt\"] = intrinsicData;\r\n\r\n                return o;\r\n\r\n            }, false, true, 'Holt den aktuellen Zeitpunkt von der Systemuhr des Rechners und gibt ihn als LocalDateTime-Objekt zurück.'\r\n            , false));\r\n\r\n        this.addMethod(new Method(\"of\", new Parameterlist([\r\n            { identifier: \"year\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"month\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"dayOfMonth\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"hour\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"minute\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"second\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = new RuntimeObject(this);\r\n                let year: number = Math.trunc(parameters[1].value);\r\n                let month: number = Math.trunc(parameters[2].value);\r\n                let dayOfMonth: number = Math.trunc(parameters[3].value);\r\n                let hour: number = Math.trunc(parameters[4].value);\r\n                let minute: number = Math.trunc(parameters[5].value);\r\n                let second: number = Math.trunc(parameters[6].value);\r\n\r\n                var date = new Date(year, month - 1, dayOfMonth, hour, minute, second);\r\n\r\n                let intrinsicData: LocalDateTimeIntrinsicData = {\r\n                    date: date\r\n                };\r\n\r\n                o.intrinsicData[\"ldt\"]= intrinsicData;\r\n\r\n                return o;\r\n\r\n            }, false, true, 'Gibt ein LocalDateTime-Objekt zurück, das den durch year, month (1 - 12), dayOfMonth, hour, minute, second beschriebenen Zeitpunkt repräsentiert.'\r\n            , false));\r\n\r\n        this.addMethod(new Method(\"of\", new Parameterlist([\r\n            { identifier: \"year\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"month\", type: MonthType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"dayOfMonth\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"hour\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"minute\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"second\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = new RuntimeObject(this);\r\n                let year: number = Math.trunc(parameters[1].value);\r\n                let month: EnumRuntimeObject = parameters[2].value;\r\n                let dayOfMonth: number = Math.trunc(parameters[3].value);\r\n                let hour: number = Math.trunc(parameters[4].value);\r\n                let minute: number = Math.trunc(parameters[5].value);\r\n                let second: number = Math.trunc(parameters[6].value);\r\n\r\n                var date = new Date(year, month.enumValue.ordinal, dayOfMonth, hour, minute, second);\r\n\r\n                let intrinsicData: LocalDateTimeIntrinsicData = {\r\n                    date: date\r\n                };\r\n\r\n                o.intrinsicData[\"ldt\"] = intrinsicData;\r\n\r\n                return o;\r\n\r\n            }, false, true, 'Gibt ein LocalDateTime-Objekt zurück, das den durch year, month (1 - 12), dayOfMonth, hour, minute, second beschriebenen Zeitpunkt repräsentiert.'\r\n            , false));\r\n\r\n        this.addMethod(new Method(\"plusDays\", new Parameterlist([\r\n            { identifier: \"days\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), this,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let days: number = Math.trunc(parameters[1].value);\r\n\r\n                let oldDate: Date = (<LocalDateTimeIntrinsicData>(o.intrinsicData[\"ldt\"])).date;\r\n                let newDate: Date = new Date(oldDate.getTime() + days*24*3600*1000);\r\n\r\n                let o1: RuntimeObject = new RuntimeObject(this);\r\n\r\n                let intrinsicData: LocalDateTimeIntrinsicData = {\r\n                    date: newDate\r\n                };\r\n\r\n                o1.intrinsicData[\"ldt\"] = intrinsicData;\r\n\r\n                return o1;\r\n\r\n            }, false, false, 'Gibt ein neues LocalDateTime-Objekt zurück, das einen Zeitpunkt repräsentiert, der um die übergebene Anzahl von Tagen später liegt.', false));\r\n\r\n        this.addMethod(new Method(\"minusDays\", new Parameterlist([\r\n            { identifier: \"days\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), this,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let days: number = Math.trunc(parameters[1].value);\r\n\r\n                let oldDate: Date = (<LocalDateTimeIntrinsicData>(o.intrinsicData[\"ldt\"])).date;\r\n                let newDate: Date = new Date(oldDate.getTime() - days*24*3600*1000);\r\n\r\n                let o1: RuntimeObject = new RuntimeObject(this);\r\n\r\n                let intrinsicData: LocalDateTimeIntrinsicData = {\r\n                    date: newDate\r\n                };\r\n\r\n                o1.intrinsicData[\"ldt\"] = intrinsicData;\r\n\r\n                return o1;\r\n\r\n            }, false, false, 'Gibt ein neues LocalDateTime-Objekt zurück, das einen Zeitpunkt repräsentiert, der um die übergebene Anzahl von Tagen früher liegt.', false));\r\n\r\n        this.addMethod(new Method(\"compareTo\", new Parameterlist([\r\n            { identifier: \"date\", type: this, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let o1: RuntimeObject = parameters[1].value;\r\n\r\n                let oldMs: number = (<LocalDateTimeIntrinsicData>(o.intrinsicData[\"ldt\"])).date.getTime();\r\n                let newMs: number = (<LocalDateTimeIntrinsicData>(o1.intrinsicData[\"ldt\"])).date.getTime();\r\n\r\n                return Math.sign(oldMs - newMs);\r\n\r\n            }, false, false, 'Gibt 1 zurück, falls das Datum größer ist als das übergebene, 0, falls sie gleich sind und -1, falls das Datum kleiner ist als das übergebene.', false));\r\n\r\n        this.addMethod(new Method(\"until\", new Parameterlist([\r\n            { identifier: \"date\", type: this, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let o1: RuntimeObject = parameters[1].value;\r\n\r\n                let oldMs: number = (<LocalDateTimeIntrinsicData>(o.intrinsicData[\"ldt\"])).date.getTime();\r\n                let newMs: number = (<LocalDateTimeIntrinsicData>(o1.intrinsicData[\"ldt\"])).date.getTime();\r\n\r\n                return (oldMs - newMs)/(24*3600);\r\n\r\n            }, false, false, 'Gibt zurück, wie viele Tage (gerundet) zwischen den beiden Zeitpunkten liegen.', false));\r\n\r\n        this.addMethod(new Method(\"getYear\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                return (<LocalDateTimeIntrinsicData>(o.intrinsicData[\"ldt\"])).date.getFullYear();\r\n\r\n            }, false, false, 'Gibt das Jahr zurück.', false));\r\n\r\n        this.addMethod(new Method(\"getMonthValue\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                return (<LocalDateTimeIntrinsicData>(o.intrinsicData[\"ldt\"])).date.getMonth() + 1;\r\n\r\n            }, false, false, 'Gibt den Monat als Zahl zurück (Januar == 1, Februar == 2, ..., Dezember == 12).', false));\r\n\r\n        this.addMethod(new Method(\"getDayOfMonth\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                return (<LocalDateTimeIntrinsicData>(o.intrinsicData[\"ldt\"])).date.getDate();\r\n\r\n            }, false, false, 'Gibt den Tag innerhalb des Monats zurück (Zahl von 1 bis 31).', false));\r\n\r\n        this.addMethod(new Method(\"getHour\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                return (<LocalDateTimeIntrinsicData>(o.intrinsicData[\"ldt\"])).date.getHours();\r\n\r\n            }, false, false, 'Gibt die Stunde innerhalb des Tages zurück.', false));\r\n\r\n        this.addMethod(new Method(\"getMinute\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                return (<LocalDateTimeIntrinsicData>(o.intrinsicData[\"ldt\"])).date.getMinutes();\r\n\r\n            }, false, false, 'Gibt die Minute zurück.', false));\r\n\r\n        this.addMethod(new Method(\"getSecond\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                return (<LocalDateTimeIntrinsicData>(o.intrinsicData[\"ldt\"])).date.getSeconds();\r\n\r\n            }, false, false, 'Gibt die Sekunde zurück.', false));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let date = (<LocalDateTimeIntrinsicData>(o.intrinsicData[\"ldt\"])).date;\r\n\r\n                let td = (value: number) => {\r\n                    if(value < 10) return \"0\" + value;\r\n                    return \"\" + value;\r\n                }\r\n\r\n                return `${td(date.getDate())}.${td(date.getMonth() + 1)}.${td(date.getFullYear())} ${td(date.getHours())}:${td(date.getMinutes())}:${td(date.getSeconds())}`;\r\n\r\n            }, false, false, 'Gibt den Wert in der Form 12.03.2007 10:15:30 zurück.', false));\r\n\r\n        this.addMethod(new Method(\"getDayOfWeek\", new Parameterlist([\r\n        ]), dayOfWeekType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let dow = (<LocalDateTimeIntrinsicData>(o.intrinsicData[\"ldt\"])).date.getDay();\r\n                return dayOfWeekType.enumInfoList[dow - 1].object;\r\n\r\n            }, false, false, 'Gibt die den Wochentag zurück. Falls Du ihn als Zahl (0 == Montag, ...) benötigst, nutze getDayOfWeek().toOrdinal(). ', false));\r\n\r\n        this.addMethod(new Method(\"getMonth\", new Parameterlist([\r\n        ]), MonthType,\r\n            (parameters) => {\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let monthIndex = (<LocalDateTimeIntrinsicData>(o.intrinsicData[\"ldt\"])).date.getMonth();\r\n                return MonthType.enumInfoList[monthIndex].object;\r\n\r\n            }, false, false, 'Gibt die den Monat zurück. Falls Du ihn als Zahl (1 == Januar, ...) benötigst, nutze getMonthValue()', false));\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport class DayOfWeekEnum extends Enum {\r\n\r\n    constructor(module: Module) {\r\n        super(\"DayOfWeek\", module, [\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"Montag\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"Dienstag\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"Mittwoch\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"Donnerstag\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"Freitag\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"Samstag\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"Sonntag\"\r\n            },\r\n        ]);\r\n\r\n        this.documentation = \"Wochentag\"\r\n    }\r\n}\r\n\r\nexport class MonthEnum extends Enum {\r\n\r\n    constructor(module: Module) {\r\n        super(\"Month\", module, [\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"Januar\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"Februar\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"März\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"April\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"Mai\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"Juni\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"Juli\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"August\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"Septemter\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"Oktober\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"November\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"Dezember\"\r\n            },\r\n        ]);\r\n\r\n        this.documentation = \"Monat\"\r\n    }\r\n}","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { doublePrimitiveType, intPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { PolygonHelper } from \"./Polygon.js\";\r\n\r\nexport class LineClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Line\", module, \"Strecke (gerade Linie zwischen zwei Punkten)\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"FilledShape\"));\r\n\r\n        this.addMethod(new Method(\"Line\", new Parameterlist([\r\n            { identifier: \"x1\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y1\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"x2\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y2\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x1: number = parameters[1].value;\r\n                let y1: number = parameters[2].value;\r\n                let x2: number = parameters[3].value;\r\n                let y2: number = parameters[4].value;\r\n\r\n                let pointsNumber: number[] = [x1, y1, x2, y2];\r\n\r\n                let ph = new PolygonHelper(pointsNumber, false, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = ph;\r\n\r\n            }, false, false, 'Instanziert eine Strecke mit Anfangspunkt (x1/y1) und Endpunkt (x2/y2).', true));\r\n\r\n            this.addMethod(new Method(\"copy\", new Parameterlist([\r\n            ]), this,\r\n                (parameters) => {\r\n    \r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let sh: PolygonHelper = o.intrinsicData[\"Actor\"];\r\n    \r\n                    if (sh.testdestroyed(\"copy\")) return;\r\n    \r\n                    return sh.getCopy(<Klass>o.class);\r\n    \r\n                }, false, false, 'Erstellt eine Kopie der Strecke und git sie zurück.', false));\r\n\r\n                this.addMethod(new Method(\"setPoint\", new Parameterlist([\r\n                    { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n                    { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n                    { identifier: \"index\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n                ]), null,\r\n                    (parameters) => {\r\n        \r\n                        let o: RuntimeObject = parameters[0].value;\r\n                        let x: number = parameters[1].value;\r\n                        let y: number = parameters[2].value;\r\n                        let index: number = parameters[3].value;\r\n                        let sh: PolygonHelper = o.intrinsicData[\"Actor\"];\r\n        \r\n                        if (sh.testdestroyed(\"setPoint\")) return;\r\n        \r\n                        sh.setPoint(x, y, index - 1);\r\n        \r\n                    }, false, false, 'Ändert einen Punkt des Polygons. index == 1 bedeutet: Anfangspunkt; index == 2 bedeutet: Endpunkt', false));\r\n        \r\n                this.addMethod(new Method(\"setPoints\", new Parameterlist([\r\n                    { identifier: \"x1\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n                    { identifier: \"y1\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n                    { identifier: \"x2\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n                    { identifier: \"y2\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n                ]), null,\r\n                    (parameters) => {\r\n        \r\n                        let o: RuntimeObject = parameters[0].value;\r\n                        let x1: number = parameters[1].value;\r\n                        let y1: number = parameters[2].value;\r\n                        let x2: number = parameters[3].value;\r\n                        let y2: number = parameters[4].value;\r\n                                let sh: PolygonHelper = o.intrinsicData[\"Actor\"];\r\n        \r\n                        if (sh.testdestroyed(\"setPoints\")) return;\r\n        \r\n                        sh.setPoints([x1, y1, x2, y2]);\r\n        \r\n                    }, false, false, 'Ändert die Punkte der Strecke. (x1/y1) ist der neue Anfangspunkt, (x2/y2) ist der neue Endpunkt.', false));\r\n        \r\n     \r\n    }\r\n\r\n}\r\n\r\n","import { Module } from \"../compiler/parser/Module.js\";\r\nimport { Klass, Visibility } from \"../compiler/types/Class.js\";\r\nimport { doublePrimitiveType, stringPrimitiveType } from \"../compiler/types/PrimitiveTypes.js\";\r\nimport { Attribute, Method, Parameterlist, Value } from \"../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../interpreter/RuntimeObject.js\";\r\n\r\nexport class Vector2Class extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Vector2\", module, \"Repräsentiert einen zweidimensionalen Vektor\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        this.addAttribute(new Attribute(\"x\", doublePrimitiveType,\r\n            null, false, Visibility.public, false, \"x-Komponente des Vektors\"));\r\n\r\n        this.addAttribute(new Attribute(\"y\", doublePrimitiveType,\r\n            null, false, Visibility.public, false, \"y-Komponente des Vektors\"));\r\n\r\n        this.setupAttributeIndicesRecursive();\r\n\r\n        let xIndex = this.attributeMap.get(\"x\").index;\r\n        let yIndex = this.attributeMap.get(\"y\").index;\r\n        \r\n\r\n        this.addMethod(new Method(\"Vector2\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n\r\n                o.attributes[xIndex] = { type: doublePrimitiveType, value: x };\r\n                o.attributes[yIndex] = { type: doublePrimitiveType, value: y };\r\n\r\n            }, false, false, 'Instanziert einen neuen zweidimensionalen Vektor mit den Komponenten x und y.', true));\r\n\r\n        this.addMethod(new Method(\"fromPolarCoordinates\", new Parameterlist([\r\n            { identifier: \"r\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n            { identifier: \"alphaDeg\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = new RuntimeObject(this);\r\n                let r: number = parameters[1].value;\r\n                let alphaDeg: number = parameters[2].value;\r\n\r\n                alphaDeg *= Math.PI / 180.0;\r\n\r\n                o.attributes[xIndex] = { type: doublePrimitiveType, value: Math.cos(alphaDeg) * r };\r\n                o.attributes[yIndex] = { type: doublePrimitiveType, value: Math.sin(alphaDeg) * r };\r\n\r\n                return o;\r\n\r\n            }, false, true, 'Gibt einen neuen zweidimensionalen Vektor zurück, der mit den Polarkoordinaten (r/alphaDeg) gebildet wird. Datei ist r (Abstand zum Ursprung des Koordinatensystems) und alphaDeg (Winkel zur positiven x-Achse in Grad).', false));\r\n\r\n        this.addMethod(new Method(\"toString\", new Parameterlist([\r\n        ]), stringPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let x: number = o.attributes[xIndex].value;\r\n                let y: number = o.attributes[yIndex].value;\r\n\r\n                return `(${x}/${y})`;\r\n\r\n            }, false, false, 'Gibt den Vektor als Zeichenkette in der Form \"(x/y)\" zurück.', false));\r\n\r\n        this.addMethod(new Method(\"getAngleDeg\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let x: number = o.attributes[xIndex].value;\r\n                let y: number = o.attributes[yIndex].value;\r\n\r\n                let angle = Math.atan2(y, x) / Math.PI * 180;\r\n\r\n                return angle >= 0 ? angle : 360 + angle;\r\n\r\n            }, false, false, 'Gibt den zur positiven x-Achse in Grad zurück.', false));\r\n\r\n        this.addMethod(new Method(\"getAngleRad\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let x: number = o.attributes[xIndex].value;\r\n                let y: number = o.attributes[yIndex].value;\r\n\r\n                let angle = Math.atan2(y, x);\r\n\r\n                return angle >= 0 ? angle : Math.PI * 2 + angle;\r\n\r\n            }, false, false, 'Gibt den zur positiven x-Achse im Bogenmaß zurück.', false));\r\n\r\n        this.addMethod(new Method(\"getLength\", new Parameterlist([\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let x: number = o.attributes[xIndex].value;\r\n                let y: number = o.attributes[yIndex].value;\r\n\r\n                return Math.sqrt(x * x + y * y);\r\n\r\n            }, false, false, 'Gibt die Länge des Vectors zurück.', false));\r\n\r\n        this.addMethod(new Method(\"toUnitVector\", new Parameterlist([\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let x: number = o.attributes[xIndex].value;\r\n                let y: number = o.attributes[yIndex].value;\r\n\r\n                let o1: RuntimeObject = new RuntimeObject(this);\r\n                let length: number = Math.sqrt(x * x + y * y);\r\n\r\n                if (Math.abs(length) > 0.00000000001) {\r\n                    x /= length;\r\n                    y /= length;\r\n                } else {\r\n                    x = 0;\r\n                    y = 0;\r\n                }\r\n\r\n                o1.attributes[xIndex] = { type: doublePrimitiveType, value: x };\r\n                o1.attributes[yIndex] = { type: doublePrimitiveType, value: y };\r\n\r\n                return o1;\r\n\r\n            }, false, false, 'Gibt den zum Vektor zugehörigen Einheitsvektor (d.h. den Vektor mit derselben Richtung, aber der Länge 1) zurück.', false));\r\n\r\n        this.addMethod(new Method(\"setLength\", new Parameterlist([\r\n            { identifier: \"length\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let x: number = o.attributes[xIndex].value;\r\n                let y: number = o.attributes[yIndex].value;\r\n\r\n                let length: number = parameters[1].value;\r\n\r\n                let l = Math.sqrt(x * x + y * y);\r\n                if (l > 0) {\r\n\r\n                    o.attributes[xIndex].value = x / l * length;\r\n                    o.attributes[yIndex].value = y / l * length;\r\n\r\n                }\r\n\r\n            }, false, false, 'Ändert den Vektor so, dass er seine Richtung beibehält, aber auf die angegebene Länge gestreckt/gestaucht wird.', false));\r\n\r\n        this.addMethod(new Method(\"plus\", new Parameterlist([\r\n            { identifier: \"vector\", type: this, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let o1: RuntimeObject = parameters[1].value;\r\n\r\n                let x: number = o.attributes[xIndex].value;\r\n                let y: number = o.attributes[yIndex].value;\r\n\r\n                let x1: number = o1.attributes[xIndex].value;\r\n                let y1: number = o1.attributes[yIndex].value;\r\n\r\n                let oRet: RuntimeObject = new RuntimeObject(this);\r\n\r\n                oRet.attributes[xIndex] = { type: doublePrimitiveType, value: x + x1 };\r\n                oRet.attributes[yIndex] = { type: doublePrimitiveType, value: y + y1 };\r\n\r\n                return oRet;\r\n\r\n            }, false, false, 'Gibt die Summe zurück, die sich aus Addition dieses Vektor mit dem übergebenen Vektor ergibt. WICHTIG: Diese Methode ändert das Objekt nicht, für das sie aufgerufen wurde!', false));\r\n\r\n        this.addMethod(new Method(\"minus\", new Parameterlist([\r\n            { identifier: \"vector\", type: this, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let o1: RuntimeObject = parameters[1].value;\r\n\r\n                let x: number = o.attributes[xIndex].value;\r\n                let y: number = o.attributes[yIndex].value;\r\n\r\n                let x1: number = o1.attributes[xIndex].value;\r\n                let y1: number = o1.attributes[yIndex].value;\r\n\r\n                let oRet: RuntimeObject = new RuntimeObject(this);\r\n\r\n                oRet.attributes[xIndex] = { type: doublePrimitiveType, value: x - x1 };\r\n                oRet.attributes[yIndex] = { type: doublePrimitiveType, value: y - y1 };\r\n\r\n                return oRet;\r\n\r\n            }, false, false, 'Gibt die Differenz zurück, die sich aus Subtraktion des übergebenen Vektors von diesem Vektor ergibt. WICHTIG: Diese Methode ändert das Objekt nicht, für das sie aufgerufen wurde!', false));\r\n\r\n        this.addMethod(new Method(\"scalarProduct\", new Parameterlist([\r\n            { identifier: \"vector1\", type: this, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n            { identifier: \"vector2\", type: this, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[1].value;\r\n                let o1: RuntimeObject = parameters[2].value;\r\n\r\n                let x: number = o.attributes[xIndex].value;\r\n                let y: number = o.attributes[yIndex].value;\r\n\r\n                let x1: number = o1.attributes[xIndex].value;\r\n                let y1: number = o1.attributes[yIndex].value;\r\n\r\n                return x * x1 + y * y1;\r\n\r\n            }, false, true, 'Gibt das Skalarprodukt der beiden Vektoren zurück.', false));\r\n\r\n\r\n        this.addMethod(new Method(\"scaledBy\", new Parameterlist([\r\n            { identifier: \"scalar\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let x: number = o.attributes[xIndex].value;\r\n                let y: number = o.attributes[yIndex].value;\r\n\r\n                let s: number = parameters[1].value;\r\n\r\n                let oRet: RuntimeObject = new RuntimeObject(this);\r\n                oRet.attributes[xIndex] = { type: doublePrimitiveType, value: x * s };\r\n                oRet.attributes[yIndex] = { type: doublePrimitiveType, value: y * s };\r\n\r\n                return oRet;\r\n\r\n            }, false, false, 'Gibt das Produkt zurück, das sich aus Multiplikation dieses Vektor mit dem übergebenen Skalar ergibt. WICHTIG: Diese Methode ändert das Objekt nicht, für das sie aufgerufen wurde!', false));\r\n\r\n        this.addMethod(new Method(\"rotatedBy\", new Parameterlist([\r\n            { identifier: \"angleDeg\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let x: number = o.attributes[xIndex].value;\r\n                let y: number = o.attributes[yIndex].value;\r\n\r\n                let angle: number = -parameters[1].value * Math.PI / 180;\r\n                let sin: number = Math.sin(angle);\r\n                let cos: number = Math.cos(angle);\r\n\r\n                let oRet: RuntimeObject = new RuntimeObject(this);\r\n                oRet.attributes[xIndex] = { type: doublePrimitiveType, value: x * cos - y * sin };\r\n                oRet.attributes[yIndex] = { type: doublePrimitiveType, value: x * sin + y * cos };\r\n\r\n                return oRet;\r\n\r\n            }, false, false, 'Gibt den um den übergebenen Winkel (in Grad) rotierten Vektor zurück. Positiver Winkel => Rotation GEGEN DEN Uhrzeigersinn. WICHTIG: Diese Methode ändert das Objekt nicht, für das sie aufgerufen wurde!', false));\r\n\r\n\r\n        this.addMethod(new Method(\"distance\", new Parameterlist([\r\n            { identifier: \"x1\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y1\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"x2\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y2\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n                let x1: number = <number>parameters[1].value;\r\n                let y1: number = <number>parameters[2].value;\r\n                let x2: number = <number>parameters[3].value;\r\n                let y2: number = <number>parameters[4].value;\r\n                let dx = x2 - x1;\r\n                let dy = y2 - y1;\r\n                return Math.sqrt(dx * dx + dy * dy);\r\n            }, false, true, \"Berechnet den Abstand der Punkte (x1/y1) und (x2/y2).\"));\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Interface, Klass } from \"../../compiler/types/Class.js\";\r\nimport { doublePrimitiveType, intPrimitiveType, voidPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\n\r\nexport class MouseListenerInterface extends Interface {\r\n\r\n    constructor(module: Module) {\r\n        super(\"MouseListener\", module, \"Interface mit Methoden, die aufgerufen werden, wenn Maus-Ereignisse eintreten. Ein Objekt dieser Klasse muss zuvor aber mit world.addMouseListener() registriert werden, wobei world das aktuelle World-Objekt ist.\");\r\n\r\n        this.addMethod(new Method(\"onMouseUp\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"button\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            null,  // no implementation!\r\n            false, false, \"Wird aufgerufen, wenn eine Maustaste über dem Grafikbereich losgelassen wird.\"));\r\n\r\n        this.addMethod(new Method(\"onMouseDown\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"button\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            null,  // no implementation!\r\n            false, false, \"Wird aufgerufen, wenn eine Maustaste über dem Grafikbereich gedrückt wird.\"));\r\n\r\n        this.addMethod(new Method(\"onMouseMove\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            null,  // no implementation!\r\n            false, false, \"Wird aufgerufen, wenn der Mauszeiger über dem Grafikbereich bewegt wird.\"));\r\n\r\n        this.addMethod(new Method(\"onMouseEnter\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            null,  // no implementation!\r\n            false, false, \"Wird aufgerufen, wenn der Mauszeiger in den Grafikbereich hineinbewegt wird.\"));\r\n\r\n        this.addMethod(new Method(\"onMouseLeave\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            null,  // no implementation!\r\n            false, false, \"Wird aufgerufen, wenn der Mauszeiger aus dem Grafikbereich herausbewegt wird.\"));\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport class MouseAdapterClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"MouseAdapter\", module, \"Klasse mit leeren Methoden, die aufgerufen werden, wenn Maus-Ereignisse eintreten. Ein Objekt einer Kindklasse dieser Klasse muss zuvor aber mit world.addMouseListener() registriert werden, wobei world das aktuelle World-Objekt ist.\");\r\n\r\n        let mouseListenerType = <MouseListenerInterface>module.typeStore.getType(\"MouseListener\");\r\n\r\n        this.implements.push(mouseListenerType);\r\n\r\n        this.addMethod(new Method(\"onMouseUp\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"button\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            () => {}, // no implementation!\r\n            false, false, \"Wird aufgerufen, wenn eine Maustaste über dem Grafikbereich losgelassen wird.\"));\r\n\r\n        this.addMethod(new Method(\"onMouseDown\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"button\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            () => {}, // no implementation!\r\n            false, false, \"Wird aufgerufen, wenn eine Maustaste über dem Grafikbereich gedrückt wird.\"));\r\n\r\n        this.addMethod(new Method(\"onMouseMove\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            () => {}, // no implementation!\r\n            false, false, \"Wird aufgerufen, wenn der Mauszeiger über dem Grafikbereich bewegt wird.\"));\r\n\r\n        this.addMethod(new Method(\"onMouseEnter\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            () => {}, // no implementation!\r\n            false, false, \"Wird aufgerufen, wenn der Mauszeiger in den Grafikbereich hineinbewegt wird.\"));\r\n\r\n        this.addMethod(new Method(\"onMouseLeave\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            () => {}, // no implementation!\r\n            false, false, \"Wird aufgerufen, wenn der Mauszeiger aus dem Grafikbereich herausbewegt wird.\"));\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass, Visibility } from \"../../compiler/types/Class.js\";\r\nimport { intPrimitiveType, objectType, stringPrimitiveType, voidPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Attribute, Method, Parameterlist, Value } from \"../../compiler/types/Types.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { WebSocketRequestConnect, WebSocketRequestDisconnect, WebSocketRequestSendToAll, WebSocketRequestSendToClient, WebSocketResponseOtherClientDisconnected, WebSocketResponseMessage, WebSocketResponseNewClient, WebSocketResponse } from \"../../communication/Data.js\";\r\nimport { WebSocketHelper } from \"./WebSocket.js\";\r\n\r\nexport class WebSocketClientClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"WebSocketClient\", module, \"Ein Objekt der Klasse WebSocketClient repräsentiert einen anderen Rechner, mit dem dieser Rechner über den WebSocket in Kontakt steht.\");\r\n\r\n        let objectType = <Klass>module.typeStore.getType(\"Object\");\r\n        this.setBaseClass(objectType);\r\n\r\n        this.addMethod(new Method(\"send\", new Parameterlist([\r\n            { identifier: \"message\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"messageType\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WebSocketClientHelper = o.intrinsicData[\"Helper\"];\r\n                let message: string = parameters[1].value;\r\n                let messageType: string = parameters[2].value;\r\n\r\n                wh.send(message, messageType);\r\n\r\n            }, false, false, 'Sendet Daten (message) an diesen Client. Den messageType kannst Du frei wählen. Die client bekommt ihn zusammen mit den Daten übermittelt. Tipp: Du kannst auch Objekte senden, musst sie dazu aber vorher serialisieren, d.h. mithilfe der Methode toJson in eine Zeichenkette verwandeln.', false));\r\n\r\n        this.addMethod(new Method(\"setUserData\", new Parameterlist([\r\n            { identifier: \"schlüssel\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"wert\", type: objectType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WebSocketClientHelper = o.intrinsicData[\"Helper\"];\r\n                let key: string = parameters[1].value;\r\n                let value: RuntimeObject = parameters[2].value;\r\n\r\n                wh.setUserData(key, value);\r\n\r\n            }, false, false, 'Mit dieser Methode kannst Du beliebige Objektreferenzen in diesem WebSocketClient-Objekt speichern. Den Schlüssel kannst Du dabei frei wählen und später nutzen, um den Wert durch die Methode getUserData wieder zu holen.', false));\r\n\r\n        this.addMethod(new Method(\"getUserData\", new Parameterlist([\r\n            { identifier: \"schlüssel\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), objectType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WebSocketClientHelper = o.intrinsicData[\"Helper\"];\r\n                let key: string = parameters[1].value;\r\n\r\n                return wh.getUserData(key);\r\n\r\n            }, false, false, 'Mit dieser Methode kannst Du eine Objektreferenz erhalten, die Du zuvor mit der Methode setUserData gespeichert hast. Bemerkung1: Diese Methode entfernt die Objekreferenz nicht aus dem WebSocketClient-Objekt. Bemerkung2: Damit Du alle Methoden des erhaltenen Objekts aufrufen kannst, musst Du dem Computer mitteilen, von welcher Klasse es ist (\"casten\"). Das geht für die Klasse MeineNutzerDaten bspw. so: MeineNutzerDaten mnd = (MeineNutzerDaten)client.getUserData(\"schlüssel\");', false));\r\n\r\n        let getterList: { att: string, getter: string, help: string }[] = [{ att: \"rufname\", getter: \"getFirstName\", help: \"Rufnamen\" },\r\n        { att: \"familienname\", getter: \"getLastName\", help: \"Familiennamen\" },\r\n        { att: \"username\", getter: \"getUsername\", help: \"Benutzernamen\" }, { att: \"nickname\", getter: \"getNickname\", help: \"Spielernamen\" }];\r\n\r\n        for (let getter of getterList) {\r\n            this.addMethod(new Method(getter.getter, new Parameterlist([\r\n            ]), stringPrimitiveType,\r\n                (parameters) => {\r\n\r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let wh: WebSocketClientHelper = o.intrinsicData[\"Helper\"];\r\n\r\n                    return wh[getter.att];\r\n\r\n                }, false, false, 'Gibt den ' + getter.help + \" des Clients zurück.\", false));\r\n\r\n        }\r\n\r\n        this.addMethod(new Method(\"getNumber\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WebSocketClientHelper = o.intrinsicData[\"Helper\"];\r\n\r\n                return wh.index;\r\n\r\n            }, false, false, 'Gehört ein Client zu einer mit findClient bzw. findClients gefundenen Gruppe, so erhältst Du mit dieser Methode die \"Rangfolge\" dieses Clients in dieser Gruppe. Allen Clients wird dieselbe Rangfolgeordnung vom Server mitgeteilt. So lässt sich bspw. einfach festlegen, welcher Client eine besondere Rolle (Server) in der Gruppe erhalten soll (z.B. Client mit Nummer 1). Bemerkung: Die Nummer ist eine Zahl zwischen 1 und der Anzahl der Clients in der Gruppe.', false));\r\n\r\n        this.addMethod(new Method(\"getIndex\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WebSocketClientHelper = o.intrinsicData[\"Helper\"];\r\n\r\n                return wh.index;\r\n\r\n            }, false, false, 'Diese Methode ist veraltet. Bitte benutze stattdessen getNumber.', false));\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class WebSocketClientHelper {\r\n\r\n    keyValueStore: { [key: string]: RuntimeObject } = {};\r\n    index: number = 0;\r\n\r\n    public connected: boolean = true;\r\n\r\n    constructor(public runtimeObject: RuntimeObject, private webSocketHelper: WebSocketHelper,\r\n        private id: number, public rufname: string, public familienname: string, public username: string, public nickname: string) {\r\n\r\n    }\r\n\r\n    send(message: string, messageType: string) {\r\n        this.webSocketHelper.sendToClient(this.id, message, messageType);\r\n    }\r\n\r\n    getUserData(key: string): any {\r\n        return this.keyValueStore[key];\r\n    }\r\n\r\n    setUserData(key: string, value: RuntimeObject) {\r\n        this.keyValueStore[key] = value;\r\n    }\r\n\r\n\r\n}","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { intPrimitiveType, stringPrimitiveType, voidPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Value } from \"../../compiler/types/Types.js\";\r\nimport { Interpreter, InterpreterState } from \"../../interpreter/Interpreter.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { WebSocketRequestConnect, WebSocketRequestDisconnect, WebSocketRequestSendToAll, WebSocketRequestSendToClient, WebSocketResponseOtherClientDisconnected, WebSocketResponseMessage, WebSocketResponseNewClient, WebSocketResponse, GetWebSocketTokenResponse, WebSocketResponsePairingFound, WebSocketRequestFindPairing } from \"../../communication/Data.js\";\r\nimport { WebSocketClientHelper } from \"./WebSocketClient.js\";\r\nimport { ajax } from \"../../communication/AjaxHelper.js\";\r\nimport { SystemClass } from \"../System.js\";\r\nimport { ArrayType } from \"../../compiler/types/Array.js\";\r\n\r\nexport class WebSocketClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"WebSocket\", module, \"Ein Objekt der Klasse WebSocket kann Daten über das Internet senden und empfangen. Um die Klasse benutzen zu können, musst Du eine eigene Klasse schreiben, die die Klasse WebSocket erweitert und die Methoden onConnect, onMessage, onOtherClientConnected und onOtherClientDisconnected überschreibt.\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n        let webSocketClientType = <Klass>module.typeStore.getType(\"WebSocketClient\");\r\n        let systemClassType = <SystemClass>module.typeStore.getType(\"System\");\r\n\r\n        this.addMethod(new Method(\"WebSocket\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let interpreter = this.module?.main?.getInterpreter();\r\n\r\n                let wh = new WebSocketHelper(o, interpreter, webSocketClientType, systemClassType);\r\n\r\n                o.intrinsicData[\"Helper\"] = wh;\r\n\r\n            }, false, false, 'Instanziert ein neues WebSocket-Objekt.', true));\r\n\r\n        this.addMethod(new Method(\"open\", new Parameterlist([\r\n            { identifier: \"sessionCode\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"nickName\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sessionCode: string = parameters[1].value;\r\n                let nickName: string = parameters[2].value;\r\n\r\n                let wh: WebSocketHelper = o.intrinsicData[\"Helper\"];\r\n                wh.connect(sessionCode, nickName);\r\n\r\n                o.intrinsicData[\"Helper\"] = wh;\r\n\r\n            }, false, false, 'Startet die Verbindung mit dem Server. Den SessionCode kannst Du frei wählen. Mit allen anderen Clients, die eine Verbindung mit demselben SessionCode aufbauen, kannst Du anschließend Daten austauschen. Auch der Nickname ist frei wählbar. Er ist für alle anderen Clients sichtbar.',\r\n            false));\r\n\r\n        this.addMethod(new Method(\"sendToAll\", new Parameterlist([\r\n            { identifier: \"message\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"messageType\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WebSocketHelper = o.intrinsicData[\"Helper\"];\r\n                let message: string = parameters[1].value;\r\n                let messageType: string = parameters[2].value;\r\n\r\n                wh.sendToAll(message, messageType);\r\n\r\n            }, false, false, 'Sendet Daten (message) an alle anderen Clients. Den messageType kannst Du frei wählen. Die empfangenden Clients bekommen ihn zusammen mit den Daten übermittelt. Tipp: Du kannst auch Objekte senden, musst sie dazu aber vorher serialisieren, d.h. mithilfe der Methode toJson in eine Zeichenkette verwandeln.', false));\r\n\r\n        this.addMethod(new Method(\"findClients\", new Parameterlist([\r\n            { identifier: \"count\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WebSocketHelper = o.intrinsicData[\"Helper\"];\r\n                let count: number = parameters[1].value;\r\n\r\n                wh.findClientsFromCount(count);\r\n\r\n            }, false, false, 'Sucht die übergebene Anzahl von \"kontaktbereiten\" Clients, d.h. solchen Clients, die exakt dieselbe Suchanfrage abgegeben haben. Findet der Server die Clients, so ruft er bei allen beteiligten Clients onClientsFound auf.', false));\r\n\r\n        this.addMethod(new Method(\"findClients\", new Parameterlist([\r\n            { identifier: \"nicknames\", type: new ArrayType(stringPrimitiveType), declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WebSocketHelper = o.intrinsicData[\"Helper\"];\r\n                let nickNamesValues: Value[] = parameters[1].value;\r\n\r\n                let nicknames: string[] = nickNamesValues.map((nnv) => nnv.value);\r\n\r\n                wh.findClientsFromNicknames(nicknames);\r\n\r\n            }, false, false, 'Sucht die Clients mit den angegebenen Nicknames. Haben sie eine entsprechende Suchanfrage (d.h. dieselben Nicknames) abgegeben, so so ruft der Server bei allen beteiligten Clients onClientsFound auf.', false));\r\n\r\n        this.addMethod(new Method(\"findClient\", new Parameterlist([\r\n            { identifier: \"nickname\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WebSocketHelper = o.intrinsicData[\"Helper\"];\r\n                let nickName: string = parameters[1].value;\r\n\r\n                wh.findClientsFromNicknames([nickName]);\r\n\r\n            }, false, false, 'Sucht den Client mit dem angegebenen Nickname. Hat er eine entsprechende Suchanfrage (d.h. mit dem Nickname DIESES clients) abgegeben, so so ruft der Server bei beiden Clients onClientsFound auf.', false));\r\n\r\n        this.addMethod(new Method(\"close\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WebSocketHelper = o.intrinsicData[\"Helper\"];\r\n\r\n                wh.disconnect();\r\n\r\n            }, false, false, 'Beendet die Verbindung. Bei allen anderen Clients, die sich mit derselben sessionId verbunden haben, wird daraufhin die Methode onOtherClientDisconnected aufgerufen.', false));\r\n\r\n        this.addMethod(new Method(\"onOpen\", new Parameterlist([\r\n        ]), null,\r\n            null, // no statements!\r\n            false, false, \"Wird aufgerufen, sobald die Verbindung mit dem Server zustandegekommen ist.\", false));\r\n\r\n        this.addMethod(new Method(\"onClose\", new Parameterlist([\r\n        ]), null,\r\n            null, // no statements!\r\n            false, false, \"Wird aufgerufen, nachdem die Verbindung geschlossen wurde.\", false));\r\n\r\n        this.addMethod(new Method(\"onMessage\", new Parameterlist([\r\n            { identifier: \"sender\", type: webSocketClientType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"message\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"messageType\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            null, // no statements!\r\n            false, false, \"Wird immer dann aufgerufen, wenn eine Nachricht eines anderen Clients empfangen wurde.\", false));\r\n\r\n        this.addMethod(new Method(\"onOtherClientConnected\", new Parameterlist([\r\n            { identifier: \"otherClient\", type: webSocketClientType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            null, // no statements!\r\n            false, false, \"Wird immer dann aufgerufen, wenn sich ein anderer Client unter Nutzung desselben sessionCodes mit dem Server verbunden hat.\", false));\r\n\r\n        this.addMethod(new Method(\"onOtherClientDisconnected\", new Parameterlist([\r\n            { identifier: \"otherClient\", type: webSocketClientType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            null, // no statements!\r\n            false, false, \"Wird immer dann aufgerufen, wenn ein anderer Client unter Nutzung desselben sessionCodes die Verbindung mit dem Server beendet hat.\", false));\r\n\r\n        this.addMethod(new Method(\"onClientsFound\", new Parameterlist([\r\n            { identifier: \"oherClients\", type: new ArrayType(webSocketClientType), declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"ownNumber\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            null, // no statements!\r\n            false, false, \"Wird aufgerufen, wenn die durch die Methoden findClient bzw. findClients zuvor gesuchten Clients gefunden wurden.\", false));\r\n\r\n        this.addMethod(new Method(\"getOtherClients\", new Parameterlist([]),\r\n            new ArrayType(webSocketClientType),\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let wh: WebSocketHelper = o.intrinsicData[\"Helper\"];\r\n\r\n                let ret = wh.clientList.map(client => {return {type: webSocketClientType, value: client.runtimeObject}});\r\n                \r\n                return ret;\r\n\r\n            }, // no statements!\r\n            false, false, \"Gibt alle bisher bei der selben Session angemeldeten Clients zurück.\", false));\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class WebSocketHelper {\r\n\r\n    onOpenMethod: Method;\r\n    onCloseMethod: Method;\r\n    onMessageMethod: Method;\r\n    onClientConnectedMethod: Method;\r\n    onClientDisconnectedMethod: Method;\r\n    onClientsFoundMethod: Method;\r\n\r\n    clientList: WebSocketClientHelper[] = [];\r\n    idToClientMap: { [id: number]: WebSocketClientHelper } = {};\r\n\r\n    connection: WebSocket;\r\n    client_id: number; // own client-id\r\n    isOpen: boolean = false;\r\n\r\n    constructor(private runtimeObject: RuntimeObject, private interpreter: Interpreter,\r\n        private webSocketClientType: Klass, private systemClassType: SystemClass) {\r\n\r\n        let klass: Klass = <Klass>runtimeObject.class;\r\n\r\n        // [[Entries]]:Array(4)\r\n        // 0:{\"Test3()\" => Method}\r\n        // 1:{\"onConnect()\" => Method}\r\n        // 2:{\"onMessage(WebSocketClient, String, String)\" => Method}\r\n        // 3:{\"toJson()\" => Method}\r\n\r\n        this.onOpenMethod = klass.methods.find(m => m.signature == \"onOpen()\");\r\n        this.onCloseMethod = klass.methods.find(m => m.signature == \"onClose()\");\r\n        this.onMessageMethod = klass.methods.find(m => m.signature == \"onMessage(WebSocketClient, String, String)\");\r\n        this.onClientConnectedMethod = klass.methods.find(m => m.signature == \"onOtherClientConnected(WebSocketClient)\");\r\n        this.onClientDisconnectedMethod = klass.methods.find(m => m.signature == \"onOtherClientDisconnected(WebSocketClient)\");\r\n        this.onClientsFoundMethod = klass.methods.find(m => m.signature == \"onClientsFound(WebSocketClient[], int)\");\r\n\r\n    }\r\n\r\n    connect(sessionCode: string, nickName: string) {\r\n\r\n        if(this.interpreter.main.isEmbedded()){\r\n            this.interpreter.throwException(\"Die Netzwerkfunktionalitäten stehen nur eingeloggten Nutzern in der Entwicklungsumgebung zur Verfügung und können daher leider hier nicht ausprobiert werden.\");\r\n            return;\r\n        }\r\n\r\n\r\n        ajax('getWebSocketToken', {}, (response: GetWebSocketTokenResponse) => {\r\n\r\n            let url: string = (window.location.protocol.startsWith(\"https\") ? \"wss://\" : \"ws://\") + window.location.host + \"/servlet/websocket\";\r\n            this.connection = new WebSocket(url);\r\n\r\n            this.connection.onerror = (error: Event) => { this.onError(error); }\r\n            this.connection.onclose = (event: CloseEvent) => { this.onClose(event); }\r\n            this.connection.onmessage = (event: MessageEvent) => { this.onMessage(event); }\r\n\r\n            this.connection.onopen = (event: Event) => {\r\n                let request: WebSocketRequestConnect = {\r\n                    command: 1,\r\n                    token: response.token,\r\n                    nickname: nickName,\r\n                    sessionCode: sessionCode\r\n                }\r\n\r\n                this.interpreter.webSocketsToCloseAfterProgramHalt.push(this.connection);\r\n                this.isOpen = true;\r\n                this.sendIntern(JSON.stringify(request));\r\n                this.onOpen();\r\n\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    unsentMessages: string[] = [];\r\n    sendIntern(message: string) {\r\n\r\n        if (!this.isOpen) {\r\n            this.unsentMessages.push(message);\r\n        } else {\r\n            try {\r\n                this.connection.send(message);\r\n            } catch (exception) {\r\n                console.log(exception);\r\n            }\r\n        }\r\n    }\r\n\r\n    onClose(event: CloseEvent) {\r\n        this.isOpen = false;\r\n        this.runMethod(this.onCloseMethod, []);\r\n    }\r\n\r\n    sendToClient(clientId: number, data: string, dataType: string) {\r\n        let message: WebSocketRequestSendToClient = {\r\n            command: 3,\r\n            data: data,\r\n            dataType: dataType,\r\n            recipient_id: clientId\r\n        };\r\n        this.sendIntern(JSON.stringify(message));\r\n    }\r\n\r\n    sendToAll(data: string, dataType: string) {\r\n        let message: WebSocketRequestSendToAll = {\r\n            command: 2,\r\n            data: data,\r\n            dataType: dataType\r\n        };\r\n        this.sendIntern(JSON.stringify(message));\r\n    }\r\n\r\n    disconnect() {\r\n        let message: WebSocketRequestDisconnect = {\r\n            command: 4\r\n        };\r\n        this.sendIntern(JSON.stringify(message));\r\n        this.connection.close();\r\n        let wtr = this.interpreter.webSocketsToCloseAfterProgramHalt;\r\n        wtr.splice(wtr.indexOf(this.connection), 1);\r\n    }\r\n\r\n    onMessage(event: MessageEvent) {\r\n\r\n        let response: WebSocketResponse = JSON.parse(event.data);\r\n        if (response.command == undefined) return;\r\n\r\n        switch (response.command) {\r\n            case 1: // new Client\r\n                let clientRuntimeObject = new RuntimeObject(this.webSocketClientType);\r\n                let wch: WebSocketClientHelper = new WebSocketClientHelper(clientRuntimeObject, this, response.user_id,\r\n                    response.rufname, response.familienname, response.username, response.nickname);\r\n                clientRuntimeObject.intrinsicData[\"Helper\"] = wch;\r\n                this.clientList.push(wch);\r\n                this.idToClientMap[response.user_id] = wch;\r\n                this.runMethod(this.onClientConnectedMethod, [{ type: this.webSocketClientType, value: clientRuntimeObject }]);\r\n                break;\r\n            case 2: // message\r\n                let clientHelper = this.idToClientMap[response.from_client_id];\r\n                if (clientHelper == null) return;\r\n                this.runMethod(this.onMessageMethod, [\r\n                    { type: this.webSocketClientType, value: clientHelper.runtimeObject },\r\n                    { type: stringPrimitiveType, value: response.data },\r\n                    { type: stringPrimitiveType, value: response.dataType }\r\n                ]);\r\n                break;\r\n            case 3: // other client disconnected\r\n                let clientHelper1 = this.idToClientMap[response.disconnecting_client_id];\r\n                if (clientHelper1 == null) return;\r\n                this.clientList.splice(this.clientList.indexOf(clientHelper1), 1);\r\n                this.idToClientMap[response.disconnecting_client_id] = undefined;\r\n                this.runMethod(this.onClientDisconnectedMethod, [\r\n                    { type: this.webSocketClientType, value: clientHelper1.runtimeObject }\r\n                ]);\r\n                break;\r\n            case 4: // time synchronization\r\n                this.systemClassType.deltaTimeMillis = response.currentTimeMills - Date.now();\r\n                this.client_id = response.client_id\r\n                break;\r\n            case 5: // keep alive\r\n                break;\r\n            case 6: // Clients found\r\n                this.onClientsFound(response);\r\n                break;\r\n        }\r\n    }\r\n\r\n    onClientsFound(response: WebSocketResponsePairingFound) {\r\n        let own_index: number = 0;\r\n        let otherClients: Value[] = [];\r\n\r\n        for (let client of response.clients) {\r\n            if (client.id == this.client_id) {\r\n                own_index = client.index;\r\n            } else {\r\n                let otherClient = this.idToClientMap[client.id];\r\n                if (otherClient != null) {\r\n                    otherClient.index = client.index;\r\n                    otherClients.push({\r\n                        type: this.webSocketClientType,\r\n                        value: otherClient.runtimeObject\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        let arrayValue: Value = {\r\n            type: new ArrayType(this.webSocketClientType),\r\n            value: otherClients\r\n        }\r\n\r\n        this.runMethod(this.onClientsFoundMethod, [arrayValue, { type: intPrimitiveType, value: own_index }]);\r\n\r\n    }\r\n\r\n    onError(error: Event) {\r\n        this.interpreter.throwException(\"Kommunikationsfehler beim WebSocket\");\r\n    }\r\n\r\n    onOpen() {\r\n        this.isOpen = true;\r\n        if(this.unsentMessages.length > 0){\r\n            this.unsentMessages.forEach(m => this.sendIntern(m));\r\n            this.unsentMessages = [];\r\n        }\r\n        this.runMethod(this.onOpenMethod, []);\r\n    }\r\n\r\n    runMethod(method: Method, stackElements: Value[]) {\r\n        if (method == null) return;\r\n        stackElements.splice(0, 0, {\r\n            type: this.runtimeObject.class,\r\n            value: this.runtimeObject\r\n        });\r\n\r\n        if (this.interpreter.state == InterpreterState.waitingForInput) {\r\n            this.interpreter.executeImmediatelyInNewStackframe(method.program, stackElements);\r\n        } else {\r\n            this.interpreter.runTimer(method, stackElements, () => { }, false);\r\n        }\r\n    }\r\n\r\n    findClientsFromCount(count: number) {\r\n        let message: WebSocketRequestFindPairing = {\r\n            command: 6,\r\n            count: count,\r\n            nicknames: []\r\n        }\r\n\r\n        this.sendIntern(JSON.stringify(message));\r\n    }\r\n\r\n    findClientsFromNicknames(nicknames: string[]) {\r\n        let message: WebSocketRequestFindPairing = {\r\n            command: 6,\r\n            count: nicknames.length,\r\n            nicknames: nicknames\r\n        }\r\n\r\n        this.sendIntern(JSON.stringify(message));\r\n    }\r\n\r\n\r\n}","import { TokenType } from \"../../compiler/lexer/Token.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass, Visibility } from \"../../compiler/types/Class.js\";\r\nimport { charPrimitiveType, floatPrimitiveType, intPrimitiveType, stringPrimitiveType, voidPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Type, Value, Variable, Attribute } from \"../../compiler/types/Types.js\";\r\nimport { Interpreter, InterpreterState } from \"../../interpreter/Interpreter.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\n\r\n// import * as p5 from \"p5\";\r\ntype p5 = any;\r\n\r\nexport class ProcessingClass extends Klass {\r\n\r\n    constructor(public module: Module) {\r\n\r\n        super(\"PApplet\", module, \"Processing-Applet\")\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n        this.documentation = \"Wenn Du Deine Klasse von PApplet ableitest (class Test extends PApplet{...}), kannst Du auf diese Weise ein Processing-Applet erstellen (siehe https://processing.org), indem Du ihre Methoden draw(), mousePressed(), usw. überschreibst und mit Inhalt füllst. Du startest das Applet, indem Du ein Objekt Deiner Klasse instanzierst und davon die main-Methode aufrufst: new Test().main();\"\r\n\r\n        // this.addAttribute(new Attribute(\"mouseX\", intPrimitiveType, (object) => { object.value = Math.round(module.main.getInterpreter().processingHelper.p5o.mouseX) },\r\n        //     false, Visibility.public, true, \"aktuelle x-Koordinate des Mauszeigers\"));\r\n\r\n        // this.addAttribute(new Attribute(\"mouseY\", intPrimitiveType, (object) => { object.value = Math.round(module.main.getInterpreter().processingHelper.p5o.mouseY) },\r\n        //     false, Visibility.public, true, \"aktuelle y-Koordinate des Mauszeigers\"));\r\n\r\n        let intConstants: string[][] = [[\"mouseX\", \"aktuelle x-Koordinate des Mauszeigers\"], [\"mouseY\", \"aktuelle y-Koordinate des Mauszeigers\"],\r\n        [\"pMouseX\", \"x-Koordinate des Mauszeigers im vorhergehenden Frame\"], [\"pMouseY\", \"y-Koordinate des Mauszeigers im vorhergehenden Frame\"],\r\n        [\"LEFT\", \"links\"], [\"CENTER\", \"Mitte\"], [\"RIGHT\", \"rechts\"], [\"TOP\", \"obenbündig\"], [\"BASELINE\", \"bündig auf der Grundlinie\"], [\"BOTTOM\", \"untenbündig\"],\r\n        [\"width\", \"Breite des Zeichenbereichs\"], [\"height\", \"Höhe des Zeichenbereichs\"], [\"keyCode\", \"Zahlencode der zuletzt gedrückten Taste\"],\r\n        [\"mouseButton\", \"zuletzt gedrückte Maustaste, kann die Werte LEFT, RIGHT und CENTER annehmen\"],\r\n        [\"CORNER\", \"Mode zum Zeichnen von Rechtecken\"], [\"CORNERS\", \"Mode zum Zeichnen von Rechtecken\"], [\"RADIUS\", \"Mode zum Zeichnen von Rechtecken\"],\r\n\r\n        [\"POINTS\", \"zeichne nachfolgend Einzelpunkte\"],\r\n        [\"LINES\", \"zeichne nachfolgend einzelne Linien\"],\r\n        [\"TRIANGLES\", \"zeichne nachfolgend einzelne Dreiecke\"],\r\n        [\"TRIANGLE_STRIP\", \"zeichne nachfolgend einen Triangle-Strip\"],\r\n        [\"TRIANGLE_FAN\", \"zeichne nachfolgend einen Triangle-Fan\"],\r\n        [\"QUADS\", \"zeichne nachfolgend Vierecke\"],\r\n        [\"QUAD_STRIP\", \"zeichne nachfolgend einen Quad-Strip\"],\r\n        [\"TESS\", \"zeichne nachfolgend ein TESS - geht nur bei createCanvas(width, height, WEBGL)\"],\r\n        [\"CLOSE\", \"endShape(CLOSE) schließt den Linienzug\"],\r\n\r\n        [\"DEGREES\", \"angleMode(DEGREES) sorgt dafür, dass nachfolgende Winkelangaben in Grad interpretiert werden.\"],\r\n        [\"RADIANS\", \"angleMode(RADIANS) sorgt dafür, dass nachfolgende Winkelangaben im Bogenmaß interpretiert werden.\"],\r\n\r\n        ];\r\n\r\n        intConstants.forEach(constant => {\r\n            this.addAttribute(new Attribute(constant[0], intPrimitiveType, (object) => { object.value = module.main.getInterpreter().processingHelper.p5o[constant[0]] },\r\n                false, Visibility.public, true, constant[1]));\r\n        });\r\n\r\n        let stringConstants: string[][] = [[\"WEBGL\", \"WebGL-Renderer zur 3D-Ausgabe\"], [\"P2D\", \"Renderer zur zweidimensionalen Ausgabe\"],\r\n        [\"RGB\", \"Color-Mode RGB (rot, grün, blau)\"], [\"HSL\", \"Color-Mode HSL\"], [\"HSB\", \"Color-Mode HSB\"]\r\n        ];\r\n\r\n        stringConstants.forEach(constant => {\r\n            this.addAttribute(new Attribute(constant[0], stringPrimitiveType, (object) => { object.value = module.main.getInterpreter().processingHelper.p5o[constant[0]] },\r\n                false, Visibility.public, true, constant[1]));\r\n        });\r\n\r\n        this.addAttribute(new Attribute(\"key\", charPrimitiveType, (object) => { object.value = module.main.getInterpreter().processingHelper.p5o.key },\r\n            false, Visibility.public, true, \"letzte gedrückte Taste\"));\r\n\r\n\r\n        this.addMethod(new Method(\"PApplet\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ph: ProcessingHelper = this.getProcessingHelper(o);\r\n                o.intrinsicData[\"Processing\"] = ph;\r\n\r\n            }, false, false, \"Legt eine neues Processing-Applet an\", true));\r\n\r\n        this.addMethod(new Method(\"main\", new Parameterlist([\r\n            { identifier: \"name\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ph: ProcessingHelper = o.intrinsicData[\"Processing\"];\r\n\r\n                // ph.main legt das aktuelle Programm (a) des Interpreters auf den programStack\r\n                // und setzt als currentProgram ein neues (b). Nach Ende dieser Methode erhöht\r\n                // der Interpreter currentProgramPosition im Glauben, (a) sei aktiv. Daher ist\r\n                // die gespeicherte ProgramPosition von (a) um eins zu niedrig (und wird daher gleich noch\r\n                // vor ph.main(); erhöht) und die bei (b) wird irrtümlich nach Rückkehr von dieser Methode \r\n                // um eins erhöht. Sie wird daher nach Ausführung von ph.main() um eins erniedrigt, damit\r\n                // der Effekt kompensiert wird. \r\n                let interpreter = module.main.getInterpreter();\r\n                interpreter.currentProgramPosition++;\r\n                ph.main();\r\n                interpreter.currentProgramPosition--;\r\n\r\n            }, false, false, 'Startet das Processing-Applet.', false));\r\n\r\n        this.addMethod(new Method(\"main\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ph: ProcessingHelper = o.intrinsicData[\"Processing\"];\r\n\r\n                let interpreter = module.main.getInterpreter();\r\n                interpreter.currentProgramPosition++;\r\n                ph.main();\r\n                interpreter.currentProgramPosition--;\r\n\r\n            }, false, false, 'Startet das Processing-Applet.', false));\r\n\r\n        this.addMethod(new Method(\"loop\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ph: ProcessingHelper = o.intrinsicData[\"Processing\"];\r\n\r\n                ph.loop();\r\n\r\n            }, false, false, 'Startet nach noLoop() die Renderer-Loop wieder neu, so dass draw() wieder periodisch aufgerufen wird.', false));\r\n\r\n        this.addMethod(new Method(\"noLoop\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ph: ProcessingHelper = o.intrinsicData[\"Processing\"];\r\n\r\n                ph.noLoop();\r\n\r\n            }, false, false, 'Stoppt die Render-Loop, so dass draw() nicht mehr aufgerufen wird. Kann mit loop() wieder gestartet werden.', false));\r\n\r\n        this.addMethod(new Method(\"size\", new Parameterlist([\r\n            { identifier: \"width\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"height\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ph: ProcessingHelper = o.intrinsicData[\"Processing\"];\r\n                let width: number = parameters[1].value;\r\n                let height: number = parameters[2].value;\r\n\r\n                ph.createCanvas(width, height)\r\n\r\n            }, false, false, 'Definiert die Abmessungen des Processing-Ausgabebereichs in Pixeln.', false));\r\n\r\n        this.addMethod(new Method(\"createCanvas\", new Parameterlist([\r\n            { identifier: \"width\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"height\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ph: ProcessingHelper = o.intrinsicData[\"Processing\"];\r\n                let width: number = parameters[1].value;\r\n                let height: number = parameters[2].value;\r\n\r\n                ph.createCanvas(width, height)\r\n\r\n            }, false, false, 'Definiert die Abmessungen des Processing-Ausgabebereichs in Pixeln.', false));\r\n\r\n        this.addMethod(new Method(\"createCanvas\", new Parameterlist([\r\n            { identifier: \"width\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"height\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"renderer\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ph: ProcessingHelper = o.intrinsicData[\"Processing\"];\r\n                let width: number = parameters[1].value;\r\n                let height: number = parameters[2].value;\r\n                let renderer: string = parameters[3].value;\r\n\r\n                ph.renderer = renderer;\r\n                ph.createCanvas(width, height);\r\n\r\n            }, false, false, 'Definiert die Abmessungen des Processing-Ausgabebereichs in Pixeln.', false));\r\n\r\n        this.addMethod(new Method(\"draw\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            null, false, false, 'Die draw-Methode wird 60-mal pro Sekunde aufgerufen (\"Render-Loop\"). Die Render-Loop kann mit der Methode noLoop() gestoppt und mit loop() wieder gestartet werden. redraw() ruft (im gestoppten Zustand) draw genau ein Mal auf.', false));\r\n\r\n        this.addMethod(new Method(\"settings\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            null, false, false, 'Die settings-Methode wird aufgerufen, nachdem das Processing-Applet durch Aufruf der Methode main gestartet wurde. Im Unterschied zur Original Java-Version von Processing hat die Methode settings hier keine andere Bewandtnis als die - unmittelbar darauf aufgerufene - Methode setup. In beiden Methoden kann man bspw. mit createCanvas(width, height) das Koordinatensystem einrichten und Figuren zeichnen.', false));\r\n\r\n        this.addMethod(new Method(\"setup\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            null, false, false, 'Die setup-Methode wird beim Programmstart nach der settings-Methode aufgerufen. Im Unterschied zur Original Java-Version von Processing hat die Methode setup hier keine andere Bewandtnis als die - unmittelbar davor aufgerufene - Methode settings. In beiden Methoden kann man bspw. mit createCanvas(width, height) das Koordinatensystem einrichten und Figuren zeichnen.', false));\r\n\r\n        this.addMethod(new Method(\"mousePressed\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            null, false, false, 'Die mousePressed-Methode wird immer dann aufgerufen, wenn gerade eine Maustaste heruntergedrückt wurde. Die aktuellen Koordinaten des Mauszeigers liegen in den Attributen mouseX und mouseY vor, die gerade heruntergedrückte Maustaste kann dem Attribut mouseButton entnommen werden.', false));\r\n\r\n        this.addMethod(new Method(\"mouseReleased\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            null, false, false, 'Die mouseReleased-Methode wird immer dann aufgerufen, wenn gerade eine Maustaste losgelassen wurde. Die aktuellen Koordinaten des Mauszeigers liegen in den Attributen mouseX und mouseY vor, die gerade losgelassene Maustaste kann dem Attribut mouseButton entnommen werden.', false));\r\n\r\n        this.addMethod(new Method(\"mouseClicked\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            null, false, false, 'Die mouseClicked-Methode wird immer dann aufgerufen, wenn eine Maustaste auf dem Zeichenbereich gedrückt und anschließend losgelassen wurde. Die aktuellen Koordinaten des Mauszeigers liegen in den Attributen mouseX und mouseY vor, die gerade losgelassene Maustaste kann dem Attribut mouseButton entnommen werden.', false));\r\n\r\n        this.addMethod(new Method(\"mouseDragged\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            null, false, false, 'Die mouseDragged-Methode wird immer dann aufgerufen, wenn eine Maustaste gerade heruntergedrückt ist und die Position des Mauszeigers sich verändert hat. Die aktuellen Koordinaten des Mauszeigers liegen in den Attributen mouseX und mouseY vor, die zuletzt gedrückte Maustaste kann dem Attribut mouseButton entnommen werden.', false));\r\n\r\n        this.addMethod(new Method(\"mouseMoved\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            null, false, false, 'Die mouseMoved-Methode wird immer dann aufgerufen, wenn die Position des Mauszeigers sich verändert hat. Die aktuellen Koordinaten des Mauszeigers liegen in den Attributen mouseX und mouseY vor, die zuletzt gedrückte Maustaste kann dem Attribut mouseButton entnommen werden.', false));\r\n\r\n        this.addMethod(new Method(\"mouseEntered\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            null, false, false, 'Die mouseEntered-Methode wird immer dann aufgerufen, wenn der Mauszeiger von außen neu in den Zeichenbereich hineinfährt.', false));\r\n\r\n        this.addMethod(new Method(\"mouseExited\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            null, false, false, 'Die mouseExited-Methode wird immer dann aufgerufen, wenn der Mauszeiger den Zeichnbereich gerade verlassen hat.', false));\r\n\r\n        this.addMethod(new Method(\"keyPressed\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            null, false, false, 'Die keyPressed-Methode wird immer dann aufgerufen, wenn eine Taste gerade heruntergedrückt wurde. Informationen zur Taste können den Attributen key (String) und keyCode (int) entnommen werden.', false));\r\n\r\n        this.addMethod(new Method(\"keyReleased\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            null, false, false, 'Die keyReleased-Methode wird immer dann aufgerufen, wenn eine Taste gerade losgelassen wurde. Informationen zur Taste können den Attributen key (String) und keyCode (int) entnommen werden.', false));\r\n\r\n\r\n\r\n        // this.addMethod(new Method(\"rect\", new Parameterlist([\r\n        //     { identifier: \"left\", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        //     { identifier: \"top\", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        //     { identifier: \"width\", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        //     { identifier: \"height\", type: floatPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        // ]), voidPrimitiveType,\r\n        //     (parameters) => {\r\n\r\n        //         let o: RuntimeObject = parameters[0].value;\r\n        //         let ph: ProcessingHelper = o.intrinsicData[\"Processing\"];\r\n        //         let left: number = parameters[1].value;\r\n        //         let top: number = parameters[2].value;\r\n        //         let width: number = parameters[3].value;\r\n        //         let height: number = parameters[4].value;\r\n\r\n        //         ph.addStatement((p5o) => p5o.rect(left, top, width, height));\r\n\r\n\r\n        //     }, false, false, 'Zeichnet ein Rechteck. (left, top) ist die linke obere Ecke, width die Breite und height die Höhe des Rechtecks.', false));\r\n\r\n\r\n        /**\r\n         * Setzen von Farben\r\n         */\r\n        this.addProcessingMethod('clear', [], [],\r\n            'Löscht die Zeichenfläche.');\r\n\r\n        this.addProcessingMethod('background', ['rgb'], floatPrimitiveType,\r\n            'Übermalt die komplette Zeichenfläche mit der übergebenen Farbe.');\r\n\r\n        this.addProcessingMethod('background', ['colorAsString'], stringPrimitiveType,\r\n            \"Übermalt die komplette Zeichenfläche mit der übergebenen Farbe. Übergeben wird eine Zeichenkette der Form 'rgb(0,0,255)' oder 'rgb(0%, 0%, 100%)' oder 'rgba(0, 0, 255, 1)' oder 'rgba(0%, 0%, 100%, 1)' und all diese Kombinationen statt rgb auch mit hsl und hsb.\", stringPrimitiveType);\r\n\r\n        this.addProcessingMethod('background', ['v1', 'v2', 'v3'], floatPrimitiveType,\r\n            'Übermalt die komplette Zeichenfläche mit der übergebenen Farbe. v1, v2 und v3 sind - abhängig vom aktuellen color mode - rot, grün und blauwert oder Farbe, Sättigung und Helligkeit');\r\n\r\n        this.addProcessingMethod('fill', ['rgb'], intPrimitiveType,\r\n            'Setzt die Füllfarbe.');\r\n\r\n        this.addProcessingMethod('fill', ['rgb'], stringPrimitiveType,\r\n            'Setzt die Füllfarbe.');\r\n\r\n        this.addProcessingMethod('fill', ['rgb', 'alpha'], [intPrimitiveType, floatPrimitiveType],\r\n            'Setzt die Füllfarbe.');\r\n\r\n        this.addProcessingMethod('fill', ['gray'], floatPrimitiveType,\r\n            'Setzt die Füllfarbe.');\r\n\r\n        this.addProcessingMethod('fill', ['v1', 'v2', 'v3'], floatPrimitiveType,\r\n            'Setzt die Füllfarbe. v1, v2 und v3 sind - abhängig vom aktuellen color mode - rot, grün und blauwert oder Farbe, Sättigung und Helligkeit');\r\n\r\n        this.addProcessingMethod('fill', ['v1', 'v2', 'v3', 'alpha'], floatPrimitiveType,\r\n            'Setzt die Füllfarbe. v1, v2 und v3 sind - abhängig vom aktuellen color mode - rot, grün und blauwert oder Farbe, Sättigung und Helligkeit');\r\n\r\n        this.addProcessingMethod('noFill', [], [],\r\n            'Die nachfolgend gezeichneten Figuren werden nicht gefüllt.');\r\n\r\n        this.addProcessingMethod('stroke', ['rgb'], intPrimitiveType,\r\n            'Setzt die Linienfarbe.');\r\n\r\n        this.addProcessingMethod('stroke', ['rgb'], stringPrimitiveType,\r\n            'Setzt die Linienfarbe.');\r\n\r\n        this.addProcessingMethod('stroke', ['rgb', 'alpha'], [intPrimitiveType, floatPrimitiveType],\r\n            'Setzt die Linienfarbe.');\r\n\r\n        this.addProcessingMethod('stroke', ['gray'], floatPrimitiveType,\r\n            'Setzt die Linienfarbe.');\r\n\r\n        this.addProcessingMethod('stroke', ['v1', 'v2', 'v3'], floatPrimitiveType,\r\n            'Setzt die Linienfarbe. v1, v2 und v3 sind - abhängig vom aktuellen color mode - rot, grün und blauwert oder Farbe, Sättigung und Helligkeit');\r\n\r\n        this.addProcessingMethod('stroke', ['v1', 'v2', 'v3', 'alpha'], floatPrimitiveType,\r\n            'Setzt die Linienfarbe. v1, v2 und v3 sind - abhängig vom aktuellen color mode - rot, grün und blauwert oder Farbe, Sättigung und Helligkeit');\r\n\r\n        this.addProcessingMethod('strokeWeight', ['weight'], floatPrimitiveType,\r\n            'Setzt die Linienbreite.');\r\n\r\n        this.addProcessingMethod('noStroke', [], [],\r\n            'Die nachfolgend gezeichneten Figuren werden ohne Rand gezeichnet.');\r\n\r\n        this.addProcessingMethod('color', ['gray'], floatPrimitiveType,\r\n            'Gibt den Grauton als String-kodierte Farbe zurück.', stringPrimitiveType);\r\n\r\n        this.addProcessingMethod('color', ['colorAsString'], stringPrimitiveType,\r\n            \"Gibt die Farbe zurück. Übergeben kann eine Zeichenkette der Form 'rgb(0,0,255)' oder 'rgb(0%, 0%, 100%)' oder 'rgba(0, 0, 255, 1)' oder 'rgba(0%, 0%, 100%, 1)' und all diese Kombinationen statt rgb auch mit hsl und hsb.\", stringPrimitiveType);\r\n\r\n        this.addProcessingMethod('color', ['gray', 'alpha'], floatPrimitiveType,\r\n            'Gibt den Grauton als String-kodierte Farbe zurück.', stringPrimitiveType);\r\n\r\n        this.addProcessingMethod('color', ['v1', 'v2', 'v3'], floatPrimitiveType,\r\n            'Gibt die aus v1, v2, v3 gebildete Farbe String-kodiert zurück.', stringPrimitiveType);\r\n\r\n        this.addProcessingMethod('color', ['v1', 'v2', 'v3', 'alpha'], floatPrimitiveType,\r\n            'Gibt die aus v1, v2, v3 und alpha gebildete Farbe String-kodiert zurück.', stringPrimitiveType);\r\n\r\n        this.addProcessingMethod('lerpColor', ['colorA', 'colorB', 't'], [stringPrimitiveType, stringPrimitiveType, floatPrimitiveType],\r\n            'Gibt eine Zwischenfarbe zwischen colorA und colorB zurück. t == 0 bedeutet: colorA, t == 1 bedeutet: colorB, t == 0.5 bedeutet: genau zwischen beiden, usw.', stringPrimitiveType);\r\n\r\n        this.addProcessingMethod('colorMode', ['mode'], stringPrimitiveType,\r\n            'Setzt den Modus, in dem nachfolgende Aufrufe von color(...) interpretiert werden. Möglich sind die Werte RGB, HSL und HSB.');\r\n\r\n        this.addProcessingMethod('colorMode', ['mode', 'max'], [stringPrimitiveType, floatPrimitiveType],\r\n            'Setzt den Modus, in dem nachfolgende Aufrufe von color(...) interpretiert werden. Möglich sind die Werte RGB, HSL und HSB für Mode. Max ist der Maximalwert jeder Farbkomponente.');\r\n\r\n        this.addProcessingMethod('colorMode', ['mode', 'max1', 'max2', 'max3'], [stringPrimitiveType, floatPrimitiveType, floatPrimitiveType, floatPrimitiveType],\r\n            'Setzt den Modus, in dem nachfolgende Aufrufe von color(...) interpretiert werden. Möglich sind die Werte RGB, HSL und HSB für Mode. Max ist der Maximalwert jeder Farbkomponente.');\r\n\r\n        this.addProcessingMethod('colorMode', ['mode', 'max1', 'max2', 'max3', 'maxAlpha'], [stringPrimitiveType, floatPrimitiveType, floatPrimitiveType, floatPrimitiveType, floatPrimitiveType],\r\n            'Setzt den Modus, in dem nachfolgende Aufrufe von color(...) interpretiert werden. Möglich sind die Werte RGB, HSL und HSB für Mode. Max ist der Maximalwert jeder Farbkomponente.');\r\n\r\n\r\n\r\n        /**\r\n         * Zeichnen geometrischer Figuren\r\n         */\r\n        this.addProcessingMethod('rectMode', ['mode'], stringPrimitiveType,\r\n            'Setzt den Modus, in dem nachfolgende Aufrufe von rect(...) interpretiert werden. Möglich sind die Werte CORNER, CORNERS, RADIUS und CENTER.');\r\n\r\n        this.addProcessingMethod('rect', ['left', 'top', 'width', 'height'], floatPrimitiveType,\r\n            'Zeichnet ein Rechteck. (left, top) ist die linke obere Ecke, width die Breite und height die Höhe des Rechtecks.');\r\n\r\n        this.addProcessingMethod('rect', ['left', 'top', 'width', 'height', 'radius'], floatPrimitiveType,\r\n            'Zeichnet ein Rechteck mit abgerundeten Ecken. (left, top) ist die linke obere Ecke, width die Breite und height die Höhe des Rechtecks.');\r\n\r\n        this.addProcessingMethod('rect', ['left', 'top', 'width', 'height', 'radius1', 'radius2', 'radius3', 'radius4'], floatPrimitiveType,\r\n            'Zeichnet ein Rechteck mit abgerundeten Ecken. (left, top) ist die linke obere Ecke, width die Breite und height die Höhe des Rechtecks.');\r\n\r\n        this.addProcessingMethod('square', ['left', 'top', 'width'], floatPrimitiveType,\r\n            'Zeichnet ein Quadrat. (left, top) ist die linke obere Ecke, width Seitenlänge des Quadrats.');\r\n\r\n        this.addProcessingMethod('square', ['left', 'top', 'width', 'radius'], floatPrimitiveType,\r\n            'Zeichnet ein Quadrat mit abgerundeten Ecken. (left, top) ist die linke obere Ecke, width Seitenlänge des Quadrats. Radius ist der Eckenradius.');\r\n\r\n        this.addProcessingMethod('square', ['left', 'top', 'width', 'radius1', 'radius2', 'radius3', 'radius4'], floatPrimitiveType,\r\n            'Zeichnet ein Quadrat mit abgerundeten Ecken. (left, top) ist die linke obere Ecke, width Seitenlänge des Quadrats. Radius ist der Eckenradius.');\r\n\r\n        this.addProcessingMethod('rect', ['left', 'top', 'width', 'height', 'radius'], floatPrimitiveType,\r\n            'Zeichnet ein Rechteck. (left, top) ist die linke obere Ecke, width die Breite und height die Höhe des Rechtecks. Radius ist der Eckenradius');\r\n\r\n        this.addProcessingMethod('ellipse', ['left', 'top', 'width', 'height'], floatPrimitiveType,\r\n            'Zeichnet eine Ellipse. (left, top) ist die linke obere Ecke der Boundingbox der Ellipse, width ihre Breite und height ihre Höhe. Das lässt sich aber mit ellipseMode(...) ändern!');\r\n\r\n        this.addProcessingMethod('circle', ['x', 'y', 'extent'], floatPrimitiveType,\r\n            'Zeichnet einen Kreis. (x, y) ist der Mittelpunkt des Kreises, extent der doppelte Radius.');\r\n\r\n        this.addProcessingMethod('ellipseMode', ['mode'], stringPrimitiveType,\r\n            'Setzt den Modus, in dem nachfolgende Aufrufe von ellipse(...) interpretiert werden. Möglich sind die Werte CORNER, CORNERS, RADIUS und CENTER.');\r\n\r\n\r\n        this.addProcessingMethod('line', ['x1', 'y1', 'x2', 'y2'], floatPrimitiveType,\r\n            'Zeichnet eine Strecke von (x1, y1) nach (x2, y2).');\r\n\r\n        this.addProcessingMethod('line', ['x1', 'y1', 'z1', 'x2', 'y2', 'z2'], floatPrimitiveType,\r\n            'Zeichnet eine Strecke von (x1, y1, z1) nach (x2, y2, z2).');\r\n\r\n        this.addProcessingMethod('triangle', ['x1', 'y1', 'x2', 'y2', 'x3', 'y3'], floatPrimitiveType,\r\n            'Zeichnet eine Dreieck mit den Eckpunkten (x1, y1), (x2, y2) und (x3, y3).');\r\n\r\n        this.addProcessingMethod('quad', ['x1', 'y1', 'x2', 'y2', 'x3', 'y3', 'x4', 'y4'], floatPrimitiveType,\r\n            'Zeichnet eine Viereck mit den Eckpunkten (x1, y1), (x2, y2), (x3, y3) und (x4, y4).');\r\n\r\n        this.addProcessingMethod('bezier', ['x1', 'y1', 'x2', 'y2', 'x3', 'y3', 'x4', 'y4'], floatPrimitiveType,\r\n            'Zeichnet eine kubische Bezierkurve mit den Ankerpunkten (x1, y1), (x4, y4) und den Kontrollpunkten (x2, y2), (x3, y3).');\r\n\r\n        this.addProcessingMethod('curve', ['x1', 'y1', 'x2', 'y2', 'x3', 'y3', 'x4', 'y4'], floatPrimitiveType,\r\n            'Zeichnet eine Catmull-Rom-Kurve vom Punkt (x2, y2) nach (x3, y3) so, als würde sie von (x1, x2) kommen und es am Ende zu (x4, y4) weitergehen.');\r\n\r\n        this.addProcessingMethod('curvePoint', ['a', 'b', 'c', 'd', 't'], floatPrimitiveType,\r\n            'Will man die Zwischenpunkte einer Curve erhalten (Beginn b, Ende c, als würde sie von a kommen und nach d gehen), so verwendet man sowohl für die x- als auch für die y-Koordinate diese Funktion. t gibt an, welchen Punkt der Kurve man haben möchte. t hat Werte zwischen 0 (Startpunkt) und 1 (Endpunkt).', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('curveTangent', ['a', 'b', 'c', 'd', 't'], floatPrimitiveType,\r\n            'Will man die Zwischentangenten einer Curve erhalten (Beginn b, Ende c, als würde sie von a kommen und nach d gehen), so verwendet man sowohl für die x- als auch für die y-Koordinate diese Funktion. t gibt an, welchen Punkt der Kurve man haben möchte. t hat Werte zwischen 0 (Startpunkt) und 1 (Endpunkt).', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('bezierPoint', ['x1', 'x2', 'x3', 'x4', 't'], floatPrimitiveType,\r\n            'Will man die Zwischenpunkte einer Bezierkurve erhalten (Ankerkoordinaten x1, x4 und Stützkoordinaten x2, x3), so nutzt man - einzeln sowohl für die x- also auch für die y-Koordinate - diese Funktion. t gibt an, welchen Punkt der Kurve man haben möchte. t hat Werte zwischen 0 (Startpunkt) und 1 (Endpunkt).', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('bezierTangent', ['x1', 'x2', 'x3', 'x4', 't'], floatPrimitiveType,\r\n            'Will man die Zwischentangenten einer Bezierkurve erhalten (Ankerkoordinaten x1, x4 und Stützkoordinaten x2, x3), so nutzt man - einzeln sowohl für die x- also auch für die y-Koordinate - diese Funktion. t gibt an, welchen Punkt der Kurve man haben möchte. t hat Werte zwischen 0 (Startpunkt) und 1 (Endpunkt).', floatPrimitiveType);\r\n\r\n\r\n        this.addProcessingMethod('beginShape', [], [],\r\n            'Beginnt mit dem Zeichnen eines Polygons. Die einzelnen Punkte werden mit der Methode vertex(x, y) gesetzt.');\r\n\r\n        this.addProcessingMethod('endShape', [], [],\r\n            'Endet das Zeichnen eines Polygons.');\r\n\r\n        this.addProcessingMethod('beginShape', ['kind'], stringPrimitiveType,\r\n            'Beginnt mit dem Zeichnen eines Polygons. Die einzelnen Punkte werden mit der Methode vertex(x, y) gesetzt. Mögliche Werte für kind sind: POINTS, LINES, TRIANGLES, TRIANGLE_STRIP, TRIANGLE_FAN, QUADS, QUAD_STRIP');\r\n\r\n        this.addProcessingMethod('endShape', ['kind'], stringPrimitiveType,\r\n            'endShape(CLOSE) schließt den Linienzug.');\r\n\r\n        this.addProcessingMethod('vertex', ['x', 'y'], floatPrimitiveType,\r\n            'Setzt zwischen beginShape() und endShape() einen Punkt.');\r\n\r\n        this.addProcessingMethod('point', ['x', 'y'], floatPrimitiveType,\r\n            'Zeichnet einen Punkt.');\r\n\r\n        this.addProcessingMethod('set', ['x', 'y', 'color'], [floatPrimitiveType, floatPrimitiveType, stringPrimitiveType],\r\n            'Setzt die Farbe des Pixels bei (x, y).');\r\n\r\n        this.addProcessingMethod('vertex', ['x', 'y', 'z'], floatPrimitiveType,\r\n            'Setzt zwischen beginShape() und endShape() einen Punkt.');\r\n\r\n        this.addProcessingMethod('point', ['x', 'y', 'z'], floatPrimitiveType,\r\n            'Zeichnet einen Punkt.');\r\n\r\n        this.addProcessingMethod('curveVertex', ['x', 'y'], floatPrimitiveType,\r\n            'Setzt zwischen beginShape() und endShape() einen Punkt. Processing zeichnet damit eine Kurve nach dem Catmull-Rom-Algorithmus.');\r\n\r\n        this.addProcessingMethod('curvevertex', ['x', 'y', 'z'], floatPrimitiveType,\r\n            'Setzt zwischen beginShape() und endShape() einen Punkt. Processing zeichnet damit eine Kurve nach dem Catmull-Rom-Algorithmus.');\r\n\r\n        this.addProcessingMethod('box', ['size'], floatPrimitiveType,\r\n            'Zeichnet einen 3D-Würfel mit der Seitenlänge size.');\r\n\r\n        this.addProcessingMethod('box', ['sizeX', 'sizeY', 'sizeZ'], floatPrimitiveType,\r\n            'Zeichnet einen 3D-Würfel mit den angegebenen Seitenlängen.');\r\n\r\n        /**\r\n         * Transformationen\r\n         */\r\n        this.addProcessingMethod('resetMatrix', [], [],\r\n            'Setzt alle erfolgten Transformationen zurück.');\r\n\r\n        this.addProcessingMethod('push', [], [],\r\n            'Sichert den aktuellen Zeichenzustand, d.h. die Farben und Transformationen, auf einen Stack.');\r\n\r\n        this.addProcessingMethod('pop', [], [],\r\n            'Holt den obersten Zeichenzustand, d.h. die Farben und Transformationen, vom Stack.');\r\n\r\n        this.addProcessingMethod('scale', ['factor'], floatPrimitiveType,\r\n            'Streckt die nachfolgend gezeichneten Figuren.');\r\n\r\n        this.addProcessingMethod('scale', ['factorX', 'factorY'], floatPrimitiveType,\r\n            'Streckt die nachfolgend gezeichneten Figuren.');\r\n\r\n        this.addProcessingMethod('scale', ['factorX', 'factorY', 'factorZ'], floatPrimitiveType,\r\n            'Streckt die nachfolgend gezeichneten Figuren.');\r\n\r\n        this.addProcessingMethod('translate', ['x', 'y'], floatPrimitiveType,\r\n            'Verschiebt die nachfolgend gezeichneten Figuren.');\r\n\r\n        this.addProcessingMethod('translate', ['x', 'y', 'z'], floatPrimitiveType,\r\n            'Verschiebt die nachfolgend gezeichneten Figuren.');\r\n\r\n        this.addProcessingMethod('rotate', ['angle'], floatPrimitiveType,\r\n            'Rotiert die nachfolgend gezeichneten Figuren. Mit angleMode(RADIANS) bzw. angleMode(DEGREES) kann beeinflusst werden, wie angle interpretiert wird. Default ist RADIANS.');\r\n\r\n        this.addProcessingMethod('rotateX', ['angle'], floatPrimitiveType,\r\n            'Rotiert die nachfolgend gezeichneten Figuren um die X-Achse. Mit angleMode(RADIANS) bzw. angleMode(DEGREES) kann beeinflusst werden, wie angle interpretiert wird. Default ist RADIANS.');\r\n\r\n        this.addProcessingMethod('rotateY', ['angle'], floatPrimitiveType,\r\n            'Rotiert die nachfolgend gezeichneten Figuren um die Y-Achse. Mit angleMode(RADIANS) bzw. angleMode(DEGREES) kann beeinflusst werden, wie angle interpretiert wird. Default ist RADIANS.');\r\n\r\n        this.addProcessingMethod('shearX', ['angle'], floatPrimitiveType,\r\n            'Schert die nachfolgend gezeichneten Figuren in Richtung derX-Achse. Mit angleMode(RADIANS) bzw. angleMode(DEGREES) kann beeinflusst werden, wie angle interpretiert wird. Default ist RADIANS.');\r\n\r\n        this.addProcessingMethod('shearY', ['angle'], floatPrimitiveType,\r\n            'Schert die nachfolgend gezeichneten Figuren in Richtung der Y-Achse. Mit angleMode(RADIANS) bzw. angleMode(DEGREES) kann beeinflusst werden, wie angle interpretiert wird. Default ist RADIANS.');\r\n\r\n        this.addProcessingMethod('rotateZ', ['angle'], floatPrimitiveType,\r\n            'Rotiert die nachfolgend gezeichneten Figuren um die Z-Achse. Mit angleMode(RADIANS) bzw. angleMode(DEGREES) kann beeinflusst werden, wie angle interpretiert wird. Default ist RADIANS.');\r\n\r\n        this.addProcessingMethod('angleMode', ['mode'], stringPrimitiveType,\r\n            'Mit angleMode(RADIANS) bzw. angleMode(DEGREES) kann beeinflusst werden, wie winkel bei Rotationen interpretiert werden. Default ist RADIANS.');\r\n\r\n        /**\r\n         * Text\r\n         */\r\n        this.addProcessingMethod('textSize', ['size'], floatPrimitiveType,\r\n            'Setzt die Schriftgröße in Pixel.');\r\n\r\n        // this.addProcessingMethod('loadFont', ['fontname'], stringPrimitiveType,\r\n        //     'Lädt eine Schriftart. Diese Methode muss in der Methode preload aufgerufen werden.');\r\n\r\n        this.addProcessingMethod('textAlign', ['alignX'], intPrimitiveType,\r\n            'Setzt die Ausrichtung des nächsten ausgegebenen Textes in x-Richtung. Mögliche Werte sind CENTER, LEFT, RIGHT');\r\n\r\n        this.addProcessingMethod('textAlign', ['alignX', 'alignY'], intPrimitiveType,\r\n            'Setzt die Ausrichtung des nächsten ausgegebenen Textes. Mögliche Werte für alignX sind CENTER, LEFT, RIGHT, mögliche Werte für alignY sind TOP, CENTER, BASELINE, BOTTOM');\r\n\r\n        this.addProcessingMethod('text', ['text', 'x', 'y'], [stringPrimitiveType, floatPrimitiveType, floatPrimitiveType],\r\n            'Gibt Text aus.');\r\n\r\n        this.addProcessingMethod('text', ['text', 'x', 'y', 'x2', 'y2'], [stringPrimitiveType, floatPrimitiveType, floatPrimitiveType, floatPrimitiveType, floatPrimitiveType],\r\n            'Gibt Text aus. x2 und y2 sind die Breite und Höhe des Textausgabebereichs. Hat der Text horizontal nicht Platz, so wird er entsprechend umgebrochen.');\r\n\r\n        /**\r\n         * Mathematische Funktionen\r\n         */\r\n        this.addProcessingMethod('random', ['low', 'high'], floatPrimitiveType,\r\n            'Gibt eine Zufallszahl zwischen low und high zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('random', ['high'], floatPrimitiveType,\r\n            'Gibt eine Zufallszahl zwischen 0 und high zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('sqrt', ['n'], floatPrimitiveType,\r\n            'Gibt die Quadratwurzel von n zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('pow', ['basis', 'exponent'], floatPrimitiveType,\r\n            'Gibt die den Wert der Potenz (\"basis hoch exponent\") zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('max', ['a', 'b'], floatPrimitiveType,\r\n            'Gibt den größeren der beiden Werte zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('min', ['a', 'b'], floatPrimitiveType,\r\n            'Gibt den kleineren der beiden Werte zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('abs', ['n'], floatPrimitiveType,\r\n            'Gibt den Betrag des Wertes zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('sin', ['n'], floatPrimitiveType,\r\n            'Gibt den Sinus des Wertes zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('cos', ['n'], floatPrimitiveType,\r\n            'Gibt den Cosinus des Wertes zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('tan', ['n'], floatPrimitiveType,\r\n            'Gibt den Tangens des Wertes zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('asin', ['n'], floatPrimitiveType,\r\n            'Gibt den Arcussinus des Wertes zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('acos', ['n'], floatPrimitiveType,\r\n            'Gibt den Arcussosinus des Wertes zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('radians', ['angle'], floatPrimitiveType,\r\n            'Wandelt einen Winkel vom Gradmaß ins Bogenmaß um.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('degrees', ['angle'], floatPrimitiveType,\r\n            'Wandelt einen Winkel vom Bogenmaß ins Gradmaß um.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('atan', ['n'], floatPrimitiveType,\r\n            'Gibt den Arcussangens des Wertes zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('atan2', ['x', 'y'], floatPrimitiveType,\r\n            'Gibt den Arcussangens des Wertes zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('sqrt', ['x', 'y'], floatPrimitiveType,\r\n            'Gibt die Quadratwurzel des Wertes zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('sq', ['x', 'y'], floatPrimitiveType,\r\n            'Gibt das Quadrat des Wertes zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('abs', ['n'], intPrimitiveType,\r\n            'Gibt den Betrag des Wertes zurück.', intPrimitiveType);\r\n\r\n        this.addProcessingMethod('round', ['n'], floatPrimitiveType,\r\n            'Rundet den Wert auf eine ganze Zahl.', intPrimitiveType);\r\n\r\n        this.addProcessingMethod('ceil', ['n'], floatPrimitiveType,\r\n            'Rundet den Wert auf eine ganze Zahl (Aufrunden!).', intPrimitiveType);\r\n\r\n        this.addProcessingMethod('floor', ['n'], floatPrimitiveType,\r\n            'Rundet den Wert auf eine ganze Zahl (Abfrunden!).', intPrimitiveType);\r\n\r\n        this.addProcessingMethod('dist', ['x1', 'y1', 'x2', 'y2'], floatPrimitiveType,\r\n            'Berechnet den Abstand der Punkte (x1, y1) und (x2, y2).', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('lerp', ['a', 'b', 't'], floatPrimitiveType,\r\n            'Berechnet den a + (b - a)*t. Wählt man t zwischen 0 und 1, so kann man damit die Zwischenwerte zwischen a und b errechnen.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('constrain', ['value', 'min', 'max'], floatPrimitiveType,\r\n            'Beschränkt value auf den Bereich [min, max], genauer: Ist value < min, so wird min zurückgegeben. Ist value > max, so wird max zurückgegeben. Ansonsten wird value zurückgegeben.', floatPrimitiveType);\r\n\r\n        /**\r\n         * Sonstiges\r\n         */\r\n\r\n        this.addProcessingMethod('year', [], [],\r\n            'Aktuelle Jahreszahl', intPrimitiveType);\r\n\r\n        this.addProcessingMethod('month', [], [],\r\n            'Monat: 1 == Januar, 12 == Dezember', intPrimitiveType);\r\n\r\n        this.addProcessingMethod('day', [], [],\r\n            'Tag (innerhalb des Monats) des aktuellen Datums', intPrimitiveType);\r\n\r\n        this.addProcessingMethod('hour', [], [],\r\n            'Stundenzahl der aktuellen Uhrzeit', intPrimitiveType);\r\n\r\n        this.addProcessingMethod('hour', [], [],\r\n            'Stundenzahl der aktuellen Uhrzeit', intPrimitiveType);\r\n\r\n        this.addProcessingMethod('minute', [], [],\r\n            'Minutenzahl der aktuellen Uhrzeit', intPrimitiveType);\r\n\r\n        this.addProcessingMethod('second', [], [],\r\n            'Sekundenzahl der aktuellen Uhrzeit', intPrimitiveType);\r\n\r\n        this.addProcessingMethod('frameRate', ['n'], intPrimitiveType,\r\n            'Setzt die Framerate (Anzahl der Aufrufe von draw() pro Sekunde)');\r\n\r\n        this.addProcessingMethod('textWidth', ['text'], stringPrimitiveType,\r\n            'Gibt die Breite des Texts zurück.', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('textAscent', ['text'], stringPrimitiveType,\r\n            'Gibt den Ascent Textes zurück ( = Höhe des größten Zeichens über der Grundlinie).', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('textDescent', ['text'], stringPrimitiveType,\r\n            'Gibt den Descent Textes zurück ( = Tiefe des tiefsten Zeichens unter der Grundlinie).', floatPrimitiveType);\r\n\r\n        this.addProcessingMethod('textLeading', ['leading'], floatPrimitiveType,\r\n            'Setzt den Abstand zweier aufeinanderfolgender Textzeilen.');\r\n\r\n        this.addProcessingMethod('cursor', ['type'], stringPrimitiveType,\r\n            'Ändert das Aussehen des Mauscursors. Type ist einer der Werte \"arrow\", \"cross\", \"text\", \"move\", \"hand\", \"wait\", \"progress\".');\r\n\r\n        this.addProcessingMethod('noCursor', ['type'], stringPrimitiveType,\r\n            'Hat zur Folge, dass der Mauscursor über dem Zeichenbereich unsichtbar ist.');\r\n\r\n        this.addProcessingMethod('copy', ['sx', 'sy', 'sw', 'sh', 'dx', 'dy', 'dw', 'dh'], floatPrimitiveType,\r\n            'Kopiert den rechteckigen Bereich mit der linken oberen Ecke (sx, sy) sowie der Breite sw und der Höhe sh in den Bereich mit der linken oberen Ecke (dx, dy), der Breite dw und der Höhe dh.');\r\n\r\n        this.addProcessingMethod('millis', [], [],\r\n            'Gibt die Millisekunden zurück, die vergangen sind, seit setup() aufgerufen wurde.');\r\n\r\n        this.addProcessingMethod('redraw', [], [],\r\n            'Führt draw() genau ein Mal aus. Macht ggf. Sinn, wenn die Render-Loop zuvor mit noLoop() gestoppt wurde.');\r\n\r\n\r\n        this.setupAttributeIndicesRecursive();\r\n\r\n    }\r\n\r\n    addProcessingMethod(identifier: string, parameterNames: string[], parameterTypes: Type[] | Type, comment: string, returnType?: Type) {\r\n\r\n        let parameters: Variable[] = [];\r\n        if (Array.isArray(parameterTypes)) {\r\n            for (let i = 0; i < parameterNames.length; i++) {\r\n                parameters.push({ identifier: parameterNames[i], type: parameterTypes[i], declaration: null, usagePositions: null, isFinal: true });\r\n            }\r\n        } else {\r\n            parameters = parameterNames.map((name) => { return { identifier: name, type: parameterTypes, declaration: null, usagePositions: null, isFinal: true } })\r\n        }\r\n\r\n        if (returnType == null) {\r\n            this.addMethod(new Method(identifier, new Parameterlist(parameters), null,\r\n                (parameters) => {\r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let ph: ProcessingHelper = o.intrinsicData[\"Processing\"];\r\n                    let pList = parameters.slice(1).map(p => p.value);\r\n\r\n                    ph.p5o[identifier](...pList);\r\n\r\n                }, false, false, comment, false));\r\n        } else {\r\n            this.addMethod(new Method(identifier, new Parameterlist(parameters), returnType,\r\n                (parameters) => {\r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let ph: ProcessingHelper = o.intrinsicData[\"Processing\"];\r\n                    let pList = parameters.slice(1).map(p => p.value);\r\n\r\n                    return ph.p5o[identifier](...pList);\r\n\r\n                }, false, false, comment, false));\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    getProcessingHelper(processingObject: RuntimeObject, breite: number = 800, höhe: number = 600): ProcessingHelper {\r\n\r\n        let interpreter = this.module?.main?.getInterpreter();\r\n\r\n\r\n        if (interpreter.processingHelper != null) {\r\n\r\n            interpreter.throwException(\"Es kann nur ein einziges Processing-Applet instanziert werden.\");\r\n            return;\r\n        }\r\n\r\n        if (interpreter.worldHelper != null) {\r\n\r\n            interpreter.throwException(\"Processing kann nicht gleichzeitig mit der herkömmlichen Grafikausgabe genutzt werden.\");\r\n            return;\r\n        }\r\n\r\n        return new ProcessingHelper(this.module, interpreter, processingObject);\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport class ProcessingHelper {\r\n\r\n    $containerOuter: JQuery<HTMLElement>;\r\n    $containerInner: JQuery<HTMLElement>;\r\n\r\n    $div: JQuery<HTMLElement>;\r\n\r\n    width: number = 800;\r\n    height: number = 600;\r\n\r\n    p5o: p5;\r\n\r\n    renderer: string;\r\n    loopStopped: boolean = false;\r\n\r\n    onSizeChanged: () => void;\r\n\r\n\r\n    constructor(private module: Module, private interpreter: Interpreter, public runtimeObject: RuntimeObject) {\r\n\r\n        this.interpreter.processingHelper = this;\r\n\r\n        this.$containerOuter = jQuery('<div></div>');\r\n        let $graphicsDiv = this.module.main.getInterpreter().printManager.getGraphicsDiv();\r\n\r\n        this.onSizeChanged = () => {\r\n            let $jo_tabs = $graphicsDiv.parents(\".jo_tabs\");\r\n            let maxWidth: number = $jo_tabs.width();\r\n            let maxHeight: number = $jo_tabs.height();\r\n            // let maxWidth: number = $graphicsDiv.parent().width();\r\n            // let maxHeight: number = $graphicsDiv.parent().height();\r\n\r\n            if (this.height / this.width > maxHeight / maxWidth) {\r\n                $graphicsDiv.css({\r\n                    'width': this.width / this.height * maxHeight + \"px\",\r\n                    'height': maxHeight + \"px\",\r\n                })\r\n            } else {\r\n                $graphicsDiv.css({\r\n                    'height': this.height / this.width * maxWidth + \"px\",\r\n                    'width': maxWidth + \"px\",\r\n                })\r\n            }\r\n        };\r\n\r\n        $graphicsDiv.off('sizeChanged');\r\n        $graphicsDiv.on('sizeChanged', this.onSizeChanged);\r\n\r\n        this.onSizeChanged();\r\n\r\n        this.$containerInner = jQuery('<div></div>');\r\n        this.$containerOuter.append(this.$containerInner);\r\n\r\n        $graphicsDiv.append(this.$containerOuter);\r\n        $graphicsDiv.show();\r\n\r\n        $graphicsDiv[0].oncontextmenu = function (e) {\r\n            e.preventDefault();\r\n        };\r\n\r\n        this.module.main.getRightDiv()?.adjustWidthToWorld();\r\n\r\n    }\r\n\r\n    createCanvas(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.onSizeChanged();\r\n        this.p5o.createCanvas(this.width, this.height, this.renderer);\r\n        this.$div.find('canvas').css({\r\n            'width': '',\r\n            'height': ''\r\n\r\n        });\r\n    }\r\n\r\n    main() {\r\n        this.interpreter.timerExtern = true;\r\n        this.setupProcessing(this.$containerInner);\r\n    }\r\n\r\n    setupProcessing($div: JQuery<HTMLElement>) {\r\n\r\n        let that = this;\r\n        let drawMethodPending: boolean = true;\r\n        this.$div = $div;\r\n\r\n        let sketch = (p5: p5) => {\r\n\r\n            p5.setup = function () {\r\n                that.renderer = p5.P2D;\r\n\r\n                let afterFinishingBoth = () => {\r\n                    // p5.createCanvas(that.width, that.height, that.renderer);\r\n                    drawMethodPending = false\r\n                    // $div.find('canvas').css({\r\n                    //     'width': '',\r\n                    //     'height': ''\r\n                    // })            \r\n                }\r\n\r\n                let i = 2;\r\n\r\n                that.runMethod('setup', () => {\r\n                    if (--i == 0) afterFinishingBoth();\r\n                });\r\n\r\n                that.runMethod('settings', () => {\r\n                    if (--i == 0) afterFinishingBoth();\r\n                });\r\n\r\n\r\n            };\r\n\r\n            p5.preload = function () {\r\n                that.runMethod('preload');\r\n            };\r\n\r\n            p5.draw = function () {\r\n                if (that.interpreter.state == InterpreterState.running && !that.loopStopped) {\r\n                    if (!drawMethodPending) {\r\n                        drawMethodPending = true;\r\n                        that.runMethod(\"draw\", () => {\r\n                            drawMethodPending = false;\r\n                        });\r\n                    }\r\n                }\r\n                that.tick();\r\n                // p5.background(50);\r\n                // p5.rect(p5.width / 2, p5.height / 2, 50, 50);\r\n\r\n            };\r\n\r\n            p5.mousePressed = function () {\r\n                that.runMethod('mousePressed');\r\n            };\r\n\r\n            p5.mouseReleased = function () {\r\n                that.runMethod('mouseReleased');\r\n            };\r\n\r\n            p5.mouseClicked = function () {\r\n                that.runMethod('mouseClicked');\r\n            };\r\n\r\n            p5.mouseDragged = function () {\r\n                that.runMethod('mouseDragged');\r\n            };\r\n\r\n            p5.mouseEntered = function () {\r\n                that.runMethod('mouseEntered');\r\n            };\r\n\r\n            p5.mouseExited = function () {\r\n                that.runMethod('mouseExited');\r\n            };\r\n\r\n            p5.mouseMoved = function () {\r\n                that.runMethod('mouseMoved');\r\n            };\r\n\r\n            p5.keyPressed = function () {\r\n                that.runMethod('keyPressed');\r\n            };\r\n\r\n            p5.keyReleased = function () {\r\n                that.runMethod('keyReleased');\r\n            };\r\n\r\n\r\n        }\r\n\r\n        //@ts-ignore\r\n        this.p5o = new p5(sketch, $div[0]);\r\n        $div.find('canvas').css({\r\n            'width': '',\r\n            'height': ''\r\n        })\r\n\r\n    }\r\n\r\n\r\n    tick() {\r\n\r\n        if (this.interpreter.state == InterpreterState.running) {\r\n            this.interpreter.timerFunction(33.33, true, 0.5);\r\n            this.interpreter.timerStopped = false;\r\n            this.interpreter.timerFunction(33.33, false, 0.08);\r\n        }\r\n\r\n    }\r\n\r\n    loop() {\r\n        this.loopStopped = false;\r\n    }\r\n\r\n    noLoop() {\r\n        this.loopStopped = true;\r\n    }\r\n\r\n    runMethod(methodIdentifier: string, callback: () => void = null) {\r\n\r\n        let klass: Klass = <Klass>this.runtimeObject.class;\r\n        let method = klass.getMethodBySignature(methodIdentifier + \"()\");\r\n\r\n        let program = method?.program;\r\n\r\n        if (program == null) {\r\n            if (callback != null) callback();\r\n            return;\r\n        }\r\n\r\n        let stackElements: Value[] = [\r\n            {\r\n                type: klass,\r\n                value: this.runtimeObject\r\n            },\r\n        ];\r\n\r\n        this.interpreter.runTimer(method, stackElements, (interpreter) => {\r\n            if (callback != null) callback();\r\n        }, methodIdentifier == \"draw\");\r\n    }\r\n\r\n\r\n    destroyWorld() {\r\n        if (this.p5o != null) this.p5o.remove();\r\n        this.$containerOuter.remove();\r\n        this.module.main.getInterpreter().printManager.getGraphicsDiv().hide();\r\n        this.interpreter.timerExtern = false;\r\n        this.interpreter.processingHelper = null;\r\n    }\r\n\r\n}","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { doublePrimitiveType, intPrimitiveType, booleanPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Value } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { FilledShapeHelper } from \"./FilledShape.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { polygonBerührtPolygon, polygonEnthältPunkt, steckenzugSchneidetStreckenzug, streckenzugEnthältPunkt } from \"../../tools/MatheTools.js\";\r\nimport { ShapeHelper } from \"./Shape.js\";\r\n\r\nexport class TurtleClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Turtle\", module, \"Turtle-Klasse zum Zeichnen von Streckenzügen oder gefüllten Figuren. Wichtig sind vor allem die Methoden forward(double length) und turn(double angleDeg), die die Turtle nach vorne bewegen bzw. ihre Blickrichtung ändern.\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"FilledShape\"));\r\n\r\n        this.addMethod(new Method(\"Turtle\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n\r\n                let ph = new TurtleHelper(x, y, true, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = ph;\r\n\r\n            }, false, false, 'Instanziert ein neues Turtle-Objekt ohne Punkte. Die Turtle blickt anfangs nach rechts. Am Ende des Streckenzugs wird eine \"Schildkröte\" (kleines Dreieck) gezeichnet.', true));\r\n\r\n\r\n        this.addMethod(new Method(\"Turtle\", new Parameterlist([\r\n            { identifier: \"x\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"y\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"showTurtle\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let x: number = parameters[1].value;\r\n                let y: number = parameters[2].value;\r\n                let showTurtle: boolean = parameters[3].value;\r\n\r\n                let ph = new TurtleHelper(x, y, showTurtle, module.main.getInterpreter(), o);\r\n                o.intrinsicData[\"Actor\"] = ph;\r\n\r\n            }, false, false, 'Instanziert ein neues Turtle-Objekt ohne Punkte. Die Turtle blickt anfangs nach rechts. Falls showTurtle == true, wird am Ende des Streckenzuges eine \"Schildkröte\" (kleines Dreieck) gezeichnet.', true));\r\n\r\n\r\n        this.addMethod(new Method(\"forward\", new Parameterlist([\r\n            { identifier: \"length\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let length: number = parameters[1].value;\r\n                let sh: TurtleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"forward\")) return;\r\n\r\n                sh.forward(length);\r\n\r\n            }, false, false, 'Weist die Turtle an, die angegebene Länge vorwärts zu gehen. Ihr zurückgelegter Weg wird als gerade Strecke mit der aktuellen BorderColor gezeichnet. Mit setBorderColor(null) bewirkst Du, dass ein Stück ihres Weges nicht gezeichnet wird.', false));\r\n\r\n        this.addMethod(new Method(\"turn\", new Parameterlist([\r\n            { identifier: \"angleInDeg\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let angle: number = parameters[1].value;\r\n                let sh: TurtleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"turn\")) return;\r\n\r\n                sh.turn(angle);\r\n\r\n            }, false, false, 'Bewirkt, dass sich die Turtle um den angegebenen Winkel (in Grad!) dreht, d.h. ihre Blickrichtung ändert. Ein positiver Winkel bewirkt eine Drehung gegen den Uhrzeigersinn. Diese Methode wirkt sich NICHT auf die bisher gezeichneten Strecken aus. Willst Du alles bisher Gezeichnete inklusive Turtle drehen, so nutze die Methode rotate.', false));\r\n\r\n        this.addMethod(new Method(\"penUp\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: TurtleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"penUp\")) return;\r\n\r\n                sh.penIsDown = false;\r\n\r\n            }, false, false, 'Bewirkt, dass die Turtle beim Gehen ab jetzt nicht mehr zeichnet.', false));\r\n\r\n        this.addMethod(new Method(\"penDown\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: TurtleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"penDown\")) return;\r\n\r\n                sh.penIsDown = true;\r\n\r\n            }, false, false, 'Bewirkt, dass die Turtle beim Gehen ab jetzt wieder zeichnet.', false));\r\n\r\n        this.addMethod(new Method(\"closeAndFill\", new Parameterlist([\r\n            { identifier: \"closeAndFill\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let closeAndFill: boolean = parameters[1].value;\r\n                let sh: TurtleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"closeAndFill\")) return;\r\n\r\n                sh.closeAndFill(closeAndFill);\r\n\r\n            }, false, false, 'closeAndFill == true bewirkt, dass das von der Turtlezeichnung umschlossene Gebiet gefüllt wird.', false));\r\n\r\n        this.addMethod(new Method(\"showTurtle\", new Parameterlist([\r\n            { identifier: \"showTurtle\", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let showTurtle: boolean = parameters[1].value;\r\n                let sh: TurtleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"showTurtle\")) return;\r\n\r\n                sh.setShowTurtle(showTurtle);\r\n\r\n            }, false, false, 'showTurtle == true bewirkt, dass am Ort der Turtle ein rotes Dreieck gezeichnet wird.', false));\r\n\r\n        this.addMethod(new Method(\"copy\", new Parameterlist([\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: TurtleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"copy\")) return;\r\n\r\n                return sh.getCopy(<Klass>o.class);\r\n\r\n            }, false, false, 'Erstellt eine Kopie des Turtle-Objekts und gibt es zurück.', false));\r\n\r\n        this.addMethod(new Method(\"clear\", new Parameterlist([\r\n        ]), this,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let sh: TurtleHelper = o.intrinsicData[\"Actor\"];\r\n\r\n                if (sh.testdestroyed(\"clear\")) return;\r\n\r\n                return sh.clear();\r\n\r\n            }, false, false, 'Löscht alle bis jetzt mit der Turtle gezeichneten Strecken.', false));\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\ntype LineElement = {\r\n    x: number,\r\n    y: number,\r\n    color: number,\r\n    alpha: number,\r\n    lineWidth: number\r\n}\r\n\r\nexport class TurtleHelper extends FilledShapeHelper {\r\n\r\n    lineElements: LineElement[] = [];\r\n    turtleAngleDeg: number = 0; // in Rad\r\n\r\n    isFilled: boolean = false;\r\n\r\n    turtle: PIXI.Graphics;\r\n    lineGraphic: PIXI.Graphics;\r\n\r\n    xSum: number = 0;\r\n    ySum: number = 0;\r\n\r\n    initialHitPolygonDirty: boolean = true;\r\n\r\n    turtleSize: number = 40;\r\n\r\n    penIsDown: boolean = true;\r\n\r\n    lastLineWidth: number = 0;\r\n    lastColor: number = 0;\r\n    lastAlpha: number = 0;\r\n\r\n    lastTurtleAngleDeg: number = 0; // angle in Rad\r\n\r\n    renderJobPresent: boolean = false;\r\n\r\n    constructor(xStart: number, yStart: number, private showTurtle: boolean,\r\n        interpreter: Interpreter, runtimeObject: RuntimeObject) {\r\n        super(interpreter, runtimeObject);\r\n\r\n        this.lineElements.push({\r\n            x: xStart,\r\n            y: yStart,\r\n            color: 0,\r\n            alpha: 1,\r\n            lineWidth: 1\r\n        });\r\n        this.calculateCenter();\r\n\r\n        this.borderColor = 0xffffff;\r\n\r\n        this.hitPolygonInitial = [];\r\n\r\n        let container = new PIXI.Container();\r\n        this.displayObject = container;\r\n\r\n        this.lineGraphic = new PIXI.Graphics();\r\n        container.addChild(this.lineGraphic);\r\n        this.lineGraphic.moveTo(xStart, yStart);\r\n\r\n        this.turtle = new PIXI.Graphics();\r\n        container.addChild(this.turtle);\r\n        this.turtle.visible = this.showTurtle;\r\n        this.initTurtle(0, 0, this.turtleAngleDeg);\r\n        this.moveTurtleTo(xStart, yStart, this.turtleAngleDeg);\r\n\r\n\r\n        // let g: PIXI.Graphics = <any>this.displayObject;\r\n\r\n        this.worldHelper.stage.addChild(this.displayObject);\r\n\r\n        this.addToDefaultGroupAndSetDefaultVisibility();\r\n\r\n    }\r\n\r\n    calculateCenter() {\r\n        let length = this.lineElements.length;\r\n        let lastLineElement = this.lineElements[length - 1];\r\n        this.xSum += lastLineElement.x;\r\n        this.ySum += lastLineElement.y;\r\n        this.centerXInitial = this.xSum / length;\r\n        this.centerYInitial = this.ySum / length;\r\n    }\r\n\r\n    closeAndFill(closeAndFill: boolean) {\r\n        if (closeAndFill != this.isFilled) {\r\n            this.isFilled = closeAndFill;\r\n            this.render();\r\n            this.initialHitPolygonDirty = true;\r\n        }\r\n    }\r\n\r\n    setShowTurtle(show: boolean) {\r\n        this.turtle.visible = show;\r\n    }\r\n\r\n    turn(angleDeg: number) {\r\n        this.turtleAngleDeg -= angleDeg;\r\n        if(Math.abs(this.turtleAngleDeg) > 360){\r\n            this.turtleAngleDeg -= Math.floor(this.turtleAngleDeg/360)*360;\r\n        }\r\n        let lastLineElement: LineElement = this.lineElements[this.lineElements.length - 1];\r\n        this.moveTurtleTo(lastLineElement.x, lastLineElement.y, this.turtleAngleDeg);\r\n    }\r\n\r\n    rotate(angleInDegrees: number, cx?: number, cy?: number) {\r\n        // this.turn(angleInDegrees);\r\n        super.rotate(angleInDegrees, cx, cy);\r\n    }\r\n\r\n    getCopy(klass: Klass): RuntimeObject {\r\n\r\n        let ro: RuntimeObject = new RuntimeObject(klass);\r\n        let rh: TurtleHelper = new TurtleHelper(this.lineElements[0].x, this.lineElements[0].y,\r\n            this.showTurtle, this.worldHelper.interpreter, ro);\r\n        ro.intrinsicData[\"Actor\"] = rh;\r\n\r\n        rh.turtleAngleDeg = this.turtleAngleDeg;\r\n\r\n        rh.copyFrom(this);\r\n        rh.render();\r\n\r\n        return ro;\r\n    }\r\n\r\n    newTurtleX: number;\r\n    newTurtleY: number;\r\n    newAngleDeg: number;\r\n\r\n    forward(length: number) {\r\n\r\n        let lastLineElement: LineElement = this.lineElements[this.lineElements.length - 1];\r\n\r\n        let turtleAngleRad = this.turtleAngleDeg/180.0*Math.PI;\r\n\r\n        let newLineElement: LineElement = {\r\n            x: lastLineElement.x + length * Math.cos(turtleAngleRad),\r\n            y: lastLineElement.y + length * Math.sin(turtleAngleRad),\r\n            color: this.penIsDown ? this.borderColor : null,\r\n            alpha: this.borderAlpha,\r\n            lineWidth: this.borderWidth\r\n        }\r\n\r\n        this.lineElements.push(newLineElement);\r\n\r\n        // if (this.isFilled) {\r\n        //     this.render();\r\n        // } else {\r\n        //     if (this.borderColor != null) {\r\n        //         // this.lineGraphic.moveTo(lastLineElement.x, lastLineElement.y);\r\n        //         this.lineGraphic.lineStyle(this.borderWidth, this.borderColor, this.borderAlpha, 0.5);\r\n        //         this.lineGraphic.lineTo(newLineElement.x, newLineElement.y);\r\n        //         console.log(\"LineTo: \" + newLineElement.x + \", \" + newLineElement.y);\r\n        //     } else {\r\n        //         this.lineGraphic.moveTo(newLineElement.x, newLineElement.y);\r\n        //         console.log(\"MoveTo: \" + newLineElement.x + \", \" + newLineElement.y);\r\n        //     }\r\n        // }\r\n\r\n        this.hitPolygonDirty = true;\r\n        this.initialHitPolygonDirty = true;\r\n        this.calculateCenter();\r\n\r\n        this.newTurtleX = newLineElement.x;\r\n        this.newTurtleY = newLineElement.y;\r\n        this.newAngleDeg = this.turtleAngleDeg;\r\n\r\n        // don't render more frequent than every 1/100 s\r\n        if (!this.renderJobPresent) {\r\n            this.renderJobPresent = true;\r\n            setTimeout(() => {\r\n                this.renderJobPresent = false;\r\n                this.render();\r\n                this.moveTurtleTo(this.newTurtleX, this.newTurtleY, this.turtleAngleDeg);\r\n            }, 100);\r\n        }\r\n\r\n    }\r\n\r\n    moveTo(x: number, y: number) {\r\n        let newLineElement: LineElement = {\r\n            x: x,\r\n            y: y,\r\n            color: null,\r\n            alpha: this.borderAlpha,\r\n            lineWidth: this.borderWidth\r\n        }\r\n\r\n        this.lineElements.push(newLineElement);\r\n\r\n        this.hitPolygonDirty = true;\r\n        this.initialHitPolygonDirty = true;\r\n        this.calculateCenter();\r\n        this.moveTurtleTo(newLineElement.x, newLineElement.y, this.turtleAngleDeg);\r\n    }\r\n\r\n\r\n    initTurtle(x: number, y: number, angleDeg: number): void {\r\n        this.turtle.clear();\r\n        this.turtle.lineStyle(3, 0xff0000, 1, 0.5);\r\n        this.turtle.moveTo(x, y);\r\n\r\n        let angleRad = angleDeg/180.0*Math.PI;\r\n\r\n        let vx = Math.cos(angleRad);\r\n        let vy = Math.sin(angleRad);\r\n\r\n        let vxp = -Math.sin(angleRad);\r\n        let vyp = Math.cos(angleRad);\r\n\r\n        let lengthForward = this.turtleSize / 2;\r\n        let lengthBackward = this.turtleSize / 4;\r\n        let lengthBackwardP = this.turtleSize / 4;\r\n\r\n        this.turtle.moveTo(x + vx * lengthForward, y + vy * lengthForward);\r\n        this.turtle.lineTo(x - vx * lengthBackward + vxp * lengthBackwardP, y - vy * lengthBackward + vyp * lengthBackwardP);\r\n        this.turtle.lineTo(x - vx * lengthBackward - vxp * lengthBackwardP, y - vy * lengthBackward - vyp * lengthBackwardP);\r\n        this.turtle.lineTo(x + vx * lengthForward, y + vy * lengthForward);\r\n    }\r\n\r\n    moveTurtleTo(x: number, y: number, angleDeg: number){\r\n        this.turtle.localTransform.identity();\r\n        this.turtle.localTransform.rotate(angleDeg/180.0*Math.PI);\r\n        this.turtle.localTransform.translate(x, y);\r\n\r\n        // this.turtle.localTransform.translate(-this.turtleX, -this.turtleY);\r\n        // this.turtle.localTransform.rotate((angleDeg - this.lastTurtleAngleDeg)/180.0*Math.PI);\r\n        // this.turtle.localTransform.translate(x, y);\r\n        //@ts-ignore\r\n        this.turtle.transform.onChange();\r\n        this.turtle.updateTransform();\r\n\r\n        this.lastTurtleAngleDeg = this.turtleAngleDeg;\r\n    }\r\n\r\n    render(): void {\r\n\r\n        let g: PIXI.Graphics = this.lineGraphic;\r\n\r\n        this.lastLineWidth = 0;\r\n        this.lastColor = 0;\r\n        this.lastAlpha = 0;\r\n\r\n        if (this.displayObject == null) {\r\n            g = new PIXI.Graphics();\r\n            this.displayObject = g;\r\n            this.worldHelper.stage.addChild(g);\r\n\r\n        } else {\r\n            g.clear();\r\n        }\r\n\r\n        if (this.fillColor != null && this.isFilled) {\r\n            g.beginFill(this.fillColor, this.fillAlpha);\r\n        }\r\n\r\n        let firstPoint = this.lineElements[0];\r\n        g.moveTo(firstPoint.x, firstPoint.y);\r\n\r\n        if (this.isFilled) {\r\n            g.lineStyle(this.borderWidth, this.borderColor, this.borderAlpha, 0.5);\r\n        }\r\n        for (let i = 1; i < this.lineElements.length; i++) {\r\n            let le: LineElement = this.lineElements[i];\r\n            if (le.color != null) {\r\n                if (!this.isFilled) {\r\n                    if (le.lineWidth != this.lastLineWidth || le.color != this.lastColor || le.alpha != this.lastAlpha) {\r\n                        g.lineStyle(le.lineWidth, le.color, le.alpha, 0.5)\r\n                        this.lastLineWidth = le.lineWidth;\r\n                        this.lastColor = le.color;\r\n                        this.lastAlpha = le.alpha;\r\n                    }\r\n                }\r\n                g.lineTo(le.x, le.y);\r\n                // console.log(\"LineTo: \" + le.x + \", \" + le.y);\r\n            } else {\r\n                g.moveTo(le.x, le.y);\r\n                // console.log(\"MoveTo: \" + le.x + \", \" + le.y);\r\n            }\r\n        }\r\n\r\n        if (this.isFilled) {\r\n            g.closePath();\r\n        }\r\n\r\n        if (this.fillColor != null && this.isFilled) {\r\n            g.endFill();\r\n        }\r\n    };\r\n\r\n    collidesWith(shapeHelper: any) {\r\n\r\n        if (shapeHelper instanceof TurtleHelper && shapeHelper.initialHitPolygonDirty) {\r\n            shapeHelper.setupInitialHitPolygon();\r\n        }\r\n\r\n        if (this.initialHitPolygonDirty) {\r\n            this.setupInitialHitPolygon();\r\n            this.transformHitPolygon();\r\n            this.render();\r\n        }\r\n\r\n        let bb = this.displayObject.getBounds();\r\n        let bb1 = shapeHelper.displayObject.getBounds();\r\n\r\n        if (bb.left > bb1.right || bb1.left > bb.right) return false;\r\n\r\n        if (bb.top > bb1.bottom || bb1.top > bb.bottom) return false;\r\n\r\n        if (shapeHelper[\"shapes\"]) {\r\n            return shapeHelper.collidesWith(this);\r\n        }\r\n\r\n        if (this.hitPolygonInitial == null || shapeHelper.hitPolygonInitial == null) return true;\r\n\r\n        // boundig boxes collide, so check further:\r\n        if (this.hitPolygonDirty) this.transformHitPolygon();\r\n        if (shapeHelper.hitPolygonDirty) shapeHelper.transformHitPolygon();\r\n\r\n        if(shapeHelper. hitPolygonTransformed.length == 2 && !this.isFilled){\r\n            return steckenzugSchneidetStreckenzug(this.hitPolygonTransformed, shapeHelper.hitPolygonTransformed);\r\n        }\r\n\r\n        return polygonBerührtPolygon(this.hitPolygonTransformed, shapeHelper.hitPolygonTransformed);\r\n\r\n    }\r\n\r\n    setupInitialHitPolygon() {\r\n        this.hitPolygonInitial = this.lineElements.map((le) => { return { x: le.x, y: le.y } });\r\n    }\r\n\r\n    clear(x: number = null, y: number = null, angle: number = null) {\r\n        let lastLineElement = this.lineElements.pop();\r\n        if(x == null) x = lastLineElement.x;\r\n        if(y == null) y = lastLineElement.y;\r\n\r\n        this.lineElements = [];\r\n\r\n        this.lineElements.push({\r\n            x: x,\r\n            y: y,\r\n            color: 0,\r\n            alpha: 1,\r\n            lineWidth: 1\r\n        });\r\n        this.calculateCenter();\r\n\r\n        this.hitPolygonInitial = [];\r\n        if(angle != null){\r\n            this.turtleAngleDeg = angle;\r\n            this.lastTurtleAngleDeg = 0;\r\n            this.borderColor = 0;\r\n            this.turtleSize = 40;\r\n        }\r\n        this.render();\r\n        if(angle != null){\r\n            this.moveTurtleTo(x, y, angle);\r\n        }\r\n    }\r\n\r\n\r\n    touchesAtLeastOneFigure(): boolean {\r\n        let lastLineElement: LineElement = this.lineElements[this.lineElements.length - 1];\r\n        let x = lastLineElement.x;\r\n        let y = lastLineElement.y;\r\n\r\n        for (let sh of this.worldHelper.shapes) {\r\n            if (sh != this && sh.containsPoint(x, y)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    touchesColor(farbe: number): boolean {\r\n        let lastLineElement: LineElement = this.lineElements[this.lineElements.length - 1];\r\n        let x = lastLineElement.x;\r\n        let y = lastLineElement.y;\r\n\r\n        for (let sh of this.worldHelper.shapes) {\r\n            if (sh != this && sh.containsPoint(x, y)) {\r\n                if (sh instanceof FilledShapeHelper && sh.fillColor == farbe) return true;\r\n                // if(sh instanceof TurtleHelper) TODO\r\n            }\r\n        }\r\n    }\r\n\r\n    touchesShape(shape: ShapeHelper) {\r\n        let lastLineElement: LineElement = this.lineElements[this.lineElements.length - 1];\r\n        let x = lastLineElement.x;\r\n        let y = lastLineElement.y;\r\n        return shape.containsPoint(x, y);\r\n    }\r\n\r\n    containsPoint(x: number, y: number) {\r\n\r\n        if (this.initialHitPolygonDirty) {\r\n            this.setupInitialHitPolygon();\r\n            this.transformHitPolygon();\r\n            this.render();\r\n        }\r\n\r\n        if (!this.displayObject.getBounds().contains(x, y)) return false;\r\n\r\n        if (this.hitPolygonInitial == null) return true;\r\n\r\n        if (this.hitPolygonDirty) this.transformHitPolygon();\r\n\r\n        if(this.isFilled){\r\n            return polygonEnthältPunkt(this.hitPolygonTransformed, { x: x, y: y });\r\n        } else {\r\n            return streckenzugEnthältPunkt(this.hitPolygonTransformed, { x: x, y: y });\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { Module } from \"../compiler/parser/Module.js\";\r\nimport { Klass, Visibility } from \"../compiler/types/Class.js\";\r\nimport { doublePrimitiveType, intPrimitiveType, stringPrimitiveType } from \"../compiler/types/PrimitiveTypes.js\";\r\nimport { Attribute, Method, Parameterlist, Value } from \"../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../interpreter/RuntimeObject.js\";\r\n\r\nexport class RandomClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Random\", module, \"Zufallszahlengenerator\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        this.setupAttributeIndicesRecursive();\r\n\r\n\r\n        this.addMethod(new Method(\"nextInt\", new Parameterlist([\r\n            { identifier: \"bound\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let bound: number = parameters[1].value;\r\n\r\n                return Math.floor(Math.random()*bound);\r\n\r\n            }, false, false, 'Gibt eine ganzzahlige Zufallszahl aus der Menge {0, 1, ..., bound - 1} zurück.', false));\r\n\r\n        this.addMethod(new Method(\"randint\", new Parameterlist([\r\n            { identifier: \"from\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n            { identifier: \"to\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let from: number = parameters[1].value;\r\n                let to: number = parameters[2].value;\r\n\r\n                return Math.floor(Math.random()*(to - from + 1) + from);\r\n\r\n            }, false, true, 'Gibt eine ganzzahlige Zufallszahl aus der Menge {from, from + 1, ..., to} zurück.', false));\r\n\r\n        this.addMethod(new Method(\"randdouble\", new Parameterlist([\r\n            { identifier: \"from\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n            { identifier: \"to\", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true, isEllipsis: false },\r\n        ]), doublePrimitiveType,\r\n            (parameters) => {\r\n\r\n                let from: number = parameters[1].value;\r\n                let to: number = parameters[2].value;\r\n\r\n                return Math.random()*(to - from) + from;\r\n\r\n            }, false, true, 'Gibt eine Zufallszahl aus dem Intervall [from, to[ zurück.', false));\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { Enum } from \"../../compiler/types/Enum.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { TokenType } from \"../../compiler/lexer/Token.js\";\r\n\r\nexport class DirectionClass extends Enum {\r\n\r\n    constructor(module: Module){\r\n        super(\"Direction\", module, [\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"top\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"right\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"bottom\"\r\n            },\r\n            {\r\n                type: TokenType.pushEnumValue,\r\n                position: null,\r\n                identifier: \"left\"\r\n            }\r\n        ]);\r\n\r\n        this.documentation = \"Richtung (oben, rechts, unten, links)\"\r\n    }\r\n\r\n}","type Patch = {\r\n    old: RegExp, \r\n    new: string\r\n}\r\n\r\nexport class Patcher {\r\n\r\n    static patches: Patch[] = [\r\n        {old: /SpriteLibrary.Ship_Adrian,\\s*0/g, new: \"SpriteLibrary.Space_Shooter_1, 0\"},\r\n        {old: /SpriteLibrary.Ship_Adrian,\\s*1/g, new: \"SpriteLibrary.Space_Shooter_1, 1\"},\r\n        {old: /SpriteLibrary.Ship_Adrian,\\s*2/g, new: \"SpriteLibrary.Space_Shooter_1, 2\"},\r\n        {old: /SpriteLibrary.Ship_Adrian,\\s*3/g, new: \"SpriteLibrary.Space_Shooter_1, 3\"},\r\n        {old: /SpriteLibrary.Ship_Adrian,\\s*4/g, new: \"SpriteLibrary.Space_Shooter_1, 4\"},\r\n\r\n        {old: /SpriteLibrary.Schuss_Adrian,\\s*0/g, new: \"SpriteLibrary.Space_Shooter_1, 5\"},\r\n        {old: /SpriteLibrary.Schuss_Adrian,\\s*1/g, new: \"SpriteLibrary.Space_Shooter_1, 6\"},\r\n        {old: /SpriteLibrary.Schuss_Adrian,\\s*2/g, new: \"SpriteLibrary.Space_Shooter_1, 7\"},\r\n        {old: /SpriteLibrary.Schuss_Adrian,\\s*3/g, new: \"SpriteLibrary.Space_Shooter_1, 8\"},\r\n        {old: /SpriteLibrary.Schuss_Adrian,\\s*4/g, new: \"SpriteLibrary.Space_Shooter_1, 9\"},\r\n\r\n        {old: /SpriteLibrary.Asteroid_Adrian,\\s*0/g, new: \"SpriteLibrary.Space_Shooter_1, 10\"},\r\n        {old: /SpriteLibrary.Gegner_Adrian,\\s*0/g, new: \"SpriteLibrary.Space_Shooter_1, 11\"},\r\n\r\n        {old: /SpriteLibrary.Explosion_Adrian,\\s*0/g, new: \"SpriteLibrary.Space_Shooter_1, 12\"},\r\n        {old: /SpriteLibrary.Explosion_Adrian,\\s*1/g, new: \"SpriteLibrary.Space_Shooter_1, 13\"},\r\n        {old: /SpriteLibrary.Explosion_Adrian,\\s*2/g, new: \"SpriteLibrary.Space_Shooter_1, 14\"},\r\n        {old: /SpriteLibrary.Explosion_Adrian,\\s*3/g, new: \"SpriteLibrary.Space_Shooter_1, 15\"},\r\n        {old: /SpriteLibrary.Explosion_Adrian,\\s*4/g, new: \"SpriteLibrary.Space_Shooter_1, 16\"},\r\n        {old: /SpriteLibrary.Explosion_Adrian,\\s*5/g, new: \"SpriteLibrary.Space_Shooter_1, 17\"},\r\n        {old: /SpriteLibrary.Explosion_Adrian,\\s*6/g, new: \"SpriteLibrary.Space_Shooter_1, 18\"},\r\n        {old: /SpriteLibrary.Explosion_Adrian,\\s*7/g, new: \"SpriteLibrary.Space_Shooter_1, 19\"},\r\n        {old: /SpriteLibrary.Explosion_Adrian,\\s*8/g, new: \"SpriteLibrary.Space_Shooter_1, 20\"},\r\n        {old: /SpriteLibrary.Explosion_Adrian,\\s*9/g, new: \"SpriteLibrary.Space_Shooter_1, 21\"},\r\n        {old: /SpriteLibrary.Explosion_Adrian,\\s*10/g, new: \"SpriteLibrary.Space_Shooter_1, 22\"},\r\n        {old: /SpriteLibrary.Explosion_Adrian,\\s*11/g, new: \"SpriteLibrary.Space_Shooter_1, 23\"},\r\n    ] \r\n\r\n    static patch(text: string): {patchedText: string, modified: boolean} {\r\n\r\n        let modified: boolean = false;\r\n\r\n        for(let patch of Patcher.patches){\r\n            if(text.match(patch.old) != null){\r\n                text = text.replace(patch.old, patch.new);\r\n                modified = true;\r\n            }\r\n        }\r\n\r\n        return {patchedText: text, modified: modified}\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}","export class Boxes3d {\r\n    public static createCube3d(material: Pixi3d.Material = new Pixi3d.StandardMaterial()){\r\n        return new Pixi3d.Mesh3D(this.createCube3dMesh(), material);\r\n    }\r\n    public static createCube3dMesh() {\r\n        return Object.assign(new Pixi3d.MeshGeometry3D(), {\r\n            positions: {\r\n                buffer: new Float32Array([-1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1,  // 0, 1, 2, 3\r\n                -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1,  // 4, 5, 6, 7\r\n                    1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, // 8, 9, 10, 11\r\n                    1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1,  // 12, 13, 14, 15\r\n                    1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1,  // 16, 17, 18, 19\r\n                -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1]) // 20, 21, 22, 23\r\n            },\r\n            indices: {\r\n                buffer: new Uint8Array([0, 1, 2, 0, 3, 1, 4, 5, 6, 4, 7, 5, 8, 9, 10, 8, 11, 9, 12, 13, 14, 12, 15, 13, 16, 17, 18, 16, 19, 17, 20, 21, 22, 20, 23, 21])\r\n            },\r\n            normals: {\r\n                buffer: new Float32Array([-1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0])\r\n            },\r\n            uvs: [{\r\n                buffer: new Float32Array([\r\n                    0.66666, 0.00, 0.33333, 1.00,  0.66666, 1.00, 0.33333, 0.00, \r\n                    0.66666, 0.00, 0.33333, 1.00, 0.66666, 1.00, 0.33333, 0.00, \r\n                    0.66666, 0.00, 0.33333, 1.00, 0.66666, 1.00, 0.33333, 0.00, \r\n                    0.66666, 0.00, 0.33333, 1.00, 0.66666, 1.00, 0.33333, 0.00, \r\n                    0,       0,    0.33333, 0.25, 0.33333, 0,    0,       0.25, \r\n                    0.66666, 0, 1.0, 1.0, 1.0, 0, 0.66666, 1.00])\r\n                // buffer: new Float32Array([0.66666, 1, 0.33333, 0.75, 0.33333, 1,   0.66666, 0.75, 0.66666, 0.75, 0.33333, 0.5, 0.33333, 0.75, 0.66666, 0.5, \r\n                //  0.66666, 0.5, 0.33333, 0.25, 0.33333, 0.5, 0.66666, 0.25, 0.66666, 0.25, 0.33333, 0, 0.33333, 0.25, 0.66666, 0, \r\n                //  0.33333, 0.25, 0.125, 0.5, 0.33333, 0.5, 0.125, 0.25, \r\n                //1.0, 0.25, 0.66666, 0.5, 1.0, 0.5, 0.66666, 0.25])\r\n            }],\r\n            tangents: {\r\n                buffer: new Float32Array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 1])\r\n            }\r\n        })\r\n    }\r\n\r\n    public static createHalfheightCube3d(material: Pixi3d.Material = new Pixi3d.StandardMaterial()){\r\n        return new Pixi3d.Mesh3D(this.createHalfheightCube3dMesh(), material);\r\n    }\r\n    public static createHalfheightCube3dMesh() {\r\n        return Object.assign(new Pixi3d.MeshGeometry3D(), {\r\n            positions: {\r\n                buffer: new Float32Array([-1, 1, 1, -1, 0, -1, -1, 0, 1, -1, 1, -1,  // 0, 1, 2, 3\r\n                -1, 1, -1, 1, 0, -1, -1, 0, -1, 1, 1, -1,  // 4, 5, 6, 7\r\n                    1, 1, -1, 1, 0, 1, 1, 0, -1, 1, 1, 1, // 8, 9, 10, 11\r\n                    1, 1, 1, -1, 0, 1, 1, 0, 1, -1, 1, 1,  // 12, 13, 14, 15\r\n                    1, 0, 1, -1, 0, -1, 1, 0, -1, -1, 0, 1,  // 16, 17, 18, 19\r\n                -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1]) // 20, 21, 22, 23\r\n            },\r\n            indices: {\r\n                buffer: new Uint8Array([0, 1, 2, 0, 3, 1, 4, 5, 6, 4, 7, 5, 8, 9, 10, 8, 11, 9, 12, 13, 14, 12, 15, 13, 16, 17, 18, 16, 19, 17, 20, 21, 22, 20, 23, 21])\r\n            },\r\n            normals: {\r\n                buffer: new Float32Array([-1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0])\r\n            },\r\n            uvs: [{\r\n                buffer: new Float32Array([\r\n                    0.66666, 0.00, 0.33333, 0.50,  0.66666, 0.50, 0.33333, 0.00, \r\n                    0.66666, 0.00, 0.33333, 0.50,  0.66666, 0.50, 0.33333, 0.00, \r\n                    0.66666, 0.00, 0.33333, 0.50,  0.66666, 0.50, 0.33333, 0.00, \r\n                    0.66666, 0.00, 0.33333, 0.50,  0.66666, 0.50, 0.33333, 0.00, \r\n                    0,       0,    0.33333, 0.25, 0.33333, 0,    0,       0.25, \r\n                    0.66666, 0, 1.0, 1.0, 1.0, 0, 0.66666, 1.00])\r\n                // buffer: new Float32Array([0.6, 1, 0.4, 0.75, 0.4, 1, 0.6, 0.75, 0.6, 0.75, 0.4, 0.5, 0.4, 0.75, \r\n                //                           0.6, 0.5, 0.6, 0.5, 0.4, 0.25, 0.4, 0.5, 0.6, 0.25, 0.6, 0.25, 0.4, 0, \r\n                //                           0.4, 0.25, 0.6, 0, 0.4, 0.25, 0.125, 0.5, 0.4, 0.5, 0.125, 0.25, 1.0, 0.25, 0.6, \r\n                //                           0.5, 1.0, 0.5, 0.6, 0.25])\r\n            }],\r\n            tangents: {\r\n                buffer: new Float32Array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 1])\r\n            }\r\n        })\r\n    }\r\n\r\n    public static createPlane3d(repeatTextureU: number = 1, repeatTextureV: number = 1, material: Pixi3d.Material = new Pixi3d.StandardMaterial()){\r\n        return new Pixi3d.Mesh3D(this.createPlane3dMesh(repeatTextureU, repeatTextureV), material);\r\n    }\r\n\r\n    public static createPlane3dMesh(repeatTextureU: number = 1, repeatTextureV: number = 1) {\r\n        return Object.assign(new Pixi3d.MeshGeometry3D(), {\r\n            positions: {\r\n              buffer: new Float32Array([-1, 0, 1, 1, 0, -1, -1, 0, -1, 1, 0, 1])\r\n            },\r\n            indices: {\r\n              buffer: new Uint8Array([0, 1, 2, 0, 3, 1])\r\n            },\r\n            normals: {\r\n              buffer: new Float32Array([0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0])\r\n            },\r\n            uvs: [{\r\n              buffer: new Float32Array([0, repeatTextureV, repeatTextureU, 0, 0, 0, repeatTextureU, repeatTextureV])\r\n            }]\r\n          })\r\n    }\r\n\r\n\r\n}\r\n","import { WorldHelper } from \"../World.js\";\r\nimport { Boxes3d } from \"./Boxes3d.js\";\r\n\r\nexport function getSpritesheetTexture(identifier: string, copy: boolean = false, renderer: PIXI.Renderer = null) {\r\n    let sheet = PIXI.Loader.shared.resources[\"spritesheet\"].spritesheet;\r\n    let texture = sheet.textures[identifier];\r\n\r\n    if (copy) {\r\n        let sprite = new PIXI.Sprite(texture);\r\n\r\n        let dynamicTexture1 = PIXI.RenderTexture.create({\r\n            width: sprite.width,\r\n            height: sprite.height,\r\n            scaleMode: PIXI.SCALE_MODES.NEAREST,\r\n            wrapMode: PIXI.WRAP_MODES.REPEAT\r\n        });\r\n\r\n        renderer.render(sprite, {\r\n            renderTexture: dynamicTexture1\r\n        });\r\n\r\n        return new Pixi3d.StandardMaterialTexture(dynamicTexture1.baseTexture);\r\n    } else {\r\n        let smt = new Pixi3d.StandardMaterialTexture(texture.baseTexture);\r\n        smt.transform = new Pixi3d.TextureTransform()\r\n        smt.transform.offset.set(\r\n            (texture.frame.x + 0) / texture.baseTexture.width,\r\n            (texture.frame.y + 0) / texture.baseTexture.height\r\n        )\r\n        smt.transform.scale.set(\r\n            texture.frame.width / texture.baseTexture.width,\r\n            texture.frame.height / texture.baseTexture.height\r\n        )\r\n        return smt;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class RobotMarker extends Pixi3d.Mesh3D {\r\n    constructor(geometry: Pixi3d.MeshGeometry3D, material: Pixi3d.Material, public farbe: string) {\r\n        super(geometry, material);\r\n    }\r\n}\r\n\r\nexport class RobotBrick extends Pixi3d.Mesh3D {\r\n    constructor(geometry: Pixi3d.MeshGeometry3D, material: Pixi3d.Material, public farbe: string) {\r\n        super(geometry, material);\r\n    }\r\n}\r\n\r\nexport class RobotCubeFactory {\r\n\r\n    farben: string[] = [\"rot\", \"gelb\", \"grün\", \"blau\"];\r\n    farbeToColorInfoMap: { [farbe: string]: number[] } = {\r\n        \"rot\": [1.0, 0.0, 0.0],\r\n        \"gelb\": [1.0, 1.0, 0.0],\r\n        \"grün\": [0.0, 1.0, 0.0],\r\n        \"blau\": [0.0, 0.0, 1.0]\r\n    }\r\n    farbeToMarkerMaterialMap: { [farbe: string]: Pixi3d.StandardMaterial } = {};\r\n    farbeToBrickMaterialMap: { [farbe: string]: Pixi3d.StandardMaterial } = {};\r\n\r\n\r\n    grassBrickMaterial: Pixi3d.StandardMaterial;\r\n    groundPlaneMaterial: Pixi3d.StandardMaterial;\r\n\r\n    planeMaterial: { [key: string]: Pixi3d.StandardMaterial } = {};\r\n\r\n    cloudMaterial: Pixi3d.StandardMaterial;\r\n\r\n    light1: Pixi3d.Light;\r\n    light2: Pixi3d.Light;\r\n    lightingEnvironment: Pixi3d.LightingEnvironment;\r\n\r\n\r\n\r\n    getBrick(farbe: string) {\r\n        return new RobotBrick(Boxes3d.createHalfheightCube3dMesh(), this.farbeToBrickMaterialMap[farbe], farbe);\r\n    }\r\n\r\n    getGrassBrick() {\r\n        return new Pixi3d.Mesh3D(Boxes3d.createCube3dMesh(), this.grassBrickMaterial);\r\n    }\r\n\r\n    getGrassPlane(x: number, z: number) {\r\n        let mesh = new Pixi3d.Mesh3D(Boxes3d.createPlane3dMesh(x, z), this.groundPlaneMaterial);\r\n        mesh.scale.x = x;\r\n        mesh.scale.z = z;\r\n        mesh.x += x - 1;\r\n        mesh.z += z - 1;\r\n        //let plane = Pixi3d.Mesh3D.createPlane();\r\n        // (<Pixi3d.StandardMaterial>plane.material).baseColor = new Pixi3d.Color(0, 1, 0, 1); // The base color will be blended together with base color texture (if available).\r\n        // plane.y = -0.5;\r\n        // plane.scale.set(10);\r\n        return mesh;\r\n    }\r\n\r\n    makePlane(container: Pixi3d.Container3D, x: number, y: number, z: number, widthX: number, widthZ: number, spriteOrColor: string | Pixi3d.Color) {\r\n        let material: Pixi3d.StandardMaterial;\r\n        if (typeof spriteOrColor == \"string\") {\r\n            material = this.getPlaneMaterial(spriteOrColor);\r\n        } else {\r\n            material = new Pixi3d.StandardMaterial();\r\n            this.initMaterial(material);\r\n            material.baseColor = spriteOrColor;\r\n        }\r\n        let mesh = new Pixi3d.Mesh3D(Boxes3d.createPlane3dMesh(widthX, widthZ), material);\r\n        mesh.y = y;\r\n        mesh.x = x;\r\n        mesh.z = z;\r\n        mesh.scale.set(widthX, 1, widthZ);\r\n        container.addChild(mesh);\r\n    }\r\n\r\n    getMarker(farbe: string) {\r\n        let marker = new RobotMarker(Boxes3d.createCube3dMesh(), this.farbeToMarkerMaterialMap[farbe], farbe);\r\n        marker.scale.set(0.9, 0.1, 0.9);\r\n        return marker;\r\n    }\r\n\r\n    getSidePlanes(worldX: number, worldY: number, sideSprite: string, radius: number, deep: number): Pixi3d.Mesh3D[] {\r\n        let planes: Pixi3d.Mesh3D[] = [];\r\n\r\n        let sideMaterial = this.getPlaneMaterial(sideSprite); //3d#3\r\n\r\n        let mesh1 = new Pixi3d.Mesh3D(Boxes3d.createPlane3dMesh(worldX, 1), sideMaterial);\r\n        mesh1.scale.x = worldX + 2 * radius;\r\n        mesh1.x += worldX - 1;\r\n        mesh1.y -= 1 + 2 * deep;\r\n        mesh1.z -= 1 + 2 * radius;\r\n        mesh1.rotationQuaternion.setEulerAngles(-90, 0, 180);\r\n        planes.push(mesh1);\r\n\r\n        let mesh2 = new Pixi3d.Mesh3D(Boxes3d.createPlane3dMesh(worldX, 1), sideMaterial);\r\n        mesh2.scale.x = worldX + 2 * radius;\r\n        mesh2.x += worldX - 1;\r\n        mesh2.y -= 1 + 2 * deep;\r\n        mesh2.z += 2 * worldY - 1 + 2 * radius;\r\n        mesh2.rotationQuaternion.setEulerAngles(90, 0, 0);\r\n        planes.push(mesh2);\r\n\r\n        let mesh3 = new Pixi3d.Mesh3D(Boxes3d.createPlane3dMesh(worldY, 1), sideMaterial);\r\n        mesh3.scale.x = worldY + 2 * radius;\r\n        mesh3.y -= 1 + 2 * deep;\r\n        mesh3.x -= 1 + 2 * radius;\r\n        mesh3.z += worldY - 1;\r\n        mesh3.rotationQuaternion.setEulerAngles(90, -90, 0);\r\n        planes.push(mesh3);\r\n\r\n        let mesh4 = new Pixi3d.Mesh3D(Boxes3d.createPlane3dMesh(worldY, 1), sideMaterial);\r\n        mesh4.scale.x = worldY + 2 * radius;\r\n        mesh4.y -= 1 + 2 * deep;\r\n        mesh4.x += 2 * worldX - 1 + 2 * radius;\r\n        mesh4.z += worldY - 1;\r\n        mesh4.rotationQuaternion.setEulerAngles(90, 90, 0);\r\n        planes.push(mesh4);\r\n\r\n        return planes;\r\n    }\r\n\r\n    getHorizontalPlanes(worldX: number, worldY: number, topSprite: string, radius: number, deep: number): Pixi3d.Mesh3D[] {\r\n        let planes: Pixi3d.Mesh3D[] = [];\r\n\r\n        let topMaterial = this.getPlaneMaterial(topSprite);\r\n\r\n        let mesh5 = new Pixi3d.Mesh3D(Boxes3d.createPlane3dMesh(worldY, 1), topMaterial);\r\n        mesh5.scale.x = worldX + 2 * radius;\r\n        mesh5.x += worldX - 1;\r\n        mesh5.y -= 2 + 2 * deep;\r\n        mesh5.z -= 2 + 2 * radius;\r\n        mesh5.rotationQuaternion.setEulerAngles(180, 0, 180);\r\n        planes.push(mesh5);\r\n\r\n        let mesh6 = new Pixi3d.Mesh3D(Boxes3d.createPlane3dMesh(worldX, 1), topMaterial);\r\n        mesh6.scale.x = worldX + 2 * radius;\r\n        mesh6.x += worldX - 1;\r\n        mesh6.y -= 2 + 2 * deep;\r\n        mesh6.z += 2 * worldY + 2 * radius;\r\n        mesh6.rotationQuaternion.setEulerAngles(0, 0, 0);\r\n        planes.push(mesh6);\r\n\r\n        let mesh7 = new Pixi3d.Mesh3D(Boxes3d.createPlane3dMesh(worldY, 1), topMaterial);\r\n        mesh7.scale.x = worldY + 2 * radius + 2;\r\n        mesh7.y -= 2 + 2 * deep;\r\n        mesh7.x -= 2 + 2 * radius;\r\n        mesh7.z += worldY - 1;\r\n        mesh7.rotationQuaternion.setEulerAngles(0, -90, 0);\r\n        planes.push(mesh7);\r\n\r\n        let mesh8 = new Pixi3d.Mesh3D(Boxes3d.createPlane3dMesh(worldY, 1), topMaterial);\r\n        mesh8.scale.x = worldY + 2 * radius + 2;\r\n        mesh8.y -= 2 + 2 * deep;\r\n        mesh8.x += 2 * worldX + 2 * radius;\r\n        mesh8.z += worldY - 1;\r\n        mesh8.rotationQuaternion.setEulerAngles(0, 90, 0);\r\n        planes.push(mesh8);\r\n\r\n        return planes;\r\n    }\r\n\r\n    makeClouds(container: Pixi3d.Container3D, height: number, originX: number, originZ: number) {\r\n        let count = 150;\r\n        let numberOfBatches = 20;\r\n        let todo = count;\r\n\r\n        let f = () => {\r\n            if (todo <= 0) return;\r\n            let radius = 1500;\r\n            let maxWidth = 20;\r\n            for (let i = 0; i < count / numberOfBatches; i++) {\r\n                todo--;\r\n                let distance = Math.sqrt(Math.random()) * radius;\r\n                let angle = Math.random() * 2 * Math.PI;\r\n\r\n                let x1 = Math.floor(distance * Math.cos(angle)) + originX;\r\n                let z1 = Math.floor(distance * Math.sin(angle)) + originZ;\r\n\r\n                let count = Math.random() * 10 + 2;\r\n\r\n                for (let j = 0; j < count; j++) {\r\n                    let mesh = Boxes3d.createCube3d(this.cloudMaterial);\r\n\r\n                    let scaleX = Math.floor(Math.random() * maxWidth + 2);\r\n                    let scaleY = Math.floor(Math.random() * maxWidth / 4 + 2);\r\n                    let scaleZ = Math.floor(Math.random() * maxWidth + 2);\r\n\r\n                    let dx = Math.floor(Math.random() * 3 * (5 + count + scaleX));\r\n                    let dz = Math.floor(Math.random() * 3 * (5 + count + scaleZ));\r\n\r\n                    mesh.x = x1 + dx;\r\n                    mesh.z = z1 + dz;\r\n\r\n                    mesh.y = height + scaleY / 2;\r\n\r\n                    mesh.scale.set(scaleX, scaleY, scaleZ);\r\n\r\n                    container.addChild(mesh);\r\n\r\n                }\r\n\r\n            }\r\n\r\n            setTimeout(f, 200);\r\n\r\n        }\r\n\r\n        f();\r\n\r\n    }\r\n\r\n    constructor(private worldHelper: WorldHelper, private camera: Pixi3d.Camera) {\r\n\r\n        let renderer = <PIXI.Renderer>worldHelper.app.renderer;\r\n\r\n        this.light1 = Object.assign(new Pixi3d.Light(), {\r\n            type: Pixi3d.LightType.ambient,\r\n            range: 100,\r\n            intensity: 30,\r\n            color: new Pixi3d.Color(1, 1, 1)\r\n        });\r\n        this.light1.position.set(-4, 4, 4);\r\n\r\n        this.light2 = Object.assign(new Pixi3d.Light(), {\r\n            type: Pixi3d.LightType.directional,\r\n            range: 600,\r\n            intensity: 4,\r\n            color: new Pixi3d.Color(1, 1, 1)\r\n        });\r\n        this.light2.position.set(12, 16, -12);\r\n        this.light2.rotationQuaternion.setEulerAngles(25, 45, 0);\r\n\r\n        this.lightingEnvironment = new Pixi3d.LightingEnvironment(<PIXI.Renderer>worldHelper.app.renderer);\r\n        this.lightingEnvironment.lights.push(this.light1, this.light2);\r\n\r\n\r\n        this.grassBrickMaterial = new Pixi3d.StandardMaterial();\r\n        this.initMaterial(this.grassBrickMaterial);\r\n        this.grassBrickMaterial.baseColorTexture = getSpritesheetTexture(\"robot#0\");\r\n\r\n        this.cloudMaterial = new Pixi3d.StandardMaterial();\r\n        this.initMaterial(this.cloudMaterial);\r\n        this.cloudMaterial.baseColor = new Pixi3d.Color(1.0, 1.0, 1.0, 0.5);\r\n\r\n        this.groundPlaneMaterial = new Pixi3d.StandardMaterial();\r\n        this.initMaterial(this.groundPlaneMaterial);\r\n        this.groundPlaneMaterial.baseColorTexture = getSpritesheetTexture(\"robot#2\", true, renderer);\r\n\r\n        for (let farbe of this.farben) {\r\n            let material = new Pixi3d.StandardMaterial();\r\n            this.initMaterial(material);\r\n            let colorInfo = this.farbeToColorInfoMap[farbe];\r\n            material.baseColor = new Pixi3d.Color(colorInfo[0], colorInfo[1], colorInfo[2], 1);\r\n            this.farbeToMarkerMaterialMap[farbe] = material;\r\n\r\n            let brickMaterial = new Pixi3d.StandardMaterial();\r\n            this.initMaterial(brickMaterial);\r\n            let index = this.farben.indexOf(farbe) + 4;\r\n            brickMaterial.baseColorTexture = getSpritesheetTexture(\"robot#\" + index);\r\n            this.farbeToBrickMaterialMap[farbe] = brickMaterial;\r\n        }\r\n\r\n    }\r\n\r\n    initMaterial(material: Pixi3d.StandardMaterial) {\r\n        material.camera = this.camera;\r\n        material.exposure = 1;\r\n        material.roughness = 0.9;\r\n        material.lightingEnvironment = this.lightingEnvironment;\r\n    }\r\n\r\n    getPlaneMaterial(spriteKey: string): Pixi3d.StandardMaterial {\r\n        let renderer = <PIXI.Renderer>this.worldHelper.app.renderer;\r\n\r\n        if (this.planeMaterial[spriteKey] != null) return this.planeMaterial[spriteKey];\r\n\r\n        let material = new Pixi3d.StandardMaterial();\r\n        this.initMaterial(material);\r\n        material.baseColorTexture = getSpritesheetTexture(spriteKey, true, renderer);\r\n        // material.doubleSided = true;\r\n        this.planeMaterial[spriteKey] = material;\r\n\r\n        return material;\r\n    }\r\n\r\n    makeSprite3d(textureKey: string, container: Pixi3d.Container3D){\r\n        let material = new Pixi3d.StandardMaterial();\r\n        this.initMaterial(material);\r\n        material.baseColorTexture = getSpritesheetTexture(textureKey, false);\r\n        material.alphaMode = Pixi3d.StandardMaterialAlphaMode.mask;\r\n        let sprite = Boxes3d.createPlane3d(1, 1, material);\r\n        container.addChild(sprite);\r\n        return sprite;\r\n    }\r\n\r\n}","import { Module } from \"../../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../../compiler/types/Class.js\";\r\nimport { booleanPrimitiveType, doublePrimitiveType, intPrimitiveType, stringPrimitiveType } from \"../../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../../interpreter/RuntimeObject.js\";\r\nimport { FilledShapeHelper } from \"../FilledShape.js\";\r\nimport { WorldHelper } from \"../World.js\";\r\nimport { Interpreter } from \"../../../interpreter/Interpreter.js\";\r\nimport { FilledShapeDefaults } from \"../FilledShapeDefaults.js\";\r\nimport { ShapeHelper } from \"../Shape.js\";\r\nimport { Boxes3d } from \"./Boxes3d.js\";\r\nimport { RobotBrick, RobotCubeFactory, RobotMarker } from \"./RobotCubeFactory.js\";\r\n\r\nexport class RobotClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"Robot\", module, \"Robot Karol\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n        let robotWorldType = <Klass>module.typeStore.getType(\"RobotWorld\");\r\n\r\n        // this.addAttribute(new Attribute(\"PI\", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, \"Die Kreiszahl Pi (3.1415...)\"));\r\n\r\n        this.addMethod(new Method(\"Robot\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let rh = new RobotHelper(module.main.getInterpreter(), o, 1, 1, 5, 8)\r\n                o.intrinsicData[\"Robot\"] = rh;\r\n\r\n            }, false, false, 'Instanziert ein neues Robot-Objekt. Der Roboter steht anfangs an der Stelle (1/1)', true));\r\n\r\n        this.addMethod(new Method(\"Robot\", new Parameterlist([\r\n            { identifier: \"startX\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"startY\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let startX: number = parameters[1].value;\r\n                let startY: number = parameters[2].value;\r\n\r\n                let rh = new RobotHelper(module.main.getInterpreter(), o, startX, startY, 5, 10)\r\n                o.intrinsicData[\"Robot\"] = rh;\r\n\r\n            }, false, false, 'Instanziert ein neues Robot-Objekt. Der Roboter wird anfangs an die Stelle (startX/startY) gesetzt.', true));\r\n\r\n        this.addMethod(new Method(\"Robot\", new Parameterlist([\r\n            { identifier: \"startX\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"startY\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"worldX\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"worldY\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let startX: number = parameters[1].value;\r\n                let startY: number = parameters[2].value;\r\n                let worldX: number = parameters[3].value;\r\n                let worldY: number = parameters[4].value;\r\n\r\n                let rh = new RobotHelper(module.main.getInterpreter(), o, startX, startY, worldX, worldY)\r\n                o.intrinsicData[\"Robot\"] = rh;\r\n\r\n            }, false, false, 'Instanziert ein neues Robot-Objekt. Der Roboter wird anfangs an die Stelle (startX/startY) gesetzt. Wenn die RobotWorld noch nicht instanziert ist, wird sie mit der Größe worldX * worldY neu erstellt.', true));\r\n\r\n        this.addMethod(new Method(\"Robot\", new Parameterlist([\r\n            { identifier: \"startX\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"startY\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"initialeWelt\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let startX: number = parameters[1].value;\r\n                let startY: number = parameters[2].value;\r\n                let initialeWelt: string = parameters[3].value;\r\n\r\n                let rh = new RobotHelper(module.main.getInterpreter(), o, startX, startY, 0, 0, initialeWelt)\r\n                o.intrinsicData[\"Robot\"] = rh;\r\n\r\n            }, false, false, 'Instanziert ein neues Robot-Objekt. Der Roboter wird anfangs an die Stelle (startX/startY) gesetzt. Wenn die RobotWorld noch nicht instanziert ist, wird sie auf Grundlage des Strings initialeWelt erstellt.', true));\r\n\r\n        this.addMethod(new Method(\"getWelt\", new Parameterlist([\r\n        ]), robotWorldType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                return rh.robotWorldHelper.runtimeObject;\r\n\r\n            }, false, false, 'Gibt das RobotWorld-Objekt zurück', false));\r\n\r\n        this.addMethod(new Method(\"rechtsDrehen\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                rh.direction.turnRight();\r\n                rh.adjustAngle();\r\n\r\n            }, false, false, 'Dreht den Roboter um 90° nach rechts.', false));\r\n\r\n        this.addMethod(new Method(\"linksDrehen\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                rh.direction.turnLeft();\r\n                rh.adjustAngle();\r\n\r\n            }, false, false, 'Dreht den Roboter um 90° nach links.', false));\r\n\r\n        this.addMethod(new Method(\"schritt\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                rh.schritt();\r\n\r\n            }, false, false, 'Lässt den Roboter einen Schritt nach vorne gehen.', false));\r\n\r\n        this.addMethod(new Method(\"schritt\", new Parameterlist([\r\n            { identifier: \"Anzahl\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let anzahl: number = parameters[1].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                for (let i = 0; i < anzahl; i++) {\r\n                    if (!rh.schritt()) break;\r\n                }\r\n\r\n            }, false, false, 'Lässt den Roboter Anzahl Schritte nach vorne gehen.', false));\r\n\r\n        this.addMethod(new Method(\"hinlegen\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                rh.hinlegen(\"rot\");\r\n\r\n            }, false, false, 'Lässt den Roboter einen roten Ziegel vor sich hinlegen.', false));\r\n\r\n        this.addMethod(new Method(\"markeLöschen\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                rh.markeLöschen();\r\n\r\n            }, false, false, 'Lässt den Roboter eine Marke, die direkt unter ihm liegt, löschen.', false));\r\n\r\n        this.addMethod(new Method(\"markeSetzen\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                rh.markeSetzen(\"gelb\");\r\n\r\n            }, false, false, 'Lässt den Roboter eine gelbe Marke direkt unter sich setzen.', false));\r\n\r\n        this.addMethod(new Method(\"markeSetzen\", new Parameterlist([\r\n            { identifier: \"Farbe\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let farbe: string = parameters[1].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                rh.markeSetzen(farbe);\r\n\r\n            }, false, false, 'Lässt den Roboter eine Marke der angegebenen Farbe direkt unter sich setzen.', false));\r\n\r\n        this.addMethod(new Method(\"hinlegen\", new Parameterlist([\r\n            { identifier: \"Anzahl\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let anzahl: number = parameters[1].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                for (let i = 0; i < anzahl; i++) {\r\n                    if (!rh.hinlegen(\"rot\")) break;\r\n                }\r\n\r\n            }, false, false, 'Lässt den Roboter Anzahl rote Ziegel vor sich hinlegen.', false));\r\n\r\n        this.addMethod(new Method(\"hinlegen\", new Parameterlist([\r\n            { identifier: \"Farbe\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let farbe: string = parameters[1].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                rh.hinlegen(farbe);\r\n\r\n            }, false, false, 'Lässt den Roboter einen Ziegel der angegebenen Farbe vor sich hinlegen.', false));\r\n\r\n        this.addMethod(new Method(\"aufheben\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                rh.aufheben();\r\n\r\n            }, false, false, 'Lässt den Roboter einen roten Ziegel vor sich aufheben.', false));\r\n\r\n        this.addMethod(new Method(\"aufheben\", new Parameterlist([\r\n            { identifier: \"Anzahl\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let anzahl: number = parameters[1].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                for (let i = 0; i < anzahl; i++) {\r\n                    if (!rh.aufheben()) break;\r\n                }\r\n\r\n            }, false, false, 'Lässt den Roboter Anzahl rote Ziegel vor sich aufheben.', false));\r\n\r\n        this.addMethod(new Method(\"warten\", new Parameterlist([\r\n            { identifier: \"ZeitInMillisekunden\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n            }, false, false, \"Pausiert das Programm für die angegebene Zeit in ms.\"));\r\n\r\n        this.addMethod(new Method(\"langsam\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n                module.main.getInterpreter().controlButtons.speedControl.setSpeedInStepsPerSecond(5);\r\n\r\n            }, false, false, \"Setzt die Ausführungsgeschwindigkeit auf 5 Programmschritte/Sekunde.\"));\r\n\r\n        this.addMethod(new Method(\"schnell\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n                module.main.getInterpreter().controlButtons.speedControl.setSpeedInStepsPerSecond(\"max\");\r\n            }, false, false, \"Setzt die Ausführungsgeschwindigkeit auf 'maximal'.\"));\r\n\r\n        this.addMethod(new Method(\"beenden\", new Parameterlist([\r\n        ]), null,\r\n            (parameters) => {\r\n                let console = module.main.getBottomDiv()?.console;\r\n                if (console != null) {\r\n                    console.writeConsoleEntry(\"Das Programm wurde durch einen Roboter angehalten.\", null, \"#0000ff\");\r\n                    console.showTab();\r\n                }\r\n                module.main.getInterpreter().stop();\r\n            }, false, false, \"Beendet das Programm.\"));\r\n\r\n        this.addMethod(new Method(\"istWand\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return rh.istWand();\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Roboter direkt vor einer Wand steht.\"));\r\n\r\n        this.addMethod(new Method(\"nichtIstWand\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return !rh.istWand();\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Roboter nicht direkt vor einer Wand steht.\"));\r\n\r\n        this.addMethod(new Method(\"istZiegel\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return rh.istZiegel(null);\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn direkt vor dem Roboter mindestens ein Ziegel liegt.\"));\r\n\r\n        this.addMethod(new Method(\"istZiegel\", new Parameterlist([\r\n            { identifier: \"Anzahl\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let anzahl: number = parameters[1].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return rh.istZiegel(anzahl);\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn direkt vor dem Roboter genau Anzahl Ziegel liegen.\"));\r\n\r\n        this.addMethod(new Method(\"istZiegel\", new Parameterlist([\r\n            { identifier: \"Farbe\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let farbe: string = parameters[1].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return rh.istZiegel(farbe);\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn auf dem Ziegelstapel direkt vor dem Roboter mindestens ein Ziegel mit der angegebenen Farbe liegt.\"));\r\n\r\n        this.addMethod(new Method(\"nichtIstZiegel\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return !rh.istZiegel(null);\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn direkt vor dem Roboter kein Ziegel liegt.\"));\r\n\r\n        this.addMethod(new Method(\"nichtIstZiegel\", new Parameterlist([\r\n            { identifier: \"Anzahl\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let anzahl: number = parameters[1].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return !rh.istZiegel(anzahl);\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn direkt vor dem Roboter nicht genau Anzahl Ziegel liegen.\"));\r\n\r\n        this.addMethod(new Method(\"nichtIstZiegel\", new Parameterlist([\r\n            { identifier: \"Farbe\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let farbe: string = parameters[1].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return !rh.istZiegel(farbe);\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn auf dem Ziegelstapel direkt vor dem Roboter kein Ziegel mit der angegebenen Farbe liegt.\"));\r\n\r\n        this.addMethod(new Method(\"istMarke\", new Parameterlist([\r\n            { identifier: \"Farbe\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let farbe: string = parameters[1].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return rh.istMarke(farbe);\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn unter dem Roboter eine Marke in der angegebenen Farbe liegt.\"));\r\n\r\n        this.addMethod(new Method(\"istMarke\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let farbe: string = parameters[1].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return rh.istMarke(null);\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn unter dem Roboter eine Marke (egal in welcher Farbe) liegt.\"));\r\n\r\n        this.addMethod(new Method(\"nichtIstMarke\", new Parameterlist([\r\n            { identifier: \"Farbe\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let farbe: string = parameters[1].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return !rh.istMarke(farbe);\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn unter dem Roboter keine Marke in der angegebenen Farbe liegt.\"));\r\n\r\n        this.addMethod(new Method(\"nichtIstMarke\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return !rh.istMarke(null);\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn unter dem Roboter keine Marke (egal in welcher Farbe) liegt.\"));\r\n\r\n        let himmelsrichtungen = [\"Norden\", \"Osten\", \"Süden\", \"Westen\"];\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            let hr: string = himmelsrichtungen[i];\r\n\r\n            this.addMethod(new Method(\"ist\" + hr, new Parameterlist([\r\n            ]), booleanPrimitiveType,\r\n                (parameters) => {\r\n\r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                    return rh.direction.index == i;\r\n\r\n                }, false, false, \"Gibt genau dann true zurück, wenn der Roboter nach \" + hr + \" blickt.\"));\r\n        }\r\n\r\n        this.addMethod(new Method(\"istLeer\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return rh.hatSteine == 0;\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Roboter keinen Stein mit sich trägt.\"));\r\n\r\n        this.addMethod(new Method(\"istVoll\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return rh.hatSteine == rh.maxSteine;\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Roboter die maximale Anzahl von Steinen mit sich trägt.\"));\r\n\r\n        this.addMethod(new Method(\"nichtIstLeer\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return rh.hatSteine > 0;\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Roboter mindestens einen Stein mit sich trägt.\"));\r\n\r\n        this.addMethod(new Method(\"hatZiegel\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return rh.hatSteine > 0;\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Roboter mindestens einen Stein mit sich trägt.\"));\r\n\r\n        this.addMethod(new Method(\"hatZiegel\", new Parameterlist([\r\n            { identifier: \"Anzahl\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let anzahl: number = parameters[1].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                return rh.hatSteine >= anzahl;\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Roboter mindestens Anzahl Steine mit sich trägt.\"));\r\n\r\n        this.addMethod(new Method(\"nichtIstVoll\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n                return rh.hatSteine < rh.maxSteine;\r\n\r\n            }, false, false, \"Gibt genau dann true zurück, wenn der Roboter weniger als die maximale Anzahl von Steinen mit sich trägt.\"));\r\n\r\n        this.addMethod(new Method(\"setzeAnzahlSteine\", new Parameterlist([\r\n            { identifier: \"Anzahl\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let anzahl: number = parameters[1].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                return rh.hatSteine = anzahl;\r\n\r\n            }, false, false, \"Befüllt den Rucksack des Roboters mit genau Anzahl Steinen.\"));\r\n\r\n        this.addMethod(new Method(\"setzeRucksackgröße\", new Parameterlist([\r\n            { identifier: \"Anzahl\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let anzahl: number = parameters[1].value;\r\n                let rh = <RobotHelper>o.intrinsicData[\"Robot\"];\r\n\r\n                return rh.maxSteine = anzahl;\r\n\r\n            }, false, false, \"Gibt dem Roboter einen Rucksack, der maximal Anzahl Steine fasst.\"));\r\n\r\n    }\r\n\r\n}\r\n\r\nexport class RobotWorldClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n\r\n        super(\"RobotWorld\", module, \"Welt für Robot Karol\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        // this.addAttribute(new Attribute(\"PI\", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, \"Die Kreiszahl Pi (3.1415...)\"));\r\n\r\n        this.addMethod(new Method(\"RobotWorld\", new Parameterlist([\r\n            { identifier: \"worldX\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            { identifier: \"worldY\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let worldX: number = parameters[1].value;\r\n                let worldY: number = parameters[2].value;\r\n\r\n                const interpreter = module.main.getInterpreter();\r\n\r\n                let rh = new RobotWorldHelper(interpreter, o, worldX, worldY, null);\r\n                o.intrinsicData[\"RobotWorldHelper\"] = rh;\r\n\r\n            }, false, false, 'Instanziert eine neue Robot-Welt', true));\r\n\r\n        this.addMethod(new Method(\"RobotWorld\", new Parameterlist([\r\n            { identifier: \"initialeWelt\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), null,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let initialeWelt: string = parameters[1].value;\r\n\r\n                const interpreter = module.main.getInterpreter();\r\n\r\n                let rh = new RobotWorldHelper(interpreter, o, 0, 0, initialeWelt);\r\n                o.intrinsicData[\"RobotWorldHelper\"] = rh;\r\n\r\n            }, false, false, 'Instanziert eine neue Robot-Welt.', true));\r\n\r\n            this.addMethod(new Method(\"setzeMaximalhöhe\", new Parameterlist([\r\n                { identifier: \"Anzahl\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            ]), booleanPrimitiveType,\r\n                (parameters) => {\r\n    \r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let anzahl: number = parameters[1].value;\r\n                    let rh = <RobotWorldHelper>o.intrinsicData[\"RobotWorldHelper\"];\r\n    \r\n                    return rh.maximumHeight = anzahl;\r\n    \r\n                }, false, false, \"Ändert die maximale Höhe der Ziegelstapel.\"));\r\n    \r\n            this.addMethod(new Method(\"setzeZiegel\", new Parameterlist([\r\n                { identifier: \"x\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n                { identifier: \"y\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n                { identifier: \"farbe\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n                { identifier: \"anzahl\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            ]), null,\r\n                (parameters) => {\r\n    \r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let x: number = parameters[1].value;\r\n                    let y: number = parameters[2].value;\r\n                    let farbe: string = parameters[3].value;\r\n                    let anzahl: number = parameters[4].value;\r\n                    let rh = <RobotWorldHelper>o.intrinsicData[\"RobotWorldHelper\"];\r\n                    \r\n                    if(x < 1 || x > rh.worldX || y < 1 || y > rh.worldY){\r\n                        rh.interpreter.throwException(`Die Position (${x}/${y}) ist außerhalb der Weltgrenzen.`);\r\n                        return;\r\n                    }\r\n\r\n                    for(let i = 0; i < anzahl; i++){\r\n                        rh.addBrick(x-1, y-1, farbe);\r\n                    }\r\n    \r\n                }, false, false, \"Setzt Anzahl Ziegel an der angegebenen Position mit der angegebenen Farbe. Die x- und y-Koordinaten beginnen bei 1.\"));\r\n    \r\n            this.addMethod(new Method(\"setzeMarke\", new Parameterlist([\r\n                { identifier: \"x\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n                { identifier: \"y\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n                { identifier: \"farbe\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n            ]), null,\r\n                (parameters) => {\r\n    \r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let x: number = parameters[1].value;\r\n                    let y: number = parameters[2].value;\r\n                    let farbe: string = parameters[3].value;\r\n                    let rh = <RobotWorldHelper>o.intrinsicData[\"RobotWorldHelper\"];\r\n\r\n                    if(x < 1 || x > rh.worldX || y < 1 || y > rh.worldY){\r\n                        rh.interpreter.throwException(`Die Position (${x}/${y}) ist außerhalb der Weltgrenzen.`);\r\n                        return;\r\n                    }\r\n\r\n                    rh.setMarker(x-1, y-1, farbe);\r\n    \r\n                }, false, false, \"Setzt einen Marker an der angegebenen Position mit der angegebenen Farbe. Die x- und y-Koordinaten beginnen bei 1.\"));\r\n    \r\n    \r\n    }\r\n\r\n}\r\n\r\nexport class RobotWorldHelper {\r\n\r\n    worldHelper: WorldHelper;\r\n\r\n    robotCubeFactory: RobotCubeFactory;\r\n    camera: Pixi3d.Camera;\r\n    displayObject: PIXI.DisplayObject;\r\n    container3D: Pixi3d.Container3D;\r\n\r\n    markers: RobotMarker[][] = [];    // x, y\r\n    bricks: RobotBrick[][][] = [];   // x, y, height\r\n\r\n    maximumHeight: number = 15;\r\n\r\n    robots: RobotHelper[] = [];\r\n\r\n    constructor(public interpreter: Interpreter, public runtimeObject: RuntimeObject,\r\n        public worldX: number, public worldY: number, initialeWelt: string) {\r\n\r\n        this.fetchWorld(interpreter);\r\n\r\n        if (this.worldHelper.robotWorldHelper != null) {\r\n            this.interpreter.throwException(\"Es wurde bereits ein Robot-World-Objekt instanziert. Davon kann es aber nur ein einziges geben. \\nTipp: Jedes Robot-Objekt kann das Robot-World-Objekt mit der getRobotWorld() holen.\");\r\n            return;\r\n        }\r\n\r\n        this.worldHelper.robotWorldHelper = this;\r\n\r\n        this.camera = new Pixi3d.Camera(<PIXI.Renderer>this.worldHelper.app.renderer);\r\n\r\n        this.robotCubeFactory = new RobotCubeFactory(this.worldHelper, this.camera);\r\n\r\n        this.markers = [];\r\n        this.bricks = [];\r\n\r\n        this.container3D = new Pixi3d.Container3D();\r\n        this.displayObject = this.container3D;\r\n        this.worldHelper.stage.addChild(this.displayObject);\r\n\r\n\r\n        if (initialeWelt != null) {\r\n            this.initFromString(initialeWelt);\r\n        } else {\r\n            this.initWorldArrays(worldX, worldY);\r\n        }\r\n\r\n        this.renderOrnamentsAndInitCamera();\r\n\r\n    }\r\n\r\n    adjustRobotPositions(x: number, y: number){\r\n        for(let robot of this.robots){\r\n            if(robot.x == x && robot.y == y){\r\n                robot.model.y = this.getBrickCount(x, y) + 1.6;\r\n            }\r\n        }\r\n    }\r\n\r\n    initWorldArrays(worldX: number, worldY: number) {\r\n        for (let x = 0; x < worldX; x++) {\r\n            let markerColumn = [];\r\n            this.markers.push(markerColumn);\r\n            let brickColumn = [];\r\n            this.bricks.push(brickColumn);\r\n            for (let y = 0; y < worldY; y++) {\r\n                markerColumn.push(null);\r\n                brickColumn.push([]);\r\n            }\r\n        }\r\n    }\r\n\r\n    fetchWorld(interpreter: Interpreter) {\r\n        let worldHelper = interpreter.worldHelper;\r\n        if (worldHelper == null) {\r\n            let w: RuntimeObject = new RuntimeObject(<Klass>interpreter.moduleStore.getType(\"World\").type);\r\n            worldHelper = new WorldHelper(800, 600, interpreter.moduleStore.getModule(\"Base Module\"), w);\r\n            w.intrinsicData[\"World\"] = worldHelper;\r\n            interpreter.worldHelper = worldHelper;\r\n        }\r\n        this.worldHelper = worldHelper;\r\n    }\r\n\r\n\r\n    renderOrnamentsAndInitCamera() {\r\n        this.worldHelper.app.renderer.backgroundColor = 0x8080ff;\r\n\r\n        let gp = this.robotCubeFactory.getGrassPlane(this.worldX, this.worldY);\r\n        this.container3D.addChild(gp);\r\n\r\n        let deep: number = 0;\r\n        let radius: number = 0;\r\n        this.robotCubeFactory.getSidePlanes(this.worldX, this.worldY, \"robot#3\", radius, deep++)\r\n            .forEach(p => { this.container3D.addChild(p); });\r\n\r\n            this.robotCubeFactory.getSidePlanes(this.worldX, this.worldY, \"robot#10\", radius, deep++)\r\n                .forEach(p => { this.container3D.addChild(p); });\r\n\r\n        this.robotCubeFactory.makeClouds(this.container3D, 60, this.worldX/2, this.worldY/2);\r\n\r\n        this.robotCubeFactory.makePlane(this.container3D, this.worldX/2, -4, this.worldY/2, 3000, 3000, \r\n        new Pixi3d.Color(55.0/255, 174.0/255, 77.0/255));\r\n\r\n        let northSprite = this.robotCubeFactory.makeSprite3d(\"robot#11\", this.container3D);\r\n        // northSprite.position.set(this.worldX + 6, 1, this.worldY - 1);\r\n        northSprite.position.set(2*this.worldX + 1, -1, 2*this.worldY - 6);\r\n        northSprite.scale.set(257.0/40, 1, 1);\r\n        northSprite.rotationQuaternion.setEulerAngles(0, 90, 0);\r\n\r\n        let control = new Pixi3d.CameraOrbitControl(this.worldHelper.app.view, this.camera);\r\n        control.angles.x = 45;\r\n        control.angles.y = -20;\r\n        control.target = { x: this.worldX - 1, y: 0, z: this.worldY - 1 }\r\n        control.distance = Math.max(this.worldX, this.worldY) * 2.3;\r\n\r\n    }\r\n\r\n    addBrick(x: number, y: number, farbe: string): boolean {\r\n        let oldHeight = this.bricks[x][y].length;\r\n        if (oldHeight < this.maximumHeight) {\r\n            let brick = this.robotCubeFactory.getBrick(farbe);\r\n            this.setToXY(x, y, oldHeight, brick);\r\n            this.bricks[x][y].push(brick);\r\n            this.container3D.addChild(brick);\r\n            this.adjustMarkerHeight(x, y);\r\n            this.adjustRobotPositions(x, y);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    removeBrick(x: number, y: number): boolean {\r\n        if (this.bricks[x][y].length > 0) {\r\n            let brick = this.bricks[x][y].pop();\r\n            brick.destroy();\r\n            this.adjustMarkerHeight(x, y);\r\n            this.adjustRobotPositions(x, y);\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    getBrickCount(x: number, y: number) {\r\n        return this.bricks[x][y].length;\r\n    }\r\n\r\n    hasBrickColor(x: number, y: number, farbe: string): boolean {\r\n        for (let brick of this.bricks[x][y]) {\r\n            if (brick.farbe == farbe) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getMarkerColor(x: number, y: number): string {\r\n        let marker = this.markers[x][y];\r\n        if (marker == null) return null;\r\n        return marker.farbe;\r\n    }\r\n\r\n    setMarker(x: number, y: number, farbe: string) {\r\n        if (this.markers[x][y] != null) {\r\n            this.markers[x][y].destroy();\r\n        }\r\n        let marker = this.robotCubeFactory.getMarker(farbe);\r\n        this.markers[x][y] = marker;\r\n        this.container3D.addChild(marker);\r\n        this.setToXY(x, y, 0, marker);\r\n        this.adjustMarkerHeight(x, y);\r\n    }\r\n\r\n    removeMarker(x: number, y: number): boolean {\r\n        let marker = this.markers[x][y];\r\n        if (marker == null) {\r\n            return false;\r\n        } else {\r\n            this.markers[x][y] = null;\r\n            marker.destroy();\r\n            return true;\r\n        }\r\n    }\r\n\r\n    adjustMarkerHeight(x: number, y: number) {\r\n        let marker = this.markers[x][y];\r\n        if (marker != null) {\r\n            let height = this.bricks[x][y].length\r\n            marker.y = height + 0.1;\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        for (let x = 0; x < this.bricks.length; x++) {\r\n            for (let y = 0; y < this.bricks[x].length; y++) {\r\n                let brickList = this.bricks[x][y];\r\n                while (brickList.length > 0) {\r\n                    brickList.pop().destroy();\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let x = 0; x < this.markers.length; x++) {\r\n            for (let y = 0; y < this.markers[x].length; y++) {\r\n                let marker = this.markers[x][y];\r\n                if (marker != null) {\r\n                    this.markers[x][y] = null;\r\n                    marker.destroy();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setDimensions(worldX: number, worldY: number) {\r\n        this.clear();\r\n\r\n        this.worldX = worldX;\r\n        this.worldY = worldY;\r\n\r\n        this.markers = [];\r\n        this.bricks = [];\r\n        for (let x = 0; x < worldX; x++) {\r\n            let markerColumn = [];\r\n            this.markers.push(markerColumn);\r\n            let brickColumn = [];\r\n            this.bricks.push(brickColumn);\r\n            for (let y = 0; y < worldY; y++) {\r\n                markerColumn.push(null);\r\n                brickColumn.push([]);\r\n            }\r\n        }\r\n    }\r\n\r\n    getNumberOfBricks(x: number, y: number) {\r\n        return this.bricks[x][y].length;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param initString \r\n     * \" \": empty \r\n     * \"_\": no brick, yellow marker\r\n     * \"Y\", \"G\", \"B\", \"R\": switch marker color\r\n     * \"y\", \"g\", \"b\", \"r\": switch brick color\r\n     * \"1\", ..., \"9\": 1, ..., 9 bricks \r\n     * \"1m\", ..., \"9m\": 1, ..., 9 bricks with markers on them\r\n     */\r\n    initFromString(initString: string) {\r\n\r\n        let lowerCaseCharToColor = { \"r\": \"rot\", \"g\": \"grün\", \"b\": \"blau\", \"y\": \"gelb\" };\r\n        let upperCaseCharToColor = { \"R\": \"rot\", \"G\": \"grün\", \"B\": \"blau\", \"Y\": \"gelb\" };\r\n        let digits = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"];\r\n\r\n        this.clear();\r\n        let rows = initString.split(\"\\n\");\r\n        let maxColumns = 0;\r\n        rows.forEach((row) => { let rowLength = this.rowLength(row); if (rowLength > maxColumns) maxColumns = rowLength });\r\n        this.initWorldArrays(maxColumns, rows.length);\r\n\r\n        this.worldX = maxColumns;\r\n        this.worldY = rows.length;\r\n\r\n        let c1: string;\r\n        let c2: string;\r\n        let brickColor = \"rot\";\r\n        let markerColor = \"gelb\";\r\n\r\n        for (let y = 0; y < rows.length; y++) {\r\n            let row = rows[y];\r\n            let x = 0;\r\n            let pos = 0;\r\n            while (pos < row.length) {\r\n                c1 = row.charAt(pos);\r\n                c2 = pos < row.length - 1 ? row.charAt(pos + 1) : null;\r\n                pos++;\r\n                if (lowerCaseCharToColor[c1] != null) {\r\n                    brickColor = lowerCaseCharToColor[c1];\r\n                    continue;\r\n                }\r\n                if (upperCaseCharToColor[c1] != null) {\r\n                    markerColor = upperCaseCharToColor[c1];\r\n                    continue;\r\n                }\r\n                let index = digits.indexOf(c1);\r\n                if (index >= 0) {\r\n                    for (let i = 0; i < index + 1; i++) {\r\n                        this.addBrick(x, y, brickColor);\r\n                    }\r\n                    if (c2 == \"m\") {\r\n                        this.setMarker(x, y, markerColor);\r\n                        pos++;\r\n                    }\r\n                    x++;\r\n                    continue;\r\n                }\r\n                if (c1 == \" \") {\r\n                    x++;\r\n                    continue;\r\n                }\r\n                if (c1 == \"_\") {\r\n                    this.setMarker(x, y, markerColor);\r\n                    x++;\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    rowLength(row: string) {\r\n        let l: number = 0;\r\n        let forwardChars = \" _1234567890\";\r\n\r\n        for (let i = 0; i < row.length; i++) {\r\n            if (forwardChars.indexOf(row.charAt(i)) >= 0) {\r\n                l++;\r\n            }\r\n        }\r\n        return l;\r\n    }\r\n\r\n    setToXY(x: number, y: number, height: number, mesh: Pixi3d.Mesh3D) {\r\n        mesh.x = 2 * (this.worldX - x - 1);\r\n        mesh.z = 2 * (this.worldY - y - 1);\r\n        mesh.y = height;\r\n    }\r\n\r\n    // Wird von WorldHelper aufgerufen\r\n    destroy() {\r\n\r\n    }\r\n\r\n    gibtFarbe(farbe: string): boolean {\r\n        return this.robotCubeFactory.farben.indexOf(farbe) >= 0;\r\n    }\r\n\r\n}\r\n\r\n\r\nclass Direction {\r\n    names: string[] = [\"top\", \"right\", \"bottom\", \"left\"];\r\n    deltas: { dx: number, dy: number }[] = [{ dx: 0, dy: -1 }, { dx: -1, dy: 0 }, { dx: 0, dy: 1 }, { dx: 1, dy: 0 }];\r\n    angles: number[] = [0, 90, 180, 270];\r\n\r\n    public index: number = 2; // top\r\n\r\n    turnRight() {\r\n        this.index = (this.index - 1 + 4) % 4;\r\n    }\r\n\r\n    turnLeft() {\r\n        this.index = (this.index + 1 + 4) % 4;\r\n    }\r\n\r\n    getAngle() {\r\n        return this.angles[this.index];\r\n    }\r\n\r\n    getDeltas() {\r\n        return this.deltas[this.index];\r\n    }\r\n\r\n}\r\n\r\nexport class RobotHelper {\r\n\r\n    robotWorldHelper: RobotWorldHelper;\r\n    model: Pixi3d.Model;\r\n    x: number;\r\n    y: number;\r\n\r\n    hatSteine: number = 10000000;\r\n    maxSteine: number = 100000000;\r\n\r\n    direction: Direction = new Direction();\r\n\r\n    constructor(private interpreter: Interpreter, private runtimeObject: RuntimeObject,\r\n        startX: number, startY: number,\r\n        worldX: number, worldY: number,\r\n        initialeWelt: string = null\r\n    ) {\r\n\r\n        this.fetchRobotWorld(interpreter, worldX, worldY, initialeWelt);\r\n        this.robotWorldHelper.robots.push(this);\r\n\r\n        this.render();\r\n\r\n        this.moveTo(startX - 1, startY - 1);\r\n        this.adjustAngle();\r\n\r\n    }\r\n\r\n    fetchRobotWorld(interpreter: Interpreter, worldX: number, worldY: number, initialeWelt: string) {\r\n        let worldHelper = interpreter.worldHelper;\r\n        this.robotWorldHelper = worldHelper?.robotWorldHelper;\r\n\r\n        if (this.robotWorldHelper == null) {\r\n            let w: RuntimeObject = new RuntimeObject(<Klass>interpreter.moduleStore.getType(\"RobotWorld\").type);\r\n            this.robotWorldHelper = new RobotWorldHelper(interpreter, w, worldX, worldY, initialeWelt);\r\n            w.intrinsicData[\"RobotWorldHelper\"] = this.robotWorldHelper;\r\n        }\r\n\r\n    }\r\n\r\n    render(): void {\r\n\r\n        //@ts-ignore\r\n        let robot = Pixi3d.Model.from(PIXI.Loader.shared.resources[\"steve\"].gltf);\r\n        robot.scale.set(0.1);\r\n        for (let mesh of robot.meshes) {\r\n            let sm = <Pixi3d.StandardMaterial>mesh.material;\r\n            sm.camera = this.robotWorldHelper.camera;\r\n            sm.exposure = 0.5;\r\n            sm.lightingEnvironment = this.robotWorldHelper.robotCubeFactory.lightingEnvironment;\r\n        }\r\n        this.robotWorldHelper.container3D.addChild(robot);\r\n        this.model = robot;\r\n\r\n    };\r\n\r\n    crop(n: number, min: number, max: number): number {\r\n        if (n < min) n = min;\r\n        if (n > max) n = max;\r\n        return n;\r\n    }\r\n\r\n    moveTo(x: number, y: number) {\r\n        const rw = this.robotWorldHelper;\r\n        x = this.crop(x, 0, rw.worldX - 1);\r\n        y = this.crop(y, 0, rw.worldY - 1);\r\n\r\n        this.model.x = 2 * (rw.worldX - x - 1);\r\n        this.model.z = 2 * (rw.worldY - y - 1);\r\n        this.model.y = rw.getNumberOfBricks(x, y) + 1.6;\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    adjustAngle() {\r\n        this.model.transform.rotationQuaternion.setEulerAngles(0, this.direction.getAngle(), 0);\r\n    }\r\n\r\n    schritt(): boolean {\r\n        let deltas = this.direction.getDeltas();\r\n        let newX = this.x + deltas.dx;\r\n        let newY = this.y + deltas.dy;\r\n        const rw = this.robotWorldHelper;\r\n\r\n        if (newX < 0 || newX >= rw.worldX || newY < 0 || newY >= rw.worldY) {\r\n            this.interpreter.throwException(\"Der Roboter ist gegen eine Wand geprallt!\");\r\n            return false;\r\n        }\r\n\r\n        let oldHeight = rw.getNumberOfBricks(this.x, this.y);\r\n        let newHeight = rw.getNumberOfBricks(newX, newY);\r\n\r\n        if (newHeight < oldHeight - 1) {\r\n            this.interpreter.throwException(\"Der Roboter kann maximal einen Ziegel nach unten springen.\");\r\n            return false;\r\n        }\r\n\r\n        if (newHeight > oldHeight + 1) {\r\n            this.interpreter.throwException(\"Der Roboter kann maximal einen Ziegel hoch springen.\");\r\n            return false;\r\n        }\r\n\r\n        this.moveTo(newX, newY);\r\n        return true;\r\n    }\r\n\r\n    hinlegen(farbe: string): boolean {\r\n        let deltas = this.direction.getDeltas();\r\n        let newX = this.x + deltas.dx;\r\n        let newY = this.y + deltas.dy;\r\n        const rw = this.robotWorldHelper;\r\n\r\n        if (newX < 0 || newX >= rw.worldX || newY < 0 || newY >= rw.worldY) {\r\n            this.interpreter.throwException(\"Der Roboter steht direkt vor einer Wand. Da kann er keine Ziegel hinlegen.\");\r\n            return false;\r\n        }\r\n\r\n        farbe = farbe.toLocaleLowerCase();\r\n        if (!rw.gibtFarbe(farbe)) {\r\n            this.interpreter.throwException(\"Es gibt nur Ziegel der Farben \" + rw.robotCubeFactory.farben.join(\", \") + \". Die Farbe \" + farbe + \" ist nicht darunter.\");\r\n            return false;\r\n        }\r\n\r\n        if (this.hatSteine == 0) {\r\n            this.interpreter.throwException(\"Der Roboter hat keine Ziegel mehr bei sich und kann daher keinen mehr hinlegen.\");\r\n            return false;\r\n        }\r\n\r\n        if(rw.bricks[newX][newY].length >= rw.maximumHeight){\r\n            this.interpreter.throwException(\"Der Ziegelstapel darf die maximale Höhe \" + rw.maximumHeight + \" nicht überschreiten.\");\r\n            return false;\r\n        }\r\n\r\n        rw.addBrick(newX, newY, farbe);\r\n        this.hatSteine--;\r\n\r\n        return true;\r\n    }\r\n\r\n    aufheben(): boolean {\r\n        let deltas = this.direction.getDeltas();\r\n        let newX = this.x + deltas.dx;\r\n        let newY = this.y + deltas.dy;\r\n        const rw = this.robotWorldHelper;\r\n\r\n        if (newX < 0 || newX >= rw.worldX || newY < 0 || newY >= rw.worldY) {\r\n            this.interpreter.throwException(\"Der Roboter steht direkt vor einer Wand. Da kann er keinen Ziegel aufheben.\");\r\n            return false;\r\n        }\r\n\r\n        if (rw.getNumberOfBricks(newX, newY) < 1) {\r\n            this.interpreter.throwException(\"Vor dem Roboter liegt kein Ziegel, er kann daher keinen aufheben.\");\r\n            return false;\r\n        }\r\n\r\n        rw.removeBrick(newX, newY);\r\n\r\n        if (this.hatSteine < this.maxSteine) {\r\n            this.hatSteine++;\r\n        } else {\r\n            this.interpreter.throwException(\"Der Roboter kann nicht mehr Steine aufheben, da er keinen Platz mehr in seinem Rucksack hat.\");\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    markeSetzen(farbe: string) {\r\n        const rw = this.robotWorldHelper;\r\n        farbe = farbe.toLocaleLowerCase();\r\n\r\n        if (!rw.gibtFarbe(farbe)) {\r\n            this.interpreter.throwException(\"Es gibt nur Marken der Farben \" + rw.robotCubeFactory.farben.join(\", \") + \". Die Farbe \" + farbe + \" ist nicht darunter.\");\r\n            return false;\r\n        }\r\n\r\n        rw.setMarker(this.x, this.y, farbe);\r\n    }\r\n\r\n    markeLöschen() {\r\n        const rw = this.robotWorldHelper;\r\n\r\n        rw.removeMarker(this.x, this.y);\r\n    }\r\n\r\n    istWand(): boolean {\r\n        let deltas = this.direction.getDeltas();\r\n        let newX = this.x + deltas.dx;\r\n        let newY = this.y + deltas.dy;\r\n        const rw = this.robotWorldHelper;\r\n\r\n        return (newX < 0 || newX >= rw.worldX || newY < 0 || newY >= rw.worldY)\r\n\r\n    }\r\n\r\n    istZiegel(param: number | string | null): boolean {\r\n        let deltas = this.direction.getDeltas();\r\n        let newX = this.x + deltas.dx;\r\n        let newY = this.y + deltas.dy;\r\n        const rw = this.robotWorldHelper;\r\n\r\n        if (newX < 0 || newX >= rw.worldX || newY < 0 || newY >= rw.worldY) {\r\n            return false;\r\n        }\r\n\r\n        if (param == null) return rw.getBrickCount(newX, newY) > 0;\r\n\r\n        if (typeof param == \"string\") {\r\n            return rw.hasBrickColor(newX, newY, param.toLocaleLowerCase());\r\n        }\r\n\r\n        return rw.bricks[newX][newY].length == param;\r\n\r\n    }\r\n\r\n    istMarke(param: string | null): boolean {\r\n        const rw = this.robotWorldHelper;\r\n        let marke = rw.markers[this.x][this.y];\r\n        if (param == null) return marke != null;\r\n\r\n        if (typeof param == \"string\") {\r\n            return marke != null && marke.farbe == param.toLocaleLowerCase();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n}\r\n","import { QueryResult } from \"../../tools/database/DatabaseTool.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { booleanPrimitiveType, charPrimitiveType, doublePrimitiveType, floatPrimitiveType, intPrimitiveType, StringPrimitiveType, stringPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist, Type } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\n\r\nexport class ResultSetClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"ResultSet\", module, \"Ein ResultSet-Objekt speichert das Ergebnis einer Abfrage an die Datenbank.\");\r\n\r\n        let resultSetType = <Klass>module.typeStore.getType(\"ResultSet\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n \r\n        this.addMethod(new Method(\"next\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rsh: ResultsetHelper = o.intrinsicData[\"Helper\"];\r\n                return rsh.next();\r\n\r\n            }, false, false, 'Führt ein SQL-Statement aus.',\r\n            false));\r\n\r\n        this.addMethod(new Method(\"wasNull\", new Parameterlist([\r\n        ]), booleanPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let rsh: ResultsetHelper = o.intrinsicData[\"Helper\"];\r\n                return rsh.wasNull;\r\n\r\n            }, false, false, 'Gibt genau dann true zurück, wenn der zuletzt gelesene Wert null war.',\r\n            false));\r\n\r\n        let types = [booleanPrimitiveType, intPrimitiveType, floatPrimitiveType, doublePrimitiveType, stringPrimitiveType];\r\n\r\n        for(let type of types){\r\n\r\n            let typeIdFirstUppercase = type.identifier.charAt(0).toUpperCase() + type.identifier.substring(1);\r\n\r\n            this.addMethod(new Method(\"get\"+typeIdFirstUppercase, new Parameterlist([\r\n                { identifier: \"columnIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            ]), type,\r\n                (parameters) => {\r\n    \r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let columnIndex: number = parameters[1].value;\r\n\r\n                    let rsh: ResultsetHelper = o.intrinsicData[\"Helper\"];\r\n\r\n                    let interpreter = module.main.getInterpreter();\r\n                    if(columnIndex < 1 || columnIndex > rsh.columnCount()){\r\n                        interpreter.throwException(\"Das Ergebnis hat keine Spalte \" + columnIndex + \".\");\r\n                        return;\r\n                    }\r\n\r\n                    if(rsh.isAfterLast()){\r\n                        interpreter.throwException(\"Der Cursor befindet sich hinter dem letzten Datensatz des ResultSet.\");\r\n                    }\r\n    \r\n                    return rsh.getValue(type, columnIndex);\r\n    \r\n                }, false, false, 'Gibt den Wert der Spalte mit dem angegebenen Spaltenindex als ' + type.identifier + \" zurück.\",\r\n                false));\r\n\r\n            this.addMethod(new Method(\"get\"+typeIdFirstUppercase, new Parameterlist([\r\n                { identifier: \"columnLabel\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n            ]), type,\r\n                (parameters) => {\r\n    \r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let columnLabel: string = parameters[1].value;\r\n\r\n                    let rsh: ResultsetHelper = o.intrinsicData[\"Helper\"];\r\n\r\n                    let interpreter = module.main.getInterpreter();\r\n\r\n\r\n                    if(rsh.isAfterLast()){\r\n                        interpreter.throwException(\"Der Cursor befindet sich hinter dem letzten Datensatz des ResultSet.\");\r\n                    }\r\n\r\n                    let columnIndex: number = rsh.getColumnIndex(columnLabel);\r\n                    if(columnIndex < 0){\r\n                        interpreter.throwException(\"Das Ergebnis hat keine Spalte mit dem Bezeichner \" + columnLabel + \".\");\r\n                        return;\r\n                    }\r\n    \r\n                    return rsh.getValue(type, columnIndex);\r\n    \r\n                }, false, false, 'Gibt den Wert der Spalte mit dem angegebenen Spaltenindex als ' + type.identifier + \" zurück.\",\r\n                false));\r\n\r\n        }\r\n\r\n\r\n        \r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class ResultsetHelper {\r\n    cursor: number = -1;\r\n    wasNull: boolean = false;\r\n\r\n    constructor(private result: QueryResult){\r\n\r\n    }\r\n\r\n    getColumnIndex(columnLabel: string): number {\r\n        \r\n        columnLabel = columnLabel.toLocaleLowerCase();\r\n\r\n        let index = this.result.columns.findIndex((value, index) => {return value.toLocaleLowerCase() == columnLabel});\r\n        if(index < 0) return index;\r\n        return index + 1;\r\n    }\r\n\r\n\r\n    next(): boolean {\r\n        this.cursor++;\r\n        if(this.result == null) return false;\r\n        return this.cursor < this.result.values.length;\r\n    }\r\n\r\n    columnCount(): number {\r\n        return this.result.columns.length;\r\n    }\r\n\r\n    getValue(type: Type, columnIndex: number) {\r\n\r\n        let value = this.result.values[this.cursor][columnIndex - 1];\r\n        this.wasNull = value == null;\r\n\r\n        if(type == stringPrimitiveType){\r\n            return value == null ? null : \"\" + value;\r\n        }\r\n\r\n        if(type == intPrimitiveType){\r\n            if(value == null || !(typeof value == \"number\")){\r\n                return 0;\r\n            }\r\n            return Math.floor(value);\r\n        }\r\n\r\n        if(type == floatPrimitiveType || type == doublePrimitiveType){\r\n            if(value == null || !(typeof value == \"number\")){\r\n                return 0;\r\n            }\r\n            return value;\r\n        }\r\n\r\n        if(type == booleanPrimitiveType){\r\n            if(value == null) return false;\r\n            return (value + \"\").indexOf(\"1\") >= 0;\r\n        }\r\n\r\n    }\r\n\r\n    isAfterLast(): boolean {\r\n        return this.cursor > this.result.values.length - 1;\r\n    }\r\n\r\n\r\n}","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { intPrimitiveType, stringPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { ConnectionHelper } from \"./Connection.js\";\r\nimport { ResultsetHelper } from \"./ResultSet.js\";\r\n\r\nexport class DatabaseStatementClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"Statement\", module, \"Ein Statement-Objekt repräsentiert eine Anweisung an die Datenbank.\");\r\n\r\n\r\n        let resultSetType = <Klass>module.typeStore.getType(\"ResultSet\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n \r\n        this.addMethod(new Method(\"executeQuery\", new Parameterlist([\r\n            { identifier: \"query\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), resultSetType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let query: string = parameters[1].value;\r\n\r\n                let connectionHelper: ConnectionHelper = o.intrinsicData[\"ConnectionHelper\"];\r\n\r\n                let interpreter = module.main.getInterpreter();\r\n                query = query.trim();\r\n                if(!query.toLocaleLowerCase().startsWith(\"select\")){\r\n                    module.main.getInterpreter().resumeAfterInput(null);\r\n                    interpreter.throwException(\"Mit der Methode executeQuery können nur select-Anweisungen ausgeführt werden. Benutze für datenverändernde Anweisungen die Methode executeUpdate.\");                    \r\n                    return null;\r\n                }\r\n\r\n                interpreter.pauseForInput();\r\n                \r\n                module.main.getBottomDiv().showHideDbBusyIcon(true);\r\n\r\n\r\n                connectionHelper.executeQuery(query, (error, result) => {\r\n                module.main.getBottomDiv().showHideDbBusyIcon(false);\r\n                    if(error != null){\r\n                        module.main.getInterpreter().resumeAfterInput(null);\r\n                        interpreter.throwException(error);\r\n                        return;\r\n                    }\r\n                    let rsh = new ResultsetHelper(result);\r\n                    let rs = new RuntimeObject(resultSetType);\r\n                    rs.intrinsicData[\"Helper\"] = rsh;\r\n                    interpreter.resumeAfterInput({value: rs, type: resultSetType}, true);\r\n                })\r\n\r\n            }, false, false, 'Führt ein SQL-Statement aus, das eine selct-Anweisung enthält.',\r\n            false));\r\n\r\n        this.addMethod(new Method(\"executeUpdate\", new Parameterlist([\r\n            { identifier: \"query\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let query: string = parameters[1].value;\r\n\r\n                let connectionHelper: ConnectionHelper = o.intrinsicData[\"ConnectionHelper\"];\r\n\r\n                let interpreter = module.main.getInterpreter();\r\n\r\n                query = query.trim();\r\n                if(query.toLocaleLowerCase().startsWith(\"select\")){\r\n                    module.main.getInterpreter().resumeAfterInput(null);\r\n                    interpreter.throwException(\"Mit der Methode executeUpdate können nur datenverändernde Anweisungen ausgeführt werden. Benutze für select-Anweisungen die Methode executeQuery.\");                    \r\n                    return;\r\n                }\r\n\r\n                interpreter.pauseForInput();\r\n                module.main.getBottomDiv().showHideDbBusyIcon(true);\r\n\r\n                connectionHelper.executeWriteStatement(query, (error) => {\r\n                    module.main.getBottomDiv().showHideDbBusyIcon(false);\r\n                    if(error != null){\r\n                        module.main.getInterpreter().resumeAfterInput(null);\r\n                        interpreter.throwException(error);\r\n                        return;\r\n                    }\r\n                    interpreter.resumeAfterInput({value: 0, type: intPrimitiveType}, true);\r\n                })\r\n\r\n            }, false, false, 'Führt ein SQL-Statement aus, das eine datenverändernde Anweisung enthält.',\r\n            false));\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n","export class WorkerSim {\r\n\r\n    //@ts-ignore\r\n    initsql = initSqlJs({locateFile: (path, scriptDirectory) => \"https://embed.learn-sql.de/include/lib/sql.js/sql-wasm.wasm\"});\r\n    db;\r\n    SQL;\r\n\r\n    onmessage: (event: {data: any}) => void;\r\n\r\n    onError: (event: ErrorEvent) => void;\r\n\r\n    postMessageToClient(message: any) {\r\n        this.onmessage({data: message})\r\n    }\r\n\r\n    postMessage(data: any){\r\n        let that = this;\r\n        if (that.db == null) {\r\n            that.initsql.then((SQL1) => {\r\n                that.SQL = SQL1;\r\n                that.db = createDb(SQL1, undefined);\r\n                that.worker(data);\r\n            }).catch((err) => {\r\n                console.log(err);\r\n                //@ts-ignore\r\n                return that.postMessageToClient({\r\n                    id: this[\"data\"][\"id\"],\r\n                    error: err[\"message\"]\r\n                });\r\n            })\r\n        } else {\r\n            that.worker(data);\r\n        }\r\n    }\r\n\r\n    terminate() {\r\n\r\n    }\r\n\r\n    worker(data: any) {\r\n        var buff; var result;\r\n        var config = data[\"config\"] ? data[\"config\"] : {};\r\n        try {\r\n            switch (data && data[\"action\"]) {\r\n                case \"open\":\r\n                    buff = data[\"buffer\"];\r\n                    this.db = createDb(this.SQL, buff && new Uint8Array(buff));\r\n                    //@ts-ignore\r\n                    return this.postMessageToClient({\r\n                        id: data[\"id\"],\r\n                        ready: true\r\n                    });\r\n                case \"exec\":\r\n                    if (this.db === null) {\r\n                        this.db = createDb(this.SQL, undefined);\r\n                    }\r\n                    if (!data[\"sql\"]) {\r\n                        throw \"exec: Missing query string\";\r\n                    }\r\n                    //@ts-ignore\r\n                    return this.postMessageToClient({\r\n                        id: data[\"id\"],\r\n                        results: this.db.exec(data[\"sql\"], data[\"params\"], config)\r\n                    });\r\n                case \"each\":\r\n                    if (this.db === null) {\r\n                        this.db = createDb(this.SQL, undefined);\r\n                    }\r\n                    var callback = function callback(row) {\r\n                        //@ts-ignore\r\n                        return this.postMessage({\r\n                            id: data[\"id\"],\r\n                            row: row,\r\n                            finished: false\r\n                        });\r\n                    };\r\n                    var done = function done() {\r\n                        //@ts-ignore\r\n                        return this.postMessage({\r\n                            id: data[\"id\"],\r\n                            finished: true\r\n                        });\r\n                    };\r\n                    return this.db.each(data[\"sql\"], data[\"params\"], callback, done, config);\r\n                case \"export\":\r\n                    buff = this.db[\"export\"]();\r\n                    result = {\r\n                        id: data[\"id\"],\r\n                        results: [\r\n                            {\r\n                                buffer: buff\r\n                            }\r\n                        ]\r\n                    };\r\n                    try {\r\n                        //@ts-ignore\r\n                        return this.postMessageToClient(result);\r\n                    } catch (error) {\r\n                        //@ts-ignore\r\n                        return this.postMessageToClient(result);\r\n                    }\r\n                case \"close\":\r\n                    if (this.db) {\r\n                        this.db.close();\r\n                    }\r\n                    //@ts-ignore\r\n                    return this.postMessageToClient({\r\n                        id: data[\"id\"]\r\n                    });\r\n                default:\r\n                    throw new Error(\"Invalid action : \" + (data && data[\"action\"]));\r\n            }\r\n\r\n        } catch (err) {\r\n\r\n            //@ts-ignore\r\n            return this.postMessageToClient({\r\n                id: data[\"id\"],\r\n                error: err[\"message\"]\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import { MainBase } from \"src/client/main/MainBase.js\";\r\nimport { WorkerSim } from \"./sqljsWorkerSim.js\";\r\n\r\nexport type DatabaseDumpType = \"binaryUncompressed\" | \"binaryCompressed\" | \"other\";\r\n\r\nexport type DatabaseDirectoryEntry = {\r\n    name: string,\r\n    description: string,\r\n    filename: string\r\n}\r\n\r\nexport type QueryResult = {\r\n    columns: string[],\r\n    values: any[][],\r\n    buffer?: Uint8Array\r\n}\r\n\r\nexport type QuerySuccessCallback = (results: QueryResult[]) => void;\r\nexport type QueryErrorCallback = (error: string) => void;\r\n\r\nexport type ColumnStructure = {\r\n    name: string;\r\n    table: TableStructure;\r\n\r\n    typeLengths?: number[]; // for varchar(5), ...\r\n    completeTypeSQL: string;\r\n\r\n    references?: ColumnStructure;\r\n    referencesRawData?: any[];\r\n    isPrimaryKey: boolean;\r\n    isAutoIncrement: boolean;\r\n\r\n    notNull: boolean;\r\n    defaultValue: string;\r\n\r\n    dumpValueFunction?: (any) => string\r\n}\r\n\r\nexport type TableStructure = {\r\n    name: string;\r\n    size: number;\r\n    columns: ColumnStructure[];\r\n    completeSQL: string;\r\n}\r\n\r\nexport type DatabaseStructure = {\r\n    tables: TableStructure[]\r\n}\r\n\r\n\r\nexport class DatabaseTool {\r\n\r\n    databaseDirectoryEntries: DatabaseDirectoryEntry[] = null;\r\n\r\n    worker: Worker;\r\n\r\n    queryId: number = 0;\r\n\r\n    querySuccessCallbacksMap: Map<number, QuerySuccessCallback> = new Map();\r\n    queryErrorCallbackMap: Map<number, QueryErrorCallback> = new Map();\r\n\r\n    databaseStructure: DatabaseStructure;\r\n\r\n    constructor(private main: MainBase){\r\n\r\n    }\r\n\r\n    initializeWorker(template: Uint8Array, queries: string[], callbackAfterInitializing?: (error: string) => void) {\r\n        \r\n        this.main.getBottomDiv().console.writeConsoleEntry('Bitte warten, die Datenbank wird initialisiert...', null);\r\n        \r\n            if (this.worker != null) {\r\n            this.worker.terminate();\r\n        }\r\n\r\n        let t = performance.now();\r\n\r\n        // console.log(\"Starting worker...\");\r\n\r\n        let url: string = \"js/tools/database/sqljsWorker.js\"\r\n        if(this.main.isEmbedded()){\r\n            //@ts-ignore\r\n            url = window.javaOnlineDir + url;\r\n        }\r\n\r\n        //@ts-ignore\r\n        if(window.jo_doc){\r\n            //@ts-ignore\r\n            this.worker = new WorkerSim();\r\n        } else {\r\n            this.worker = new Worker(url);\r\n        }\r\n        let that = this;\r\n\r\n        let error: string;\r\n\r\n        this.worker.onmessage = () => {\r\n            // console.log(\"Database opened (\" + (performance.now() - t)/1000 + \" s)\");\r\n            that.worker.onmessage = event => {\r\n\r\n                // console.log(event.data);\r\n\r\n                let id = event.data.id;\r\n                if (event.data.error == null) {\r\n                    let querySuccessCallback = that.querySuccessCallbacksMap.get(id);\r\n                    if (querySuccessCallback != null) {\r\n                        querySuccessCallback(event.data.results);\r\n                    }\r\n                } else {\r\n                    let queryErrorCallback = that.queryErrorCallbackMap.get(id);\r\n                    if (queryErrorCallback != null) {\r\n                        queryErrorCallback(event.data.error);\r\n                    }\r\n                }\r\n\r\n                // if(event.data.buffer){\r\n                //     console.log(event.data.buffer);\r\n                // }\r\n\r\n\r\n                this.queryErrorCallbackMap.delete(id);\r\n                this.querySuccessCallbacksMap.delete(id);\r\n\r\n            };\r\n\r\n            if(queries == null) queries = [];\r\n            queries = queries.slice();\r\n            let queryCount = queries.length;\r\n\r\n            let execQuery = () => {\r\n                if (queries.length > 0) {\r\n                    // this.main.getWaitOverlay().setProgress(`${Math.round((1-queries.length/queryCount)*100) + \" %\"}`)\r\n                    let query = queries.shift();\r\n                    that.executeQuery(query, (result) => {\r\n                        execQuery();\r\n                    }, (error) => {\r\n                        error = (\"Error while setting up database: \" + error + \", query: \" + query);\r\n                        console.log({\"error\": \"Error while setting up database: \" + error, \"query\": query});\r\n                        console.log()\r\n                        execQuery();\r\n                    })\r\n                } else {\r\n                    if (callbackAfterInitializing != null) callbackAfterInitializing(error);\r\n                   \r\n                }\r\n            }\r\n\r\n            execQuery();\r\n\r\n        };\r\n\r\n        this.worker.onerror = (e) => {\r\n            error = (\"Worker error: \" + e.error);\r\n            console.log(\"Worker error: \" + e.error);\r\n        }\r\n\r\n        this.worker.postMessage({\r\n            id: that.queryId++,\r\n            action: \"open\",\r\n            buffer: template, /*Optional. An ArrayBuffer representing an SQLite Database file*/\r\n        });\r\n\r\n    }\r\n\r\n    executeQuery(query: string, successCallback: QuerySuccessCallback, errorCallback: QueryErrorCallback) {\r\n\r\n        let id = this.queryId++;\r\n\r\n        this.querySuccessCallbacksMap.set(id, successCallback);\r\n        this.queryErrorCallbackMap.set(id, errorCallback);\r\n\r\n        this.worker.postMessage({\r\n            id: id,\r\n            action: \"exec\",\r\n            sql: query,\r\n            params: {}\r\n        });\r\n\r\n    }\r\n\r\n    executeWriteQueries(queries: string[], successCallback: () => void, errorCallback: QueryErrorCallback){\r\n\r\n        if(queries.length == 0){\r\n            successCallback()\r\n            return;\r\n        }\r\n\r\n        let query = queries.shift();\r\n\r\n        this.executeQuery(query, () => {\r\n            this.executeWriteQueries(queries, successCallback, errorCallback);\r\n        }, (message) => {\r\n            this.executeWriteQueries(queries, () => {}, (error) => {});\r\n            errorCallback(message); // report first error\r\n        });\r\n\r\n    }\r\n\r\n    static getDumpType(dump: Uint8Array): DatabaseDumpType {\r\n\r\n        let sqliteMagicBytes: number[] = [0x53, 0x51, 0x4c, 0x69, 0x74, 0x65];\r\n        let zlibMagicByte: number = 0x78;\r\n\r\n        let found: boolean = true;\r\n        for (let i = 0; i < sqliteMagicBytes.length; i++) {\r\n            if (sqliteMagicBytes[i] != dump[i]) {\r\n                found = false;\r\n                break;\r\n            }\r\n        }\r\n        if (found) return \"binaryUncompressed\";\r\n\r\n        if (dump[0] == zlibMagicByte) return \"binaryCompressed\";\r\n\r\n        return \"other\";\r\n\r\n    }\r\n\r\n    close(){\r\n        if(this.worker != null){\r\n            this.worker.terminate();\r\n            this.worker = null;\r\n        }\r\n    }\r\n\r\n}","import { DatabaseLongPollingListenerRequest, JMessageFromServer, JWebSocketMessageConnect, JWebSocketMessageDisconnect, JWebSocketMessageExecuteStatement, LongPollingListenerResponse, SendingStatementsMessageFromServer, WebSocketRequestConnect } from \"../../communication/Data.js\";\r\nimport { NetworkManager } from \"../../communication/NetworkManager.js\";\r\nimport { Interpreter } from \"../../interpreter/Interpreter.js\";\r\nimport { ConnectionHelper } from \"../../runtimelibrary/database/Connection.js\";\r\n\r\nexport class DatabaseLongPollingListener {\r\n\r\n    identifier: number = Math.floor(Math.random() * 999999999);\r\n    isClosed: boolean = false;\r\n\r\n    constructor(private networkManager: NetworkManager,\r\n        private token: string,\r\n        private onServerSentStatementsCallback: (firstNewStatementIndex: number, newStatements: string[], rollbackToVersion: number) => void) {\r\n    }\r\n\r\n    longPoll() {\r\n        let that = this;\r\n\r\n        let request: DatabaseLongPollingListenerRequest = {\r\n            token: this.token,\r\n            listenerIdentifier: this.identifier\r\n        }\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            async: true,\r\n            data: JSON.stringify(request),\r\n            contentType: 'application/json',\r\n            url: that.networkManager.sqlIdeURL + \"jRegisterLongPollingListener\",\r\n            success: function (resp: string) {\r\n                if (resp != null && !that.isClosed && resp != \"\") {\r\n                    let response: LongPollingListenerResponse = JSON.parse(resp);\r\n                    if (response.success) {\r\n                        that.onServerSentStatementsCallback(response.firstNewStatementIndex,\r\n                            response.newStatements, response.rollbackToVersion);\r\n                    }\r\n                }\r\n\r\n                if (!that.isClosed) {\r\n                    setTimeout(() => {\r\n                        that.longPoll();\r\n                    }, 1000);\r\n                }\r\n            },\r\n            error: function (jqXHR, message) {\r\n                if (!that.isClosed) {\r\n                    setTimeout(() => {\r\n                        that.longPoll();\r\n                    }, 3000);\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    close(){\r\n        this.isClosed = true;\r\n    }\r\n\r\n}","import { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { booleanPrimitiveType, doublePrimitiveType, floatPrimitiveType, intPrimitiveType, stringPrimitiveType, voidPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { ConnectionHelper } from \"./Connection.js\";\r\nimport { ResultsetHelper } from \"./ResultSet.js\";\r\n\r\n\r\nexport class DatabasePreparedStatementClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"PreparedStatement\", module, \"Ein PreparedStatement-Objekt repräsentiert eine parametrisierte Anweisung an die Datenbank.\");\r\n\r\n\r\n        let resultSetType = <Klass>module.typeStore.getType(\"ResultSet\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n\r\n        this.addMethod(new Method(\"executeQuery\", new Parameterlist([\r\n        ]), resultSetType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let psh: PreparedStatementHelper = o.intrinsicData[\"Helper\"];\r\n\r\n                let interpreter = module.main.getInterpreter();\r\n                if (!psh.query.toLocaleLowerCase().startsWith(\"select\")) {\r\n                    module.main.getInterpreter().resumeAfterInput(null);\r\n                    interpreter.throwException(\"Mit der Methode executeQuery können nur select-Anweisungen ausgeführt werden. Benutze für datenverändernde Anweisungen die Methode executeUpdate.\");\r\n                    return null;\r\n                }\r\n\r\n                interpreter.pauseForInput();\r\n\r\n                module.main.getBottomDiv().showHideDbBusyIcon(true);\r\n\r\n                let error = psh.checkQuery();\r\n\r\n                if (error != null) {\r\n                    interpreter.throwException(error);\r\n                    return null;\r\n                }\r\n\r\n\r\n                psh.connectionHelper.executeQuery(psh.getQueryWithParameterValuesFilledIn(), (error, result) => {\r\n                    module.main.getBottomDiv().showHideDbBusyIcon(false);\r\n                    if (error != null) {\r\n                        module.main.getInterpreter().resumeAfterInput(null);\r\n                        interpreter.throwException(error);\r\n                        return;\r\n                    }\r\n                    let rsh = new ResultsetHelper(result);\r\n                    let rs = new RuntimeObject(resultSetType);\r\n                    rs.intrinsicData[\"Helper\"] = rsh;\r\n                    interpreter.resumeAfterInput({ value: rs, type: resultSetType }, true);\r\n                })\r\n\r\n            }, false, false, 'Führt ein SQL-Statement aus, das eine select-Anweisung enthält.',\r\n            false));\r\n\r\n        this.addMethod(new Method(\"executeUpdate\", new Parameterlist([\r\n        ]), intPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n\r\n                let psh: PreparedStatementHelper = o.intrinsicData[\"Helper\"];\r\n\r\n                let interpreter = module.main.getInterpreter();\r\n                if (psh.query.toLocaleLowerCase().startsWith(\"select\")) {\r\n                    module.main.getInterpreter().resumeAfterInput(null);\r\n                    interpreter.throwException(\"Mit der Methode execute können nur datenverändernde Anweisungen ausgeführt werden.\" + \r\n                    \"Benutze für select-Anweisungen die Methode executeQuery.\");\r\n                    return null;\r\n                }\r\n\r\n                interpreter.pauseForInput();\r\n\r\n                module.main.getBottomDiv().showHideDbBusyIcon(true);\r\n\r\n                let error = psh.checkQuery();\r\n\r\n                if (error != null) {\r\n                    interpreter.resumeAfterInput(null);\r\n                    interpreter.throwException(error);\r\n                    return null;\r\n                }\r\n                \r\n                psh.connectionHelper.executeWriteStatement(psh.getQueryWithParameterValuesFilledIn(), (error) => {\r\n                    module.main.getBottomDiv().showHideDbBusyIcon(false);\r\n                    if (error != null) {\r\n                        module.main.getInterpreter().resumeAfterInput(null);\r\n                        interpreter.resumeAfterInput(null);\r\n                        interpreter.throwException(error);\r\n                        return;\r\n                    }\r\n                    interpreter.resumeAfterInput({ value: 0, type: intPrimitiveType }, true);\r\n                })\r\n\r\n            }, false, false, 'Führt ein SQL-Statement aus, das eine datenverändernde Anweisung enthält.',\r\n            false));\r\n\r\n        let types = [booleanPrimitiveType, intPrimitiveType, floatPrimitiveType, doublePrimitiveType, stringPrimitiveType];\r\n\r\n        for (let type of types) {\r\n\r\n            let typeIdFirstUppercase = type.identifier.charAt(0).toUpperCase() + type.identifier.substring(1);\r\n\r\n\r\n            this.addMethod(new Method(\"set\"+typeIdFirstUppercase, new Parameterlist([\r\n                { identifier: \"parameterIndex\", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n                { identifier: \"value\", type: type, declaration: null, usagePositions: null, isFinal: true }\r\n            ]), voidPrimitiveType,\r\n                (parameters) => {\r\n\r\n                    let o: RuntimeObject = parameters[0].value;\r\n                    let index: number = parameters[1].value;\r\n                    let value: any = parameters[2].value;\r\n                    let psh: PreparedStatementHelper = o.intrinsicData[\"Helper\"];\r\n\r\n                    let error = psh.setValue(value, index);\r\n                    if (error != null) {\r\n                        module.main.getInterpreter().resumeAfterInput(null);\r\n                        module.main.getInterpreter().throwException(error);\r\n                    }\r\n\r\n                    return;\r\n\r\n                }, false, false, 'Setzt im Parameter mit dem angegebenen Index den ' + type.identifier + '-Wert ein.'));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class PreparedStatementHelper {\r\n\r\n    parameterValues: string[];\r\n    parameterPositions: number[];\r\n    query: string;\r\n\r\n    constructor(public connectionHelper: ConnectionHelper, query: string) {\r\n        this.query = query.trim();\r\n        this.prepareStatement(this.query);\r\n    }\r\n\r\n    prepareStatement(sql: string) {\r\n\r\n        let insideQuotation: boolean = false;\r\n        this.parameterPositions = [];\r\n\r\n        for (let i = 0; i < sql.length; i++) {\r\n\r\n            let c = sql.charAt(i);\r\n            switch (c) {\r\n                case \"'\": insideQuotation = !insideQuotation;\r\n                    break;\r\n                case \"?\": if (!insideQuotation) {\r\n                    this.parameterPositions.push(i);\r\n                }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.parameterValues = new Array(this.parameterPositions.length);\r\n\r\n    }\r\n\r\n    setValue(value: any, position: number): string {\r\n        if (position < 1 || position > this.parameterPositions.length) {\r\n            if (this.parameterPositions.length == 0) {\r\n                return \"Es gibt keine Parameter (mit ? besetzte Stellen) in dieser Anweisung.\";\r\n            }\r\n            return \"Es gibt nur die Parameterpositionen 1 bis \" + this.parameterPositions.length + \" in der SQL-Anweisung, keine Position \" + position + \".\";\r\n        }\r\n\r\n        if(value == null){\r\n            this.parameterValues[position - 1] = \"null\";\r\n        } else\r\n        if (typeof value == \"string\") {\r\n            value = value.replace(/'/g, \"''\");\r\n            this.parameterValues[position - 1] = \"'\" + value + \"'\";\r\n        } else {\r\n            this.parameterValues[position - 1] = \"\" + value;\r\n        }\r\n        return;\r\n    }\r\n\r\n    checkQuery(): string {\r\n        return null;\r\n    }\r\n\r\n    getQueryWithParameterValuesFilledIn(): string {\r\n        let query = this.query;\r\n        let queryParts: string[] = [];\r\n        let pos = 0;\r\n\r\n        for (let i = 0; i < this.parameterPositions.length; i++) {\r\n            queryParts.push(query.substring(pos, this.parameterPositions[i]));\r\n            pos = this.parameterPositions[i] + 1;\r\n        }\r\n\r\n        if (pos < query.length) {\r\n            queryParts.push(query.substring(pos));\r\n        }\r\n\r\n        let queryWithParameterValues = \"\";\r\n        for (let i = 0; i < this.parameterPositions.length; i++) {\r\n            queryWithParameterValues += queryParts[i] + this.parameterValues[i];\r\n        }\r\n\r\n        if (queryParts.length > this.parameterPositions.length) {\r\n            queryWithParameterValues += queryParts[queryParts.length - 1];\r\n        }\r\n\r\n        return queryWithParameterValues;\r\n    }\r\n\r\n}","import { DatabaseData, SendingStatementsMessageFromServer } from \"../../communication/Data.js\";\r\nimport { Main } from \"../../main/Main.js\";\r\nimport { DatabaseTool, QueryResult } from \"../../tools/database/DatabaseTool.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { DatabaseLongPollingListener } from \"../../tools/database/DatabaseLongPollingListener.js\";\r\nimport { stringPrimitiveType, voidPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { PreparedStatementHelper } from \"./DatabasePreparedStatement.js\";\r\n\r\nexport class ConnectionClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"Connection\", module, \"Ein Connection-Objekt repräsentiert die Verbindung zu einer Datenbank auf www.sql-ide.de\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n        let preparedStatementType = <Klass>module.typeStore.getType(\"PreparedStatement\");\r\n        let statementType = <Klass>module.typeStore.getType(\"Statement\");\r\n\r\n        this.addMethod(new Method(\"createStatement\", new Parameterlist([\r\n        ]), statementType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ch: ConnectionHelper = o.intrinsicData[\"Helper\"];\r\n\r\n                let stmt: RuntimeObject = new RuntimeObject(statementType);\r\n                stmt.intrinsicData[\"ConnectionHelper\"] = ch;\r\n\r\n                return stmt;\r\n\r\n            }, false, false, 'Erstellt ein Statement-Objekt, mit dem Statements zur Datenbank geschickt werden können.',\r\n            false));\r\n\r\n        this.addMethod(new Method(\"prepareStatement\", new Parameterlist([\r\n            { identifier: \"query\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }\r\n        ]), preparedStatementType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let query: string = parameters[1].value;\r\n\r\n                let ch: ConnectionHelper = o.intrinsicData[\"Helper\"];\r\n\r\n                let stmt: RuntimeObject = new RuntimeObject(preparedStatementType);\r\n                stmt.intrinsicData[\"Helper\"] = new PreparedStatementHelper(ch, query);\r\n\r\n                return stmt;\r\n\r\n            }, false, false, 'Erstellt ein PreparedStatement-Objekt, mit dem Anweisungen zur Datenbank geschickt werden können.',\r\n            false));\r\n\r\n        this.addMethod(new Method(\"close\", new Parameterlist([\r\n        ]), voidPrimitiveType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let ch: ConnectionHelper = o.intrinsicData[\"Helper\"];\r\n\r\n                ch.close();\r\n\r\n            }, false, false, 'Schließt die Verbindung zur Datenbank.',\r\n            false));\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class ConnectionHelper {\r\n\r\n    database: DatabaseTool;\r\n    databaseData: DatabaseData;\r\n    token: string;\r\n    longPollingListener: DatabaseLongPollingListener;\r\n\r\n    constructor(private main: Main) {\r\n\r\n        main.getInterpreter().registerDatabaseConnection(this);\r\n\r\n    }\r\n\r\n    connect(code: string, callback: (error: string) => void) {\r\n        let that = this;\r\n        this.main.networkManager.fetchDatabaseAndToken(code, (dbData, token, error) => {\r\n            if (error == null) {\r\n                that.token = token;\r\n                that.databaseData = dbData;\r\n                that.database = new DatabaseTool(that.main);\r\n                that.database.initializeWorker(dbData.templateDump, dbData.statements, (error) => {\r\n\r\n                    that.longPollingListener = new DatabaseLongPollingListener(that.main.networkManager,\r\n                        that.token, (firstNewStatementIndex, newStatements, rollbackToVersion) => {\r\n                            that.onServerSentStatements(firstNewStatementIndex, newStatements, rollbackToVersion);\r\n                        })\r\n\r\n                    that.longPollingListener.longPoll();\r\n                    callback(null);\r\n                });\r\n            } else {\r\n                callback(error);\r\n            }\r\n        })\r\n    }\r\n\r\n    close() {\r\n        if (this.longPollingListener != null) {\r\n            this.longPollingListener.close();\r\n            this.longPollingListener = null;\r\n        }\r\n\r\n        if(this.database != null){\r\n            this.database.close();\r\n            this.database = null;\r\n        }\r\n\r\n    }\r\n\r\n    skipNextServerSentStatement: boolean = false;\r\n    onServerSentStatements(firstNewStatementIndex: number, newStatements: string[], rollbackToVersion: number) {\r\n\r\n        if(this.skipNextServerSentStatement){\r\n            this.skipNextServerSentStatement = false;\r\n            return;\r\n        }\r\n\r\n        if (rollbackToVersion != null) {\r\n            // Rollback\r\n            this.databaseData.statements.splice(rollbackToVersion);\r\n            this.database.initializeWorker(this.databaseData.templateDump, this.databaseData.statements);\r\n            return;\r\n        } else {\r\n            this.executeStatementsFromServer(firstNewStatementIndex, newStatements);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    executeStatementsFromServer(firstStatementIndex: number, statements: string[],\r\n        callback?: (error: string) => void) {\r\n\r\n        // connection already closed?\r\n        if (this.database == null) {\r\n            if(callback) callback(\"Keine Datenbankverbindung.\");\r\n            return;\r\n        }\r\n\r\n        let currentDBVersion = this.databaseData.statements.length;\r\n        let delta = currentDBVersion - firstStatementIndex + 1; // these statements are already there\r\n        if (delta >= statements.length) {\r\n            if(callback) callback(null);\r\n            return;\r\n        }\r\n        statements = statements.slice(delta);\r\n        this.databaseData.statements = this.databaseData.statements.concat(statements);\r\n\r\n        this.database.executeWriteQueries(statements, () => {\r\n            if (callback != null) callback(null);\r\n        }, (errorMessage) => {\r\n            if (callback != null) callback(errorMessage);\r\n        })\r\n    }\r\n\r\n    executeWriteStatement(query: string, callback: (error: string, lastRowId: number) => void, retrieveLastRowId: boolean = false) {\r\n\r\n        // connection already closed?\r\n        if (this.database == null) {\r\n            callback(\"Es besteht keine Verbindung zur Datenbank.\", 0);\r\n        }\r\n\r\n        let that = this;\r\n        let oldStatementIndex = that.databaseData.statements.length;\r\n        this.database.executeQuery(\"explain \" + query, () => {\r\n\r\n            that.skipNextServerSentStatement = true;\r\n            that.main.networkManager.addDatabaseStatement(that.token, oldStatementIndex,\r\n                [query], (statementsBefore, new_version, errorMessage) => {\r\n                    if (errorMessage != null) {\r\n                        callback(errorMessage, 0);\r\n                        return;\r\n                    }\r\n\r\n                    that.executeStatementsFromServer(oldStatementIndex + 1, statementsBefore, (error: string) => {\r\n\r\n                        that.database.executeWriteQueries([query], () => {\r\n                            that.databaseData.statements.push(query);\r\n                            if (!retrieveLastRowId) {\r\n                                callback(null, 0);\r\n                                return;\r\n                            }\r\n                            that.executeQuery(\"select last_insert_rowid()\", (error, data) => {\r\n                                callback(null, data.values[0][0]);\r\n                            })\r\n                        }, (errorMessage) => {\r\n                            that.databaseData.statements.push(query);\r\n                            if (callback != null) callback(errorMessage, 0);\r\n                            // try rollback so that server doesn't store this statement\r\n                            that.main.networkManager.rollbackDatabaseStatement(that.token, that.databaseData.statements.length, () => {})\r\n                        })\r\n                \r\n\r\n                    });\r\n\r\n                })\r\n\r\n        }, (error) => {\r\n            callback(error, 0);\r\n        })\r\n\r\n    }\r\n\r\n    executeQuery(query: string, callback: (error: string, data: QueryResult) => void) {\r\n\r\n        if (this.database == null || this.longPollingListener == null) {\r\n            callback(\"Es besteht keine Verbindung zur Datenbank.\", null);\r\n            return;\r\n        }\r\n\r\n        this.database.executeQuery(query, (results: QueryResult[]) => {\r\n            callback(null,results.length == 0 ? {columns: [], values: []} : results[0]);\r\n        }, (error: string) => {\r\n            callback(error, null);\r\n        })\r\n\r\n    }\r\n\r\n}","import { Main } from \"../../main/Main.js\";\r\nimport { Module } from \"../../compiler/parser/Module.js\";\r\nimport { Klass } from \"../../compiler/types/Class.js\";\r\nimport { stringPrimitiveType } from \"../../compiler/types/PrimitiveTypes.js\";\r\nimport { Method, Parameterlist } from \"../../compiler/types/Types.js\";\r\nimport { RuntimeObject } from \"../../interpreter/RuntimeObject.js\";\r\nimport { ConnectionHelper } from \"./Connection.js\";\r\n\r\nexport class DatabaseManagerClass extends Klass {\r\n\r\n    constructor(module: Module) {\r\n        super(\"DatabaseManager\", module, \"Über die statische Methode DatabaseManager.getConnection(String code) kann die Verbindung zu einer Datenbank auf www.sql-ide.de aufgebaut werden.\");\r\n\r\n        this.setBaseClass(<Klass>module.typeStore.getType(\"Object\"));\r\n        let connectionType = <Klass>module.typeStore.getType(\"Connection\");\r\n \r\n        this.addMethod(new Method(\"getConnection\", new Parameterlist([\r\n            { identifier: \"code\", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },\r\n        ]), connectionType,\r\n            (parameters) => {\r\n\r\n                let o: RuntimeObject = parameters[0].value;\r\n                let code: string = parameters[1].value;\r\n\r\n                let main = module.main;\r\n                let interpreter = module.main.getInterpreter();\r\n                if(main.isEmbedded()){\r\n                    interpreter.throwException(\"Verbindung zu einer Datenbank kann nur von www.online-ide.de aus aufgebaut werden.\");\r\n                    return null;\r\n                }\r\n\r\n                let ch: ConnectionHelper = new ConnectionHelper(<Main>module.main);\r\n                interpreter.pauseForInput();\r\n                module.main.getBottomDiv().showHideDbBusyIcon(true);\r\n                ch.connect(code, (error: string) => {\r\n                    module.main.getBottomDiv().showHideDbBusyIcon(false);\r\n                    if(error == null){\r\n                        let connectionRuntimeObject = new RuntimeObject(connectionType);\r\n                        connectionRuntimeObject.intrinsicData[\"Helper\"] = ch;\r\n                        interpreter.resumeAfterInput({value: connectionRuntimeObject, type: connectionType}, true);\r\n                    } else {\r\n                        interpreter.resumeAfterInput(null);\r\n                        interpreter.throwException(error);\r\n                    }\r\n                })\r\n\r\n                return;\r\n\r\n            }, false, true, 'Baut eine Verbindung mit einer Datenbank auf www.sql-ide.de auf. Gibt ein Connection-Objekt zurück, das diese Verbindung repräsentiert.',\r\n            false));\r\n\r\n    }\r\n\r\n}","import { FileData, WorkspaceSettings } from \"../../communication/Data.js\";\r\nimport { AccordionElement } from \"../../main/gui/Accordion.js\";\r\nimport { MainBase } from \"../../main/MainBase.js\";\r\nimport { ArrayListClass } from \"../../runtimelibrary/collections/ArrayList.js\";\r\nimport { CollectionClass } from \"../../runtimelibrary/collections/Collection.js\";\r\nimport { IterableClass } from \"../../runtimelibrary/collections/Iterable.js\";\r\nimport { IteratorClass } from \"../../runtimelibrary/collections/Iterator.js\";\r\nimport { ListClass } from \"../../runtimelibrary/collections/List.js\";\r\nimport { ListIteratorImplClass } from \"../../runtimelibrary/collections/ListIteratorImpl.js\";\r\nimport { StackClass } from \"../../runtimelibrary/collections/Stack.js\";\r\nimport { VectorClass } from \"../../runtimelibrary/collections/Vector.js\";\r\nimport { SetClass } from \"../../runtimelibrary/collections/Set.js\";\r\nimport { SetIteratorImplClass } from \"../../runtimelibrary/collections/SetIteratorImpl.js\";\r\nimport { HashSetClass } from \"../../runtimelibrary/collections/HashSet.js\";\r\nimport { LinkedHashSetClass } from \"../../runtimelibrary/collections/LinkedHashSet.js\";\r\nimport { QueueClass } from \"../../runtimelibrary/collections/Queue.js\";\r\nimport { DequeClass } from \"../../runtimelibrary/collections/Deque.js\";\r\nimport { LinkedListClass } from \"../../runtimelibrary/collections/LinkedList.js\";\r\nimport { ConsoleClass } from \"../../runtimelibrary/Console.js\";\r\nimport { Actor as ActorClass } from \"../../runtimelibrary/graphics/Actor.js\";\r\nimport { AlignmentClass } from \"../../runtimelibrary/graphics/Alignment.js\";\r\nimport { BitmapClass } from \"../../runtimelibrary/graphics/Bitmap.js\";\r\nimport { CircleClass as CircleClass } from \"../../runtimelibrary/graphics/Circle.js\";\r\nimport { SectorClass } from \"../../runtimelibrary/graphics/Sector.js\";\r\nimport { ArcClass } from \"../../runtimelibrary/graphics/Arc.js\";\r\nimport { ColorClass } from \"../../runtimelibrary/graphics/Color.js\";\r\nimport { EllipseClass } from \"../../runtimelibrary/graphics/Ellipse.js\";\r\nimport { FilledShapeClass } from \"../../runtimelibrary/graphics/FilledShape.js\";\r\nimport { CollisionPairClass, GroupClass } from \"../../runtimelibrary/graphics/Group.js\";\r\nimport { KeyClass } from \"../../runtimelibrary/graphics/Key.js\";\r\nimport { PolygonClass } from \"../../runtimelibrary/graphics/Polygon.js\";\r\nimport { RectangleClass } from \"../../runtimelibrary/graphics/Rectangle.js\";\r\nimport { RepeatTypeClass } from \"../../runtimelibrary/graphics/RepeatType.js\";\r\nimport { RoundedRectangleClass } from \"../../runtimelibrary/graphics/RoundedRectangle.js\";\r\nimport { ScaleModeClass } from \"../../runtimelibrary/graphics/ScaleMode.js\";\r\nimport { ShapeClass } from \"../../runtimelibrary/graphics/Shape.js\";\r\nimport { SoundKlass as SoundClass } from \"../../runtimelibrary/graphics/Sound.js\";\r\nimport { SpriteClass, TileClass } from \"../../runtimelibrary/graphics/Sprite.js\";\r\nimport { SpriteLibraryClass } from \"../../runtimelibrary/graphics/SpriteLibraryEnum.js\";\r\nimport { TextClass } from \"../../runtimelibrary/graphics/Text.js\";\r\nimport { WorldClass } from \"../../runtimelibrary/graphics/World.js\";\r\nimport { InputClass } from \"../../runtimelibrary/Input.js\";\r\nimport { GamepadClass } from \"../../runtimelibrary/Gamepad.js\";\r\nimport { MathClass } from \"../../runtimelibrary/Math.js\";\r\nimport { MathToolsClass } from \"../../runtimelibrary/MathToolsClass.js\";\r\nimport { PrintStreamClass, SystemClass } from \"../../runtimelibrary/System.js\";\r\nimport { KeyListener, SystemToolsClass } from \"../../runtimelibrary/SystemTools.js\";\r\nimport { Runnable, TimerClass } from \"../../runtimelibrary/Timer.js\";\r\nimport { Workspace } from \"../../workspace/Workspace.js\";\r\nimport { Error, ErrorLevel } from \"../lexer/Lexer.js\";\r\nimport { TextPosition, Token, TokenType, TextPositionWithoutLength } from \"../lexer/Token.js\";\r\nimport { Interface, Klass, Visibility } from \"../types/Class.js\";\r\nimport { booleanPrimitiveType, BooleanType, CharacterType, charPrimitiveType, doublePrimitiveType, DoubleType, floatPrimitiveType, FloatType, IntegerType, intPrimitiveType, objectType, stringPrimitiveType, voidPrimitiveType, varType, longPrimitiveType, LongType } from \"../types/PrimitiveTypes.js\";\r\nimport { Attribute, Method, PrimitiveType, Type, Variable } from \"../types/Types.js\";\r\nimport { ASTNode, MethodDeclarationNode, TypeNode } from \"./AST.js\";\r\nimport { Breakpoint, Program, Statement } from \"./Program.js\";\r\nimport { SymbolTable } from \"./SymbolTable.js\";\r\nimport { MapClass } from \"../../runtimelibrary/collections/Map.js\";\r\nimport { HashMapClass } from \"../../runtimelibrary/collections/HashMap.js\";\r\nimport { TriangleClass } from \"../../runtimelibrary/graphics/Triangle.js\";\r\nimport { Main } from \"../../main/Main.js\";\r\nimport { LocalDateTimeClass, DayOfWeekEnum, MonthEnum } from \"../../runtimelibrary/graphics/LocalDateTime.js\";\r\nimport { LineClass } from \"../../runtimelibrary/graphics/Line.js\";\r\nimport { Vector2Class } from \"../../runtimelibrary/Vector2.js\";\r\nimport { MouseAdapterClass, MouseListenerInterface } from \"../../runtimelibrary/graphics/MouseListener.js\";\r\nimport { WebSocketClass } from \"../../runtimelibrary/network/WebSocket.js\";\r\nimport { WebSocketClientClass } from \"../../runtimelibrary/network/WebSocketClient.js\";\r\nimport { ProcessingClass } from \"../../runtimelibrary/graphics/Processing.js\";\r\nimport { TurtleClass } from \"../../runtimelibrary/graphics/Turtle.js\";\r\nimport { GNGZeichenfensterClass } from \"../../runtimelibrary/gng/GNGZeichenfenster.js\";\r\nimport { GNGRechteckClass } from \"../../runtimelibrary/gng/GNGRechteck.js\";\r\nimport { GNGBaseFigurClass } from \"../../runtimelibrary/gng/GNGBaseFigur.js\";\r\nimport { GNGAktionsempfaengerInterface } from \"../../runtimelibrary/gng/GNGAktionsempfaenger.js\";\r\nimport { GNGDreieckClass } from \"../../runtimelibrary/gng/GNGDreieck.js\";\r\nimport { GNGKreisClass } from \"../../runtimelibrary/gng/GNGKreis.js\";\r\nimport { GNGTurtleClass } from \"../../runtimelibrary/gng/GNGTurtle.js\";\r\nimport { GNGTextClass } from \"../../runtimelibrary/gng/GNGText.js\";\r\nimport { GNGEreignisbehandlung } from \"../../runtimelibrary/gng/GNGEreignisbehandlung.js\";\r\nimport { GNGFigurClass } from \"../../runtimelibrary/gng/GNGFigur.js\";\r\nimport { RandomClass } from \"../../runtimelibrary/Random.js\";\r\nimport { DirectionClass } from \"../../runtimelibrary/graphics/Direction.js\";\r\nimport { Patcher } from \"./Patcher.js\";\r\nimport { KeyEvent as KeyEventClass } from \"../../runtimelibrary/graphics/KeyEvent.js\";\r\nimport { Formatter } from \"../../main/gui/Formatter.js\";\r\nimport { RobotClass, RobotWorldClass } from \"../../runtimelibrary/graphics/3d/Robot.js\";\r\nimport { ResultSetClass } from \"../../runtimelibrary/database/ResultSet.js\";\r\nimport { DatabaseStatementClass } from \"../../runtimelibrary/database/DatabaseStatement.js\";\r\nimport { ConnectionClass } from \"../../runtimelibrary/database/Connection.js\";\r\nimport { DatabaseManagerClass } from \"../../runtimelibrary/database/DatabaseManager.js\";\r\nimport { DatabasePreparedStatementClass } from \"../../runtimelibrary/database/DatabasePreparedStatement.js\";\r\n\r\nexport type ExportedWorkspace = {\r\n    name: string;\r\n    modules: ExportedModule[];\r\n    settings: WorkspaceSettings;\r\n}\r\n\r\nexport type ExportedModule = {\r\n    name: string;\r\n    text: string;\r\n\r\n    is_copy_of_id?: number,\r\n    repository_file_version?: number,\r\n    identical_to_repository_version: boolean,\r\n\r\n}\r\n\r\nexport type File = {\r\n    name: string,\r\n    id?: number,\r\n    text: string,\r\n\r\n    text_before_revision: string,\r\n    submitted_date: string,\r\n    student_edited_after_revision: boolean,\r\n\r\n    is_copy_of_id?: number,\r\n    repository_file_version?: number,\r\n    identical_to_repository_version: boolean,\r\n\r\n    dirty: boolean,\r\n    saved: boolean,\r\n    version: number,\r\n    panelElement?: AccordionElement\r\n}\r\n\r\nexport type IdentifierPosition = {\r\n    position: TextPosition,\r\n    element: Type | Method | Attribute | Variable;\r\n}\r\n\r\nexport type MethodCallPosition = {\r\n    identifierPosition: TextPosition,\r\n    possibleMethods: Method[] | string, // string for print, println, ...\r\n    commaPositions: TextPosition[],\r\n    rightBracketPosition: TextPosition\r\n}\r\n\r\nexport class Module {\r\n    file: File;\r\n    static maxUriNumber: number = 0;\r\n    uri: monaco.Uri;\r\n    model: monaco.editor.ITextModel;\r\n    oldErrorDecorations: string[] = [];\r\n    lastSavedVersionId: number;\r\n    editorState: monaco.editor.ICodeEditorViewState;\r\n\r\n    isSystemModule: boolean = false;\r\n\r\n    breakpoints: Breakpoint[] = [];\r\n    breakpointDecorators: string[] = [];\r\n    decoratorIdToBreakpointMap: { [id: string]: Breakpoint } = {};\r\n\r\n    errors: Error[][] = [[], [], [], []]; // 1st pass, 2nd pass, 3rd pass\r\n\r\n    colorInformation: monaco.languages.IColorInformation[] = [];\r\n\r\n    // 1st pass: Lexer\r\n    tokenList: Token[];\r\n\r\n    // 2nd pass: ASTParser\r\n    mainProgramAst: ASTNode[];\r\n    classDefinitionsAST: ASTNode[];\r\n    typeNodes: TypeNode[];\r\n\r\n    // 3rd pass: TypeResolver fill in resolvedType in typeNodes and populate typeStore\r\n    typeStore: TypeStore;\r\n\r\n    // 4th pass: generate code and symbol tables\r\n\r\n    /*\r\n    The mainProgramAST holds statements to:\r\n    1. call static constructor of each used class\r\n    2. execute main Program\r\n    */\r\n\r\n    mainProgram?: Program;\r\n    mainProgramEnd: TextPosition;\r\n    mainSymbolTable: SymbolTable;\r\n\r\n    identifierPositions: { [line: number]: IdentifierPosition[] } = {};\r\n    methodCallPositions: { [line: number]: MethodCallPosition[] } = {};\r\n\r\n    dependsOnModules: Map<Module, boolean>;\r\n    isStartable: boolean;\r\n    dependsOnModulesWithErrors: boolean;\r\n\r\n    static uriMap: { [name: string]: number } = {};\r\n    bracketError: string;\r\n\r\n    constructor(file: File, public main: MainBase) {\r\n        if (file == null || this.main == null) return; // used by AdhocCompiler and ApiDoc\r\n\r\n        this.file = file;\r\n        // this.uri = monaco.Uri.from({ path: '/file' + (Module.maxUriNumber++) + '.learnJava', scheme: 'file' });\r\n        let path = file.name;\r\n\r\n        let uriCounter = Module.uriMap[path];\r\n        if (uriCounter == null) {\r\n            uriCounter = 0;\r\n        } else {\r\n            uriCounter++;\r\n        }\r\n        Module.uriMap[path] = uriCounter;\r\n\r\n        if (uriCounter > 0) path += \" (\" + uriCounter + \")\";\r\n        this.uri = monaco.Uri.from({ path: path, scheme: 'inmemory' });\r\n        this.model = monaco.editor.createModel(file.text, \"myJava\", this.uri);\r\n        this.model.updateOptions({ tabSize: 3, bracketColorizationOptions: {enabled: true} });\r\n        let formatter = new Formatter();\r\n\r\n        if(main.isEmbedded() && file.text != null && file.text.length > 3){\r\n            let edits = <monaco.languages.TextEdit[]>formatter.format(this.model);\r\n            this.model.applyEdits(edits);\r\n        }\r\n\r\n        this.lastSavedVersionId = this.model.getAlternativeVersionId();\r\n\r\n        let that = this;\r\n\r\n        this.model.onDidChangeContent(() => {\r\n            let versionId = that.model.getAlternativeVersionId();\r\n\r\n            if (versionId != that.lastSavedVersionId) {\r\n                that.file.dirty = true;\r\n                that.file.saved = false;\r\n                that.file.identical_to_repository_version = false;\r\n                that.lastSavedVersionId = versionId;\r\n            }\r\n\r\n            if(!that.main.isEmbedded()){\r\n                let main1: Main = <Main>main;\r\n                if(main1.workspacesOwnerId != main1.user.id){\r\n                    if(that.file.text_before_revision == null || that.file.student_edited_after_revision){\r\n                        that.file.student_edited_after_revision = false;\r\n                        that.file.text_before_revision = that.file.text;\r\n                        that.file.saved = false;\r\n                        main1.networkManager.sendUpdates(null, false);\r\n                        main1.bottomDiv.homeworkManager.showHomeWorkRevisionButton();\r\n                        main1.projectExplorer.renderHomeworkButton(that.file);\r\n                    }\r\n                } else {\r\n                    that.file.student_edited_after_revision = true;\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    toExportedModule(): ExportedModule {\r\n        return {\r\n            name: this.file.name,\r\n            text: this.getProgramTextFromMonacoModel(),\r\n            identical_to_repository_version: this.file.identical_to_repository_version,\r\n            is_copy_of_id: this.file.is_copy_of_id,\r\n            repository_file_version: this.file.repository_file_version\r\n        }\r\n    }\r\n\r\n    getMethodDeclarationAtPosition(position: { lineNumber: number; column: number; }): MethodDeclarationNode {\r\n\r\n        if(this.classDefinitionsAST == null) return null;\r\n        \r\n        for(let cd of this.classDefinitionsAST){\r\n            if(cd.type == TokenType.keywordClass || cd.type == TokenType.keywordEnum){\r\n                for(let methodAST of cd.methods){\r\n                    if(methodAST.position != null && methodAST.scopeTo != null){\r\n                        if(methodAST.position.line <= position.lineNumber && methodAST.scopeTo.line >= position.lineNumber){\r\n                            return methodAST;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        return null;\r\n    \r\n    }\r\n\r\n\r\n    static restoreFromData(f: FileData, main: MainBase): Module {\r\n\r\n        let patched = Patcher.patch(f.text);\r\n\r\n        let f1: File = {\r\n            name: f.name,\r\n            text: patched.patchedText,\r\n            text_before_revision: f.text_before_revision,\r\n            submitted_date: f.submitted_date,\r\n            student_edited_after_revision: false,\r\n            dirty: true,\r\n            saved: !patched.modified,\r\n            version: f.version,\r\n            id: f.id,\r\n            is_copy_of_id: f.is_copy_of_id,\r\n            repository_file_version: f.repository_file_version,\r\n            identical_to_repository_version: f.identical_to_repository_version\r\n        }\r\n\r\n        let m: Module = new Module(f1, main);\r\n\r\n        return m;\r\n\r\n    }\r\n\r\n    getFileData(workspace: Workspace): FileData {\r\n        let file = this.file;\r\n        let fd: FileData = {\r\n            id: file.id,\r\n            name: file.name,\r\n            text: file.text,\r\n            text_before_revision: file.text_before_revision,\r\n            submitted_date: file.submitted_date,\r\n            student_edited_after_revision: file.student_edited_after_revision,\r\n            version: file.version,\r\n            is_copy_of_id: file.is_copy_of_id,\r\n            repository_file_version: file.repository_file_version,\r\n            identical_to_repository_version: file.identical_to_repository_version,\r\n            workspace_id: workspace.id,\r\n            forceUpdate: false,\r\n            file_type: 0\r\n        }\r\n\r\n        return fd;\r\n    }\r\n\r\n    pushMethodCallPosition(identifierPosition: TextPosition, commaPositions: TextPosition[],\r\n        possibleMethods: Method[] | string, rightBracketPosition: TextPosition) {\r\n\r\n        let lines: number[] = [];\r\n        lines.push(identifierPosition.line);\r\n        for (let cp of commaPositions) {\r\n            if (lines.indexOf[cp.line] < 0) {\r\n                lines.push(cp.line);\r\n            }\r\n        }\r\n\r\n        let mcp: MethodCallPosition = {\r\n            identifierPosition: identifierPosition,\r\n            commaPositions: commaPositions,\r\n            possibleMethods: possibleMethods,\r\n            rightBracketPosition: rightBracketPosition\r\n        };\r\n\r\n        for (let line of lines) {\r\n            let mcpList = this.methodCallPositions[line];\r\n            if (mcpList == null) {\r\n                this.methodCallPositions[line] = [];\r\n                mcpList = this.methodCallPositions[line];\r\n            }\r\n            mcpList.push(mcp);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    toggleBreakpoint(lineNumber: number, rerender: boolean) {\r\n        this.getBreakpointPositionsFromEditor();\r\n        if (this.getBreakpoint(lineNumber, true) == null) {\r\n            this.setBreakpoint(lineNumber, 1);\r\n        }\r\n        if (rerender) {\r\n            this.renderBreakpointDecorators();\r\n        }\r\n    }\r\n\r\n    getBreakpoint(line: number, remove: boolean = false): Breakpoint {\r\n\r\n        for (let i = 0; i < this.breakpoints.length; i++) {\r\n            let b = this.breakpoints[i];\r\n            if (b.line == line) {\r\n                this.breakpoints.splice(i, 1);\r\n                if (b.statement != null) {\r\n                    b.statement.breakpoint = undefined;\r\n                }\r\n                return b;\r\n            }\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    setBreakpoint(line: number, column: number): Breakpoint {\r\n\r\n        let breakpoint: Breakpoint = {\r\n            line: line,\r\n            column: column,\r\n            statement: null\r\n        }\r\n\r\n        this.attachToStatement(breakpoint);\r\n        this.breakpoints.push(breakpoint);\r\n\r\n        return breakpoint;\r\n\r\n    }\r\n\r\n    attachToStatement(breakpoint: Breakpoint, programList?: Program[]) {\r\n\r\n        if (breakpoint.statement != null) {\r\n            breakpoint.statement.breakpoint = undefined;\r\n        }\r\n\r\n        if (programList == null) programList = this.getPrograms();\r\n\r\n        let nearestStatement: Statement = null;\r\n        let nearestDistance: number = 100000;\r\n\r\n        for (let program of programList) {\r\n            for (let statement of program.statements) {\r\n\r\n                let line = statement?.position?.line;\r\n                if (line != null && line >= breakpoint.line) {\r\n                    if (line - breakpoint.line < nearestDistance) {\r\n                        nearestStatement = statement;\r\n                        nearestDistance = line - breakpoint.line;\r\n                    }\r\n\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        breakpoint.statement = nearestStatement;\r\n        if (nearestStatement != null) {\r\n            nearestStatement.breakpoint = breakpoint;\r\n            // let pp = new ProgramPrinter();\r\n            // console.log(\"Attached Breakpoint line \" + breakpoint.line + \", column \" + \r\n            //     breakpoint.column + \" to statement \" + pp.print([nearestStatement]));\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    getPrograms(): Program[] {\r\n        let programList: Program[] = [];\r\n\r\n        if (this.mainProgram != null) {\r\n            programList.push(this.mainProgram);\r\n        }\r\n\r\n        if (this.typeStore != null) {\r\n\r\n            for (let type of this.typeStore.typeList) {\r\n                if (type instanceof Klass) {\r\n                    if (type.attributeInitializationProgram != null) {\r\n                        programList.push(type.attributeInitializationProgram);\r\n                    }\r\n                    for (let method of type.methods) {\r\n                        if (method.program != null) {\r\n                            programList.push(method.program);\r\n                        }\r\n                    }\r\n                    if (type.staticClass.attributeInitializationProgram != null) {\r\n                        programList.push(type.staticClass.attributeInitializationProgram);\r\n                    }\r\n                    for (let method of type.staticClass.methods) {\r\n                        if (method.program != null) {\r\n                            programList.push(method.program);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return programList;\r\n\r\n    }\r\n\r\n    renderBreakpointDecorators() {\r\n\r\n        this.getBreakpointPositionsFromEditor();\r\n\r\n        let decorations: monaco.editor.IModelDeltaDecoration[] = [];\r\n\r\n        for (let breakpoint of this.breakpoints) {\r\n            decorations.push({\r\n                range: { startLineNumber: breakpoint.line, endLineNumber: breakpoint.line, startColumn: 1, endColumn: 1 },\r\n                options: {\r\n                    isWholeLine: true, className: \"jo_decorate_breakpoint\",\r\n                    overviewRuler: {\r\n                        color: \"#580000\",\r\n                        position: monaco.editor.OverviewRulerLane.Left\r\n                    },\r\n                    minimap: {\r\n                        color: \"#580000\",\r\n                        position: monaco.editor.MinimapPosition.Inline\r\n                    },\r\n                    marginClassName: \"jo_margin_breakpoint\",\r\n                    stickiness: monaco.editor.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges\r\n                },\r\n                //@ts-ignore\r\n                breakpoint: breakpoint\r\n            });\r\n        }\r\n\r\n        this.breakpointDecorators = this.main.getMonacoEditor().deltaDecorations(this.breakpointDecorators, decorations);\r\n\r\n        this.decoratorIdToBreakpointMap = {};\r\n        for (let i = 0; i < this.breakpointDecorators.length; i++) {\r\n            this.decoratorIdToBreakpointMap[this.breakpointDecorators[i]] = this.breakpoints[i];\r\n        }\r\n\r\n    }\r\n\r\n    getBreakpointPositionsFromEditor() {\r\n        for (let decoration of this.main.getMonacoEditor().getModel().getAllDecorations()) {\r\n            if (decoration.options.marginClassName == \"margin_breakpoint\") {\r\n                let breakpoint = this.decoratorIdToBreakpointMap[decoration.id];\r\n                if (breakpoint != null) {\r\n                    breakpoint.line = decoration.range.startLineNumber;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    findSymbolTableAtPosition(line: number, column: number) {\r\n        if (this.mainSymbolTable == null) {\r\n            return null;\r\n        }\r\n\r\n        if (line > this.mainSymbolTable.positionTo.line ||\r\n            line == this.mainSymbolTable.positionTo.line && column > this.mainSymbolTable.positionTo.column\r\n        ) {\r\n            line = this.mainSymbolTable.positionTo.line;\r\n            column = this.mainSymbolTable.positionTo.column - 1;\r\n        }\r\n\r\n        return this.mainSymbolTable.findTableAtPosition(line, column);\r\n    }\r\n\r\n    getErrorCount(): number {\r\n\r\n        let ec = 0;\r\n        for (let el of this.errors) {\r\n            el.forEach(error => ec += error.level == \"error\" ? 1 : 0);\r\n            // ec += el.length;\r\n        }\r\n\r\n        return ec;\r\n    }\r\n\r\n    hasMainProgram() {\r\n\r\n        if (this.mainProgram == null) return false;\r\n        if (this.mainProgram.statements == null) return false;\r\n        return this.mainProgram.statements.length > 2 || this.mainProgram.statements.length == 2 && this.mainProgram.statements[0].type == TokenType.callMainMethod;\r\n\r\n    }\r\n\r\n    getProgramTextFromMonacoModel(): string {\r\n        return this.model.getValue(monaco.editor.EndOfLinePreference.LF, false);\r\n    }\r\n\r\n\r\n    addIdentifierPosition(position: TextPosition, element: Type | Method | Attribute | Variable) {\r\n        let positionList: IdentifierPosition[] = this.identifierPositions[position.line];\r\n        if (positionList == null) {\r\n            positionList = [];\r\n            this.identifierPositions[position.line] = positionList;\r\n        }\r\n        positionList.push({\r\n            position: position,\r\n            element: element\r\n        });\r\n    }\r\n\r\n\r\n    getTypeAtPosition(line: number, column: number): { type: Type, isStatic: boolean } {\r\n\r\n        let positionsOnLine = this.identifierPositions[line];\r\n        if (positionsOnLine == null) return null;\r\n\r\n        let foundPosition: IdentifierPosition = null;\r\n        for (let p of positionsOnLine) {\r\n            if (column >= p.position.column && column <= p.position.column + p.position.length) {\r\n                foundPosition = p;\r\n                let element = foundPosition.element;\r\n                if (element instanceof Method) {\r\n                    return { type: element, isStatic: false };\r\n                }\r\n                // Attribute, Variable\r\n                let type: Type = (element instanceof Type) ? element : element.type;\r\n                //@ts-ignore\r\n                if (foundPosition.position.length > 0 && element.type != null) {\r\n                    //@ts-ignore\r\n                    return { type: <Type>type, isStatic: false };\r\n                }\r\n\r\n                return { type: type, isStatic: foundPosition.position.length > 0 };\r\n\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getElementAtPosition(line: number, column: number): Klass | Interface | Method | Attribute | Variable {\r\n\r\n        let positionsOnLine = this.identifierPositions[line];\r\n        if (positionsOnLine == null) return null;\r\n\r\n        let bestFoundPosition: IdentifierPosition = null;\r\n        for (let p of positionsOnLine) {\r\n            if (column >= p.position.column && column <= p.position.column + p.position.length) {\r\n\r\n                if (p.position.length > 0) {\r\n                    if (bestFoundPosition == null) {\r\n                        bestFoundPosition = p;\r\n                    } else {\r\n                        if(p.element instanceof Method && bestFoundPosition.element instanceof Klass){\r\n                            bestFoundPosition = p;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return bestFoundPosition == null ? null : <any>bestFoundPosition.element;\r\n    }\r\n\r\n    copy(): Module {\r\n        let m = new Module(this.file, this.main);\r\n        m.model = this.model;\r\n        m.mainProgram = this.mainProgram;\r\n        this.mainProgram = null;\r\n        m.mainSymbolTable = this.mainSymbolTable;\r\n        this.mainSymbolTable = null;\r\n        m.typeStore = this.typeStore;\r\n        // this.typeStore = null;\r\n        m.isStartable = this.isStartable;\r\n        m.dependsOnModulesWithErrors = this.dependsOnModulesWithErrors;\r\n\r\n        m.breakpoints = this.breakpoints;\r\n        this.breakpoints = [];\r\n        let programs = m.getPrograms();\r\n\r\n        programs.forEach((p) => p.module = m);\r\n\r\n        for (let b of m.breakpoints) {\r\n            this.breakpoints.push({\r\n                line: b.line,\r\n                column: b.column,\r\n                statement: null\r\n            });\r\n\r\n            m.attachToStatement(b, programs);\r\n\r\n        }\r\n\r\n        this.file.dirty = true;\r\n\r\n        return m;\r\n    }\r\n\r\n    clear() {\r\n\r\n        this.identifierPositions = {};\r\n\r\n        if (this.file != null && this.file.dirty) {\r\n            // Lexer\r\n            this.tokenList = null;\r\n            this.errors[0] = [];\r\n\r\n            // AST Parser\r\n            this.errors[1] = [];\r\n\r\n\r\n        }\r\n\r\n        // type resolver\r\n        this.errors[2] = [];\r\n        this.typeNodes = [];\r\n        this.typeStore = new TypeStore();\r\n\r\n        // Code generator\r\n        this.errors[3] = [];\r\n        this.mainSymbolTable = new SymbolTable(null, { line: 1, column: 1, length: 1 }, { line: 100000, column: 1, length: 0 });\r\n        this.mainProgram = null;\r\n\r\n        this.methodCallPositions = {};\r\n        this.dependsOnModules = new Map();\r\n\r\n    }\r\n\r\n    hasErrors() {\r\n\r\n        for (let el of this.errors) {\r\n            if(el.find(error => error.level == \"error\")){\r\n                return true;\r\n            }\r\n            // if (el.length > 0) {\r\n            //     return true;\r\n            // }\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    getSortedAndFilteredErrors(): Error[] {\r\n\r\n        let list: Error[] = [];\r\n\r\n        for (let el of this.errors) {\r\n            list = list.concat(el);\r\n        }\r\n\r\n        list.sort((a, b) => {\r\n            if (a.position.line > b.position.line) {\r\n                return 1;\r\n            }\r\n            if (b.position.line > a.position.line) {\r\n                return -1;\r\n            }\r\n            if (a.position.column >= b.position.column) {\r\n                return 1;\r\n            }\r\n            return -1;\r\n        });\r\n\r\n        for (let i = 0; i < list.length - 1; i++) {\r\n            let e1 = list[i];\r\n            let e2 = list[i + 1];\r\n            if (e1.position.line == e2.position.line && e1.position.column + 10 > e2.position.column) {\r\n                if(this.errorLevelCompare(e1.level, e2.level) == 1){\r\n                    list.splice(i + 1, 1);\r\n                } else {\r\n                    list.splice(i, 1);\r\n                }\r\n                i--;\r\n            }\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    errorLevelCompare(level1: ErrorLevel, level2: ErrorLevel): number {\r\n        if(level1 == \"error\") return 1;\r\n        if(level2 == \"error\") return 2;\r\n        if(level1 == \"warning\") return 1;\r\n        if(level2 == \"warning\") return 2;\r\n        return 1;\r\n    }\r\n\r\n    renderStartButton() {\r\n        let $buttonDiv = this.file?.panelElement?.$htmlFirstLine?.find('.jo_additionalButtonStart');\r\n        if ($buttonDiv == null) return;\r\n\r\n        $buttonDiv.find('.jo_startButton').remove();\r\n\r\n        if (this.isStartable) {\r\n            let $startButtonDiv = jQuery('<div class=\"jo_startButton img_start-dark jo_button jo_active\" title=\"Hauptprogramm in der Datei starten\"></div>');\r\n            $buttonDiv.append($startButtonDiv);\r\n            let that = this;\r\n            $startButtonDiv.on('mousedown', (e) => e.stopPropagation());\r\n            $startButtonDiv.on('click', (e) => {\r\n                e.stopPropagation();\r\n\r\n                that.main.setModuleActive(that);\r\n\r\n                that.main.getInterpreter().start();\r\n            });\r\n\r\n        } \r\n    }\r\n\r\n\r\n}\r\n\r\nexport class BaseModule extends Module {\r\n    constructor(main: MainBase) {\r\n\r\n        super({ name: \"Base Module\", text: \"\", text_before_revision: null, submitted_date: null, student_edited_after_revision: false, dirty: false, saved: true, version: 1 , identical_to_repository_version: true}, main);\r\n\r\n        this.isSystemModule = true;\r\n        this.mainProgram = null;\r\n\r\n        this.clear();\r\n\r\n\r\n        this.typeStore.addType(voidPrimitiveType);\r\n        this.typeStore.addType(intPrimitiveType); \r\n        this.typeStore.addType(longPrimitiveType); \r\n        this.typeStore.addType(floatPrimitiveType);\r\n        this.typeStore.addType(doublePrimitiveType);\r\n        this.typeStore.addType(charPrimitiveType);\r\n        this.typeStore.addType(booleanPrimitiveType);\r\n        this.typeStore.addType(stringPrimitiveType);\r\n        this.typeStore.addType(objectType);\r\n        this.typeStore.addType(varType);\r\n\r\n        this.typeStore.addType(IntegerType);\r\n        this.typeStore.addType(LongType);\r\n        this.typeStore.addType(FloatType);\r\n        this.typeStore.addType(DoubleType);\r\n        this.typeStore.addType(CharacterType);\r\n        this.typeStore.addType(BooleanType);\r\n\r\n        // Collections Framework\r\n        this.typeStore.addType(new IteratorClass(this));\r\n        this.typeStore.addType(new IterableClass(this));\r\n        this.typeStore.addType(new CollectionClass(this));\r\n        this.typeStore.addType(new ListClass(this));\r\n        this.typeStore.addType(new ArrayListClass(this));\r\n        this.typeStore.addType(new VectorClass(this));\r\n        this.typeStore.addType(new QueueClass(this));\r\n        this.typeStore.addType(new DequeClass(this));\r\n        this.typeStore.addType(new LinkedListClass(this));\r\n        this.typeStore.addType(new StackClass(this));\r\n        this.typeStore.addType(new ListIteratorImplClass(this));\r\n        this.typeStore.addType(new SetClass(this));\r\n        this.typeStore.addType(new HashSetClass(this));\r\n        this.typeStore.addType(new LinkedHashSetClass(this));\r\n        this.typeStore.addType(new SetIteratorImplClass(this));\r\n        this.typeStore.addType(new MapClass(this));\r\n        this.typeStore.addType(new HashMapClass(this));\r\n\r\n        this.typeStore.addType(new ConsoleClass(this));\r\n        this.typeStore.addType(new MathClass(this));\r\n        this.typeStore.addType(new RandomClass(this));\r\n        this.typeStore.addType(new Vector2Class(this));\r\n        this.typeStore.addType(new MathToolsClass(this));\r\n        this.typeStore.addType(new KeyClass(this));\r\n        this.typeStore.addType(new SoundClass(this));\r\n        this.typeStore.addType(new InputClass(this));\r\n        this.typeStore.addType(new Runnable(this));\r\n        this.typeStore.addType(new TimerClass(this));\r\n        this.typeStore.addType(new ColorClass(this));\r\n        this.typeStore.addType(new ActorClass(this));\r\n        this.typeStore.addType(new DirectionClass(this));\r\n        this.typeStore.addType(new ShapeClass(this));\r\n        this.typeStore.addType(new FilledShapeClass(this));\r\n        this.typeStore.addType(new RectangleClass(this));\r\n        this.typeStore.addType(new RoundedRectangleClass(this));\r\n        this.typeStore.addType(new CircleClass(this));\r\n        this.typeStore.addType(new SectorClass(this));\r\n        this.typeStore.addType(new ArcClass(this));\r\n        this.typeStore.addType(new EllipseClass(this));\r\n        this.typeStore.addType(new BitmapClass(this));\r\n        this.typeStore.addType(new AlignmentClass(this));\r\n        this.typeStore.addType(new TextClass(this));\r\n        this.typeStore.addType(new ScaleModeClass(this));\r\n        this.typeStore.addType(new SpriteLibraryClass(this));\r\n        this.typeStore.addType(new RepeatTypeClass(this));\r\n        this.typeStore.addType(new TileClass(this));\r\n        this.typeStore.addType(new SpriteClass(this));\r\n        this.typeStore.addType(new CollisionPairClass(this));\r\n        this.typeStore.addType(new GroupClass(this));\r\n        this.typeStore.addType(new PolygonClass(this));\r\n        this.typeStore.addType(new LineClass(this));\r\n        this.typeStore.addType(new TriangleClass(this));\r\n        this.typeStore.addType(new TurtleClass(this));\r\n\r\n        this.typeStore.addType(new MouseListenerInterface(this));\r\n        this.typeStore.addType(new MouseAdapterClass(this));\r\n        this.typeStore.addType(new GamepadClass(this));\r\n        this.typeStore.addType(new WorldClass(this));\r\n        this.typeStore.addType(new ProcessingClass(this));\r\n\r\n        (<ActorClass>this.typeStore.getType(\"Actor\")).registerWorldType();\r\n\r\n\r\n        this.typeStore.addType(new PrintStreamClass(this));\r\n        this.typeStore.addType(new KeyListener(this));\r\n        this.typeStore.addType(new SystemClass(this));\r\n        this.typeStore.addType(new SystemToolsClass(this));\r\n        this.typeStore.addType(new DayOfWeekEnum(this));\r\n        this.typeStore.addType(new MonthEnum(this));\r\n        this.typeStore.addType(new LocalDateTimeClass(this));\r\n    \r\n        this.typeStore.addType(new WebSocketClientClass(this));\r\n        this.typeStore.addType(new WebSocketClass(this));\r\n\r\n        this.typeStore.addType(new RobotWorldClass(this));\r\n        this.typeStore.addType(new RobotClass(this));\r\n\r\n        this.typeStore.addType(new ResultSetClass(this));\r\n        this.typeStore.addType(new DatabaseStatementClass(this));\r\n        this.typeStore.addType(new DatabasePreparedStatementClass(this));\r\n        this.typeStore.addType(new ConnectionClass(this));\r\n        this.typeStore.addType(new DatabaseManagerClass(this));\r\n\r\n    \r\n\r\n        stringPrimitiveType.module = this;\r\n        // stringPrimitiveType.baseClass = <any>(this.typeStore.getType(\"Object\"));\r\n        // stringPrimitiveType.baseClass = objectType;\r\n        // IntegerType.baseClass = objectType;\r\n        // DoubleType.baseClass = objectType;\r\n        // FloatType.baseClass = objectType;\r\n        // CharacterType.baseClass = objectType;\r\n        // BooleanType.baseClass = objectType;\r\n\r\n    }\r\n\r\n    clearUsagePositions() {\r\n        for (let type of this.typeStore.typeList) {\r\n            type.clearUsagePositions();\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class GNGModule extends Module {\r\n    constructor(main: MainBase, moduleStore: ModuleStore) {\r\n\r\n        super({ name: \"Graphics and Games - Module\", text: \"\", text_before_revision: null, submitted_date: null, student_edited_after_revision: false, dirty: false, saved: true, version: 1 , identical_to_repository_version: true}, main);\r\n\r\n        this.isSystemModule = true;\r\n        this.mainProgram = null;\r\n\r\n        this.clear();\r\n\r\n        this.typeStore.addType(new GNGAktionsempfaengerInterface(this));\r\n        this.typeStore.addType(new GNGBaseFigurClass(this, moduleStore));\r\n        this.typeStore.addType(new GNGZeichenfensterClass(this, moduleStore));\r\n        this.typeStore.addType(new GNGEreignisbehandlung(this, moduleStore));\r\n        this.typeStore.addType(new GNGRechteckClass(this, moduleStore));\r\n        this.typeStore.addType(new GNGDreieckClass(this, moduleStore));\r\n        this.typeStore.addType(new GNGKreisClass(this, moduleStore));\r\n        this.typeStore.addType(new GNGTextClass(this, moduleStore));\r\n        this.typeStore.addType(new GNGTurtleClass(this, moduleStore));\r\n        this.typeStore.addType(new GNGFigurClass(this, moduleStore));\r\n        this.typeStore.addType(new KeyEventClass(this, moduleStore));\r\n\r\n    }\r\n\r\n    clearUsagePositions() {\r\n        for (let type of this.typeStore.typeList) {\r\n            type.clearUsagePositions();\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport class ModuleStore {\r\n\r\n    private modules: Module[] = [];\r\n    private moduleMap: {[name: string]: Module} = {};\r\n    private baseModule: BaseModule;\r\n\r\n    dirty: boolean = false;\r\n\r\n    constructor(private main: MainBase, withBaseModule: boolean, private additionalLibraries: string[] = []) {\r\n        if (withBaseModule) {\r\n            this.baseModule = new BaseModule(main);\r\n            this.putModule(this.baseModule);\r\n        }\r\n        \r\n        // additionalLibraries = [\"gng\"];\r\n\r\n        for(let lib of additionalLibraries){\r\n            this.addLibraryModule(lib);\r\n        }\r\n    }\r\n\r\n    addLibraryModule(identifier: string){\r\n        switch(identifier){\r\n            case \"gng\": this.putModule(new GNGModule(this.main, this));\r\n            break;\r\n        }\r\n    }\r\n\r\n    setAdditionalLibraries(additionalLibraries: string[]){\r\n\r\n        this.modules = this.modules.filter( m => (!m.isSystemModule) || m instanceof BaseModule);\r\n        this.moduleMap = {};\r\n\r\n        for(let m of this.modules){\r\n            this.moduleMap[m.file.name] =  m;\r\n        }\r\n\r\n        if(additionalLibraries != null){\r\n            for(let lib of additionalLibraries){\r\n                this.addLibraryModule(lib);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    findModuleById(module_id: number): Module {\r\n        for(let module of this.modules){\r\n            if(module.file.id == module_id) return module;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getBaseModule() {\r\n        return this.baseModule;\r\n    }\r\n\r\n    public clearUsagePositions() {\r\n        this.baseModule.clearUsagePositions();\r\n    }\r\n\r\n    copy(): ModuleStore {\r\n        let ms: ModuleStore = new ModuleStore(this.main, true);\r\n        for (let m of this.modules) {\r\n            if (!m.isSystemModule) {\r\n                ms.putModule(m.copy());\r\n            }\r\n        }\r\n        return ms;\r\n    }\r\n\r\n    findModuleByFile(file: File) {\r\n        for (let m of this.modules) {\r\n            if (m.file == file) {\r\n                return m;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    hasErrors(): boolean {\r\n        for (let m of this.modules) {\r\n            if (m.hasErrors()) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getFirstModule(): Module {\r\n        if (this.modules.length > 0) {\r\n            for (let mo of this.modules) {\r\n                if (!mo.isSystemModule) {\r\n                    return mo;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    isDirty(): boolean {\r\n\r\n        if (this.dirty) {\r\n            this.dirty = false;\r\n            return true;\r\n        }\r\n\r\n        let dirty = false;\r\n        for (let m of this.modules) {\r\n            if (m.file.dirty) {\r\n                dirty = true;\r\n                break;\r\n            }\r\n        }\r\n        return dirty;\r\n    }\r\n\r\n\r\n    getModules(includeSystemModules: boolean, excludedModuleName?: String): Module[] {\r\n        let ret = [];\r\n        for (let m of this.modules) {\r\n            if (m.file.name != excludedModuleName) {\r\n                if (!m.isSystemModule || includeSystemModules) {\r\n                    ret.push(m);\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    putModule(module: Module) {\r\n        this.modules.push(module);\r\n        this.moduleMap[module.file.name] = module;\r\n    }\r\n\r\n    removeModuleWithFile(file: File) {\r\n        for (let m of this.modules) {\r\n            if (m.file == file) {\r\n                this.removeModule(m);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    removeModule(module: Module) {\r\n\r\n        if (this.modules.indexOf(module) < 0) return;\r\n\r\n        this.modules.splice(this.modules.indexOf(module), 1);\r\n        this.moduleMap[module.file.name] = undefined;\r\n        this.dirty = true;\r\n    }\r\n\r\n    getModule(moduleName: string): Module {\r\n        return this.moduleMap[moduleName];\r\n    }\r\n\r\n    getType(identifier: string): { type: Type, module: Module } {\r\n        for (let module of this.modules) {\r\n            if (module.typeStore != null) {\r\n                let type = module.typeStore.getType(identifier);\r\n                if (type != null) {\r\n                    return { type: type, module: module }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getTypeCompletionItems(moduleContext: Module, rangeToReplace: monaco.IRange): monaco.languages.CompletionItem[] {\r\n\r\n        let completionItems: monaco.languages.CompletionItem[] = [];\r\n\r\n        for (let module of this.modules) {\r\n            if (module.typeStore != null) {\r\n                for (let type of module.typeStore.typeList) {\r\n                    if (module == moduleContext || (type instanceof Klass && type.visibility == Visibility.public)\r\n                        || module.isSystemModule) {\r\n\r\n                        let detail = \"Klasse\";\r\n\r\n                        if(type.documentation != null){\r\n                            detail = type.documentation;\r\n                        } else if (module.isSystemModule) {\r\n                            if (type instanceof PrimitiveType) {\r\n                                detail = \"Primitiver Datentyp\";\r\n                            } else {\r\n                                detail = \"Systemklasse\";\r\n                            }\r\n                        }\r\n\r\n                        let item = {\r\n                            label: type.identifier,\r\n                            detail: detail,\r\n                            insertText: type.identifier,\r\n                            kind: type instanceof PrimitiveType ?\r\n                                monaco.languages.CompletionItemKind.Struct : monaco.languages.CompletionItemKind.Class,\r\n                            range: rangeToReplace,\r\n                            generic: ((type instanceof Klass || type instanceof Interface) && type.typeVariables.length > 0)\r\n                        };\r\n\r\n                        completionItems.push(item);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return completionItems;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport class TypeStore {\r\n\r\n    typeList: Type[] = [];\r\n    typeMap: Map<string, Type> = new Map();\r\n\r\n    addType(type: Type) {\r\n        this.typeList.push(type);\r\n        this.typeMap.set(type.identifier, type);\r\n    }\r\n\r\n    clear() {\r\n        this.typeList.length = 0;\r\n        this.typeMap.clear();\r\n    }\r\n\r\n    getType(identifier: string) {\r\n        return this.typeMap.get(identifier);\r\n    }\r\n\r\n\r\n\r\n}\r\n","import { booleanPrimitiveType, charPrimitiveType, doublePrimitiveType, floatPrimitiveType, intPrimitiveType, longPrimitiveType, stringPrimitiveType, voidPrimitiveType } from \"../compiler/types/PrimitiveTypes.js\";\r\nimport { BaseModule } from \"../compiler/parser/Module.js\";\r\nimport { Klass, Interface, Visibility } from \"../compiler/types/Class.js\";\r\nimport { Method, Type } from \"../compiler/types/Types.js\";\r\nimport { Enum } from \"../compiler/types/Enum.js\";\r\nimport { getDeclarationAsString } from \"../compiler/types/DeclarationHelper.js\";\r\nimport { defineMyJava } from \"../main/gui/MyJava.js\";\r\n\r\nexport class ApiDoc {\r\n    start() {\r\n        this.initEditor();\r\n        this.initTypes();\r\n        this.initClassDocumentation();\r\n    }\r\n\r\n    initEditor(){\r\n\r\n        defineMyJava();\r\n\r\n        monaco.editor.defineTheme('myCustomThemeDark', {\r\n            base: 'vs-dark', // can also be vs-dark or hc-black\r\n            inherit: true, // can also be false to completely replace the builtin rules\r\n            rules: [\r\n                { token: 'method', foreground: 'dcdcaa', fontStyle: 'italic' },\r\n                { token: 'print', foreground: 'dcdcaa', fontStyle: 'italic bold' },\r\n                { token: 'class', foreground: '3DC9B0' },\r\n                { token: 'number', foreground: 'b5cea8' },\r\n                { token: 'type', foreground: '499cd6' },\r\n                { token: 'identifier', foreground: '9cdcfe' },\r\n                { token: 'statement', foreground: 'bb96c0', fontStyle: 'bold' },\r\n                { token: 'keyword', foreground: '68bed4', fontStyle: 'bold' },\r\n                // { token: 'comment.js', foreground: '008800', fontStyle: 'bold italic underline' },\r\n            ],\r\n            colors: {\r\n                \"editor.background\": \"#1e1e1e\"\r\n            }\r\n        });\r\n\r\n        monaco.editor.setTheme('myCustomThemeDark');\r\n\r\n        monaco.editor.create(jQuery('#editordiv')[0], {\r\n            language: \"myJava\"\r\n        });\r\n\r\n\r\n    }\r\n\r\n    initClassDocumentation() {\r\n        let b = booleanPrimitiveType;\r\n        let basemodule: BaseModule = new BaseModule(null);\r\n        let that = this;\r\n\r\n        let typeList = basemodule.typeStore.typeList.filter((a: Type) => a.identifier != null)\r\n            .sort(\r\n                (a: Type, b: Type) => a.identifier.localeCompare(b.identifier));\r\n\r\n\r\n        typeList.filter((type) => type instanceof Klass && !(type instanceof Enum)).forEach((type: Type, index) => {\r\n            let $menuItem = jQuery('<div class=\"jo_menu-class\">' + type.identifier + '</div>');\r\n            jQuery('#classes').append($menuItem)\r\n            $menuItem.on('click', () => {\r\n                that.showAPIHelp(type);\r\n            })\r\n        });\r\n\r\n        typeList.filter((type) => type instanceof Interface).forEach((type: Type, index) => {\r\n            let $menuItem = jQuery('<div class=\"jo_menu-class\">' + type.identifier + '</div>');\r\n            jQuery('#interfaces').append($menuItem)\r\n            $menuItem.on('click', () => {\r\n                that.showAPIHelp(type);\r\n            })\r\n        });\r\n\r\n        typeList.filter((type) => type instanceof Enum).forEach((type: Type, index) => {\r\n            let $menuItem = jQuery('<div class=\"jo_menu-class\">' + type.identifier + '</div>');\r\n            jQuery('#enums').append($menuItem)\r\n            $menuItem.on('click', () => {\r\n                that.showAPIHelp(type);\r\n            })\r\n        });\r\n\r\n\r\n    }\r\n\r\n    showAPIHelp(type: Type) {\r\n        let $main = jQuery('#main');\r\n        $main.empty();\r\n\r\n        let t = <Klass | Interface | Enum>type;\r\n        let $caption = jQuery('<div class=\"jo_type\"></div>');\r\n        $main.append($caption);\r\n        monaco.editor.colorize(getDeclarationAsString(t, \"\", true), \"myJava\", {}).then(\r\n            (html) => {$caption.append(jQuery(html))}\r\n        );\r\n\r\n        if(t instanceof Klass) this.showConstructors(t);\r\n        this.showMethods(t);\r\n        if(t instanceof Klass) this.showAttributes(t);\r\n\r\n    }\r\n\r\n    showConstructors(t: Klass){\r\n        let $main = jQuery('#main');\r\n        $main.append(jQuery('<div class=\"jo_constructor-heading\">Konstruktoren:</div>'));\r\n        let methods = t.methods.filter((m) => m.isConstructor);\r\n\r\n        while(methods.length == 0 && t.baseClass != null){\r\n            t = t.baseClass;\r\n            methods = methods.concat(t.getMethods(Visibility.protected).filter((m) => m.isConstructor));\r\n        }\r\n\r\n        methods.sort((a, b) => a.identifier.localeCompare(b.identifier));\r\n\r\n        if(methods.length == 0){\r\n            $main.append(jQuery('<div class=\"jo_method\">Keine</div>'));\r\n        } else {\r\n            for(let method of methods){\r\n                let $caption = jQuery(jQuery('<div class=\"jo_method\"></div>'));\r\n                $main.append($caption);\r\n                monaco.editor.colorize(getDeclarationAsString(method, \"\", true), \"myJava\", {}).then(\r\n                    (html) => {$caption.append(jQuery(html))}\r\n                );\r\n\r\n                if(method.documentation != null && method.documentation != \"\"){\r\n                    $main.append(jQuery('<div class=\"jo_documentation\">' + method.documentation + '</div>'));\r\n                }\r\n            }\r\n        }     \r\n    }\r\n\r\n    showMethods(t: Klass | Interface | Enum){\r\n        let $main = jQuery('#main');\r\n        $main.append(jQuery('<div class=\"jo_method-heading\">Methoden:</div>'));\r\n        let methods: Method[];\r\n        if(t instanceof Interface){\r\n            methods = t.methods.slice(0);\r\n        } else {\r\n            methods = t.getMethods(Visibility.protected).filter((m) => !m.isConstructor);\r\n        }\r\n        if(t instanceof Klass && t.staticClass != null){\r\n            methods = methods.concat(t.staticClass.getMethods(Visibility.protected).filter((m) => !m.isConstructor));\r\n        }\r\n\r\n        methods.sort((a, b) => a.identifier.localeCompare(b.identifier));\r\n\r\n        if(methods.length == 0){\r\n            $main.append(jQuery('<div class=\"jo_method\">Keine</div>'));\r\n        } else {\r\n            for(let method of methods){\r\n                let $caption = jQuery(jQuery('<div class=\"jo_method\"></div>'));\r\n                $main.append($caption);\r\n                monaco.editor.colorize(getDeclarationAsString(method, \"\", true), \"myJava\", {}).then(\r\n                    (html) => {$caption.append(jQuery(html))}\r\n                );\r\n\r\n                if(method.documentation != null && method.documentation != \"\"){\r\n                    $main.append(jQuery('<div class=\"jo_documentation\">' + method.documentation + '</div>'));\r\n                }\r\n            }\r\n        }     \r\n    }\r\n\r\n    showAttributes(t: Klass){\r\n        let $main = jQuery('#main');\r\n        $main.append(jQuery('<div class=\"jo_attribute-heading\">Attribute:</div>'));\r\n        let attributes = t.getAttributes(Visibility.protected);\r\n        if(t instanceof Klass && t.staticClass != null){\r\n            attributes = attributes.concat(t.staticClass.getAttributes(Visibility.protected));\r\n        }\r\n\r\n        attributes.sort((a, b) => a.identifier.localeCompare(b.identifier));\r\n\r\n        if(attributes.length == 0){\r\n            $main.append(jQuery('<div class=\"jo_method\">Keine</div>'));\r\n        } else {\r\n            for(let attribute of attributes){\r\n                let $caption = jQuery(jQuery('<div class=\"jo_method\"></div>'));\r\n                $main.append($caption);\r\n                monaco.editor.colorize(getDeclarationAsString(attribute, \"\", true), \"myJava\", {}).then(\r\n                    (html) => {$caption.append(jQuery(html))}\r\n                );\r\n\r\n                if(attribute.documentation != null && attribute.documentation != \"\"){\r\n                    $main.append(jQuery('<div class=\"jo_documentation\">' + attribute.documentation + '</div>'));\r\n                }\r\n            }\r\n        }     \r\n    }\r\n\r\n    initTypes() {\r\n        voidPrimitiveType.init();\r\n        intPrimitiveType.init();\r\n        longPrimitiveType.init();\r\n        floatPrimitiveType.init();\r\n        doublePrimitiveType.init();\r\n        booleanPrimitiveType.init();\r\n        stringPrimitiveType.init();\r\n        charPrimitiveType.init();\r\n    }\r\n\r\n}\r\n\r\njQuery(() => { \r\n    \r\n        //@ts-ignore\r\n        window.require.config({ paths: { 'vs': 'lib/monaco-editor/dev/vs' } });\r\n        //@ts-ignore\r\n        window.require.config({\r\n            'vs/nls': {\r\n                availableLanguages: {\r\n                    '*': 'de'\r\n                }\r\n            },\r\n            ignoreDuplicateModules: [\"vs/editor/editor.main\"]\r\n        });\r\n    \r\n        //@ts-ignore\r\n        window.require(['vs/editor/editor.main'], function () {\r\n\r\n            new ApiDoc().start(); \r\n    \r\n            // main.loadWorkspace();\r\n    \r\n    \r\n        });\r\n    \r\n    \r\n    \r\n});","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport function defineMyJava() {\r\n    monaco.languages.register({ id: 'myJava', \r\n    extensions: ['.learnJava'],\r\n    //  mimetypes: [\"text/x-java-source\", \"text/x-java\"]  \r\n    });\r\n\r\n    let conf: monaco.languages.LanguageConfiguration = {\r\n        indentationRules: {\r\n            // ^(.*\\*/)?\\s*\\}.*$\r\n            decreaseIndentPattern: /^(.*\\*\\/)?\\s*\\}.*$/,\r\n            // ^.*\\{[^}\"']*$\r\n            increaseIndentPattern: /^.*\\{[^}\"']*$/\r\n        },\r\n        onEnterRules: [\r\n            {\r\n                // e.g. /** | */\r\n                beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\r\n                afterText: /^\\s*\\*\\/$/,\r\n                action: { indentAction: monaco.languages.IndentAction.IndentOutdent, appendText: ' * ' }\r\n            },\r\n            {\r\n                // e.g. /** ...|\r\n                beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\r\n                action: { indentAction: monaco.languages.IndentAction.None, appendText: ' * ' }\r\n            },\r\n            {\r\n                // e.g.  * ...|\r\n                // beforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\r\n                beforeText: /^(\\t|(\\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\r\n                action: { indentAction: monaco.languages.IndentAction.None, appendText: '* ' }\r\n            },\r\n            {\r\n                // e.g.  */|\r\n                beforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\r\n                action: { indentAction: monaco.languages.IndentAction.None, removeText: 1 }\r\n            },\r\n            {\r\n                // e.g.  *-----*/|\r\n                beforeText: /^(\\t|(\\ \\ ))*\\ \\*[^/]*\\*\\/\\s*$/,\r\n                action: { indentAction: monaco.languages.IndentAction.None, removeText: 1 }\r\n            }\r\n        ],\r\n        // the default separators except `@$`\r\n        wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n        comments: {\r\n            lineComment: '//',\r\n            blockComment: ['/*', '*/'],\r\n        },\r\n        brackets: [\r\n            ['{', '}'],\r\n            ['[', ']'],\r\n            ['(', ')'],\r\n        ],\r\n        autoClosingPairs: [\r\n            { open: '{', close: '}' },\r\n            { open: '[', close: ']' },\r\n            { open: '(', close: ')' },\r\n            // { open: '\"', close: '\"' },\r\n            { open: '\\'', close: '\\'' },\r\n        ],\r\n        surroundingPairs: [\r\n            { open: '{', close: '}' },\r\n            { open: '[', close: ']' },\r\n            { open: '(', close: ')' },\r\n            { open: '\"', close: '\"' },\r\n            { open: '\\'', close: '\\'' },\r\n            { open: '<', close: '>' },\r\n        ],\r\n        folding: {\r\n            markers: {\r\n                start: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))\"),\r\n                end: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))\")\r\n            }\r\n        },\r\n\r\n    };\r\n    let language = {\r\n        defaultToken: '',\r\n        tokenPostfix: '.java',\r\n        keywords: [\r\n            'abstract', 'continue', 'new', 'switch', 'assert', 'default',\r\n            'goto', 'package', 'synchronized', 'private',\r\n            'this', 'implements', 'protected', 'throw',\r\n            'import', 'public', 'throws', 'case', 'instanceof', 'return',\r\n            'transient', 'catch', 'extends', 'try', 'final',\r\n            'static', 'finally', 'strictfp',\r\n            'volatile', 'const', 'native', 'super', 'true', 'false', 'null'\r\n        ],\r\n        print: ['print', 'println'],\r\n        statements: ['for', 'while', 'if', 'then', 'else', 'do', 'break', 'continue'],\r\n        types: ['int', 'boolean', 'char', 'float', 'double', 'long', 'void', 'byte', 'short',\r\n        'class', 'enum', 'interface', 'var'],\r\n        operators: [\r\n            '=', '>', '<', '!', '~', '?', ':',\r\n            '==', '<=', '>=', '!=', '&&', '||', '++', '--',\r\n            '+', '-', '*', '/', '&', '|', '^', '%', '<<',\r\n            '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',\r\n            '^=', '%=', '<<=', '>>=', '>>>='\r\n        ],\r\n        // we include these common regular expressions\r\n        symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n        digits: /\\d+(_+\\d+)*/,\r\n        octaldigits: /[0-7]+(_+[0-7]+)*/,\r\n        binarydigits: /[0-1]+(_+[0-1]+)*/,\r\n        hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\r\n        // The main tokenizer for our languages\r\n        tokenizer: {\r\n            root: [\r\n                // identifiers and keywords\r\n                // [/[a-zA-Z_$][\\w$]*/, {\r\n                [/\\.[A-Z$ÄÖÜ][\\w$äöüßÄÖÜ]*(?=\\()/, {\r\n                    cases: {\r\n                        '@default': 'method'\r\n                    }\r\n                }],\r\n                [/[a-z_$äöü][\\w$äöüßÄÖÜ]*(?=\\()/, {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@statements': { token: 'statement.$0' },\r\n                        '@types': { token: 'type.$0' },\r\n                        '@print': { token: 'print.$0' },\r\n                        '@default': 'method'\r\n                    }\r\n                }],\r\n                [/[a-z_$äöüß][\\w$äöüßÄÖÜ]*/, {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@statements': { token: 'statement.$0' },\r\n                        '@types': { token: 'type.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n                [/[A-Z$ÄÖÜ][\\w$äöüßÄÖÜ]*/, 'class'],\r\n                // whitespace\r\n                { include: '@whitespace' },\r\n                // delimiters and operators\r\n                [/[{}()\\[\\]]/, '@brackets'],\r\n                [/[<>](?!@symbols)/, '@brackets'],\r\n                [/@symbols/, {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n                // @ annotations.\r\n                [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, 'annotation'],\r\n                // numbers\r\n                [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float'],\r\n                [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float'],\r\n                [/0[xX](@hexdigits)[Ll]?/, 'number.hex'],\r\n                [/0(@octaldigits)[Ll]?/, 'number.octal'],\r\n                [/0[bB](@binarydigits)[Ll]?/, 'number.binary'],\r\n                [/(@digits)[fFdD]/, 'number.float'],\r\n                [/(@digits)[lL]?/, 'number'],\r\n                // delimiter: after number because of .\\d floats\r\n                [/[;,.]/, 'delimiter'],\r\n                // strings\r\n                [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n                [/\"\"\"/, 'string', '@string'],\r\n                [/\"/, 'string', '@string'],\r\n                // characters\r\n                [/'[^\\\\']'/, 'string'],\r\n                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\r\n                [/'/, 'string.invalid']\r\n            ],\r\n            whitespace: [\r\n                [/[ \\t\\r\\n]+/, ''],\r\n                [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@javadoc'],\r\n                [/\\/\\*/, 'comment', '@comment'],\r\n                [/\\/\\/.*$/, 'comment'],\r\n            ],\r\n            comment: [\r\n                [/[^\\/*]+/, 'comment'],\r\n                // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\r\n                // [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\r\n                [/\\*\\//, 'comment', '@pop'],\r\n                [/[\\/*]/, 'comment']\r\n            ],\r\n            //Identical copy of comment above, except for the addition of .doc\r\n            javadoc: [\r\n                [/[^\\/*]+/, 'comment.doc'],\r\n                // [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\r\n                [/\\/\\*/, 'comment.doc.invalid'],\r\n                [/\\*\\//, 'comment.doc', '@pop'],\r\n                [/[\\/*]/, 'comment.doc']\r\n            ],\r\n            string: [\r\n                [/[^\\\\\"]+/, 'string'],\r\n                [/@escapes/, 'string.escape'],\r\n                [/\\\\./, 'string.escape.invalid'],\r\n                [/\"\"\"/, 'string', '@pop'],\r\n                [/\"/, 'string', '@pop']\r\n            ],\r\n            \r\n        },\r\n    };\r\n\r\n    //@ts-ignore\r\n    monaco.languages.setLanguageConfiguration('myJava', conf);\r\n    //@ts-ignore\r\n    monaco.languages.setMonarchTokensProvider('myJava', language);\r\n\r\n    // monaco.languages.registerCompletionItemProvider(\"myJava\", {    // Or any other language...\r\n    //     provideCompletionItems: (model, position) => {\r\n    //         // Retrieve the text until the current cursor's position, anything\r\n    //         // after that doesn't really matter.\r\n    //         var textToMatch = model.getValueInRange({\r\n    //             startLineNumber: 1,\r\n    //             startColumn: 1,\r\n    //             endLineNumber: position.lineNumber,\r\n    //             endColumn: position.column\r\n    //         });\r\n\r\n    //         // Return JSON array containing all completion suggestions.\r\n    //         return {\r\n    //             suggestions: [\r\n    //                 // Example: io.write ()\r\n    //                 {\r\n    //                     label: \"io.write (string)\",\r\n    //                     kind: monaco.languages.CompletionItemKind.Function,\r\n    //                     documentation: \"Writes a string to stdout.\",\r\n    //                     insertText: \"io.write (\\\"\\\")\",  // Escape JSON as needed.\r\n    //                     range: {\r\n    //                         startLineNumber: position.lineNumber,\r\n    //                         endLineNumber: position.lineNumber,\r\n    //                         startColumn: position.column,\r\n    //                         endColumn: position.column\r\n    //                     }\r\n    //                 },  // Other items.\r\n    //             ]\r\n    //         };\r\n    //     }\r\n    // });\r\n\r\n\r\n}"],"names":["TokenType","Visibility","booleanPrimitiveTypeCopy","TokenTypeReadable","identifier","integerConstant","floatingPointConstant","booleanConstant","stringConstant","charConstant","true","false","keywordClass","keywordThis","keywordSuper","keywordNew","keywordInterface","keywordEnum","keywordVoid","keywordAbstract","keywordPublic","keywordProtected","keywordPrivate","keywordTransient","keywordStatic","keywordExtends","keywordImplements","keywordWhile","keywordDo","keywordFor","keywordSwitch","keywordCase","keywordDefault","keywordIf","keywordThen","keywordElse","keywordReturn","keywordBreak","keywordContinue","keywordNull","keywordFinal","keywordInstanceof","keywordPrint","keywordPrintln","leftBracket","rightBracket","leftSquareBracket","rightSquareBracket","leftCurlyBracket","rightCurlyBracket","leftRightSquareBracket","dot","minus","modulo","plus","multiplication","division","singleQuote","doubleQuote","doubleMinus","doublePlus","lower","greater","lowerOrEqual","greaterOrEqual","equal","notEqual","assignment","plusAssignment","minusAssignment","multiplicationAssignment","divisionAssignment","moduloAssignment","ampersand","and","or","not","ANDAssigment","XORAssigment","ORAssigment","shiftLeftAssigment","shiftRightAssigment","shiftRightUnsignedAssigment","OR","XOR","tilde","shiftLeft","shiftRight","shiftRightUnsigned","ternaryOperator","semicolon","colon","ellipsis","comma","backslash","at","space","tab","newline","identifierChar","comment","endofSourcecode","specialCharList","linefeed","keywordList","EscapeSequenceList","Type","constructor","onlyFirstPass","usagePositions","Map","documentation","toTokenType","clearUsagePositions","this","PrimitiveType","initialValue","description","equals","type","getResultType","operation","secondOperandType","opTypeMap","operationTable","canCastTo","canCastToMap","getCastInformation","allowsNull","valueToString","value","Attribute","name","updateValue","isStatic","visibility","isFinal","Method","parameterlist","returnType","invokeOrAST","isAbstract","isConstructor","super","isVirtual","reserveStackForLocalVariables","genericTypeMap","invoke","program","method","signature","id","p","parameters","hasGenericTypes","implements","m","length","i","myParameter","mParameter","hasEllipsis","isEllipsis","getParameterType","index","getParameter","getReturnType","getParameterCount","getParameterList","getSignatureWithReturnParameter","getCompletionLabel","label","getTypeIdentifier","arrayOfType","getCompletionSnippet","leftBracketAlreadyThere","snippet","isVoidReturnDelta","debugOutput","compute","firstOperand","secondOperand","castTo","Parameterlist","computeId","s","_a","map","tv","join","_b","RuntimeObject","klass","intrinsicData","class","initializeAttributeValues","getValue","attributeIndex","av","attributes","Array","numberOfAttributesIncludingBaseClass","fill","att","v","object","baseClass","LabelManager","maxLabelIndex","labeledNodes","labelMap","jumpNodesToResolve","switchStatements","correctPositionsAfterInsert","insertPosition","insertedLength","ln","position","registerSwitchStatement","switchStatement","push","insertJumpNode","codeGenerator","labelIndex","statementList","statements","node","stepFinished","pushStatements","registerJumpNode","markJumpDestination","offset","labeledNode","set","removeNode","n","indexOf","newNode","registerJumpDestination","ntr","resolveNodes","jn","dest","get","destination","sw","dl","destinationLabels","destinationMap","constant","defaultDestination","Klass","module","typeVariables","isTypeVariable","typeVariablesReady","firstPassImplements","postConstructorCallbacks","methods","methodMap","attributeMap","public","staticClass","StaticClass","attributeInitializationProgram","labelManager","setupAttributeIndicesRecursive","numberOfAttributesInBaseClasses","a","getNonGenericClass","k","isGenericVariantFrom","getNonGenericIdentifier","implementsInterface","i1","getThisOrExtendedInterface","getImplementedInterface","i2","registerUsedSystemClasses","usedSystemClasses","isSystemModule","cd","getCompositeData","interf","cdMap","Interface","cda","multiples","ArrayType","getPostConstructorCallbacks","c","callbacks","concat","getCompletionItems","visibilityUpTo","identifierAndBracketAfterCursor","rangeToReplace","currentMethod","itemList","attribute","getAttributes","kind","monaco","languages","CompletionItemKind","Field","insertText","range","undefined","getMethods","pushSuperCompletionItem","filterText","command","title","arguments","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","replace","pushStaticInitializationPrograms","programStack","programPosition","textPosition","line","column","callbackAfterReturn","isCalledFromOutside","getMethodBySignature","setBaseClass","addMethod","addAttribute","nullType","firstOpClass","typeLeft","typeRight","upToVisibility","filter","baseClassUptoVisibility","protected","found","m1","upToVisibilityInBaseClass","a1","hasConstructor","hasParameterlessConstructor","hasConstructorWithParameters","getParameterlessConstructor","getConstructor","parameterTypes","classIdentifier","constructors","findSuitableMethods","getMethodsThatFitWithCasting","searchConstructor","methodList","staticMethods","error","getMethod","getAttribute","foundButInvisible","attributeNotFound","baseClassAttribute","Math","min","shouldImplement","checkInheritance","dontInheritFrom","message","missingMethods","missingAbstractMethods","implementedMethods","missingInterfaceMethods","hierarchy","abstractMethods","isImplemented","hasAncestorOrIs","maxLength","private","clone","newKlass","Object","create","slice","classObject","detail","color","Color","visibilityUpToBaseClass","notFound","baseClassAttributeWithError","extends","if1","if2","newInterface","methodsWithSubInterfaces","visitedInterfaces","visitedMethods","todo","pop","nonGenericCastable","type2","type1","suitableMethods","howManyCastingsMax","oneWithCorrectIdentifierFound","howManyCastings","suits","mParameterType","givenType","stringPrimitiveType","mParameterTypeEllispsis","j","typeString","getVisibilityUpTo","objectType","currentClassContext","UnboxableKlass","unboxableAs","includes","Error","lengthAttribute","intPrimitiveType","array","destType","s1","formatAsJavadocComment","indent","indentString","RegExp","stringWrap","nullToString","floatToString","val","Number","isInteger","IntPrimitiveType","init","longPrimitiveType","floatPrimitiveType","doublePrimitiveType","booleanPrimitiveType","automatic","needsStatement","charPrimitiveType","String","fromCharCode","trunc","StringPrimitiveType","stringClass","forEach","declaration","charAt","localeCompare","caseFirst","sensitivity","toLowerCase","endsWith","startsWith","toLocaleLowerCase","toLocaleUpperCase","substring","trim","lastIndexOf","pattern","regExp","match","strings","split","values","err","nullAllowedFor","typeAndNull","OperandIsNull","checkNotNull","voidPrimitiveType","LexerState","charCodeAt","varType","IntegerType","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","parseInt","v0","v1","sign","toString","LongType","FloatType","MAX_VALUE","MIN_VALUE","NaN","NEGATIVE_INFINITY","POSITIVE_INFINITY","parseFloat","isNaN","Infinity","DoubleType","CharacterType","BooleanType","TokenTypeToDataTypeMap","ListIteratorImplClass","listHelper","interpreter","typeStore","getType","rt","IteratorHelper","typeE","tvE","scopeFrom","scopeTo","iteratorInterface","hasNext","next","remove","nextPos","objectArray","throwException","valueArray","splice","ArrayListClass","collectionInterface","typeA","tvA","listInterface","iteratorType","o","ah","ListHelper","main","getInterpreter","getIterator","r","add","element","addAll","clear","contains","removeObject","isEmpty","size","to_String","runtimeObject","allElementsPrimitive","dataType","toStringParameters","isSuperCall","stackframeBegin","operator","leftType","copyReturnValueToStackframePos0","leaveThisObjectOnStack","methodWasInjected","runTimer","getIteratorMethod","iteratorWithError","execute","iterator","nextMethod","hasNextMethod","iteratorAsValue","objWithError","obj","executeImmediatelyInNewStackframe","oldValue","peek","peek_last_or_null","peek_first_or_null","removeLast_or_error","addLast","addFirst","removeFirstOccurrence","peek_or_null","poll_or_null","removeFirst_or_error","CollectionClass","iterableInterface","IterableClass","IteratorClass","ListClass","StackClass","vectorType","VectorClass","SetClass","SetIteratorImplClass","MapHelper","SetIteratorHelper","SetHelper","key","console","log","adAll","ret","addToSet","delete","HashSetClass","setInterface","mh","LinkedHashSetClass","QueueClass","DequeClass","QueueInterface","LinkedListClass","dequeInterface","ConsoleClass","getBottomDiv","$consoleTab","find","append","EnumRuntimeObject","en","enumValue","Enum","enumValueNodes","enumInfoList","identifierToInfoMap","indexToInfoMap","valueList","evn","ev","ordinal","ei","that","vi","getOrdinal","valueIdentifier","enumInfo","enumObject","PerformanceCollector","url","startTime","pe","performanceData","count","sumTime","dt","round","performance","now","performanceDataCount","lastTimeSent","request","data","ajax","successCallback","errorCallback","showNetworkBusy","time","$","async","JSON","stringify","contentType","success","response","registerPerformanceEntry","jqXHR","statusText","status","busy","jQuery","show","hide","ColorLexer","hexColorRegExp","rgbColorRegExp","rgbaColorRegExp","getColorInfo","red","green","blue","alpha","m2","m3","ColorHelper","predefinedColors","substr","endChar","Lexer","colorLexer","spaceTokens","correspondingBracket","lex","input","tokenList","errorList","bracketError","bracketStack","pos","nonSpaceLastTokenType","colorInformation","colorIndices","tokens","errors","currentChar","nextChar","mainState","bracketOpen","bracketClosed","setBracketError","processColorIndices","colorIndex","colorToken","previousToken","getLastNonSpaceToken","tt","nextTokens","getNextNonSpaceTokens","compareTokenTypes","startLineNumber","startColumn","endLineNumber","endColumn","colorIdentifier","colorValue","tokenTypeList","tokenIndex","d","foundToken","checkClosingBracket","openBracket","char","specialCharToken","pushToken","lexMultilineComment","lexEndofLineComment","isDigit","lexNumber","lexShiftLeft","lexShiftRight","lexCharacterConstant","lexTripleQuoteStringConstant","lexStringConstant","lexSpace","lexAnnotation","lexIdentifierOrKeyword","lexShiftRightUnsigned","text","t","pushError","errorLevel","level","base","charCode","posStart","posEnd","escapeChar","parseStringLiteralEscapeCharacter","StringLines","restOfLine","currentStringLine","lastLine","hex","fromCodePoint","lastCharWasNewline","firstChar","radix","exponent","hasExponential","posExponentStart","exponentString","pow","isSpace","SymbolTable","parentSymbolTable","positionFrom","positionTo","maxId","beginsNewStackframe","childSymbolTables","variableMap","classContext","parent","getImitation","imitation","st","maxStackPos","variable","stackPos","stackframeSize","getLocalVariableCompletionItems","completionItems","Snippet","Variable","findTableAtPosition","containsPosition","shortestSymbolTableContainingPosition","shortestPosition","st1","CodeGenerator","initStackFrameNodes","startAdhocCompilation","moduleStore","symbolTable","heap","symbolTableStack","currentSymbolTable","oldStackframeSize","nextFreeRelativeStackPos","currentProgram","breakNodeStack","continueNodeStack","generateMain","start","lastToken","mainSymbolTable","generateClasses","lookForStaticVoidMain","mainProgram","classNode1","mainMethod","classNode","classDefinitionsAST","ct","resolvedType","pt","initCurrentProgram","generateClass","generateEnum","checkDoubleMethodDeclaration","enumNode","pushNewSymbolTable","enumClass","initialization","initializeAttribute","lastStatement","methodNode","compileMethod","popSymbolTable","enumValueNode","constructorParameters","processEnumConstructorCall","commaPositions","rightBracketPosition","constructorCallProgram","parameterNodes","typeNode","processNode","pushMethodCallPosition","isAssignable","srcType","newType","stackPosRelative","stackframeDelta","ellipsisParameterCount","parameterCount","arrayType","inheritanceError","getInheritanceQuickFix","annotation","cie","signatureMap","cieType","editsProvider","uri","resource","edit","getSuperconstructorCalls","nodes","superconstructorCallsFound","isFirstStatement","checkIfMethodIsVirtual","superconstructorCalls","superconstructorCallEnsured","quickFix","methodCall","severity","MarkerSeverity","_c","baseClassConstructor","stackposOfVariable","actorClass","generateStatements","withReturnStatement","mo","getModules","typeList","attributeIdentifier","useThisObject","initializationType","ensureAutomaticCasting","attributeType","leaveValueOnStack","isAdhocCompilation","mainProgramAst","hasMainProgram","removeLastStatement","lastPosition","mainProgramEnd","pauseAfterProgramEnd","typeFrom","typeTo","nodeFrom","checkIfAssignmentInstedOfEqual","ensureAutomaticToString","codepos","textposition","automaticToString","toStringMethod","insertOrPushStatements","conditionType","endPosition","processStatementsInsideBlock","lastNode","assign","popCount","insertStatements","isArray","statement","deleteStepFinishedFlagOnStepBefore","lst","beginNewStackframe","initStackFrameNode","reserveForLocalVariables","declarationError","usedBeforeInitialization","initStackframeNode","openBreakScope","openContinueScope","pushBreakNode","breakNode","pushContinueNode","continueNode","closeBreakScope","breakTargetLabel","lm","breakNodes","bn","closeContinueScope","continueTargetLabel","continueNodes","breakOccured","isLeftSideOfAssignment","processBinaryOp","processUnaryOp","pushConstant","callMethod","stackType","resolveIdentifier","initialized","selectArrayElement","incrementDecrementBeforeOrAfter","superconstructorCall","pushThisOrSuper","pushAttribute","newObject","processWhile","processDo","processFor","processForLoopOverCollection","processIf","processSwitch","processReturn","localVariableDeclaration","processArrayLiteral","processNewArray","processPrint","processManualCast","termInsideBrackets","pushTypePosition","typeFrom1","whatToCast","castToType","pushCastToStatement","withColor","empty","dimension","ec","elementCount","bes","ain","sType","targetType","numberOfElementsToAdd","dontWarnWhenNoInitialization","variableType","declareVariableOnHeap","pushUsagePosition","pushOnTopOfStackForInitialization","initType","initializer","term","condition","isString","isEnum","switchType","endLabel","caseNodes","caseNode","caseTerm","info","ls","endOfIf","withReturnStatementElse","beginElse","withReturnStatementIf","statementsIfTrue","statementsIfFalse","statementsBefore","labelBeforeCondition","labelAfterForLoop","continueLabelIndex","statementsAfter","stackPosForCollection","collection","collectionElementType","collectionType","noCastingNeeded","variableIdentifier","variablePosition","variableStackPos","stackPosOfCounterVariableOrIterator","stackPosOfCollection","stackPosOfElement","typeOfElement","stackPosOfCounter","lastStatementBeforeCasting","jumpNode","oldStatementCount","conditionBeginLabel","afterWhileStatementLabel","pc","insertNoOp","statementsBeginLabel","classType","newStatement","subsequentConstructorCall","positionsAfterParameterStatements","allStatements","constructorOperands","staticClassContext","castingStatements","ot","attributeWithError","staticAttributeWithError","addIdentifierPosition","isSuper","methodContext","isSuperConstructorCall","superclassType","operands","errorInOperands","operand","incrementDecrementBy","indexType","positionList","findLocalVariable","findAttribute","cc","scc","klassModule","staticAttribute","objectNode","thisClass","posBeforeParameterEvaluation","visible","isSystemMethod","constantType","isAssignment","assignmentOperators","processTernaryOperator","programPosAfterLeftOpoerand","lazyEvaluationDest","rightType","convertedLeftType","resultType","unboxableLeft","unboxableRight","leftTypes","rightTypes","lt","booleanOperators","betterOperators","opIndex","variantFalseLabel","firstType","secondType","Parser","isInConsoleMode","lookahead","endToken","tokensNotAfterCasting","parse","typeNodes","initializeLookahead","astNodes","parseMain","mainProgramAST","classDefinitionAST","token","token1","lastComment","commentBefore","cct","nextToken","expect","skip","invokeSemicolonAngel","isOperatorOrDot","getSemicolonAngel","register","op","operatorPrecedence","isEnd","comesToken","getCurrentPosition","getEndOfCurrentToken","classDefinitions","oldPos","BeforeClassDefinitionTokens","parseClassDefinition","parseStatement","checkIfStatementHasNoEffekt","expectSemicolon","retStatements","parseVariableDeclarationOrTerm","parseWhile","parseFor","parseDo","parseIf","parseReturn","parsePrint","parseSwitch","position1","parseTerm","semicolonPositions","parseForLoopOverCollection","parseType","variableIdentifierPosition","mcp","parseMethodCallParameters","paramenters","switchTerm","switchNode","defaultAlreadyThere","casePosition","isDefault","parseUnary","switchCaseNode","elseStatements","comesGenericType","vd","parseVariableDeclaration","parseTermBinary","precedence","left","parsePlusPlusMinusMinus","operators","first","right","opData","wrong","correctOp","position2","constantFolding","isConstant","pcLeft","pcRight","result","considerIntDivisionWarning","leftConstant","rightConstant","isIntegerType","floor","incrementDecrementBefore","parseDotOrArrayChains","bracketOrCasting","tt1","pcTerm","typeTerm","parseNew","isStringConstant","identifier1","identifierPosition","genericParameterTypes","typenode","arrayDimension","parseArrayLiteral","newDimension","al","parameter","positionEnd","modifiers","collectModifiers","ClassTokens","typeParameters","parseTypeParameterDefinition","extendsImplements","parseExtendsImplements","parseEnum","methodsAndAttributes","parseClassBody","identifierMap","tp","parseTypeParameterBounds","im","parseEnumValues","className","parseMethodDeclarationParameters","scopeNode","isTransient","parameterType","isInterface","sextends","simplements","done","asError","VisibilityTokens","JsonTool","primitiveTypes","toJson","objectToIndexMap","nextIndex","json","toJsonObj","rto","objectToJsonObj","serializedObject","serializedAttributes","fromJson","jsonString","indexToObjectMap","valuesToResolve","fromJsonObj","vtr","objectFromJsonObj","klass1","instantiateObjectImmediately","TypeResolver","moduleToTypeParameterListMap","genericTypes","genericTypesInClassDefinitions","typeParameterList","classes","interfaces","enums","unresolvedTypes","resolveTypesInModules","setupClassesAndInterfaces","unresolvedGenericTypesInClasses","resolveTypeVariables","resolveUnresolvedTypes","resolveGenericTypes","resolveExtendsImplements","unresolvedGenericTypes","setupMethodsAndAttributes","checkDoubleIdentifierDefinition","checkGenericTypesAgainsTypeGuards","setupAttributeIndices","cl","tn","ci","actualType","typeGuard","genericParameterType","ifList","tgInterface","adjustMethodsAndAttributesToTypeParameters","WATCHDOG","classOrInterface","watchdog","methodListAltered","newMethodList","newMethod","getAdjustedMethod","altered","newAttributes","newAttributeMap","attributesAltered","newAttribute","getAdjustedAttribute","ext","nt","getAdjustedType","nrt","parameterAltered","newParameters","pNew","adjustMethodsAndAttributesRecursive","newTypeVariables","newClassInterface","todoList","resolveGenericType","genericParameterTypesResolved","typeVariablesOldToNewMap","oldTypeVariable","newTypeVariable","newCi","propagateTypeParameterToBaseClassesAndImplementedInterfaces","newClass","tv1","baseKlass","impl","identifierModuleMap","otherModule","file","otherType","baseModule","getBaseModule","tpn","lastPass","dependsOnModules","ut","utNew","resolveType","addFromJsonMethod","addToJsonMethod","classesOrEnums","cn","mn","setupMethod","ic","typesOK","par","definition","pl","typeModule","getArrayType","registerGenericType","tg","typKlasse","toUpperCase","iNode","iType","eType","cdn","addType","registerTypeVariables","e","ready","extType","resolveTypeVariable","typeParameterKlass","tp1","typeParameter","isInClassDefinition","SoundTools","praefix","window","javaOnlineDir","isInitialized","sound","sounds","player","Howl","src","preload","soundMap","play","volumeDetectionRunning","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","audio","stream","audioContext","AudioContext","analyser","createAnalyser","microphone","createMediaStreamSource","smoothingTimeConstant","fftSize","connect","getVolume","times","Float32Array","frequencyBinCount","getFloatTimeDomainData","volume","abs","getDeclarationAsString","short","implList","getTypeVariableDeclaration","getGenericParameterDefinition","decl","MyHoverProvider","editor","provideHover","model","selection","getSelection","lineNumber","getCurrentWorkspace","getModuleByMonacoModel","getElementAtPosition","declarationAsString","contents","typeIdentifier","word","getWordUnderCursor","desc","keywordDescriptions","state","InterpreterState","evaluator","widenDeclaration","evaluate","getValueLengthInRange","end","isInsideIdentifierOrArrayDescriptor","begin","isInsideOperator","isInsideIdentifierChain","convertPxToNumber","pxString","ZoomControl","$parentElement","callback","gripHeight","overallHeight","zoomMin","zoomMax","$zoomcontrolOuter","mousedownY","oldPosition","$zoomcontrolBar","$grip","$zoomcontrolDisplay","css","yMax","mousePointer","PointerEvent","on","y","pageY","top","setZoom","trigger","clientY","document","deltaY","off","stopPropagation","preventFading","fadeIn","fadeOut","factor","newPosition","zoomfactor","zfs","html","Alignment","CompilerStatus","convexhull","DiagramUnitCm","DiagramElement","leftCm","topCm","lines","backgroundColor","getRoutingRectangle","width","widthCm","height","heightCm","$element","detach","appendTo","move","xCm","yCm","withRaster","adjustToRaster","x","moveTo","createElement","createElementNS","attr","appendChild","createTextElement","font","getTextMetrics","textElement","bbox","getBBox","cmPerPx","addTextLine","alignment","bold","italics","render","$group","addClass","$rect","textPosYCm","maxWidthCm","center","onClick","metrics","textHeightCm","textWidthCm","max","tooltip","thicknessCm","textCenter","textRight","stroke","$g","event","x1","y1","x2","y2","ArrowHead","position1Cm","position2Cm","dx","dy","sqrt","path","ex","ey","DiagramArrow","arrow","arrows","step","steps","angle","PI","ex1","cos","sin","ey1","f","rauteAlpha","routingArrow","points","minimalPoints","getPathCoordinates","arrowData","arrowType","endsOnArrowWithIdentifier","head","makeHead","point","Formatter","autoFormatTriggerCharacters","displayName","registerDocumentFormattingEditProvider","registerOnTypeFormattingEditProvider","provideOnTypeFormattingEdits","ch","options","edits","format","Promise","resolve","deleteOverlappingRanges","e1","delta","provideDocumentFormattingEdits","EndOfLinePreference","LF","tokenlist","lastNonSpaceToken","indentLevel","curlyBracesOpenAtLines","indentLevelAtSwitchStatements","switchHappend","lastTokenWasNewLine","roundBracketsOpen","deleteSpaces","replaceBetween","insertSpaces","openedAtLine","repeat","nextToken1","nextToken2","lastToken1","lastToken2","isBinaryOperator","nextNonSpaceToken","getNextNonSpaceToken","lastTokenIsOperator","nextTokenIsOperator","beginNextLine","token2","currentIndentation","il","correctIndentation","lowerGeneric","lowerBelongsToGenericExpression","greaterGeneric","greaterBelongsToGenericExpression","tokenBefore","spaces","currentIndex","numberOfSpaces","FilledShapeDefaults","defaultFillColor","defaultFillAlpha","defaultBorderColor","defaultBorderAlpha","defaultBorderWidth","defaultVisibility","parseColorToOpenGL","WorldClass","groupType","shapeType","mouseListenerType","colorType","breite","höhe","gh","getWorldHelper","setBackgroundColor","wh","matrix","PIXI","Matrix","copyFrom","stage","projectionTransform","identity","translate","prepend","computeCurrentWorldBounds","shapesNotAffectedByWorldTransforms","shape","frameWidth","xMin","xMax","yMin","shapeHelper","moveX","moveY","shapeX","getCenterX","shapeY","getCenterY","outsideRight","currentLeft","currentWidth","outsideLeft","outsideBottom","currentTop","currentHeight","outsideTop","angleRad","rotate","scale","initialWidth","initialHeight","group","defaultGroup","getDefaultGroup","listener","addMouseListener","cursor","setCursor","worldObject","worldHelper","ratio","$containerOuter","getRightDiv","_d","adjustWidthToWorld","WorldHelper","WorldContainer","Container","sourceFrame","destinationFrame","renderer","projection","projectionMatrix","transform","renderTexture","bind","current","batch","flush","world","actActors","keyPressedActors","keyUpActors","keyDownActors","actorHelpersToDestroy","mouseListenerShapes","mouseListeners","actorsFinished","summedDelta","scaledTextures","shapes","actorsNotFinished","ticks","deltaSum","spriteAnimations","settings","SCALE_MODE","SCALE_MODES","NEAREST","TARGET_FPMS","globalScale","processingHelper","$graphicsDiv","printManager","getGraphicsDiv","$coordinateDiv","$rightDiv","$jo_tabs","parents","maxWidth","maxHeight","$containerInner","oncontextmenu","preventDefault","pixiApp","app","resize","Application","antialias","tickerFunction","tick","Ticker","shared","elapsedMS","ticker","maxFPS","timerExtern","Rectangle","addChild","view","keyboardTool","keyPressedCallbacks","kpa","runActorWhenKeyEvent","keyUpCallbacks","keyDownCallbacks","listenerType","eventType","offsetX","offsetY","Point","applyInverse","onMouseEvent","button","types","invokeMouseListener","gngEreignisbehandlung","gngEreignisbehandlungHelper","handleMouseClickedEvent","clearActorLists","p1","p2","hasActors","setAllHitpolygonsDirty","setHitPolygonDirty","spriteHelper","pauseUntil","actorData","actorHelper","timerPaused","isDestroyed","runActor","timerFunction","timerStopped","actorList","displayObject","destroy","stackElements","cacheAsBitmap","hasRobot","robotWorldHelper","scaleMin","brt","BaseRenderTexture","scaleMode","LINEAR","RenderTexture","setTimeout","children","removeChildren","sprite","Sprite","localTransform","onChange","destroyWorld","initDefaultValues","containsPoint","trackMouseMove","invokeShapeMouseListener","mouseLastSeenInsideObject","reactToMouseEventsWhenInvisible","findIndex","mls","listenerTypes","sd","Actor","methodSignatures","actorListIdentifier","ms","ActorHelper","isKeyDown","gamepadIndex","buttonIndex","gamepadTool","isGamepadButtonPressed","isGamepadConnected","axisIndex","getGamepadAxisValue","w","getModule","setTimerPaused","registerWorldType","isPressed","testdestroyed","AlignmentClass","streckeSchneidetStrecke","p0","p3","schnittpunkt","a2","b1","b2","c1","c2","det","schneidet","abstand","streckenzugEnthältPunkt","punkte","punkt","abstandPunktZuStrecke","polygonEnthältPunkt","inside","vertexCount","schnittpunkteKreisStrecke","schnittpunkte","b","determiante","t1","t2","q","lambda","fx","fy","s2","abstandPunktZuGerade","l","polygonBerührtPolygonExakt","punkte1","punkte2","istGeschlossen1","istGeschlossen2","normaleDerBerührtenGerade1","endIndex1","endIndex2","minAbstand","minIndex","p1a","p1b","ShapeClass","directionType","vector2Class","helper","sh","angleInDeg","centerX","centerY","mirrorXY","isOutsideView","sh1","collidesWith","collidesWithAnyShape","keepColliding","moveBackFrom","directionRelativeTo","defineCenter","defineCenterRelative","angleDeg","setDefaultVisibility","setVisible","setStatic","tint","react","direction","directionRad","distance","forward","getCopy","bringToFront","sendToBack","getHitPolygon","ShapeHelper","hitPolygonInitial","hitPolygonTransformed","hitPolygonDirty","scaleFactor","lastMoveDx","lastMoveDy","centerXInitial","centerYInitial","updateTransform","dirty","bringOnePlaneFurtherToFront","container","highestIndex","getChildIndex","setChildIndex","bringOnePlaneFurtherToBack","belongsToGroup","addToDefaultGroupAndSetDefaultVisibility","transformHitPolygon","bb","getBounds","bb1","bottom","dx1","dx2","dy1","dy2","enuminfo","pairs","lmdx","lmdy","parameterMax","currentParameter","newParameter","parameterMin","isColliding","np","worldTransform","apply","tx","ty","bounds","cX","cY","scaleX","scaleY","index1","getCollidingShapes","groupHelper","collidingShapes","ro","list","getParentGroup","BitmapClass","pointsX","pointsY","rh","BitmapHelperNew","getFarbeAsObject","setzeFarbe","istFarbe","fillAll","getCopyOrClone","anzahlX","anzahlY","bitmapToCopy","isBigEndian","uInt32","Uint32Array","uInt8","Uint8Array","buffer","initGraphics","bh","u8Array","texture","bufferResource","BufferResource","bt","BaseTexture","Texture","uploadData","baseTexture","update","intColorToHexRGB","setzeFarbeRGBA","g","getFarbe","getAlpha","FilledShapeClass","fillColor","borderColor","borderWidth","setAlpha","fillAlpha","setDefaultBorder","setDefaultFillColor","setFillColor","setBorderColor","setBorderWidth","rgbaToHex","rgb","FilledShapeHelper","borderAlpha","fsh","CircleClass","mx","my","CircleHelper","setRadius","deltaAlpha","Graphics","beginFill","lineStyle","drawCircle","closePath","endFill","radius1","radius2","d1","d2","SectorClass","startAngle","endAngle","SectorHelper","drawRadii","ceil","startAngleRad","endAngleRad","arc","lineTo","atan2","towPI","normalizedStartAngle","normalizedEndAngle","ArcClass","ri","ra","ArcHelper","beginHole","endHole","r2","ColorClass","colorName","intColor","intColorToRGB","random","z","cid","o1","h","hslToRgb","EllipseClass","rx","ry","EllipseHelper","setRadiusX","setRadiusY","drawEllipse","CollisionPairClass","GroupClass","collisionPairType","collisionPairArrayType","GroupHelper","getElement","removeElementAt","shapeArrayType","getCollidingObjects","group2","maxOneCollisionPerShape","groupHelper2","getCollidingObjects2","removeAllChidren","destroyChildren","doCache","oldIndex","groupHelperCopy","roCopy","hasCircularReference","inverse","invert","xSum","ySum","deregister","removeChild","inverseStageTransform","hasOverlappingBoundingBoxWith","collisionPairs","alreadyCollidedHelpers2","shape1","shapeHelper1","shape2","shapeHelper2","shapeToAdd","child","KeyClass","newPoints","sort","POINT_COMPARATOR","makeHullPresorted","upperHull","lowerHull","PolygonClass","shapeClass","closeAndFill","pointsNumber","ph","PolygonHelper","extractPoints","makeHull","addPoint","setPoints","insertPoint","movePointTo","isClosed","points1","setPoint","coordinates","setAllPointsUntransformed","RectangleClass","RectangleHelper","RepeatTypeClass","RoundedRectangleClass","radius","RoundedRectangleHelper","addCenterCircle","midx","midy","angleStart","dw","drawRoundedRect","ScaleModeClass","SoundKlass","HitPolygonStore","polygon","polygonStore","getPolygon","pixels","plugins","extract","probes","addPointsOnLine","additionalPointsPerHalfBorder","mid","probe","isTransparent","SpriteClass","scaleModeClass","spriteLibraryEntry","SpriteHelper","setTexture","textureName","indexArray","repeatType","imagesPerSecond","indices","playAnimation","fromIndex","toIndex","stopAnimation","pauseAnimation","resumeAnimation","getWidth","getHeight","makeTiling","isTileSprite","TileHelper","copyFromOtherShape","animationIndices","animationRuns","imagesPerMillisecond","animationTime","animationPaused","copyBitmapFromShape","tileSprite","TilingSprite","mipmap","MIPMAP_MODES","OFF","setParent","setTileOffset","tilePosition","dob","sheet","Loader","resources","spritesheet","nameWithIndex","textures","dynamicTexture1","getPolygonForTexture","setInvisible","spriteHelperList","deltaTime","image","period2","numberOfPeriodsDone","timeIntoPeriod","period","TileClass","tileScale","SpriteLibraryClass","SpriteLibrary","sle","TextClass","fontsize","TextHelper","fontFamily","setFontsize","setAlignment","setText","isBold","isItalic","setStyle","textStyle","TextStyle","fontSize","fontStyle","fontWeight","strokeThickness","dropShadow","wordWrap","align","lineJoin","Text","anchor","style","tm","TextMetrics","measureText","InputClass","GamepadClass","MathClass","E","exp","log10","tan","asin","acos","atan","MathToolsClass","vectorArrayClass","xIndex","yIndex","returnArray","pVector","ps","SystemClass","deltaTimeMillis","printStream","Date","writeConsoleEntry","showTab","stop","PrintStreamClass","print","println","SystemToolsClass","speed","controlButtons","speedControl","setSpeedInStepsPerSecond","getSpeedInStepsPerSecond","KeyListener","Runnable","TimerClass","timerEntries","timerRunning","timerStarted","tl","timerEntry","timerListener","lastTimeFired","running","startTimer","processTimerEntries","stopTimer","timerentry","runEntry","MapClass","typeK","tvK","typeV","tvV","keyArray","old","containsKey","containsValue","HashMapClass","TriangleClass","LocalDateTimeClass","dayOfWeekType","MonthType","date","year","month","dayOfMonth","hour","minute","second","days","oldDate","newDate","getTime","oldMs","newMs","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","td","dow","getDay","monthIndex","DayOfWeekEnum","MonthEnum","LineClass","Vector2Class","alphaDeg","oRet","MouseListenerInterface","MouseAdapterClass","WebSocketClientClass","messageType","send","setUserData","getUserData","getterList","getter","help","WebSocketClientHelper","webSocketHelper","rufname","familienname","username","nickname","keyValueStore","connected","sendToClient","WebSocketClass","webSocketClientType","systemClassType","WebSocketHelper","sessionCode","nickName","sendToAll","findClientsFromCount","nicknames","nnv","findClientsFromNicknames","disconnect","clientList","client","idToClientMap","isOpen","unsentMessages","onOpenMethod","onCloseMethod","onMessageMethod","onClientConnectedMethod","onClientDisconnectedMethod","onClientsFoundMethod","isEmbedded","location","protocol","host","connection","WebSocket","onerror","onError","onclose","onClose","onmessage","onMessage","onopen","webSocketsToCloseAfterProgramHalt","sendIntern","onOpen","exception","runMethod","clientId","recipient_id","close","wtr","clientRuntimeObject","wch","user_id","clientHelper","from_client_id","clientHelper1","disconnecting_client_id","currentTimeMills","client_id","onClientsFound","own_index","otherClients","clients","otherClient","arrayValue","ProcessingClass","p5o","getProcessingHelper","currentProgramPosition","loop","noLoop","createCanvas","addProcessingMethod","parameterNames","pList","processingObject","ProcessingHelper","loopStopped","onSizeChanged","$div","setupProcessing","drawMethodPending","p5","setup","P2D","afterFinishingBoth","draw","mousePressed","mouseReleased","mouseClicked","mouseDragged","mouseEntered","mouseExited","mouseMoved","keyPressed","keyReleased","methodIdentifier","TurtleClass","TurtleHelper","showTurtle","turn","penIsDown","setShowTurtle","xStart","yStart","lineElements","turtleAngleDeg","isFilled","initialHitPolygonDirty","turtleSize","lastLineWidth","lastColor","lastAlpha","lastTurtleAngleDeg","renderJobPresent","lineWidth","calculateCenter","lineGraphic","turtle","initTurtle","moveTurtleTo","lastLineElement","angleInDegrees","cx","cy","turtleAngleRad","newLineElement","newTurtleX","newTurtleY","newAngleDeg","vx","vy","vxp","vyp","lengthForward","lengthBackward","lengthBackwardP","firstPoint","le","setupInitialHitPolygon","polygonBerührtPolygon","steckenzugSchneidetStreckenzug","touchesAtLeastOneFigure","touchesColor","farbe","touchesShape","RandomClass","bound","from","to","DirectionClass","Patcher","modified","patch","patches","new","patchedText","Boxes3d","material","Pixi3d","StandardMaterial","Mesh3D","createCube3dMesh","MeshGeometry3D","positions","normals","uvs","tangents","createHalfheightCube3dMesh","repeatTextureU","repeatTextureV","createPlane3dMesh","getSpritesheetTexture","copy","wrapMode","WRAP_MODES","REPEAT","StandardMaterialTexture","smt","TextureTransform","frame","RobotMarker","geometry","RobotBrick","RobotCubeFactory","camera","farben","farbeToColorInfoMap","farbeToMarkerMaterialMap","farbeToBrickMaterialMap","planeMaterial","light1","Light","LightType","ambient","intensity","light2","directional","rotationQuaternion","setEulerAngles","lightingEnvironment","LightingEnvironment","lights","grassBrickMaterial","initMaterial","baseColorTexture","cloudMaterial","baseColor","groundPlaneMaterial","colorInfo","brickMaterial","getBrick","getGrassBrick","getGrassPlane","mesh","makePlane","widthX","widthZ","spriteOrColor","getPlaneMaterial","getMarker","marker","getSidePlanes","worldX","worldY","sideSprite","deep","planes","sideMaterial","mesh1","mesh2","mesh3","mesh4","getHorizontalPlanes","topSprite","topMaterial","mesh5","mesh6","mesh7","mesh8","makeClouds","originX","originZ","z1","createCube3d","scaleZ","dz","exposure","roughness","spriteKey","makeSprite3d","textureKey","alphaMode","StandardMaterialAlphaMode","mask","createPlane3d","RobotClass","robotWorldType","RobotHelper","startX","startY","initialeWelt","turnRight","adjustAngle","turnLeft","schritt","anzahl","hinlegen","markeLöschen","markeSetzen","aufheben","istWand","istZiegel","istMarke","himmelsrichtungen","hr","hatSteine","maxSteine","RobotWorldClass","RobotWorldHelper","maximumHeight","addBrick","setMarker","markers","bricks","robots","fetchWorld","Camera","robotCubeFactory","container3D","Container3D","initFromString","initWorldArrays","renderOrnamentsAndInitCamera","adjustRobotPositions","robot","getBrickCount","markerColumn","brickColumn","gp","northSprite","control","CameraOrbitControl","angles","target","oldHeight","brick","setToXY","adjustMarkerHeight","removeBrick","hasBrickColor","getMarkerColor","removeMarker","brickList","setDimensions","getNumberOfBricks","initString","lowerCaseCharToColor","upperCaseCharToColor","digits","rows","maxColumns","row","rowLength","brickColor","markerColor","gibtFarbe","Direction","names","deltas","getAngle","getDeltas","fetchRobotWorld","Model","gltf","meshes","sm","crop","rw","newX","newY","newHeight","param","marke","ResultSetClass","wasNull","typeIdFirstUppercase","columnIndex","rsh","columnCount","isAfterLast","columnLabel","getColumnIndex","ResultsetHelper","columns","DatabaseStatementClass","resultSetType","query","connectionHelper","resumeAfterInput","pauseForInput","showHideDbBusyIcon","executeQuery","rs","executeWriteStatement","WorkerSim","initsql","initSqlJs","locateFile","scriptDirectory","postMessageToClient","postMessage","db","then","SQL1","SQL","createDb","worker","catch","terminate","buff","config","results","exec","each","finished","DatabaseTool","databaseDirectoryEntries","queryId","querySuccessCallbacksMap","queryErrorCallbackMap","initializeWorker","template","queries","callbackAfterInitializing","jo_doc","Worker","querySuccessCallback","queryErrorCallback","execQuery","shift","action","sql","params","executeWriteQueries","dump","sqliteMagicBytes","DatabaseLongPollingListener","networkManager","onServerSentStatementsCallback","longPoll","listenerIdentifier","sqlIdeURL","resp","firstNewStatementIndex","newStatements","rollbackToVersion","DatabasePreparedStatementClass","psh","checkQuery","getQueryWithParameterValuesFilledIn","setValue","PreparedStatementHelper","prepareStatement","insideQuotation","parameterPositions","parameterValues","queryParts","queryWithParameterValues","ConnectionClass","preparedStatementType","statementType","stmt","ConnectionHelper","skipNextServerSentStatement","registerDatabaseConnection","code","fetchDatabaseAndToken","dbData","databaseData","database","templateDump","longPollingListener","onServerSentStatements","executeStatementsFromServer","firstStatementIndex","errorMessage","retrieveLastRowId","oldStatementIndex","addDatabaseStatement","new_version","rollbackDatabaseStatement","DatabaseManagerClass","connectionType","connectionRuntimeObject","Module","oldErrorDecorations","breakpoints","breakpointDecorators","decoratorIdToBreakpointMap","identifierPositions","methodCallPositions","uriCounter","uriMap","Uri","scheme","createModel","updateOptions","tabSize","bracketColorizationOptions","enabled","formatter","applyEdits","lastSavedVersionId","getAlternativeVersionId","onDidChangeContent","versionId","saved","identical_to_repository_version","main1","workspacesOwnerId","user","text_before_revision","student_edited_after_revision","sendUpdates","bottomDiv","homeworkManager","showHomeWorkRevisionButton","projectExplorer","renderHomeworkButton","toExportedModule","getProgramTextFromMonacoModel","is_copy_of_id","repository_file_version","getMethodDeclarationAtPosition","methodAST","patched","f1","submitted_date","version","getFileData","workspace","workspace_id","forceUpdate","file_type","possibleMethods","cp","mcpList","toggleBreakpoint","rerender","getBreakpointPositionsFromEditor","getBreakpoint","setBreakpoint","renderBreakpointDecorators","breakpoint","attachToStatement","programList","getPrograms","nearestStatement","nearestDistance","decorations","isWholeLine","overviewRuler","OverviewRulerLane","Left","minimap","MinimapPosition","Inline","marginClassName","stickiness","TrackedRangeStickiness","NeverGrowsWhenTypingAtEdges","getMonacoEditor","deltaDecorations","decoration","getModel","getAllDecorations","findSymbolTableAtPosition","getErrorCount","el","getTypeAtPosition","positionsOnLine","foundPosition","bestFoundPosition","isStartable","dependsOnModulesWithErrors","programs","TypeStore","hasErrors","getSortedAndFilteredErrors","e2","errorLevelCompare","level1","level2","renderStartButton","$buttonDiv","panelElement","$htmlFirstLine","$startButtonDiv","setModuleActive","BaseModule","SoundClass","ActorClass","typeMap","ApiDoc","initEditor","initTypes","initClassDocumentation","extensions","conf","indentationRules","decreaseIndentPattern","increaseIndentPattern","onEnterRules","beforeText","afterText","indentAction","IndentAction","IndentOutdent","appendText","None","removeText","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","surroundingPairs","folding","setLanguageConfiguration","setMonarchTokensProvider","defaultToken","tokenPostfix","keywords","symbols","escapes","octaldigits","binarydigits","hexdigits","tokenizer","root","cases","include","whitespace","javadoc","string","defineMyJava","defineTheme","inherit","rules","foreground","colors","setTheme","language","basemodule","$menuItem","showAPIHelp","$main","$caption","colorize","showConstructors","showMethods","showAttributes","require","paths","availableLanguages","ignoreDuplicateModules"],"sourceRoot":""}